
obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
    vmcall
#endif
	
    movl $multiboot_info, %eax
  100000:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  100005:	89 18                	mov    %ebx,(%rax)

#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
  100007:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472(%rip)        # 100482 <verify_cpu_no_longmode+0x36f>
  10000e:	34 12 
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  100010:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100015:	e8 cc 00 00 00       	callq  1000e6 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
  10001a:	b8 20 00 00 00       	mov    $0x20,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
#endif
    movl %eax,%cr4
  10001f:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100022:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100027:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100029:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002e:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  100030:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100035:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  10003a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  100040:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100042:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100047:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10004a:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004d:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  100050:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100055:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  10005a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100060:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100062:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100067:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006c:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006f:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100072:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100074:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100079:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007e:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100083:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100089:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008e:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  100090:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100092:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100095:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100098:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009d:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  1000a0:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a3:	75 e9                	jne    10008e <_head64+0x8e>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a5:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000aa:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ad:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b2:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b4:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b8:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000ba:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bd:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000c0:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c5:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000ca:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000cf:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d2:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d5:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000da:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dd:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000df:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e4:	50                   	push   %rax

00000000001000e5 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e5:	cb                   	lret   

00000000001000e6 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e6:	9c                   	pushfq 
    popl %eax
  1000e7:	58                   	pop    %rax
    movl %eax,%ecx
  1000e8:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000ea:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ef:	50                   	push   %rax
    popfl
  1000f0:	9d                   	popfq  
    pushfl
  1000f1:	9c                   	pushfq 
    popl %eax
  1000f2:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f3:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f5:	74 1c                	je     100113 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f7:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fc:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fe:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100101:	72 10                	jb     100113 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100103:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100108:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  10010a:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  100110:	74 01                	je     100113 <verify_cpu_no_longmode>

    ret
  100112:	c3                   	retq   

0000000000100113 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100113:	eb fe                	jmp    100113 <verify_cpu_no_longmode>
  100115:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011c:	00 00 00 
  10011f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100126:	00 00 00 
  100129:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100130:	00 00 00 
  100133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10013a:	00 00 00 
  10013d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100144:	00 00 00 
  100147:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014e:	00 00 00 
  100151:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100158:	00 00 00 
  10015b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100162:	00 00 00 
  100165:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016c:	00 00 00 
  10016f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100176:	00 00 00 
  100179:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100180:	00 00 00 
  100183:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10018a:	00 00 00 
  10018d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100194:	00 00 00 
  100197:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019e:	00 00 00 
  1001a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a8:	00 00 00 
  1001ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b2:	00 00 00 
  1001b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bc:	00 00 00 
  1001bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c6:	00 00 00 
  1001c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d0:	00 00 00 
  1001d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001da:	00 00 00 
  1001dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e4:	00 00 00 
  1001e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ee:	00 00 00 
  1001f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f8:	00 00 00 
  1001fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100202:	00 00 00 
  100205:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020c:	00 00 00 
  10020f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100216:	00 00 00 
  100219:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100220:	00 00 00 
  100223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10022a:	00 00 00 
  10022d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100234:	00 00 00 
  100237:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023e:	00 00 00 
  100241:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100248:	00 00 00 
  10024b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100252:	00 00 00 
  100255:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025c:	00 00 00 
  10025f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100266:	00 00 00 
  100269:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100270:	00 00 00 
  100273:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10027a:	00 00 00 
  10027d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100284:	00 00 00 
  100287:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028e:	00 00 00 
  100291:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100298:	00 00 00 
  10029b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a2:	00 00 00 
  1002a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ac:	00 00 00 
  1002af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b6:	00 00 00 
  1002b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c0:	00 00 00 
  1002c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ca:	00 00 00 
  1002cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d4:	00 00 00 
  1002d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002de:	00 00 00 
  1002e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e8:	00 00 00 
  1002eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f2:	00 00 00 
  1002f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fc:	00 00 00 
  1002ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100306:	00 00 00 
  100309:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100310:	00 00 00 
  100313:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031a:	00 00 00 
  10031d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100324:	00 00 00 
  100327:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032e:	00 00 00 
  100331:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100338:	00 00 00 
  10033b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100342:	00 00 00 
  100345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034c:	00 00 00 
  10034f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100356:	00 00 00 
  100359:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100360:	00 00 00 
  100363:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10036a:	00 00 00 
  10036d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100374:	00 00 00 
  100377:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037e:	00 00 00 
  100381:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100388:	00 00 00 
  10038b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100392:	00 00 00 
  100395:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039c:	00 00 00 
  10039f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a6:	00 00 00 
  1003a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b0:	00 00 00 
  1003b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ba:	00 00 00 
  1003bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c4:	00 00 00 
  1003c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ce:	00 00 00 
  1003d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d8:	00 00 00 
  1003db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e2:	00 00 00 
  1003e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ec:	00 00 00 
  1003ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f6:	00 00 00 
  1003f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100400:	00 00 00 
  100403:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10040a:	00 00 00 
  10040d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100414:	00 00 00 
  100417:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041e:	00 00 00 
  100421:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100428:	00 00 00 
  10042b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100432:	00 00 00 
  100435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043c:	00 00 00 
  10043f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100446:	00 00 00 
  100449:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100450:	00 00 00 
  100453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10045a:	00 00 00 
  10045d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100464:	00 00 00 
  100467:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046e:	00 00 00 
  100471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100478:	00 00 00 
  10047b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100482:	00 00 00 
  100485:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048c:	00 00 00 
  10048f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100496:	00 00 00 
  100499:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a0:	00 00 00 
  1004a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004aa:	00 00 00 
  1004ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b4:	00 00 00 
  1004b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004be:	00 00 00 
  1004c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c8:	00 00 00 
  1004cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d2:	00 00 00 
  1004d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004dc:	00 00 00 
  1004df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e6:	00 00 00 
  1004e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f0:	00 00 00 
  1004f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004fa:	00 00 00 
  1004fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100504:	00 00 00 
  100507:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050e:	00 00 00 
  100511:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100518:	00 00 00 
  10051b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100522:	00 00 00 
  100525:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052c:	00 00 00 
  10052f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100536:	00 00 00 
  100539:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100540:	00 00 00 
  100543:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10054a:	00 00 00 
  10054d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100554:	00 00 00 
  100557:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055e:	00 00 00 
  100561:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100568:	00 00 00 
  10056b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100572:	00 00 00 
  100575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057c:	00 00 00 
  10057f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100586:	00 00 00 
  100589:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100590:	00 00 00 
  100593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10059a:	00 00 00 
  10059d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a4:	00 00 00 
  1005a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ae:	00 00 00 
  1005b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b8:	00 00 00 
  1005bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c2:	00 00 00 
  1005c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cc:	00 00 00 
  1005cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d6:	00 00 00 
  1005d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e0:	00 00 00 
  1005e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ea:	00 00 00 
  1005ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f4:	00 00 00 
  1005f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fe:	00 00 00 
  100601:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100608:	00 00 00 
  10060b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100612:	00 00 00 
  100615:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061c:	00 00 00 
  10061f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100626:	00 00 00 
  100629:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100630:	00 00 00 
  100633:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10063a:	00 00 00 
  10063d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100644:	00 00 00 
  100647:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064e:	00 00 00 
  100651:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100658:	00 00 00 
  10065b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100662:	00 00 00 
  100665:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066c:	00 00 00 
  10066f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100676:	00 00 00 
  100679:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100680:	00 00 00 
  100683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10068a:	00 00 00 
  10068d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100694:	00 00 00 
  100697:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069e:	00 00 00 
  1006a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a8:	00 00 00 
  1006ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b2:	00 00 00 
  1006b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bc:	00 00 00 
  1006bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c6:	00 00 00 
  1006c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d0:	00 00 00 
  1006d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006da:	00 00 00 
  1006dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e4:	00 00 00 
  1006e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ee:	00 00 00 
  1006f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f8:	00 00 00 
  1006fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100702:	00 00 00 
  100705:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070c:	00 00 00 
  10070f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100716:	00 00 00 
  100719:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100720:	00 00 00 
  100723:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10072a:	00 00 00 
  10072d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100734:	00 00 00 
  100737:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073e:	00 00 00 
  100741:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100748:	00 00 00 
  10074b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100752:	00 00 00 
  100755:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075c:	00 00 00 
  10075f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100766:	00 00 00 
  100769:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100770:	00 00 00 
  100773:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10077a:	00 00 00 
  10077d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100784:	00 00 00 
  100787:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078e:	00 00 00 
  100791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100798:	00 00 00 
  10079b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a2:	00 00 00 
  1007a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ac:	00 00 00 
  1007af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b6:	00 00 00 
  1007b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c0:	00 00 00 
  1007c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ca:	00 00 00 
  1007cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d4:	00 00 00 
  1007d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007de:	00 00 00 
  1007e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e8:	00 00 00 
  1007eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f2:	00 00 00 
  1007f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fc:	00 00 00 
  1007ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100806:	00 00 00 
  100809:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100810:	00 00 00 
  100813:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10081a:	00 00 00 
  10081d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100824:	00 00 00 
  100827:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082e:	00 00 00 
  100831:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100838:	00 00 00 
  10083b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100842:	00 00 00 
  100845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084c:	00 00 00 
  10084f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100856:	00 00 00 
  100859:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100860:	00 00 00 
  100863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10086a:	00 00 00 
  10086d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100874:	00 00 00 
  100877:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087e:	00 00 00 
  100881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100888:	00 00 00 
  10088b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100892:	00 00 00 
  100895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089c:	00 00 00 
  10089f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a6:	00 00 00 
  1008a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b0:	00 00 00 
  1008b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ba:	00 00 00 
  1008bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c4:	00 00 00 
  1008c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ce:	00 00 00 
  1008d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d8:	00 00 00 
  1008db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e2:	00 00 00 
  1008e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ec:	00 00 00 
  1008ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f6:	00 00 00 
  1008f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100900:	00 00 00 
  100903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10090a:	00 00 00 
  10090d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100914:	00 00 00 
  100917:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091e:	00 00 00 
  100921:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100928:	00 00 00 
  10092b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100932:	00 00 00 
  100935:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093c:	00 00 00 
  10093f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100946:	00 00 00 
  100949:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100950:	00 00 00 
  100953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10095a:	00 00 00 
  10095d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100964:	00 00 00 
  100967:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096e:	00 00 00 
  100971:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100978:	00 00 00 
  10097b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100982:	00 00 00 
  100985:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098c:	00 00 00 
  10098f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100996:	00 00 00 
  100999:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a0:	00 00 00 
  1009a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009aa:	00 00 00 
  1009ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b4:	00 00 00 
  1009b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009be:	00 00 00 
  1009c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c8:	00 00 00 
  1009cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d2:	00 00 00 
  1009d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009dc:	00 00 00 
  1009df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e6:	00 00 00 
  1009e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f0:	00 00 00 
  1009f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009fa:	00 00 00 
  1009fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a04:	00 00 00 
  100a07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0e:	00 00 00 
  100a11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a18:	00 00 00 
  100a1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a22:	00 00 00 
  100a25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2c:	00 00 00 
  100a2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a36:	00 00 00 
  100a39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a40:	00 00 00 
  100a43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a4a:	00 00 00 
  100a4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a54:	00 00 00 
  100a57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5e:	00 00 00 
  100a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a68:	00 00 00 
  100a6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a72:	00 00 00 
  100a75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7c:	00 00 00 
  100a7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a86:	00 00 00 
  100a89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a90:	00 00 00 
  100a93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a9a:	00 00 00 
  100a9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa4:	00 00 00 
  100aa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aae:	00 00 00 
  100ab1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab8:	00 00 00 
  100abb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac2:	00 00 00 
  100ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acc:	00 00 00 
  100acf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad6:	00 00 00 
  100ad9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae0:	00 00 00 
  100ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aea:	00 00 00 
  100aed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af4:	00 00 00 
  100af7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afe:	00 00 00 
  100b01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b08:	00 00 00 
  100b0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b12:	00 00 00 
  100b15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1c:	00 00 00 
  100b1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b26:	00 00 00 
  100b29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b30:	00 00 00 
  100b33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b3a:	00 00 00 
  100b3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b44:	00 00 00 
  100b47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4e:	00 00 00 
  100b51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b58:	00 00 00 
  100b5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b62:	00 00 00 
  100b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6c:	00 00 00 
  100b6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b76:	00 00 00 
  100b79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b80:	00 00 00 
  100b83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b8a:	00 00 00 
  100b8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b94:	00 00 00 
  100b97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9e:	00 00 00 
  100ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba8:	00 00 00 
  100bab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb2:	00 00 00 
  100bb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbc:	00 00 00 
  100bbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc6:	00 00 00 
  100bc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd0:	00 00 00 
  100bd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bda:	00 00 00 
  100bdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be4:	00 00 00 
  100be7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bee:	00 00 00 
  100bf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf8:	00 00 00 
  100bfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c02:	00 00 00 
  100c05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0c:	00 00 00 
  100c0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c16:	00 00 00 
  100c19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c20:	00 00 00 
  100c23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c2a:	00 00 00 
  100c2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c34:	00 00 00 
  100c37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3e:	00 00 00 
  100c41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c48:	00 00 00 
  100c4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c52:	00 00 00 
  100c55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5c:	00 00 00 
  100c5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c66:	00 00 00 
  100c69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c70:	00 00 00 
  100c73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c7a:	00 00 00 
  100c7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c84:	00 00 00 
  100c87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8e:	00 00 00 
  100c91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c98:	00 00 00 
  100c9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca2:	00 00 00 
  100ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cac:	00 00 00 
  100caf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb6:	00 00 00 
  100cb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc0:	00 00 00 
  100cc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cca:	00 00 00 
  100ccd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd4:	00 00 00 
  100cd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cde:	00 00 00 
  100ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce8:	00 00 00 
  100ceb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf2:	00 00 00 
  100cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfc:	00 00 00 
  100cff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d06:	00 00 00 
  100d09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d10:	00 00 00 
  100d13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d1a:	00 00 00 
  100d1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d24:	00 00 00 
  100d27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2e:	00 00 00 
  100d31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d38:	00 00 00 
  100d3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d42:	00 00 00 
  100d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4c:	00 00 00 
  100d4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d56:	00 00 00 
  100d59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d60:	00 00 00 
  100d63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d6a:	00 00 00 
  100d6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d74:	00 00 00 
  100d77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7e:	00 00 00 
  100d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d88:	00 00 00 
  100d8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d92:	00 00 00 
  100d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9c:	00 00 00 
  100d9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da6:	00 00 00 
  100da9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db0:	00 00 00 
  100db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dba:	00 00 00 
  100dbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc4:	00 00 00 
  100dc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dce:	00 00 00 
  100dd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd8:	00 00 00 
  100ddb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de2:	00 00 00 
  100de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dec:	00 00 00 
  100def:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df6:	00 00 00 
  100df9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e00:	00 00 00 
  100e03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e0a:	00 00 00 
  100e0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e14:	00 00 00 
  100e17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1e:	00 00 00 
  100e21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e28:	00 00 00 
  100e2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e32:	00 00 00 
  100e35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3c:	00 00 00 
  100e3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e46:	00 00 00 
  100e49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e50:	00 00 00 
  100e53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e5a:	00 00 00 
  100e5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e64:	00 00 00 
  100e67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6e:	00 00 00 
  100e71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e78:	00 00 00 
  100e7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e82:	00 00 00 
  100e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8c:	00 00 00 
  100e8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e96:	00 00 00 
  100e99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea0:	00 00 00 
  100ea3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eaa:	00 00 00 
  100ead:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb4:	00 00 00 
  100eb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebe:	00 00 00 
  100ec1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec8:	00 00 00 
  100ecb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed2:	00 00 00 
  100ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edc:	00 00 00 
  100edf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee6:	00 00 00 
  100ee9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef0:	00 00 00 
  100ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100efa:	00 00 00 
  100efd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f04:	00 00 00 
  100f07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0e:	00 00 00 
  100f11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f18:	00 00 00 
  100f1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f22:	00 00 00 
  100f25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2c:	00 00 00 
  100f2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f36:	00 00 00 
  100f39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f40:	00 00 00 
  100f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f4a:	00 00 00 
  100f4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f54:	00 00 00 
  100f57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5e:	00 00 00 
  100f61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f68:	00 00 00 
  100f6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f72:	00 00 00 
  100f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7c:	00 00 00 
  100f7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f86:	00 00 00 
  100f89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f90:	00 00 00 
  100f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f9a:	00 00 00 
  100f9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa4:	00 00 00 
  100fa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fae:	00 00 00 
  100fb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb8:	00 00 00 
  100fbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc2:	00 00 00 
  100fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcc:	00 00 00 
  100fcf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd6:	00 00 00 
  100fd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe0:	00 00 00 
  100fe3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fea:	00 00 00 
  100fed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff4:	00 00 00 
  100ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100ffe:	00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4                   	.byte 0xe4

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 50 23 04 80 	movabs $0x8004235038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 50 23 04 80 	movabs $0x8004235000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 99 00 20 04 80 	movabs $0x8004200099,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004200060:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004200064:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004200067:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420006b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420006e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004200072:	f0 87 02             	lock xchg %eax,(%rdx)
  8004200075:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004200078:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420007b:	c9                   	leaveq 
  800420007c:	c3                   	retq   

000000800420007d <lock_kernel>:
  800420007d:	55                   	push   %rbp
  800420007e:	48 89 e5             	mov    %rsp,%rbp
  8004200081:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004200088:	00 00 00 
  800420008b:	48 b8 f5 7e 21 04 80 	movabs $0x8004217ef5,%rax
  8004200092:	00 00 00 
  8004200095:	ff d0                	callq  *%rax
  8004200097:	5d                   	pop    %rbp
  8004200098:	c3                   	retq   

0000008004200099 <i386_init>:
  8004200099:	55                   	push   %rbp
  800420009a:	48 89 e5             	mov    %rsp,%rbp
  800420009d:	48 ba 10 e0 71 04 80 	movabs $0x800471e010,%rdx
  80042000a4:	00 00 00 
  80042000a7:	48 b8 b8 bf 4d 04 80 	movabs $0x80044dbfb8,%rax
  80042000ae:	00 00 00 
  80042000b1:	48 29 c2             	sub    %rax,%rdx
  80042000b4:	48 89 d0             	mov    %rdx,%rax
  80042000b7:	48 89 c2             	mov    %rax,%rdx
  80042000ba:	be 00 00 00 00       	mov    $0x0,%esi
  80042000bf:	48 bf b8 bf 4d 04 80 	movabs $0x80044dbfb8,%rdi
  80042000c6:	00 00 00 
  80042000c9:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  80042000d0:	00 00 00 
  80042000d3:	ff d0                	callq  *%rax
  80042000d5:	48 b8 a6 11 20 04 80 	movabs $0x80042011a6,%rax
  80042000dc:	00 00 00 
  80042000df:	ff d0                	callq  *%rax
  80042000e1:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042000e6:	48 bf 20 dd 21 04 80 	movabs $0x800421dd20,%rdi
  80042000ed:	00 00 00 
  80042000f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000f5:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042000fc:	00 00 00 
  80042000ff:	ff d2                	callq  *%rdx
  8004200101:	48 b8 10 e0 71 04 80 	movabs $0x800471e010,%rax
  8004200108:	00 00 00 
  800420010b:	48 89 c6             	mov    %rax,%rsi
  800420010e:	48 bf 00 00 01 04 80 	movabs $0x8004010000,%rdi
  8004200115:	00 00 00 
  8004200118:	48 b8 8b 65 21 04 80 	movabs $0x800421658b,%rax
  800420011f:	00 00 00 
  8004200122:	ff d0                	callq  *%rax
  8004200124:	48 ba d0 b5 6d 04 80 	movabs $0x80046db5d0,%rdx
  800420012b:	00 00 00 
  800420012e:	48 89 02             	mov    %rax,(%rdx)
  8004200131:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200136:	48 ba 3d 26 20 04 80 	movabs $0x800420263d,%rdx
  800420013d:	00 00 00 
  8004200140:	ff d2                	callq  *%rdx
  8004200142:	48 b8 6d 7f 20 04 80 	movabs $0x8004207f6d,%rax
  8004200149:	00 00 00 
  800420014c:	ff d0                	callq  *%rax
  800420014e:	48 b8 fb 9d 20 04 80 	movabs $0x8004209dfb,%rax
  8004200155:	00 00 00 
  8004200158:	ff d0                	callq  *%rax
  800420015a:	48 b8 15 75 21 04 80 	movabs $0x8004217515,%rax
  8004200161:	00 00 00 
  8004200164:	ff d0                	callq  *%rax
  8004200166:	48 b8 73 79 21 04 80 	movabs $0x8004217973,%rax
  800420016d:	00 00 00 
  8004200170:	ff d0                	callq  *%rax
  8004200172:	48 b8 83 99 20 04 80 	movabs $0x8004209983,%rax
  8004200179:	00 00 00 
  800420017c:	ff d0                	callq  *%rax
  800420017e:	48 b8 90 93 21 04 80 	movabs $0x8004219390,%rax
  8004200185:	00 00 00 
  8004200188:	ff d0                	callq  *%rax
  800420018a:	48 b8 54 93 21 04 80 	movabs $0x8004219354,%rax
  8004200191:	00 00 00 
  8004200194:	ff d0                	callq  *%rax
  8004200196:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  800420019d:	00 00 00 
  80042001a0:	ff d0                	callq  *%rax
  80042001a2:	48 b8 08 02 20 04 80 	movabs $0x8004200208,%rax
  80042001a9:	00 00 00 
  80042001ac:	ff d0                	callq  *%rax
  80042001ae:	be 01 00 00 00       	mov    $0x1,%esi
  80042001b3:	48 bf e8 f2 2b 04 80 	movabs $0x80042bf2e8,%rdi
  80042001ba:	00 00 00 
  80042001bd:	48 b8 be 8f 20 04 80 	movabs $0x8004208fbe,%rax
  80042001c4:	00 00 00 
  80042001c7:	ff d0                	callq  *%rax
  80042001c9:	48 b8 a6 9a 21 04 80 	movabs $0x8004219aa6,%rax
  80042001d0:	00 00 00 
  80042001d3:	ff d0                	callq  *%rax
  80042001d5:	be 00 00 00 00       	mov    $0x0,%esi
  80042001da:	48 bf 58 70 2a 04 80 	movabs $0x80042a7058,%rdi
  80042001e1:	00 00 00 
  80042001e4:	48 b8 be 8f 20 04 80 	movabs $0x8004208fbe,%rax
  80042001eb:	00 00 00 
  80042001ee:	ff d0                	callq  *%rax
  80042001f0:	48 b8 d8 0f 20 04 80 	movabs $0x8004200fd8,%rax
  80042001f7:	00 00 00 
  80042001fa:	ff d0                	callq  *%rax
  80042001fc:	48 b8 26 da 20 04 80 	movabs $0x800420da26,%rax
  8004200203:	00 00 00 
  8004200206:	ff d0                	callq  *%rax

0000008004200208 <boot_aps>:
  8004200208:	55                   	push   %rbp
  8004200209:	48 89 e5             	mov    %rsp,%rbp
  800420020c:	48 83 ec 30          	sub    $0x30,%rsp
  8004200210:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  8004200217:	00 
  8004200218:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420021c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004200220:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200223:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200226:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420022d:	00 00 00 
  8004200230:	48 8b 00             	mov    (%rax),%rax
  8004200233:	48 39 c2             	cmp    %rax,%rdx
  8004200236:	72 32                	jb     800420026a <boot_aps+0x62>
  8004200238:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420023c:	48 89 c1             	mov    %rax,%rcx
  800420023f:	48 ba 40 dd 21 04 80 	movabs $0x800421dd40,%rdx
  8004200246:	00 00 00 
  8004200249:	be 01 01 00 00       	mov    $0x101,%esi
  800420024e:	48 bf 63 dd 21 04 80 	movabs $0x800421dd63,%rdi
  8004200255:	00 00 00 
  8004200258:	b8 00 00 00 00       	mov    $0x0,%eax
  800420025d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004200264:	00 00 00 
  8004200267:	41 ff d0             	callq  *%r8
  800420026a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200271:	00 00 00 
  8004200274:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200278:	48 01 d0             	add    %rdx,%rax
  800420027b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420027f:	48 ba 3e 70 21 04 80 	movabs $0x800421703e,%rdx
  8004200286:	00 00 00 
  8004200289:	48 b8 58 6f 21 04 80 	movabs $0x8004216f58,%rax
  8004200290:	00 00 00 
  8004200293:	48 29 c2             	sub    %rax,%rdx
  8004200296:	48 89 d0             	mov    %rdx,%rax
  8004200299:	48 89 c2             	mov    %rax,%rdx
  800420029c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042002a0:	48 be 58 6f 21 04 80 	movabs $0x8004216f58,%rsi
  80042002a7:	00 00 00 
  80042002aa:	48 89 c7             	mov    %rax,%rdi
  80042002ad:	48 b8 f6 0b 21 04 80 	movabs $0x8004210bf6,%rax
  80042002b4:	00 00 00 
  80042002b7:	ff d0                	callq  *%rax
  80042002b9:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  80042002c0:	00 00 00 
  80042002c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042002c7:	e9 0e 01 00 00       	jmpq   80042003da <boot_aps+0x1d2>
  80042002cc:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  80042002d3:	00 00 00 
  80042002d6:	ff d0                	callq  *%rax
  80042002d8:	48 98                	cltq   
  80042002da:	48 c1 e0 03          	shl    $0x3,%rax
  80042002de:	48 89 c2             	mov    %rax,%rdx
  80042002e1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042002e5:	48 01 c2             	add    %rax,%rdx
  80042002e8:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  80042002ef:	00 00 00 
  80042002f2:	48 01 d0             	add    %rdx,%rax
  80042002f5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042002f9:	75 05                	jne    8004200300 <boot_aps+0xf8>
  80042002fb:	e9 d2 00 00 00       	jmpq   80042003d2 <boot_aps+0x1ca>
  8004200300:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200304:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800420030b:	00 00 00 
  800420030e:	48 29 c2             	sub    %rax,%rdx
  8004200311:	48 89 d0             	mov    %rdx,%rax
  8004200314:	48 c1 f8 03          	sar    $0x3,%rax
  8004200318:	48 89 c2             	mov    %rax,%rdx
  800420031b:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200322:	f0 f0 f0 
  8004200325:	48 0f af c2          	imul   %rdx,%rax
  8004200329:	48 83 c0 01          	add    $0x1,%rax
  800420032d:	48 c1 e0 10          	shl    $0x10,%rax
  8004200331:	48 89 c2             	mov    %rax,%rdx
  8004200334:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  800420033b:	00 00 00 
  800420033e:	48 01 c2             	add    %rax,%rdx
  8004200341:	48 b8 e0 b5 6d 04 80 	movabs $0x80046db5e0,%rax
  8004200348:	00 00 00 
  800420034b:	48 89 10             	mov    %rdx,(%rax)
  800420034e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200352:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004200356:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420035d:	00 00 00 
  8004200360:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200364:	77 32                	ja     8004200398 <boot_aps+0x190>
  8004200366:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420036a:	48 89 c1             	mov    %rax,%rcx
  800420036d:	48 ba 78 dd 21 04 80 	movabs $0x800421dd78,%rdx
  8004200374:	00 00 00 
  8004200377:	be 0b 01 00 00       	mov    $0x10b,%esi
  800420037c:	48 bf 63 dd 21 04 80 	movabs $0x800421dd63,%rdi
  8004200383:	00 00 00 
  8004200386:	b8 00 00 00 00       	mov    $0x0,%eax
  800420038b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004200392:	00 00 00 
  8004200395:	41 ff d0             	callq  *%r8
  8004200398:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420039f:	ff ff ff 
  80042003a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042003a6:	48 01 d0             	add    %rdx,%rax
  80042003a9:	89 c2                	mov    %eax,%edx
  80042003ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003af:	0f b6 00             	movzbl (%rax),%eax
  80042003b2:	0f b6 c0             	movzbl %al,%eax
  80042003b5:	89 d6                	mov    %edx,%esi
  80042003b7:	89 c7                	mov    %eax,%edi
  80042003b9:	48 b8 da 7b 21 04 80 	movabs $0x8004217bda,%rax
  80042003c0:	00 00 00 
  80042003c3:	ff d0                	callq  *%rax
  80042003c5:	90                   	nop
  80042003c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003ca:	8b 40 04             	mov    0x4(%rax),%eax
  80042003cd:	83 f8 01             	cmp    $0x1,%eax
  80042003d0:	75 f4                	jne    80042003c6 <boot_aps+0x1be>
  80042003d2:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042003d9:	00 
  80042003da:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  80042003e1:	00 00 00 
  80042003e4:	8b 00                	mov    (%rax),%eax
  80042003e6:	48 98                	cltq   
  80042003e8:	48 c1 e0 03          	shl    $0x3,%rax
  80042003ec:	48 89 c2             	mov    %rax,%rdx
  80042003ef:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003f3:	48 01 c2             	add    %rax,%rdx
  80042003f6:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  80042003fd:	00 00 00 
  8004200400:	48 01 d0             	add    %rdx,%rax
  8004200403:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004200407:	0f 87 bf fe ff ff    	ja     80042002cc <boot_aps+0xc4>
  800420040d:	c9                   	leaveq 
  800420040e:	c3                   	retq   

000000800420040f <mp_main>:
  800420040f:	55                   	push   %rbp
  8004200410:	48 89 e5             	mov    %rsp,%rbp
  8004200413:	48 83 ec 10          	sub    $0x10,%rsp
  8004200417:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  800420041e:	00 00 00 
  8004200421:	48 8b 00             	mov    (%rax),%rax
  8004200424:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004200428:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420042c:	0f 22 d8             	mov    %rax,%cr3
  800420042f:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004200436:	00 00 00 
  8004200439:	ff d0                	callq  *%rax
  800420043b:	89 c6                	mov    %eax,%esi
  800420043d:	48 bf 9c dd 21 04 80 	movabs $0x800421dd9c,%rdi
  8004200444:	00 00 00 
  8004200447:	b8 00 00 00 00       	mov    $0x0,%eax
  800420044c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004200453:	00 00 00 
  8004200456:	ff d2                	callq  *%rdx
  8004200458:	48 b8 73 79 21 04 80 	movabs $0x8004217973,%rax
  800420045f:	00 00 00 
  8004200462:	ff d0                	callq  *%rax
  8004200464:	48 b8 3a 80 20 04 80 	movabs $0x800420803a,%rax
  800420046b:	00 00 00 
  800420046e:	ff d0                	callq  *%rax
  8004200470:	48 b8 fe c4 20 04 80 	movabs $0x800420c4fe,%rax
  8004200477:	00 00 00 
  800420047a:	ff d0                	callq  *%rax
  800420047c:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004200483:	00 00 00 
  8004200486:	ff d0                	callq  *%rax
  8004200488:	48 98                	cltq   
  800420048a:	48 c1 e0 03          	shl    $0x3,%rax
  800420048e:	48 89 c2             	mov    %rax,%rdx
  8004200491:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200495:	48 01 d0             	add    %rdx,%rax
  8004200498:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420049f:	00 00 00 
  80042004a2:	48 01 d0             	add    %rdx,%rax
  80042004a5:	48 83 c0 04          	add    $0x4,%rax
  80042004a9:	be 01 00 00 00       	mov    $0x1,%esi
  80042004ae:	48 89 c7             	mov    %rax,%rdi
  80042004b1:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  80042004b8:	00 00 00 
  80042004bb:	ff d0                	callq  *%rax
  80042004bd:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  80042004c4:	00 00 00 
  80042004c7:	ff d0                	callq  *%rax
  80042004c9:	48 b8 26 da 20 04 80 	movabs $0x800420da26,%rax
  80042004d0:	00 00 00 
  80042004d3:	ff d0                	callq  *%rax

00000080042004d5 <_panic>:
  80042004d5:	55                   	push   %rbp
  80042004d6:	48 89 e5             	mov    %rsp,%rbp
  80042004d9:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042004e0:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042004e7:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042004ed:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042004f4:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042004fb:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200502:	84 c0                	test   %al,%al
  8004200504:	74 20                	je     8004200526 <_panic+0x51>
  8004200506:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  800420050a:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800420050e:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200512:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200516:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420051a:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800420051e:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200522:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200526:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800420052d:	48 b8 d8 b5 6d 04 80 	movabs $0x80046db5d8,%rax
  8004200534:	00 00 00 
  8004200537:	48 8b 00             	mov    (%rax),%rax
  800420053a:	48 85 c0             	test   %rax,%rax
  800420053d:	74 05                	je     8004200544 <_panic+0x6f>
  800420053f:	e9 b5 00 00 00       	jmpq   80042005f9 <_panic+0x124>
  8004200544:	48 b8 d8 b5 6d 04 80 	movabs $0x80046db5d8,%rax
  800420054b:	00 00 00 
  800420054e:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200555:	48 89 10             	mov    %rdx,(%rax)
  8004200558:	fa                   	cli    
  8004200559:	fc                   	cld    
  800420055a:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200561:	00 00 00 
  8004200564:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420056b:	00 00 00 
  800420056e:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200572:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200579:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200580:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200587:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420058e:	00 00 00 
  8004200591:	ff d0                	callq  *%rax
  8004200593:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  8004200599:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042005a0:	89 c6                	mov    %eax,%esi
  80042005a2:	48 bf b8 dd 21 04 80 	movabs $0x800421ddb8,%rdi
  80042005a9:	00 00 00 
  80042005ac:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005b1:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  80042005b8:	00 00 00 
  80042005bb:	41 ff d0             	callq  *%r8
  80042005be:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042005c5:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042005cc:	48 89 d6             	mov    %rdx,%rsi
  80042005cf:	48 89 c7             	mov    %rax,%rdi
  80042005d2:	48 b8 24 9c 20 04 80 	movabs $0x8004209c24,%rax
  80042005d9:	00 00 00 
  80042005dc:	ff d0                	callq  *%rax
  80042005de:	48 bf da dd 21 04 80 	movabs $0x800421ddda,%rdi
  80042005e5:	00 00 00 
  80042005e8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005ed:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042005f4:	00 00 00 
  80042005f7:	ff d2                	callq  *%rdx
  80042005f9:	bf 00 00 00 00       	mov    $0x0,%edi
  80042005fe:	48 b8 5d 1a 20 04 80 	movabs $0x8004201a5d,%rax
  8004200605:	00 00 00 
  8004200608:	ff d0                	callq  *%rax
  800420060a:	eb ed                	jmp    80042005f9 <_panic+0x124>

000000800420060c <_warn>:
  800420060c:	55                   	push   %rbp
  800420060d:	48 89 e5             	mov    %rsp,%rbp
  8004200610:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  8004200617:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  800420061e:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200624:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420062b:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200632:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004200639:	84 c0                	test   %al,%al
  800420063b:	74 20                	je     800420065d <_warn+0x51>
  800420063d:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200641:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200645:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200649:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420064d:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200651:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200655:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200659:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420065d:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200664:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420066b:	00 00 00 
  800420066e:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200675:	00 00 00 
  8004200678:	48 8d 45 10          	lea    0x10(%rbp),%rax
  800420067c:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200683:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420068a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200691:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  8004200697:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  800420069e:	48 89 c6             	mov    %rax,%rsi
  80042006a1:	48 bf dc dd 21 04 80 	movabs $0x800421dddc,%rdi
  80042006a8:	00 00 00 
  80042006ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006b0:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042006b7:	00 00 00 
  80042006ba:	ff d1                	callq  *%rcx
  80042006bc:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006c3:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006ca:	48 89 d6             	mov    %rdx,%rsi
  80042006cd:	48 89 c7             	mov    %rax,%rdi
  80042006d0:	48 b8 24 9c 20 04 80 	movabs $0x8004209c24,%rax
  80042006d7:	00 00 00 
  80042006da:	ff d0                	callq  *%rax
  80042006dc:	48 bf da dd 21 04 80 	movabs $0x800421ddda,%rdi
  80042006e3:	00 00 00 
  80042006e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006eb:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042006f2:	00 00 00 
  80042006f5:	ff d2                	callq  *%rdx
  80042006f7:	c9                   	leaveq 
  80042006f8:	c3                   	retq   

00000080042006f9 <delay>:
  80042006f9:	55                   	push   %rbp
  80042006fa:	48 89 e5             	mov    %rsp,%rbp
  80042006fd:	48 83 ec 20          	sub    $0x20,%rsp
  8004200701:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200708:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420070b:	89 c2                	mov    %eax,%edx
  800420070d:	ec                   	in     (%dx),%al
  800420070e:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200711:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  8004200718:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420071b:	89 c2                	mov    %eax,%edx
  800420071d:	ec                   	in     (%dx),%al
  800420071e:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200721:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  8004200728:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420072b:	89 c2                	mov    %eax,%edx
  800420072d:	ec                   	in     (%dx),%al
  800420072e:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200731:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  8004200738:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420073b:	89 c2                	mov    %eax,%edx
  800420073d:	ec                   	in     (%dx),%al
  800420073e:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200741:	c9                   	leaveq 
  8004200742:	c3                   	retq   

0000008004200743 <serial_proc_data>:
  8004200743:	55                   	push   %rbp
  8004200744:	48 89 e5             	mov    %rsp,%rbp
  8004200747:	48 83 ec 10          	sub    $0x10,%rsp
  800420074b:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200752:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200755:	89 c2                	mov    %eax,%edx
  8004200757:	ec                   	in     (%dx),%al
  8004200758:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420075b:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420075f:	0f b6 c0             	movzbl %al,%eax
  8004200762:	83 e0 01             	and    $0x1,%eax
  8004200765:	85 c0                	test   %eax,%eax
  8004200767:	75 07                	jne    8004200770 <serial_proc_data+0x2d>
  8004200769:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420076e:	eb 17                	jmp    8004200787 <serial_proc_data+0x44>
  8004200770:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200777:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420077a:	89 c2                	mov    %eax,%edx
  800420077c:	ec                   	in     (%dx),%al
  800420077d:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200780:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200784:	0f b6 c0             	movzbl %al,%eax
  8004200787:	c9                   	leaveq 
  8004200788:	c3                   	retq   

0000008004200789 <serial_intr>:
  8004200789:	55                   	push   %rbp
  800420078a:	48 89 e5             	mov    %rsp,%rbp
  800420078d:	48 b8 00 c0 4d 04 80 	movabs $0x80044dc000,%rax
  8004200794:	00 00 00 
  8004200797:	0f b6 00             	movzbl (%rax),%eax
  800420079a:	84 c0                	test   %al,%al
  800420079c:	74 16                	je     80042007b4 <serial_intr+0x2b>
  800420079e:	48 bf 43 07 20 04 80 	movabs $0x8004200743,%rdi
  80042007a5:	00 00 00 
  80042007a8:	48 b8 29 10 20 04 80 	movabs $0x8004201029,%rax
  80042007af:	00 00 00 
  80042007b2:	ff d0                	callq  *%rax
  80042007b4:	5d                   	pop    %rbp
  80042007b5:	c3                   	retq   

00000080042007b6 <serial_putc>:
  80042007b6:	55                   	push   %rbp
  80042007b7:	48 89 e5             	mov    %rsp,%rbp
  80042007ba:	48 83 ec 28          	sub    $0x28,%rsp
  80042007be:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042007c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042007c8:	eb 10                	jmp    80042007da <serial_putc+0x24>
  80042007ca:	48 b8 f9 06 20 04 80 	movabs $0x80042006f9,%rax
  80042007d1:	00 00 00 
  80042007d4:	ff d0                	callq  *%rax
  80042007d6:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042007da:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042007e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042007e4:	89 c2                	mov    %eax,%edx
  80042007e6:	ec                   	in     (%dx),%al
  80042007e7:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042007ea:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042007ee:	0f b6 c0             	movzbl %al,%eax
  80042007f1:	83 e0 20             	and    $0x20,%eax
  80042007f4:	85 c0                	test   %eax,%eax
  80042007f6:	75 09                	jne    8004200801 <serial_putc+0x4b>
  80042007f8:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  80042007ff:	7e c9                	jle    80042007ca <serial_putc+0x14>
  8004200801:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004200804:	0f b6 c0             	movzbl %al,%eax
  8004200807:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  800420080e:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200811:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200815:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200818:	ee                   	out    %al,(%dx)
  8004200819:	c9                   	leaveq 
  800420081a:	c3                   	retq   

000000800420081b <serial_init>:
  800420081b:	55                   	push   %rbp
  800420081c:	48 89 e5             	mov    %rsp,%rbp
  800420081f:	48 83 ec 50          	sub    $0x50,%rsp
  8004200823:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  800420082a:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  800420082e:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200832:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200835:	ee                   	out    %al,(%dx)
  8004200836:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  800420083d:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200841:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200845:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004200848:	ee                   	out    %al,(%dx)
  8004200849:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  8004200850:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200854:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200858:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420085b:	ee                   	out    %al,(%dx)
  800420085c:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200863:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  8004200867:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420086b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420086e:	ee                   	out    %al,(%dx)
  800420086f:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  8004200876:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  800420087a:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800420087e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200881:	ee                   	out    %al,(%dx)
  8004200882:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  8004200889:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  800420088d:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200891:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004200894:	ee                   	out    %al,(%dx)
  8004200895:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  800420089c:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  80042008a0:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042008a4:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042008a7:	ee                   	out    %al,(%dx)
  80042008a8:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008af:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042008b2:	89 c2                	mov    %eax,%edx
  80042008b4:	ec                   	in     (%dx),%al
  80042008b5:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042008b8:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042008bc:	3c ff                	cmp    $0xff,%al
  80042008be:	0f 95 c2             	setne  %dl
  80042008c1:	48 b8 00 c0 4d 04 80 	movabs $0x80044dc000,%rax
  80042008c8:	00 00 00 
  80042008cb:	88 10                	mov    %dl,(%rax)
  80042008cd:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008d4:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042008d7:	89 c2                	mov    %eax,%edx
  80042008d9:	ec                   	in     (%dx),%al
  80042008da:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042008dd:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042008e4:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042008e7:	89 c2                	mov    %eax,%edx
  80042008e9:	ec                   	in     (%dx),%al
  80042008ea:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042008ed:	48 b8 00 c0 4d 04 80 	movabs $0x80044dc000,%rax
  80042008f4:	00 00 00 
  80042008f7:	0f b6 00             	movzbl (%rax),%eax
  80042008fa:	84 c0                	test   %al,%al
  80042008fc:	74 23                	je     8004200921 <serial_init+0x106>
  80042008fe:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004200905:	00 00 00 
  8004200908:	0f b7 00             	movzwl (%rax),%eax
  800420090b:	0f b7 c0             	movzwl %ax,%eax
  800420090e:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200913:	89 c7                	mov    %eax,%edi
  8004200915:	48 b8 d5 9a 20 04 80 	movabs $0x8004209ad5,%rax
  800420091c:	00 00 00 
  800420091f:	ff d0                	callq  *%rax
  8004200921:	c9                   	leaveq 
  8004200922:	c3                   	retq   

0000008004200923 <lpt_putc>:
  8004200923:	55                   	push   %rbp
  8004200924:	48 89 e5             	mov    %rsp,%rbp
  8004200927:	48 83 ec 38          	sub    $0x38,%rsp
  800420092b:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420092e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200935:	eb 10                	jmp    8004200947 <lpt_putc+0x24>
  8004200937:	48 b8 f9 06 20 04 80 	movabs $0x80042006f9,%rax
  800420093e:	00 00 00 
  8004200941:	ff d0                	callq  *%rax
  8004200943:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200947:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  800420094e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200951:	89 c2                	mov    %eax,%edx
  8004200953:	ec                   	in     (%dx),%al
  8004200954:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  8004200957:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420095b:	84 c0                	test   %al,%al
  800420095d:	78 09                	js     8004200968 <lpt_putc+0x45>
  800420095f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  8004200966:	7e cf                	jle    8004200937 <lpt_putc+0x14>
  8004200968:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420096b:	0f b6 c0             	movzbl %al,%eax
  800420096e:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200975:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200978:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800420097c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420097f:	ee                   	out    %al,(%dx)
  8004200980:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  8004200987:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  800420098b:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800420098f:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200992:	ee                   	out    %al,(%dx)
  8004200993:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  800420099a:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  800420099e:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  80042009a2:	8b 55 e0             	mov    -0x20(%rbp),%edx
  80042009a5:	ee                   	out    %al,(%dx)
  80042009a6:	c9                   	leaveq 
  80042009a7:	c3                   	retq   

00000080042009a8 <cga_init>:
  80042009a8:	55                   	push   %rbp
  80042009a9:	48 89 e5             	mov    %rsp,%rbp
  80042009ac:	48 83 ec 30          	sub    $0x30,%rsp
  80042009b0:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  80042009b7:	00 00 00 
  80042009ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009c2:	0f b7 00             	movzwl (%rax),%eax
  80042009c5:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  80042009c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009cd:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  80042009d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009d6:	0f b7 00             	movzwl (%rax),%eax
  80042009d9:	66 3d 5a a5          	cmp    $0xa55a,%ax
  80042009dd:	74 20                	je     80042009ff <cga_init+0x57>
  80042009df:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  80042009e6:	00 00 00 
  80042009e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009ed:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  80042009f4:	00 00 00 
  80042009f7:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  80042009fd:	eb 1b                	jmp    8004200a1a <cga_init+0x72>
  80042009ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200a03:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004200a07:	66 89 10             	mov    %dx,(%rax)
  8004200a0a:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a11:	00 00 00 
  8004200a14:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200a1a:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a21:	00 00 00 
  8004200a24:	8b 00                	mov    (%rax),%eax
  8004200a26:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200a29:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200a2d:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200a31:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200a34:	ee                   	out    %al,(%dx)
  8004200a35:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a3c:	00 00 00 
  8004200a3f:	8b 00                	mov    (%rax),%eax
  8004200a41:	83 c0 01             	add    $0x1,%eax
  8004200a44:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a47:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200a4a:	89 c2                	mov    %eax,%edx
  8004200a4c:	ec                   	in     (%dx),%al
  8004200a4d:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200a50:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200a54:	0f b6 c0             	movzbl %al,%eax
  8004200a57:	c1 e0 08             	shl    $0x8,%eax
  8004200a5a:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200a5d:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a64:	00 00 00 
  8004200a67:	8b 00                	mov    (%rax),%eax
  8004200a69:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200a6c:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a70:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200a74:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200a77:	ee                   	out    %al,(%dx)
  8004200a78:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200a7f:	00 00 00 
  8004200a82:	8b 00                	mov    (%rax),%eax
  8004200a84:	83 c0 01             	add    $0x1,%eax
  8004200a87:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a8a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200a8d:	89 c2                	mov    %eax,%edx
  8004200a8f:	ec                   	in     (%dx),%al
  8004200a90:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200a93:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200a97:	0f b6 c0             	movzbl %al,%eax
  8004200a9a:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200a9d:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200aa4:	00 00 00 
  8004200aa7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200aab:	48 89 10             	mov    %rdx,(%rax)
  8004200aae:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200ab1:	89 c2                	mov    %eax,%edx
  8004200ab3:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200aba:	00 00 00 
  8004200abd:	66 89 10             	mov    %dx,(%rax)
  8004200ac0:	c9                   	leaveq 
  8004200ac1:	c3                   	retq   

0000008004200ac2 <cga_putc>:
  8004200ac2:	55                   	push   %rbp
  8004200ac3:	48 89 e5             	mov    %rsp,%rbp
  8004200ac6:	48 83 ec 40          	sub    $0x40,%rsp
  8004200aca:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200acd:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ad0:	b0 00                	mov    $0x0,%al
  8004200ad2:	85 c0                	test   %eax,%eax
  8004200ad4:	75 07                	jne    8004200add <cga_putc+0x1b>
  8004200ad6:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200add:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ae0:	0f b6 c0             	movzbl %al,%eax
  8004200ae3:	83 f8 09             	cmp    $0x9,%eax
  8004200ae6:	0f 84 f6 00 00 00    	je     8004200be2 <cga_putc+0x120>
  8004200aec:	83 f8 09             	cmp    $0x9,%eax
  8004200aef:	7f 0a                	jg     8004200afb <cga_putc+0x39>
  8004200af1:	83 f8 08             	cmp    $0x8,%eax
  8004200af4:	74 18                	je     8004200b0e <cga_putc+0x4c>
  8004200af6:	e9 3e 01 00 00       	jmpq   8004200c39 <cga_putc+0x177>
  8004200afb:	83 f8 0a             	cmp    $0xa,%eax
  8004200afe:	74 75                	je     8004200b75 <cga_putc+0xb3>
  8004200b00:	83 f8 0d             	cmp    $0xd,%eax
  8004200b03:	0f 84 89 00 00 00    	je     8004200b92 <cga_putc+0xd0>
  8004200b09:	e9 2b 01 00 00       	jmpq   8004200c39 <cga_putc+0x177>
  8004200b0e:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b15:	00 00 00 
  8004200b18:	0f b7 00             	movzwl (%rax),%eax
  8004200b1b:	66 85 c0             	test   %ax,%ax
  8004200b1e:	74 50                	je     8004200b70 <cga_putc+0xae>
  8004200b20:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b27:	00 00 00 
  8004200b2a:	0f b7 00             	movzwl (%rax),%eax
  8004200b2d:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200b30:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b37:	00 00 00 
  8004200b3a:	66 89 10             	mov    %dx,(%rax)
  8004200b3d:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200b44:	00 00 00 
  8004200b47:	48 8b 10             	mov    (%rax),%rdx
  8004200b4a:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b51:	00 00 00 
  8004200b54:	0f b7 00             	movzwl (%rax),%eax
  8004200b57:	0f b7 c0             	movzwl %ax,%eax
  8004200b5a:	48 01 c0             	add    %rax,%rax
  8004200b5d:	48 01 c2             	add    %rax,%rdx
  8004200b60:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200b63:	b0 00                	mov    $0x0,%al
  8004200b65:	83 c8 20             	or     $0x20,%eax
  8004200b68:	66 89 02             	mov    %ax,(%rdx)
  8004200b6b:	e9 04 01 00 00       	jmpq   8004200c74 <cga_putc+0x1b2>
  8004200b70:	e9 ff 00 00 00       	jmpq   8004200c74 <cga_putc+0x1b2>
  8004200b75:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b7c:	00 00 00 
  8004200b7f:	0f b7 00             	movzwl (%rax),%eax
  8004200b82:	8d 50 50             	lea    0x50(%rax),%edx
  8004200b85:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b8c:	00 00 00 
  8004200b8f:	66 89 10             	mov    %dx,(%rax)
  8004200b92:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200b99:	00 00 00 
  8004200b9c:	0f b7 30             	movzwl (%rax),%esi
  8004200b9f:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200ba6:	00 00 00 
  8004200ba9:	0f b7 08             	movzwl (%rax),%ecx
  8004200bac:	0f b7 c1             	movzwl %cx,%eax
  8004200baf:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200bb5:	c1 e8 10             	shr    $0x10,%eax
  8004200bb8:	89 c2                	mov    %eax,%edx
  8004200bba:	66 c1 ea 06          	shr    $0x6,%dx
  8004200bbe:	89 d0                	mov    %edx,%eax
  8004200bc0:	c1 e0 02             	shl    $0x2,%eax
  8004200bc3:	01 d0                	add    %edx,%eax
  8004200bc5:	c1 e0 04             	shl    $0x4,%eax
  8004200bc8:	29 c1                	sub    %eax,%ecx
  8004200bca:	89 ca                	mov    %ecx,%edx
  8004200bcc:	29 d6                	sub    %edx,%esi
  8004200bce:	89 f2                	mov    %esi,%edx
  8004200bd0:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200bd7:	00 00 00 
  8004200bda:	66 89 10             	mov    %dx,(%rax)
  8004200bdd:	e9 92 00 00 00       	jmpq   8004200c74 <cga_putc+0x1b2>
  8004200be2:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200be7:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200bee:	00 00 00 
  8004200bf1:	ff d0                	callq  *%rax
  8004200bf3:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bf8:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200bff:	00 00 00 
  8004200c02:	ff d0                	callq  *%rax
  8004200c04:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c09:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200c10:	00 00 00 
  8004200c13:	ff d0                	callq  *%rax
  8004200c15:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c1a:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200c21:	00 00 00 
  8004200c24:	ff d0                	callq  *%rax
  8004200c26:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c2b:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004200c32:	00 00 00 
  8004200c35:	ff d0                	callq  *%rax
  8004200c37:	eb 3b                	jmp    8004200c74 <cga_putc+0x1b2>
  8004200c39:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200c40:	00 00 00 
  8004200c43:	48 8b 30             	mov    (%rax),%rsi
  8004200c46:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200c4d:	00 00 00 
  8004200c50:	0f b7 00             	movzwl (%rax),%eax
  8004200c53:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200c56:	48 ba 10 c0 4d 04 80 	movabs $0x80044dc010,%rdx
  8004200c5d:	00 00 00 
  8004200c60:	66 89 0a             	mov    %cx,(%rdx)
  8004200c63:	0f b7 c0             	movzwl %ax,%eax
  8004200c66:	48 01 c0             	add    %rax,%rax
  8004200c69:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200c6d:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c70:	66 89 02             	mov    %ax,(%rdx)
  8004200c73:	90                   	nop
  8004200c74:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200c7b:	00 00 00 
  8004200c7e:	0f b7 00             	movzwl (%rax),%eax
  8004200c81:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200c85:	0f 86 89 00 00 00    	jbe    8004200d14 <cga_putc+0x252>
  8004200c8b:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200c92:	00 00 00 
  8004200c95:	48 8b 00             	mov    (%rax),%rax
  8004200c98:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200c9f:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200ca6:	00 00 00 
  8004200ca9:	48 8b 00             	mov    (%rax),%rax
  8004200cac:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200cb1:	48 89 ce             	mov    %rcx,%rsi
  8004200cb4:	48 89 c7             	mov    %rax,%rdi
  8004200cb7:	48 b8 f6 0b 21 04 80 	movabs $0x8004210bf6,%rax
  8004200cbe:	00 00 00 
  8004200cc1:	ff d0                	callq  *%rax
  8004200cc3:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200cca:	eb 22                	jmp    8004200cee <cga_putc+0x22c>
  8004200ccc:	48 b8 08 c0 4d 04 80 	movabs $0x80044dc008,%rax
  8004200cd3:	00 00 00 
  8004200cd6:	48 8b 00             	mov    (%rax),%rax
  8004200cd9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200cdc:	48 63 d2             	movslq %edx,%rdx
  8004200cdf:	48 01 d2             	add    %rdx,%rdx
  8004200ce2:	48 01 d0             	add    %rdx,%rax
  8004200ce5:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200cea:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200cee:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200cf5:	7e d5                	jle    8004200ccc <cga_putc+0x20a>
  8004200cf7:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200cfe:	00 00 00 
  8004200d01:	0f b7 00             	movzwl (%rax),%eax
  8004200d04:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200d07:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200d0e:	00 00 00 
  8004200d11:	66 89 10             	mov    %dx,(%rax)
  8004200d14:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200d1b:	00 00 00 
  8004200d1e:	8b 00                	mov    (%rax),%eax
  8004200d20:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200d23:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200d27:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200d2b:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200d2e:	ee                   	out    %al,(%dx)
  8004200d2f:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200d36:	00 00 00 
  8004200d39:	0f b7 00             	movzwl (%rax),%eax
  8004200d3c:	66 c1 e8 08          	shr    $0x8,%ax
  8004200d40:	0f b6 c0             	movzbl %al,%eax
  8004200d43:	48 ba 04 c0 4d 04 80 	movabs $0x80044dc004,%rdx
  8004200d4a:	00 00 00 
  8004200d4d:	8b 12                	mov    (%rdx),%edx
  8004200d4f:	83 c2 01             	add    $0x1,%edx
  8004200d52:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200d55:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200d58:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200d5c:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200d5f:	ee                   	out    %al,(%dx)
  8004200d60:	48 b8 04 c0 4d 04 80 	movabs $0x80044dc004,%rax
  8004200d67:	00 00 00 
  8004200d6a:	8b 00                	mov    (%rax),%eax
  8004200d6c:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200d6f:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200d73:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200d77:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200d7a:	ee                   	out    %al,(%dx)
  8004200d7b:	48 b8 10 c0 4d 04 80 	movabs $0x80044dc010,%rax
  8004200d82:	00 00 00 
  8004200d85:	0f b7 00             	movzwl (%rax),%eax
  8004200d88:	0f b6 c0             	movzbl %al,%eax
  8004200d8b:	48 ba 04 c0 4d 04 80 	movabs $0x80044dc004,%rdx
  8004200d92:	00 00 00 
  8004200d95:	8b 12                	mov    (%rdx),%edx
  8004200d97:	83 c2 01             	add    $0x1,%edx
  8004200d9a:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200d9d:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200da0:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200da4:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200da7:	ee                   	out    %al,(%dx)
  8004200da8:	c9                   	leaveq 
  8004200da9:	c3                   	retq   

0000008004200daa <kbd_proc_data>:
  8004200daa:	55                   	push   %rbp
  8004200dab:	48 89 e5             	mov    %rsp,%rbp
  8004200dae:	48 83 ec 20          	sub    $0x20,%rsp
  8004200db2:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200db9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200dbc:	89 c2                	mov    %eax,%edx
  8004200dbe:	ec                   	in     (%dx),%al
  8004200dbf:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200dc2:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200dc6:	0f b6 c0             	movzbl %al,%eax
  8004200dc9:	83 e0 01             	and    $0x1,%eax
  8004200dcc:	85 c0                	test   %eax,%eax
  8004200dce:	75 0a                	jne    8004200dda <kbd_proc_data+0x30>
  8004200dd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200dd5:	e9 fc 01 00 00       	jmpq   8004200fd6 <kbd_proc_data+0x22c>
  8004200dda:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200de1:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200de4:	89 c2                	mov    %eax,%edx
  8004200de6:	ec                   	in     (%dx),%al
  8004200de7:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200dea:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200dee:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200df1:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200df5:	75 27                	jne    8004200e1e <kbd_proc_data+0x74>
  8004200df7:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200dfe:	00 00 00 
  8004200e01:	8b 00                	mov    (%rax),%eax
  8004200e03:	83 c8 40             	or     $0x40,%eax
  8004200e06:	89 c2                	mov    %eax,%edx
  8004200e08:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e0f:	00 00 00 
  8004200e12:	89 10                	mov    %edx,(%rax)
  8004200e14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e19:	e9 b8 01 00 00       	jmpq   8004200fd6 <kbd_proc_data+0x22c>
  8004200e1e:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e22:	84 c0                	test   %al,%al
  8004200e24:	79 65                	jns    8004200e8b <kbd_proc_data+0xe1>
  8004200e26:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e2d:	00 00 00 
  8004200e30:	8b 00                	mov    (%rax),%eax
  8004200e32:	83 e0 40             	and    $0x40,%eax
  8004200e35:	85 c0                	test   %eax,%eax
  8004200e37:	75 09                	jne    8004200e42 <kbd_proc_data+0x98>
  8004200e39:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e3d:	83 e0 7f             	and    $0x7f,%eax
  8004200e40:	eb 04                	jmp    8004200e46 <kbd_proc_data+0x9c>
  8004200e42:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e46:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200e49:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e4d:	48 ba 60 50 23 04 80 	movabs $0x8004235060,%rdx
  8004200e54:	00 00 00 
  8004200e57:	48 98                	cltq   
  8004200e59:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200e5d:	83 c8 40             	or     $0x40,%eax
  8004200e60:	0f b6 c0             	movzbl %al,%eax
  8004200e63:	f7 d0                	not    %eax
  8004200e65:	89 c2                	mov    %eax,%edx
  8004200e67:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e6e:	00 00 00 
  8004200e71:	8b 00                	mov    (%rax),%eax
  8004200e73:	21 c2                	and    %eax,%edx
  8004200e75:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e7c:	00 00 00 
  8004200e7f:	89 10                	mov    %edx,(%rax)
  8004200e81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e86:	e9 4b 01 00 00       	jmpq   8004200fd6 <kbd_proc_data+0x22c>
  8004200e8b:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200e92:	00 00 00 
  8004200e95:	8b 00                	mov    (%rax),%eax
  8004200e97:	83 e0 40             	and    $0x40,%eax
  8004200e9a:	85 c0                	test   %eax,%eax
  8004200e9c:	74 21                	je     8004200ebf <kbd_proc_data+0x115>
  8004200e9e:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200ea2:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200ea9:	00 00 00 
  8004200eac:	8b 00                	mov    (%rax),%eax
  8004200eae:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200eb1:	89 c2                	mov    %eax,%edx
  8004200eb3:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200eba:	00 00 00 
  8004200ebd:	89 10                	mov    %edx,(%rax)
  8004200ebf:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ec3:	48 ba 60 50 23 04 80 	movabs $0x8004235060,%rdx
  8004200eca:	00 00 00 
  8004200ecd:	48 98                	cltq   
  8004200ecf:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ed3:	0f b6 d0             	movzbl %al,%edx
  8004200ed6:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200edd:	00 00 00 
  8004200ee0:	8b 00                	mov    (%rax),%eax
  8004200ee2:	09 c2                	or     %eax,%edx
  8004200ee4:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200eeb:	00 00 00 
  8004200eee:	89 10                	mov    %edx,(%rax)
  8004200ef0:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ef4:	48 ba 60 51 23 04 80 	movabs $0x8004235160,%rdx
  8004200efb:	00 00 00 
  8004200efe:	48 98                	cltq   
  8004200f00:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200f04:	0f b6 d0             	movzbl %al,%edx
  8004200f07:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f0e:	00 00 00 
  8004200f11:	8b 00                	mov    (%rax),%eax
  8004200f13:	31 c2                	xor    %eax,%edx
  8004200f15:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f1c:	00 00 00 
  8004200f1f:	89 10                	mov    %edx,(%rax)
  8004200f21:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f28:	00 00 00 
  8004200f2b:	8b 00                	mov    (%rax),%eax
  8004200f2d:	83 e0 03             	and    $0x3,%eax
  8004200f30:	89 c2                	mov    %eax,%edx
  8004200f32:	48 b8 60 55 23 04 80 	movabs $0x8004235560,%rax
  8004200f39:	00 00 00 
  8004200f3c:	89 d2                	mov    %edx,%edx
  8004200f3e:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004200f42:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f46:	48 01 d0             	add    %rdx,%rax
  8004200f49:	0f b6 00             	movzbl (%rax),%eax
  8004200f4c:	0f b6 c0             	movzbl %al,%eax
  8004200f4f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200f52:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f59:	00 00 00 
  8004200f5c:	8b 00                	mov    (%rax),%eax
  8004200f5e:	83 e0 08             	and    $0x8,%eax
  8004200f61:	85 c0                	test   %eax,%eax
  8004200f63:	74 22                	je     8004200f87 <kbd_proc_data+0x1dd>
  8004200f65:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004200f69:	7e 0c                	jle    8004200f77 <kbd_proc_data+0x1cd>
  8004200f6b:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004200f6f:	7f 06                	jg     8004200f77 <kbd_proc_data+0x1cd>
  8004200f71:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004200f75:	eb 10                	jmp    8004200f87 <kbd_proc_data+0x1dd>
  8004200f77:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  8004200f7b:	7e 0a                	jle    8004200f87 <kbd_proc_data+0x1dd>
  8004200f7d:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004200f81:	7f 04                	jg     8004200f87 <kbd_proc_data+0x1dd>
  8004200f83:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004200f87:	48 b8 28 c2 4d 04 80 	movabs $0x80044dc228,%rax
  8004200f8e:	00 00 00 
  8004200f91:	8b 00                	mov    (%rax),%eax
  8004200f93:	f7 d0                	not    %eax
  8004200f95:	83 e0 06             	and    $0x6,%eax
  8004200f98:	85 c0                	test   %eax,%eax
  8004200f9a:	75 37                	jne    8004200fd3 <kbd_proc_data+0x229>
  8004200f9c:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  8004200fa3:	75 2e                	jne    8004200fd3 <kbd_proc_data+0x229>
  8004200fa5:	48 bf f6 dd 21 04 80 	movabs $0x800421ddf6,%rdi
  8004200fac:	00 00 00 
  8004200faf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200fb4:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004200fbb:	00 00 00 
  8004200fbe:	ff d2                	callq  *%rdx
  8004200fc0:	c7 45 e4 92 00 00 00 	movl   $0x92,-0x1c(%rbp)
  8004200fc7:	c6 45 e3 03          	movb   $0x3,-0x1d(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200fcb:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200fcf:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200fd2:	ee                   	out    %al,(%dx)
  8004200fd3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200fd6:	c9                   	leaveq 
  8004200fd7:	c3                   	retq   

0000008004200fd8 <kbd_intr>:
  8004200fd8:	55                   	push   %rbp
  8004200fd9:	48 89 e5             	mov    %rsp,%rbp
  8004200fdc:	48 bf aa 0d 20 04 80 	movabs $0x8004200daa,%rdi
  8004200fe3:	00 00 00 
  8004200fe6:	48 b8 29 10 20 04 80 	movabs $0x8004201029,%rax
  8004200fed:	00 00 00 
  8004200ff0:	ff d0                	callq  *%rax
  8004200ff2:	5d                   	pop    %rbp
  8004200ff3:	c3                   	retq   

0000008004200ff4 <kbd_init>:
  8004200ff4:	55                   	push   %rbp
  8004200ff5:	48 89 e5             	mov    %rsp,%rbp
  8004200ff8:	48 b8 d8 0f 20 04 80 	movabs $0x8004200fd8,%rax
  8004200fff:	00 00 00 
  8004201002:	ff d0                	callq  *%rax
  8004201004:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  800420100b:	00 00 00 
  800420100e:	0f b7 00             	movzwl (%rax),%eax
  8004201011:	0f b7 c0             	movzwl %ax,%eax
  8004201014:	25 fd ff 00 00       	and    $0xfffd,%eax
  8004201019:	89 c7                	mov    %eax,%edi
  800420101b:	48 b8 d5 9a 20 04 80 	movabs $0x8004209ad5,%rax
  8004201022:	00 00 00 
  8004201025:	ff d0                	callq  *%rax
  8004201027:	5d                   	pop    %rbp
  8004201028:	c3                   	retq   

0000008004201029 <cons_intr>:
  8004201029:	55                   	push   %rbp
  800420102a:	48 89 e5             	mov    %rsp,%rbp
  800420102d:	48 83 ec 20          	sub    $0x20,%rsp
  8004201031:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201035:	eb 6a                	jmp    80042010a1 <cons_intr+0x78>
  8004201037:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420103b:	75 02                	jne    800420103f <cons_intr+0x16>
  800420103d:	eb 62                	jmp    80042010a1 <cons_intr+0x78>
  800420103f:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  8004201046:	00 00 00 
  8004201049:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420104f:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201052:	48 ba 20 c0 4d 04 80 	movabs $0x80044dc020,%rdx
  8004201059:	00 00 00 
  800420105c:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  8004201062:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004201065:	89 d1                	mov    %edx,%ecx
  8004201067:	48 ba 20 c0 4d 04 80 	movabs $0x80044dc020,%rdx
  800420106e:	00 00 00 
  8004201071:	89 c0                	mov    %eax,%eax
  8004201073:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  8004201076:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  800420107d:	00 00 00 
  8004201080:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004201086:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420108b:	75 14                	jne    80042010a1 <cons_intr+0x78>
  800420108d:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  8004201094:	00 00 00 
  8004201097:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  800420109e:	00 00 00 
  80042010a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042010a5:	ff d0                	callq  *%rax
  80042010a7:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042010aa:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042010ae:	75 87                	jne    8004201037 <cons_intr+0xe>
  80042010b0:	c9                   	leaveq 
  80042010b1:	c3                   	retq   

00000080042010b2 <cons_getc>:
  80042010b2:	55                   	push   %rbp
  80042010b3:	48 89 e5             	mov    %rsp,%rbp
  80042010b6:	48 83 ec 10          	sub    $0x10,%rsp
  80042010ba:	48 b8 89 07 20 04 80 	movabs $0x8004200789,%rax
  80042010c1:	00 00 00 
  80042010c4:	ff d0                	callq  *%rax
  80042010c6:	48 b8 d8 0f 20 04 80 	movabs $0x8004200fd8,%rax
  80042010cd:	00 00 00 
  80042010d0:	ff d0                	callq  *%rax
  80042010d2:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  80042010d9:	00 00 00 
  80042010dc:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  80042010e2:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  80042010e9:	00 00 00 
  80042010ec:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042010f2:	39 c2                	cmp    %eax,%edx
  80042010f4:	74 69                	je     800420115f <cons_getc+0xad>
  80042010f6:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  80042010fd:	00 00 00 
  8004201100:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201106:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201109:	48 ba 20 c0 4d 04 80 	movabs $0x80044dc020,%rdx
  8004201110:	00 00 00 
  8004201113:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  8004201119:	48 ba 20 c0 4d 04 80 	movabs $0x80044dc020,%rdx
  8004201120:	00 00 00 
  8004201123:	89 c0                	mov    %eax,%eax
  8004201125:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004201129:	0f b6 c0             	movzbl %al,%eax
  800420112c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420112f:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  8004201136:	00 00 00 
  8004201139:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  800420113f:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004201144:	75 14                	jne    800420115a <cons_getc+0xa8>
  8004201146:	48 b8 20 c0 4d 04 80 	movabs $0x80044dc020,%rax
  800420114d:	00 00 00 
  8004201150:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  8004201157:	00 00 00 
  800420115a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420115d:	eb 05                	jmp    8004201164 <cons_getc+0xb2>
  800420115f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201164:	c9                   	leaveq 
  8004201165:	c3                   	retq   

0000008004201166 <cons_putc>:
  8004201166:	55                   	push   %rbp
  8004201167:	48 89 e5             	mov    %rsp,%rbp
  800420116a:	48 83 ec 10          	sub    $0x10,%rsp
  800420116e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201171:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201174:	89 c7                	mov    %eax,%edi
  8004201176:	48 b8 b6 07 20 04 80 	movabs $0x80042007b6,%rax
  800420117d:	00 00 00 
  8004201180:	ff d0                	callq  *%rax
  8004201182:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201185:	89 c7                	mov    %eax,%edi
  8004201187:	48 b8 23 09 20 04 80 	movabs $0x8004200923,%rax
  800420118e:	00 00 00 
  8004201191:	ff d0                	callq  *%rax
  8004201193:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201196:	89 c7                	mov    %eax,%edi
  8004201198:	48 b8 c2 0a 20 04 80 	movabs $0x8004200ac2,%rax
  800420119f:	00 00 00 
  80042011a2:	ff d0                	callq  *%rax
  80042011a4:	c9                   	leaveq 
  80042011a5:	c3                   	retq   

00000080042011a6 <cons_init>:
  80042011a6:	55                   	push   %rbp
  80042011a7:	48 89 e5             	mov    %rsp,%rbp
  80042011aa:	48 b8 a8 09 20 04 80 	movabs $0x80042009a8,%rax
  80042011b1:	00 00 00 
  80042011b4:	ff d0                	callq  *%rax
  80042011b6:	48 b8 f4 0f 20 04 80 	movabs $0x8004200ff4,%rax
  80042011bd:	00 00 00 
  80042011c0:	ff d0                	callq  *%rax
  80042011c2:	48 b8 1b 08 20 04 80 	movabs $0x800420081b,%rax
  80042011c9:	00 00 00 
  80042011cc:	ff d0                	callq  *%rax
  80042011ce:	48 b8 00 c0 4d 04 80 	movabs $0x80044dc000,%rax
  80042011d5:	00 00 00 
  80042011d8:	0f b6 00             	movzbl (%rax),%eax
  80042011db:	83 f0 01             	xor    $0x1,%eax
  80042011de:	84 c0                	test   %al,%al
  80042011e0:	74 1b                	je     80042011fd <cons_init+0x57>
  80042011e2:	48 bf 02 de 21 04 80 	movabs $0x800421de02,%rdi
  80042011e9:	00 00 00 
  80042011ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042011f1:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042011f8:	00 00 00 
  80042011fb:	ff d2                	callq  *%rdx
  80042011fd:	5d                   	pop    %rbp
  80042011fe:	c3                   	retq   

00000080042011ff <cputchar>:
  80042011ff:	55                   	push   %rbp
  8004201200:	48 89 e5             	mov    %rsp,%rbp
  8004201203:	48 83 ec 10          	sub    $0x10,%rsp
  8004201207:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420120a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420120d:	89 c7                	mov    %eax,%edi
  800420120f:	48 b8 66 11 20 04 80 	movabs $0x8004201166,%rax
  8004201216:	00 00 00 
  8004201219:	ff d0                	callq  *%rax
  800420121b:	c9                   	leaveq 
  800420121c:	c3                   	retq   

000000800420121d <getchar>:
  800420121d:	55                   	push   %rbp
  800420121e:	48 89 e5             	mov    %rsp,%rbp
  8004201221:	48 83 ec 10          	sub    $0x10,%rsp
  8004201225:	48 b8 b2 10 20 04 80 	movabs $0x80042010b2,%rax
  800420122c:	00 00 00 
  800420122f:	ff d0                	callq  *%rax
  8004201231:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201234:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004201238:	74 eb                	je     8004201225 <getchar+0x8>
  800420123a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420123d:	c9                   	leaveq 
  800420123e:	c3                   	retq   

000000800420123f <iscons>:
  800420123f:	55                   	push   %rbp
  8004201240:	48 89 e5             	mov    %rsp,%rbp
  8004201243:	48 83 ec 04          	sub    $0x4,%rsp
  8004201247:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420124a:	b8 01 00 00 00       	mov    $0x1,%eax
  800420124f:	c9                   	leaveq 
  8004201250:	c3                   	retq   

0000008004201251 <mon_help>:
  8004201251:	55                   	push   %rbp
  8004201252:	48 89 e5             	mov    %rsp,%rbp
  8004201255:	48 83 ec 30          	sub    $0x30,%rsp
  8004201259:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420125c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201260:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201264:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420126b:	eb 6c                	jmp    80042012d9 <mon_help+0x88>
  800420126d:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  8004201274:	00 00 00 
  8004201277:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420127a:	48 63 d0             	movslq %eax,%rdx
  800420127d:	48 89 d0             	mov    %rdx,%rax
  8004201280:	48 01 c0             	add    %rax,%rax
  8004201283:	48 01 d0             	add    %rdx,%rax
  8004201286:	48 c1 e0 03          	shl    $0x3,%rax
  800420128a:	48 01 c8             	add    %rcx,%rax
  800420128d:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004201291:	48 be 80 55 23 04 80 	movabs $0x8004235580,%rsi
  8004201298:	00 00 00 
  800420129b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420129e:	48 63 d0             	movslq %eax,%rdx
  80042012a1:	48 89 d0             	mov    %rdx,%rax
  80042012a4:	48 01 c0             	add    %rax,%rax
  80042012a7:	48 01 d0             	add    %rdx,%rax
  80042012aa:	48 c1 e0 03          	shl    $0x3,%rax
  80042012ae:	48 01 f0             	add    %rsi,%rax
  80042012b1:	48 8b 00             	mov    (%rax),%rax
  80042012b4:	48 89 ca             	mov    %rcx,%rdx
  80042012b7:	48 89 c6             	mov    %rax,%rsi
  80042012ba:	48 bf b6 de 21 04 80 	movabs $0x800421deb6,%rdi
  80042012c1:	00 00 00 
  80042012c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012c9:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042012d0:	00 00 00 
  80042012d3:	ff d1                	callq  *%rcx
  80042012d5:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042012d9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012dc:	83 f8 03             	cmp    $0x3,%eax
  80042012df:	76 8c                	jbe    800420126d <mon_help+0x1c>
  80042012e1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012e6:	c9                   	leaveq 
  80042012e7:	c3                   	retq   

00000080042012e8 <mon_kerninfo>:
  80042012e8:	55                   	push   %rbp
  80042012e9:	48 89 e5             	mov    %rsp,%rbp
  80042012ec:	48 83 ec 30          	sub    $0x30,%rsp
  80042012f0:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042012f3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042012f7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042012fb:	48 bf bf de 21 04 80 	movabs $0x800421debf,%rdi
  8004201302:	00 00 00 
  8004201305:	b8 00 00 00 00       	mov    $0x0,%eax
  800420130a:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201311:	00 00 00 
  8004201314:	ff d2                	callq  *%rdx
  8004201316:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  800420131d:	00 00 00 
  8004201320:	48 bf d8 de 21 04 80 	movabs $0x800421ded8,%rdi
  8004201327:	00 00 00 
  800420132a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420132f:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201336:	00 00 00 
  8004201339:	ff d2                	callq  *%rdx
  800420133b:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  8004201342:	00 00 00 
  8004201345:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  800420134c:	00 00 00 
  800420134f:	48 bf 00 df 21 04 80 	movabs $0x800421df00,%rdi
  8004201356:	00 00 00 
  8004201359:	b8 00 00 00 00       	mov    $0x0,%eax
  800420135e:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  8004201365:	00 00 00 
  8004201368:	ff d1                	callq  *%rcx
  800420136a:	48 ba 20 dd 21 00 00 	movabs $0x21dd20,%rdx
  8004201371:	00 00 00 
  8004201374:	48 be 20 dd 21 04 80 	movabs $0x800421dd20,%rsi
  800420137b:	00 00 00 
  800420137e:	48 bf 28 df 21 04 80 	movabs $0x800421df28,%rdi
  8004201385:	00 00 00 
  8004201388:	b8 00 00 00 00       	mov    $0x0,%eax
  800420138d:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  8004201394:	00 00 00 
  8004201397:	ff d1                	callq  *%rcx
  8004201399:	48 ba b8 bf 4d 00 00 	movabs $0x4dbfb8,%rdx
  80042013a0:	00 00 00 
  80042013a3:	48 be b8 bf 4d 04 80 	movabs $0x80044dbfb8,%rsi
  80042013aa:	00 00 00 
  80042013ad:	48 bf 50 df 21 04 80 	movabs $0x800421df50,%rdi
  80042013b4:	00 00 00 
  80042013b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013bc:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042013c3:	00 00 00 
  80042013c6:	ff d1                	callq  *%rcx
  80042013c8:	48 ba 10 e0 71 00 00 	movabs $0x71e010,%rdx
  80042013cf:	00 00 00 
  80042013d2:	48 be 10 e0 71 04 80 	movabs $0x800471e010,%rsi
  80042013d9:	00 00 00 
  80042013dc:	48 bf 78 df 21 04 80 	movabs $0x800421df78,%rdi
  80042013e3:	00 00 00 
  80042013e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013eb:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042013f2:	00 00 00 
  80042013f5:	ff d1                	callq  *%rcx
  80042013f7:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042013fe:	00 
  80042013ff:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  8004201406:	00 00 00 
  8004201409:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420140d:	48 29 c2             	sub    %rax,%rdx
  8004201410:	48 b8 10 e0 71 04 80 	movabs $0x800471e010,%rax
  8004201417:	00 00 00 
  800420141a:	48 83 e8 01          	sub    $0x1,%rax
  800420141e:	48 01 d0             	add    %rdx,%rax
  8004201421:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201425:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201429:	ba 00 00 00 00       	mov    $0x0,%edx
  800420142e:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201432:	48 89 d0             	mov    %rdx,%rax
  8004201435:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004201439:	48 29 c2             	sub    %rax,%rdx
  800420143c:	48 89 d0             	mov    %rdx,%rax
  800420143f:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  8004201446:	48 85 c0             	test   %rax,%rax
  8004201449:	48 0f 48 c2          	cmovs  %rdx,%rax
  800420144d:	48 c1 f8 0a          	sar    $0xa,%rax
  8004201451:	48 89 c6             	mov    %rax,%rsi
  8004201454:	48 bf a0 df 21 04 80 	movabs $0x800421dfa0,%rdi
  800420145b:	00 00 00 
  800420145e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201463:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420146a:	00 00 00 
  800420146d:	ff d2                	callq  *%rdx
  800420146f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201474:	c9                   	leaveq 
  8004201475:	c3                   	retq   

0000008004201476 <mon_backtrace>:
  8004201476:	55                   	push   %rbp
  8004201477:	48 89 e5             	mov    %rsp,%rbp
  800420147a:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  8004201481:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  8004201487:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  800420148e:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004201495:	48 89 e8             	mov    %rbp,%rax
  8004201498:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  800420149c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042014a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  80042014a4:	48 89 e0             	mov    %rsp,%rax
  80042014a7:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  80042014ab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042014af:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014b3:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042014ba:	00 
  80042014bb:	74 21                	je     80042014de <mon_backtrace+0x68>
  80042014bd:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014c4:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042014c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042014cc:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014d3:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  80042014da:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014de:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80042014e5 <mon_backtrace+0x6f>
  80042014e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042014e9:	48 bf ca df 21 04 80 	movabs $0x800421dfca,%rdi
  80042014f0:	00 00 00 
  80042014f3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014f8:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042014ff:	00 00 00 
  8004201502:	ff d2                	callq  *%rdx
  8004201504:	e9 17 03 00 00       	jmpq   8004201820 <mon_backtrace+0x3aa>
  8004201509:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420150d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201511:	48 89 c6             	mov    %rax,%rsi
  8004201514:	48 bf dc df 21 04 80 	movabs $0x800421dfdc,%rdi
  800420151b:	00 00 00 
  800420151e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201523:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420152a:	00 00 00 
  800420152d:	ff d1                	callq  *%rcx
  800420152f:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  8004201536:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420153a:	48 89 d6             	mov    %rdx,%rsi
  800420153d:	48 89 c7             	mov    %rax,%rdi
  8004201540:	48 b8 d7 f7 20 04 80 	movabs $0x800420f7d7,%rax
  8004201547:	00 00 00 
  800420154a:	ff d0                	callq  *%rax
  800420154c:	85 c0                	test   %eax,%eax
  800420154e:	0f 88 9a 02 00 00    	js     80042017ee <mon_backtrace+0x378>
  8004201554:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  800420155b:	48 05 a8 00 00 00    	add    $0xa8,%rax
  8004201561:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201565:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  800420156c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201570:	48 89 d7             	mov    %rdx,%rdi
  8004201573:	48 29 c7             	sub    %rax,%rdi
  8004201576:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  800420157d:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  8004201583:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  8004201589:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  8004201590:	49 89 f9             	mov    %rdi,%r9
  8004201593:	49 89 f0             	mov    %rsi,%r8
  8004201596:	48 89 c6             	mov    %rax,%rsi
  8004201599:	48 bf f8 df 21 04 80 	movabs $0x800421dff8,%rdi
  80042015a0:	00 00 00 
  80042015a3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042015a8:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  80042015af:	00 00 00 
  80042015b2:	41 ff d2             	callq  *%r10
  80042015b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015b9:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015bd:	66 83 f8 06          	cmp    $0x6,%ax
  80042015c1:	75 15                	jne    80042015d8 <mon_backtrace+0x162>
  80042015c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015c7:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042015cf:	48 01 d0             	add    %rdx,%rax
  80042015d2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015d6:	eb 28                	jmp    8004201600 <mon_backtrace+0x18a>
  80042015d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015dc:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015e0:	66 83 f8 07          	cmp    $0x7,%ax
  80042015e4:	75 15                	jne    80042015fb <mon_backtrace+0x185>
  80042015e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015ea:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042015f2:	48 01 d0             	add    %rdx,%rax
  80042015f5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015f9:	eb 05                	jmp    8004201600 <mon_backtrace+0x18a>
  80042015fb:	e9 ee 01 00 00       	jmpq   80042017ee <mon_backtrace+0x378>
  8004201600:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201606:	89 c6                	mov    %eax,%esi
  8004201608:	48 bf 13 e0 21 04 80 	movabs $0x800421e013,%rdi
  800420160f:	00 00 00 
  8004201612:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201617:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420161e:	00 00 00 
  8004201621:	ff d2                	callq  *%rdx
  8004201623:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420162a:	e9 f2 00 00 00       	jmpq   8004201721 <mon_backtrace+0x2ab>
  800420162f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201632:	48 98                	cltq   
  8004201634:	48 83 c0 0a          	add    $0xa,%rax
  8004201638:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  800420163f:	ff 
  8004201640:	48 85 c0             	test   %rax,%rax
  8004201643:	75 35                	jne    800420167a <mon_backtrace+0x204>
  8004201645:	48 b9 1e e0 21 04 80 	movabs $0x800421e01e,%rcx
  800420164c:	00 00 00 
  800420164f:	48 ba 34 e0 21 04 80 	movabs $0x800421e034,%rdx
  8004201656:	00 00 00 
  8004201659:	be 78 00 00 00       	mov    $0x78,%esi
  800420165e:	48 bf 49 e0 21 04 80 	movabs $0x800421e049,%rdi
  8004201665:	00 00 00 
  8004201668:	b8 00 00 00 00       	mov    $0x0,%eax
  800420166d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004201674:	00 00 00 
  8004201677:	41 ff d0             	callq  *%r8
  800420167a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420167d:	48 98                	cltq   
  800420167f:	48 83 c0 0a          	add    $0xa,%rax
  8004201683:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  800420168a:	ff 
  800420168b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420168f:	48 01 d0             	add    %rdx,%rax
  8004201692:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201696:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201699:	48 98                	cltq   
  800420169b:	48 83 c0 08          	add    $0x8,%rax
  800420169f:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  80042016a6:	83 f8 02             	cmp    $0x2,%eax
  80042016a9:	74 31                	je     80042016dc <mon_backtrace+0x266>
  80042016ab:	83 f8 02             	cmp    $0x2,%eax
  80042016ae:	7f 07                	jg     80042016b7 <mon_backtrace+0x241>
  80042016b0:	83 f8 01             	cmp    $0x1,%eax
  80042016b3:	74 37                	je     80042016ec <mon_backtrace+0x276>
  80042016b5:	eb 44                	jmp    80042016fb <mon_backtrace+0x285>
  80042016b7:	83 f8 04             	cmp    $0x4,%eax
  80042016ba:	74 12                	je     80042016ce <mon_backtrace+0x258>
  80042016bc:	83 f8 08             	cmp    $0x8,%eax
  80042016bf:	75 3a                	jne    80042016fb <mon_backtrace+0x285>
  80042016c1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016c5:	48 8b 00             	mov    (%rax),%rax
  80042016c8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016cc:	eb 2d                	jmp    80042016fb <mon_backtrace+0x285>
  80042016ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016d2:	8b 00                	mov    (%rax),%eax
  80042016d4:	89 c0                	mov    %eax,%eax
  80042016d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016da:	eb 1f                	jmp    80042016fb <mon_backtrace+0x285>
  80042016dc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016e0:	0f b7 00             	movzwl (%rax),%eax
  80042016e3:	0f b7 c0             	movzwl %ax,%eax
  80042016e6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ea:	eb 0f                	jmp    80042016fb <mon_backtrace+0x285>
  80042016ec:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016f0:	0f b6 00             	movzbl (%rax),%eax
  80042016f3:	0f b6 c0             	movzbl %al,%eax
  80042016f6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016fa:	90                   	nop
  80042016fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042016ff:	48 89 c6             	mov    %rax,%rsi
  8004201702:	48 bf 5b e0 21 04 80 	movabs $0x800421e05b,%rdi
  8004201709:	00 00 00 
  800420170c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201711:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201718:	00 00 00 
  800420171b:	ff d2                	callq  *%rdx
  800420171d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201721:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  8004201727:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420172a:	0f 8f ff fe ff ff    	jg     800420162f <mon_backtrace+0x1b9>
  8004201730:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  8004201737:	0f b7 c0             	movzwl %ax,%eax
  800420173a:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420173f:	74 48                	je     8004201789 <mon_backtrace+0x313>
  8004201741:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201746:	75 17                	jne    800420175f <mon_backtrace+0x2e9>
  8004201748:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  800420174f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201753:	48 01 d0             	add    %rdx,%rax
  8004201756:	48 8b 00             	mov    (%rax),%rax
  8004201759:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420175d:	eb 2b                	jmp    800420178a <mon_backtrace+0x314>
  800420175f:	48 ba 62 e0 21 04 80 	movabs $0x800421e062,%rdx
  8004201766:	00 00 00 
  8004201769:	be 92 00 00 00       	mov    $0x92,%esi
  800420176e:	48 bf 49 e0 21 04 80 	movabs $0x800421e049,%rdi
  8004201775:	00 00 00 
  8004201778:	b8 00 00 00 00       	mov    $0x0,%eax
  800420177d:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004201784:	00 00 00 
  8004201787:	ff d1                	callq  *%rcx
  8004201789:	90                   	nop
  800420178a:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  8004201791:	0f b7 c0             	movzwl %ax,%eax
  8004201794:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  8004201799:	74 48                	je     80042017e3 <mon_backtrace+0x36d>
  800420179b:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  80042017a0:	75 17                	jne    80042017b9 <mon_backtrace+0x343>
  80042017a2:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  80042017a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017ad:	48 01 d0             	add    %rdx,%rax
  80042017b0:	48 8b 00             	mov    (%rax),%rax
  80042017b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017b7:	eb 2b                	jmp    80042017e4 <mon_backtrace+0x36e>
  80042017b9:	48 ba 62 e0 21 04 80 	movabs $0x800421e062,%rdx
  80042017c0:	00 00 00 
  80042017c3:	be 9d 00 00 00       	mov    $0x9d,%esi
  80042017c8:	48 bf 49 e0 21 04 80 	movabs $0x800421e049,%rdi
  80042017cf:	00 00 00 
  80042017d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017d7:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042017de:	00 00 00 
  80042017e1:	ff d1                	callq  *%rcx
  80042017e3:	90                   	nop
  80042017e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017e8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042017ec:	eb 17                	jmp    8004201805 <mon_backtrace+0x38f>
  80042017ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017f2:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042017f6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017fe:	48 8b 00             	mov    (%rax),%rax
  8004201801:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201805:	48 bf 73 e0 21 04 80 	movabs $0x800421e073,%rdi
  800420180c:	00 00 00 
  800420180f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201814:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420181b:	00 00 00 
  800420181e:	ff d2                	callq  *%rdx
  8004201820:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201825:	0f 85 de fc ff ff    	jne    8004201509 <mon_backtrace+0x93>
  800420182b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201830:	c9                   	leaveq 
  8004201831:	c3                   	retq   

0000008004201832 <mon_exit>:
  8004201832:	55                   	push   %rbp
  8004201833:	48 89 e5             	mov    %rsp,%rbp
  8004201836:	48 83 ec 18          	sub    $0x18,%rsp
  800420183a:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420183d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004201841:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201845:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420184a:	c9                   	leaveq 
  800420184b:	c3                   	retq   

000000800420184c <runcmd>:
  800420184c:	55                   	push   %rbp
  800420184d:	48 89 e5             	mov    %rsp,%rbp
  8004201850:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  8004201857:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800420185e:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004201865:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420186c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420186f:	48 98                	cltq   
  8004201871:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  8004201878:	ff 00 00 00 00 
  800420187d:	eb 15                	jmp    8004201894 <runcmd+0x48>
  800420187f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201886:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420188a:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  8004201891:	c6 00 00             	movb   $0x0,(%rax)
  8004201894:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420189b:	0f b6 00             	movzbl (%rax),%eax
  800420189e:	84 c0                	test   %al,%al
  80042018a0:	74 2a                	je     80042018cc <runcmd+0x80>
  80042018a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018a9:	0f b6 00             	movzbl (%rax),%eax
  80042018ac:	0f be c0             	movsbl %al,%eax
  80042018af:	89 c6                	mov    %eax,%esi
  80042018b1:	48 bf 75 e0 21 04 80 	movabs $0x800421e075,%rdi
  80042018b8:	00 00 00 
  80042018bb:	48 b8 f8 0a 21 04 80 	movabs $0x8004210af8,%rax
  80042018c2:	00 00 00 
  80042018c5:	ff d0                	callq  *%rax
  80042018c7:	48 85 c0             	test   %rax,%rax
  80042018ca:	75 b3                	jne    800420187f <runcmd+0x33>
  80042018cc:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018d3:	0f b6 00             	movzbl (%rax),%eax
  80042018d6:	84 c0                	test   %al,%al
  80042018d8:	75 21                	jne    80042018fb <runcmd+0xaf>
  80042018da:	90                   	nop
  80042018db:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042018de:	48 98                	cltq   
  80042018e0:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042018e7:	ff 00 00 00 00 
  80042018ec:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042018f0:	0f 85 a1 00 00 00    	jne    8004201997 <runcmd+0x14b>
  80042018f6:	e9 92 00 00 00       	jmpq   800420198d <runcmd+0x141>
  80042018fb:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042018ff:	75 2a                	jne    800420192b <runcmd+0xdf>
  8004201901:	be 10 00 00 00       	mov    $0x10,%esi
  8004201906:	48 bf 7a e0 21 04 80 	movabs $0x800421e07a,%rdi
  800420190d:	00 00 00 
  8004201910:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201915:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420191c:	00 00 00 
  800420191f:	ff d2                	callq  *%rdx
  8004201921:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201926:	e9 30 01 00 00       	jmpq   8004201a5b <runcmd+0x20f>
  800420192b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420192e:	8d 50 01             	lea    0x1(%rax),%edx
  8004201931:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201934:	48 98                	cltq   
  8004201936:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  800420193d:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201944:	ff 
  8004201945:	eb 08                	jmp    800420194f <runcmd+0x103>
  8004201947:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  800420194e:	01 
  800420194f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201956:	0f b6 00             	movzbl (%rax),%eax
  8004201959:	84 c0                	test   %al,%al
  800420195b:	74 2a                	je     8004201987 <runcmd+0x13b>
  800420195d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201964:	0f b6 00             	movzbl (%rax),%eax
  8004201967:	0f be c0             	movsbl %al,%eax
  800420196a:	89 c6                	mov    %eax,%esi
  800420196c:	48 bf 75 e0 21 04 80 	movabs $0x800421e075,%rdi
  8004201973:	00 00 00 
  8004201976:	48 b8 f8 0a 21 04 80 	movabs $0x8004210af8,%rax
  800420197d:	00 00 00 
  8004201980:	ff d0                	callq  *%rax
  8004201982:	48 85 c0             	test   %rax,%rax
  8004201985:	74 c0                	je     8004201947 <runcmd+0xfb>
  8004201987:	90                   	nop
  8004201988:	e9 07 ff ff ff       	jmpq   8004201894 <runcmd+0x48>
  800420198d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201992:	e9 c4 00 00 00       	jmpq   8004201a5b <runcmd+0x20f>
  8004201997:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800420199e:	e9 82 00 00 00       	jmpq   8004201a25 <runcmd+0x1d9>
  80042019a3:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  80042019aa:	00 00 00 
  80042019ad:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019b0:	48 63 d0             	movslq %eax,%rdx
  80042019b3:	48 89 d0             	mov    %rdx,%rax
  80042019b6:	48 01 c0             	add    %rax,%rax
  80042019b9:	48 01 d0             	add    %rdx,%rax
  80042019bc:	48 c1 e0 03          	shl    $0x3,%rax
  80042019c0:	48 01 c8             	add    %rcx,%rax
  80042019c3:	48 8b 10             	mov    (%rax),%rdx
  80042019c6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042019cd:	48 89 d6             	mov    %rdx,%rsi
  80042019d0:	48 89 c7             	mov    %rax,%rdi
  80042019d3:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  80042019da:	00 00 00 
  80042019dd:	ff d0                	callq  *%rax
  80042019df:	85 c0                	test   %eax,%eax
  80042019e1:	75 3e                	jne    8004201a21 <runcmd+0x1d5>
  80042019e3:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  80042019ea:	00 00 00 
  80042019ed:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019f0:	48 63 d0             	movslq %eax,%rdx
  80042019f3:	48 89 d0             	mov    %rdx,%rax
  80042019f6:	48 01 c0             	add    %rax,%rax
  80042019f9:	48 01 d0             	add    %rdx,%rax
  80042019fc:	48 c1 e0 03          	shl    $0x3,%rax
  8004201a00:	48 01 c8             	add    %rcx,%rax
  8004201a03:	48 83 c0 10          	add    $0x10,%rax
  8004201a07:	48 8b 00             	mov    (%rax),%rax
  8004201a0a:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201a11:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201a18:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201a1b:	89 cf                	mov    %ecx,%edi
  8004201a1d:	ff d0                	callq  *%rax
  8004201a1f:	eb 3a                	jmp    8004201a5b <runcmd+0x20f>
  8004201a21:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201a25:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201a28:	83 f8 03             	cmp    $0x3,%eax
  8004201a2b:	0f 86 72 ff ff ff    	jbe    80042019a3 <runcmd+0x157>
  8004201a31:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201a38:	48 89 c6             	mov    %rax,%rsi
  8004201a3b:	48 bf 97 e0 21 04 80 	movabs $0x800421e097,%rdi
  8004201a42:	00 00 00 
  8004201a45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a4a:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201a51:	00 00 00 
  8004201a54:	ff d2                	callq  *%rdx
  8004201a56:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a5b:	c9                   	leaveq 
  8004201a5c:	c3                   	retq   

0000008004201a5d <monitor>:
  8004201a5d:	55                   	push   %rbp
  8004201a5e:	48 89 e5             	mov    %rsp,%rbp
  8004201a61:	48 83 ec 20          	sub    $0x20,%rsp
  8004201a65:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201a69:	48 bf b0 e0 21 04 80 	movabs $0x800421e0b0,%rdi
  8004201a70:	00 00 00 
  8004201a73:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a78:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201a7f:	00 00 00 
  8004201a82:	ff d2                	callq  *%rdx
  8004201a84:	48 bf d8 e0 21 04 80 	movabs $0x800421e0d8,%rdi
  8004201a8b:	00 00 00 
  8004201a8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a93:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201a9a:	00 00 00 
  8004201a9d:	ff d2                	callq  *%rdx
  8004201a9f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201aa4:	74 13                	je     8004201ab9 <monitor+0x5c>
  8004201aa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201aaa:	48 89 c7             	mov    %rax,%rdi
  8004201aad:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  8004201ab4:	00 00 00 
  8004201ab7:	ff d0                	callq  *%rax
  8004201ab9:	48 bf fd e0 21 04 80 	movabs $0x800421e0fd,%rdi
  8004201ac0:	00 00 00 
  8004201ac3:	48 b8 11 07 21 04 80 	movabs $0x8004210711,%rax
  8004201aca:	00 00 00 
  8004201acd:	ff d0                	callq  *%rax
  8004201acf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201ad3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201ad8:	74 20                	je     8004201afa <monitor+0x9d>
  8004201ada:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201ade:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201ae2:	48 89 d6             	mov    %rdx,%rsi
  8004201ae5:	48 89 c7             	mov    %rax,%rdi
  8004201ae8:	48 b8 4c 18 20 04 80 	movabs $0x800420184c,%rax
  8004201aef:	00 00 00 
  8004201af2:	ff d0                	callq  *%rax
  8004201af4:	85 c0                	test   %eax,%eax
  8004201af6:	79 02                	jns    8004201afa <monitor+0x9d>
  8004201af8:	eb 02                	jmp    8004201afc <monitor+0x9f>
  8004201afa:	eb bd                	jmp    8004201ab9 <monitor+0x5c>
  8004201afc:	c9                   	leaveq 
  8004201afd:	c3                   	retq   

0000008004201afe <page2ppn>:
  8004201afe:	55                   	push   %rbp
  8004201aff:	48 89 e5             	mov    %rsp,%rbp
  8004201b02:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b06:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b0a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201b0e:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004201b15:	00 00 00 
  8004201b18:	48 8b 00             	mov    (%rax),%rax
  8004201b1b:	48 29 c2             	sub    %rax,%rdx
  8004201b1e:	48 89 d0             	mov    %rdx,%rax
  8004201b21:	48 c1 f8 04          	sar    $0x4,%rax
  8004201b25:	c9                   	leaveq 
  8004201b26:	c3                   	retq   

0000008004201b27 <page2pa>:
  8004201b27:	55                   	push   %rbp
  8004201b28:	48 89 e5             	mov    %rsp,%rbp
  8004201b2b:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b2f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b37:	48 89 c7             	mov    %rax,%rdi
  8004201b3a:	48 b8 fe 1a 20 04 80 	movabs $0x8004201afe,%rax
  8004201b41:	00 00 00 
  8004201b44:	ff d0                	callq  *%rax
  8004201b46:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201b4a:	c9                   	leaveq 
  8004201b4b:	c3                   	retq   

0000008004201b4c <pa2page>:
  8004201b4c:	55                   	push   %rbp
  8004201b4d:	48 89 e5             	mov    %rsp,%rbp
  8004201b50:	48 83 ec 10          	sub    $0x10,%rsp
  8004201b54:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b5c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b60:	48 89 c2             	mov    %rax,%rdx
  8004201b63:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004201b6a:	00 00 00 
  8004201b6d:	48 8b 00             	mov    (%rax),%rax
  8004201b70:	48 39 c2             	cmp    %rax,%rdx
  8004201b73:	72 2a                	jb     8004201b9f <pa2page+0x53>
  8004201b75:	48 ba 08 e1 21 04 80 	movabs $0x800421e108,%rdx
  8004201b7c:	00 00 00 
  8004201b7f:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201b84:	48 bf 27 e1 21 04 80 	movabs $0x800421e127,%rdi
  8004201b8b:	00 00 00 
  8004201b8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b93:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004201b9a:	00 00 00 
  8004201b9d:	ff d1                	callq  *%rcx
  8004201b9f:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004201ba6:	00 00 00 
  8004201ba9:	48 8b 00             	mov    (%rax),%rax
  8004201bac:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201bb0:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201bb4:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201bb8:	48 01 d0             	add    %rdx,%rax
  8004201bbb:	c9                   	leaveq 
  8004201bbc:	c3                   	retq   

0000008004201bbd <page2kva>:
  8004201bbd:	55                   	push   %rbp
  8004201bbe:	48 89 e5             	mov    %rsp,%rbp
  8004201bc1:	48 83 ec 20          	sub    $0x20,%rsp
  8004201bc5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201bc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201bcd:	48 89 c7             	mov    %rax,%rdi
  8004201bd0:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004201bd7:	00 00 00 
  8004201bda:	ff d0                	callq  *%rax
  8004201bdc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201be0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201be4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201be8:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201beb:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201bee:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004201bf5:	00 00 00 
  8004201bf8:	48 8b 00             	mov    (%rax),%rax
  8004201bfb:	48 39 c2             	cmp    %rax,%rdx
  8004201bfe:	72 32                	jb     8004201c32 <page2kva+0x75>
  8004201c00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c04:	48 89 c1             	mov    %rax,%rcx
  8004201c07:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004201c0e:	00 00 00 
  8004201c11:	be 62 00 00 00       	mov    $0x62,%esi
  8004201c16:	48 bf 27 e1 21 04 80 	movabs $0x800421e127,%rdi
  8004201c1d:	00 00 00 
  8004201c20:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201c25:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004201c2c:	00 00 00 
  8004201c2f:	41 ff d0             	callq  *%r8
  8004201c32:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201c39:	00 00 00 
  8004201c3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c40:	48 01 d0             	add    %rdx,%rax
  8004201c43:	c9                   	leaveq 
  8004201c44:	c3                   	retq   

0000008004201c45 <restrictive_type>:
  8004201c45:	55                   	push   %rbp
  8004201c46:	48 89 e5             	mov    %rsp,%rbp
  8004201c49:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c4d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201c50:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201c53:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201c57:	74 06                	je     8004201c5f <restrictive_type+0x1a>
  8004201c59:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201c5d:	75 07                	jne    8004201c66 <restrictive_type+0x21>
  8004201c5f:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201c64:	eb 3e                	jmp    8004201ca4 <restrictive_type+0x5f>
  8004201c66:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201c6a:	74 06                	je     8004201c72 <restrictive_type+0x2d>
  8004201c6c:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201c70:	75 07                	jne    8004201c79 <restrictive_type+0x34>
  8004201c72:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201c77:	eb 2b                	jmp    8004201ca4 <restrictive_type+0x5f>
  8004201c79:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201c7d:	74 06                	je     8004201c85 <restrictive_type+0x40>
  8004201c7f:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201c83:	75 07                	jne    8004201c8c <restrictive_type+0x47>
  8004201c85:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201c8a:	eb 18                	jmp    8004201ca4 <restrictive_type+0x5f>
  8004201c8c:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201c90:	74 06                	je     8004201c98 <restrictive_type+0x53>
  8004201c92:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201c96:	75 07                	jne    8004201c9f <restrictive_type+0x5a>
  8004201c98:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201c9d:	eb 05                	jmp    8004201ca4 <restrictive_type+0x5f>
  8004201c9f:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201ca4:	c9                   	leaveq 
  8004201ca5:	c3                   	retq   

0000008004201ca6 <nvram_read>:
  8004201ca6:	55                   	push   %rbp
  8004201ca7:	48 89 e5             	mov    %rsp,%rbp
  8004201caa:	53                   	push   %rbx
  8004201cab:	48 83 ec 18          	sub    $0x18,%rsp
  8004201caf:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201cb2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cb5:	89 c7                	mov    %eax,%edi
  8004201cb7:	48 b8 07 99 20 04 80 	movabs $0x8004209907,%rax
  8004201cbe:	00 00 00 
  8004201cc1:	ff d0                	callq  *%rax
  8004201cc3:	89 c3                	mov    %eax,%ebx
  8004201cc5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cc8:	83 c0 01             	add    $0x1,%eax
  8004201ccb:	89 c7                	mov    %eax,%edi
  8004201ccd:	48 b8 07 99 20 04 80 	movabs $0x8004209907,%rax
  8004201cd4:	00 00 00 
  8004201cd7:	ff d0                	callq  *%rax
  8004201cd9:	c1 e0 08             	shl    $0x8,%eax
  8004201cdc:	09 d8                	or     %ebx,%eax
  8004201cde:	48 83 c4 18          	add    $0x18,%rsp
  8004201ce2:	5b                   	pop    %rbx
  8004201ce3:	5d                   	pop    %rbp
  8004201ce4:	c3                   	retq   

0000008004201ce5 <multiboot_read>:
  8004201ce5:	55                   	push   %rbp
  8004201ce6:	48 89 e5             	mov    %rsp,%rbp
  8004201ce9:	41 54                	push   %r12
  8004201ceb:	53                   	push   %rbx
  8004201cec:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201cf3:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201cfa:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201d01:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201d08:	48 89 e0             	mov    %rsp,%rax
  8004201d0b:	49 89 c4             	mov    %rax,%r12
  8004201d0e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d15:	8b 40 30             	mov    0x30(%rax),%eax
  8004201d18:	89 c0                	mov    %eax,%eax
  8004201d1a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201d1e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d25:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201d28:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201d2d:	f7 e2                	mul    %edx
  8004201d2f:	89 d0                	mov    %edx,%eax
  8004201d31:	c1 e8 04             	shr    $0x4,%eax
  8004201d34:	89 c0                	mov    %eax,%eax
  8004201d36:	48 89 c2             	mov    %rax,%rdx
  8004201d39:	48 83 ea 01          	sub    $0x1,%rdx
  8004201d3d:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201d41:	49 89 c0             	mov    %rax,%r8
  8004201d44:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201d4a:	48 89 c1             	mov    %rax,%rcx
  8004201d4d:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201d52:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d56:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201d5a:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201d5f:	48 83 e8 01          	sub    $0x1,%rax
  8004201d63:	48 01 d0             	add    %rdx,%rax
  8004201d66:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201d6b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201d70:	48 f7 f3             	div    %rbx
  8004201d73:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201d77:	48 29 c4             	sub    %rax,%rsp
  8004201d7a:	48 89 e0             	mov    %rsp,%rax
  8004201d7d:	48 83 c0 07          	add    $0x7,%rax
  8004201d81:	48 c1 e8 03          	shr    $0x3,%rax
  8004201d85:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d89:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201d8d:	48 bf 5b e1 21 04 80 	movabs $0x800421e15b,%rdi
  8004201d94:	00 00 00 
  8004201d97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d9c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201da3:	00 00 00 
  8004201da6:	ff d2                	callq  *%rdx
  8004201da8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201daf:	e9 6c 01 00 00       	jmpq   8004201f20 <multiboot_read+0x23b>
  8004201db4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201db7:	48 63 d0             	movslq %eax,%rdx
  8004201dba:	48 89 d0             	mov    %rdx,%rax
  8004201dbd:	48 01 c0             	add    %rax,%rax
  8004201dc0:	48 01 d0             	add    %rdx,%rax
  8004201dc3:	48 c1 e0 03          	shl    $0x3,%rax
  8004201dc7:	48 89 c2             	mov    %rax,%rdx
  8004201dca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201dce:	48 01 d0             	add    %rdx,%rax
  8004201dd1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201dd5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dd9:	8b 40 08             	mov    0x8(%rax),%eax
  8004201ddc:	89 c0                	mov    %eax,%eax
  8004201dde:	48 c1 e0 20          	shl    $0x20,%rax
  8004201de2:	48 89 c2             	mov    %rax,%rdx
  8004201de5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201de9:	8b 40 04             	mov    0x4(%rax),%eax
  8004201dec:	89 c0                	mov    %eax,%eax
  8004201dee:	48 01 d0             	add    %rdx,%rax
  8004201df1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201df5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201df9:	8b 40 10             	mov    0x10(%rax),%eax
  8004201dfc:	89 c0                	mov    %eax,%eax
  8004201dfe:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e02:	48 89 c2             	mov    %rax,%rdx
  8004201e05:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e09:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201e0c:	89 c0                	mov    %eax,%eax
  8004201e0e:	48 01 d0             	add    %rdx,%rax
  8004201e11:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201e15:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e19:	8b 70 14             	mov    0x14(%rax),%esi
  8004201e1c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e20:	8b 00                	mov    (%rax),%eax
  8004201e22:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201e26:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201e2a:	41 89 f0             	mov    %esi,%r8d
  8004201e2d:	89 c6                	mov    %eax,%esi
  8004201e2f:	48 bf 70 e1 21 04 80 	movabs $0x800421e170,%rdi
  8004201e36:	00 00 00 
  8004201e39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201e3e:	49 b9 83 9c 20 04 80 	movabs $0x8004209c83,%r9
  8004201e45:	00 00 00 
  8004201e48:	41 ff d1             	callq  *%r9
  8004201e4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e4f:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e52:	83 f8 05             	cmp    $0x5,%eax
  8004201e55:	77 0b                	ja     8004201e62 <multiboot_read+0x17d>
  8004201e57:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e5b:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e5e:	85 c0                	test   %eax,%eax
  8004201e60:	75 0b                	jne    8004201e6d <multiboot_read+0x188>
  8004201e62:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e66:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201e6d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201e74:	e9 85 00 00 00       	jmpq   8004201efe <multiboot_read+0x219>
  8004201e79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201e7d:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201e80:	48 63 d2             	movslq %edx,%rdx
  8004201e83:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201e87:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201e8b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e8f:	8b 40 08             	mov    0x8(%rax),%eax
  8004201e92:	89 c0                	mov    %eax,%eax
  8004201e94:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e98:	48 89 c2             	mov    %rax,%rdx
  8004201e9b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e9f:	8b 40 04             	mov    0x4(%rax),%eax
  8004201ea2:	89 c0                	mov    %eax,%eax
  8004201ea4:	48 01 d0             	add    %rdx,%rax
  8004201ea7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201eab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201eaf:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201eb3:	76 45                	jbe    8004201efa <multiboot_read+0x215>
  8004201eb5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201eb8:	83 c0 01             	add    $0x1,%eax
  8004201ebb:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201ebe:	eb 30                	jmp    8004201ef0 <multiboot_read+0x20b>
  8004201ec0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ec4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004201ec7:	48 63 d2             	movslq %edx,%rdx
  8004201eca:	48 c1 e2 03          	shl    $0x3,%rdx
  8004201ece:	48 01 c2             	add    %rax,%rdx
  8004201ed1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ed5:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004201ed8:	48 63 c9             	movslq %ecx,%rcx
  8004201edb:	48 c1 e1 03          	shl    $0x3,%rcx
  8004201edf:	48 83 e9 08          	sub    $0x8,%rcx
  8004201ee3:	48 01 c8             	add    %rcx,%rax
  8004201ee6:	48 8b 00             	mov    (%rax),%rax
  8004201ee9:	48 89 02             	mov    %rax,(%rdx)
  8004201eec:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  8004201ef0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004201ef3:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004201ef6:	75 c8                	jne    8004201ec0 <multiboot_read+0x1db>
  8004201ef8:	eb 10                	jmp    8004201f0a <multiboot_read+0x225>
  8004201efa:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  8004201efe:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004201f01:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004201f04:	0f 8c 6f ff ff ff    	jl     8004201e79 <multiboot_read+0x194>
  8004201f0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f0e:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201f11:	48 63 d2             	movslq %edx,%rdx
  8004201f14:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004201f18:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004201f1c:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201f20:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f23:	48 63 c8             	movslq %eax,%rcx
  8004201f26:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201f2d:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201f30:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201f35:	f7 e2                	mul    %edx
  8004201f37:	89 d0                	mov    %edx,%eax
  8004201f39:	c1 e8 04             	shr    $0x4,%eax
  8004201f3c:	89 c0                	mov    %eax,%eax
  8004201f3e:	48 39 c1             	cmp    %rax,%rcx
  8004201f41:	0f 82 6d fe ff ff    	jb     8004201db4 <multiboot_read+0xcf>
  8004201f47:	48 bf a7 e1 21 04 80 	movabs $0x800421e1a7,%rdi
  8004201f4e:	00 00 00 
  8004201f51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f56:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004201f5d:	00 00 00 
  8004201f60:	ff d2                	callq  *%rdx
  8004201f62:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  8004201f69:	e9 93 01 00 00       	jmpq   8004202101 <multiboot_read+0x41c>
  8004201f6e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f71:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004201f74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f78:	48 63 d2             	movslq %edx,%rdx
  8004201f7b:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f7f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004201f83:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f87:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004201f8a:	48 63 d2             	movslq %edx,%rdx
  8004201f8d:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f91:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004201f95:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f99:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f9c:	89 c0                	mov    %eax,%eax
  8004201f9e:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fa2:	48 89 c2             	mov    %rax,%rdx
  8004201fa5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201fa9:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fac:	89 c0                	mov    %eax,%eax
  8004201fae:	48 01 d0             	add    %rdx,%rax
  8004201fb1:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004201fb5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fb9:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fbc:	89 c0                	mov    %eax,%eax
  8004201fbe:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fc2:	48 89 c2             	mov    %rax,%rdx
  8004201fc5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fc9:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fcc:	89 c0                	mov    %eax,%eax
  8004201fce:	48 01 d0             	add    %rdx,%rax
  8004201fd1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004201fd5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fd9:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fdc:	89 c0                	mov    %eax,%eax
  8004201fde:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fe2:	48 89 c2             	mov    %rax,%rdx
  8004201fe5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fe9:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201fec:	89 c0                	mov    %eax,%eax
  8004201fee:	48 01 d0             	add    %rdx,%rax
  8004201ff1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004201ff8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201ffc:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fff:	89 c0                	mov    %eax,%eax
  8004202001:	48 c1 e0 20          	shl    $0x20,%rax
  8004202005:	48 89 c2             	mov    %rax,%rdx
  8004202008:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420200c:	8b 40 0c             	mov    0xc(%rax),%eax
  800420200f:	89 c0                	mov    %eax,%eax
  8004202011:	48 01 d0             	add    %rdx,%rax
  8004202014:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800420201b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202022:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004202026:	48 01 d0             	add    %rdx,%rax
  8004202029:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  800420202d:	75 7c                	jne    80042020ab <multiboot_read+0x3c6>
  800420202f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202033:	8b 50 14             	mov    0x14(%rax),%edx
  8004202036:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420203a:	8b 40 14             	mov    0x14(%rax),%eax
  800420203d:	39 c2                	cmp    %eax,%edx
  800420203f:	75 6a                	jne    80042020ab <multiboot_read+0x3c6>
  8004202041:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202048:	89 c2                	mov    %eax,%edx
  800420204a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202051:	01 c2                	add    %eax,%edx
  8004202053:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202057:	89 50 0c             	mov    %edx,0xc(%rax)
  800420205a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202061:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004202068:	48 01 d0             	add    %rdx,%rax
  800420206b:	48 c1 e8 20          	shr    $0x20,%rax
  800420206f:	89 c2                	mov    %eax,%edx
  8004202071:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202075:	89 50 10             	mov    %edx,0x10(%rax)
  8004202078:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420207c:	8b 50 04             	mov    0x4(%rax),%edx
  800420207f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202083:	89 50 04             	mov    %edx,0x4(%rax)
  8004202086:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420208a:	8b 50 08             	mov    0x8(%rax),%edx
  800420208d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202091:	89 50 08             	mov    %edx,0x8(%rax)
  8004202094:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202097:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420209a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420209e:	48 63 d2             	movslq %edx,%rdx
  80042020a1:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  80042020a8:	00 
  80042020a9:	eb 52                	jmp    80042020fd <multiboot_read+0x418>
  80042020ab:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042020b2:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042020b6:	48 01 d0             	add    %rdx,%rax
  80042020b9:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042020bd:	76 3e                	jbe    80042020fd <multiboot_read+0x418>
  80042020bf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020c3:	8b 50 14             	mov    0x14(%rax),%edx
  80042020c6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020ca:	8b 40 14             	mov    0x14(%rax),%eax
  80042020cd:	89 d6                	mov    %edx,%esi
  80042020cf:	89 c7                	mov    %eax,%edi
  80042020d1:	48 b8 45 1c 20 04 80 	movabs $0x8004201c45,%rax
  80042020d8:	00 00 00 
  80042020db:	ff d0                	callq  *%rax
  80042020dd:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  80042020e3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020e7:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020ed:	89 50 14             	mov    %edx,0x14(%rax)
  80042020f0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020f4:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020fa:	89 50 14             	mov    %edx,0x14(%rax)
  80042020fd:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202101:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202104:	48 63 c8             	movslq %eax,%rcx
  8004202107:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420210e:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202111:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202116:	f7 e2                	mul    %edx
  8004202118:	89 d0                	mov    %edx,%eax
  800420211a:	c1 e8 04             	shr    $0x4,%eax
  800420211d:	89 c0                	mov    %eax,%eax
  800420211f:	48 39 c1             	cmp    %rax,%rcx
  8004202122:	0f 82 46 fe ff ff    	jb     8004201f6e <multiboot_read+0x289>
  8004202128:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420212f:	e9 dc 00 00 00       	jmpq   8004202210 <multiboot_read+0x52b>
  8004202134:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202138:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420213b:	48 63 d2             	movslq %edx,%rdx
  800420213e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004202142:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004202149:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004202150:	00 
  8004202151:	0f 84 b5 00 00 00    	je     800420220c <multiboot_read+0x527>
  8004202157:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420215e:	8b 40 14             	mov    0x14(%rax),%eax
  8004202161:	83 f8 01             	cmp    $0x1,%eax
  8004202164:	74 13                	je     8004202179 <multiboot_read+0x494>
  8004202166:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420216d:	8b 40 14             	mov    0x14(%rax),%eax
  8004202170:	83 f8 03             	cmp    $0x3,%eax
  8004202173:	0f 85 93 00 00 00    	jne    800420220c <multiboot_read+0x527>
  8004202179:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202180:	8b 40 04             	mov    0x4(%rax),%eax
  8004202183:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  8004202188:	77 49                	ja     80042021d3 <multiboot_read+0x4ee>
  800420218a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202191:	8b 40 08             	mov    0x8(%rax),%eax
  8004202194:	85 c0                	test   %eax,%eax
  8004202196:	75 3b                	jne    80042021d3 <multiboot_read+0x4ee>
  8004202198:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800420219f:	48 8b 10             	mov    (%rax),%rdx
  80042021a2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021a9:	8b 40 10             	mov    0x10(%rax),%eax
  80042021ac:	89 c0                	mov    %eax,%eax
  80042021ae:	48 c1 e0 20          	shl    $0x20,%rax
  80042021b2:	48 89 c1             	mov    %rax,%rcx
  80042021b5:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021bc:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021bf:	89 c0                	mov    %eax,%eax
  80042021c1:	48 01 c8             	add    %rcx,%rax
  80042021c4:	48 01 c2             	add    %rax,%rdx
  80042021c7:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042021ce:	48 89 10             	mov    %rdx,(%rax)
  80042021d1:	eb 39                	jmp    800420220c <multiboot_read+0x527>
  80042021d3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021da:	48 8b 10             	mov    (%rax),%rdx
  80042021dd:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021e4:	8b 40 10             	mov    0x10(%rax),%eax
  80042021e7:	89 c0                	mov    %eax,%eax
  80042021e9:	48 c1 e0 20          	shl    $0x20,%rax
  80042021ed:	48 89 c1             	mov    %rax,%rcx
  80042021f0:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021f7:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021fa:	89 c0                	mov    %eax,%eax
  80042021fc:	48 01 c8             	add    %rcx,%rax
  80042021ff:	48 01 c2             	add    %rax,%rdx
  8004202202:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004202209:	48 89 10             	mov    %rdx,(%rax)
  800420220c:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202210:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202213:	48 63 c8             	movslq %eax,%rcx
  8004202216:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420221d:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202220:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202225:	f7 e2                	mul    %edx
  8004202227:	89 d0                	mov    %edx,%eax
  8004202229:	c1 e8 04             	shr    $0x4,%eax
  800420222c:	89 c0                	mov    %eax,%eax
  800420222e:	48 39 c1             	cmp    %rax,%rcx
  8004202231:	0f 82 fd fe ff ff    	jb     8004202134 <multiboot_read+0x44f>
  8004202237:	4c 89 e4             	mov    %r12,%rsp
  800420223a:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  800420223e:	5b                   	pop    %rbx
  800420223f:	41 5c                	pop    %r12
  8004202241:	5d                   	pop    %rbp
  8004202242:	c3                   	retq   

0000008004202243 <i386_detect_memory>:
  8004202243:	55                   	push   %rbp
  8004202244:	48 89 e5             	mov    %rsp,%rbp
  8004202247:	48 83 ec 50          	sub    $0x50,%rsp
  800420224b:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004202252:	00 
  8004202253:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800420225a:	00 
  800420225b:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  8004202262:	00 00 00 
  8004202265:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202269:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420226d:	48 8b 00             	mov    (%rax),%rax
  8004202270:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202274:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202279:	74 2d                	je     80042022a8 <i386_detect_memory+0x65>
  800420227b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420227f:	8b 00                	mov    (%rax),%eax
  8004202281:	83 e0 40             	and    $0x40,%eax
  8004202284:	85 c0                	test   %eax,%eax
  8004202286:	74 20                	je     80042022a8 <i386_detect_memory+0x65>
  8004202288:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  800420228c:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  8004202290:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202294:	48 89 ce             	mov    %rcx,%rsi
  8004202297:	48 89 c7             	mov    %rax,%rdi
  800420229a:	48 b8 e5 1c 20 04 80 	movabs $0x8004201ce5,%rax
  80042022a1:	00 00 00 
  80042022a4:	ff d0                	callq  *%rax
  80042022a6:	eb 34                	jmp    80042022dc <i386_detect_memory+0x99>
  80042022a8:	bf 15 00 00 00       	mov    $0x15,%edi
  80042022ad:	48 b8 a6 1c 20 04 80 	movabs $0x8004201ca6,%rax
  80042022b4:	00 00 00 
  80042022b7:	ff d0                	callq  *%rax
  80042022b9:	c1 e0 0a             	shl    $0xa,%eax
  80042022bc:	48 98                	cltq   
  80042022be:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042022c2:	bf 17 00 00 00       	mov    $0x17,%edi
  80042022c7:	48 b8 a6 1c 20 04 80 	movabs $0x8004201ca6,%rax
  80042022ce:	00 00 00 
  80042022d1:	ff d0                	callq  *%rax
  80042022d3:	c1 e0 0a             	shl    $0xa,%eax
  80042022d6:	48 98                	cltq   
  80042022d8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042022dc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042022e0:	48 85 c0             	test   %rax,%rax
  80042022e3:	75 35                	jne    800420231a <i386_detect_memory+0xd7>
  80042022e5:	48 b9 a9 e1 21 04 80 	movabs $0x800421e1a9,%rcx
  80042022ec:	00 00 00 
  80042022ef:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042022f6:	00 00 00 
  80042022f9:	be 8b 00 00 00       	mov    $0x8b,%esi
  80042022fe:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004202305:	00 00 00 
  8004202308:	b8 00 00 00 00       	mov    $0x0,%eax
  800420230d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202314:	00 00 00 
  8004202317:	41 ff d0             	callq  *%r8
  800420231a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420231e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202322:	48 89 c2             	mov    %rax,%rdx
  8004202325:	48 b8 30 c2 4d 04 80 	movabs $0x80044dc230,%rax
  800420232c:	00 00 00 
  800420232f:	48 89 10             	mov    %rdx,(%rax)
  8004202332:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202336:	48 c1 e8 0c          	shr    $0xc,%rax
  800420233a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420233e:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202343:	48 b8 a6 1c 20 04 80 	movabs $0x8004201ca6,%rax
  800420234a:	00 00 00 
  800420234d:	ff d0                	callq  *%rax
  800420234f:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202354:	75 2c                	jne    8004202382 <i386_detect_memory+0x13f>
  8004202356:	bf 34 00 00 00       	mov    $0x34,%edi
  800420235b:	48 b8 a6 1c 20 04 80 	movabs $0x8004201ca6,%rax
  8004202362:	00 00 00 
  8004202365:	ff d0                	callq  *%rax
  8004202367:	c1 e0 10             	shl    $0x10,%eax
  800420236a:	48 98                	cltq   
  800420236c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202370:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202374:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  800420237a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420237e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202382:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202387:	74 1a                	je     80042023a3 <i386_detect_memory+0x160>
  8004202389:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420238d:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  8004202394:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420239b:	00 00 00 
  800420239e:	48 89 10             	mov    %rdx,(%rax)
  80042023a1:	eb 1a                	jmp    80042023bd <i386_detect_memory+0x17a>
  80042023a3:	48 b8 30 c2 4d 04 80 	movabs $0x80044dc230,%rax
  80042023aa:	00 00 00 
  80042023ad:	48 8b 10             	mov    (%rax),%rdx
  80042023b0:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042023b7:	00 00 00 
  80042023ba:	48 89 10             	mov    %rdx,(%rax)
  80042023bd:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042023c4:	00 00 00 
  80042023c7:	48 8b 30             	mov    (%rax),%rsi
  80042023ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023ce:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023d2:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023d6:	48 89 c1             	mov    %rax,%rcx
  80042023d9:	48 b8 30 c2 4d 04 80 	movabs $0x80044dc230,%rax
  80042023e0:	00 00 00 
  80042023e3:	48 8b 00             	mov    (%rax),%rax
  80042023e6:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023ea:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023ee:	48 89 c2             	mov    %rax,%rdx
  80042023f1:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042023f8:	00 00 00 
  80042023fb:	48 8b 00             	mov    (%rax),%rax
  80042023fe:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202402:	48 c1 e8 14          	shr    $0x14,%rax
  8004202406:	49 89 f0             	mov    %rsi,%r8
  8004202409:	48 89 c6             	mov    %rax,%rsi
  800420240c:	48 bf d8 e1 21 04 80 	movabs $0x800421e1d8,%rdi
  8004202413:	00 00 00 
  8004202416:	b8 00 00 00 00       	mov    $0x0,%eax
  800420241b:	49 b9 83 9c 20 04 80 	movabs $0x8004209c83,%r9
  8004202422:	00 00 00 
  8004202425:	41 ff d1             	callq  *%r9
  8004202428:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  800420242f:	00 
  8004202430:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  8004202437:	07 
  8004202438:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420243c:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202440:	48 c1 e8 14          	shr    $0x14,%rax
  8004202444:	48 89 c1             	mov    %rax,%rcx
  8004202447:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420244b:	48 c1 e0 0c          	shl    $0xc,%rax
  800420244f:	48 c1 e8 14          	shr    $0x14,%rax
  8004202453:	48 89 c6             	mov    %rax,%rsi
  8004202456:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420245a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420245e:	49 89 c8             	mov    %rcx,%r8
  8004202461:	48 89 d1             	mov    %rdx,%rcx
  8004202464:	48 89 f2             	mov    %rsi,%rdx
  8004202467:	48 89 c6             	mov    %rax,%rsi
  800420246a:	48 bf 28 e2 21 04 80 	movabs $0x800421e228,%rdi
  8004202471:	00 00 00 
  8004202474:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202479:	49 b9 83 9c 20 04 80 	movabs $0x8004209c83,%r9
  8004202480:	00 00 00 
  8004202483:	41 ff d1             	callq  *%r9
  8004202486:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420248a:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420248e:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  8004202493:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202497:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420249e:	00 00 00 
  80042024a1:	48 8b 00             	mov    (%rax),%rax
  80042024a4:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042024a8:	76 3a                	jbe    80042024e4 <i386_detect_memory+0x2a1>
  80042024aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024ae:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042024b5:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042024bc:	00 00 00 
  80042024bf:	48 89 10             	mov    %rdx,(%rax)
  80042024c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024c6:	48 89 c6             	mov    %rax,%rsi
  80042024c9:	48 bf 90 e2 21 04 80 	movabs $0x800421e290,%rdi
  80042024d0:	00 00 00 
  80042024d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042024d8:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042024df:	00 00 00 
  80042024e2:	ff d2                	callq  *%rdx
  80042024e4:	c9                   	leaveq 
  80042024e5:	c3                   	retq   

00000080042024e6 <boot_alloc>:
  80042024e6:	55                   	push   %rbp
  80042024e7:	48 89 e5             	mov    %rsp,%rbp
  80042024ea:	48 83 ec 40          	sub    $0x40,%rsp
  80042024ee:	89 7d cc             	mov    %edi,-0x34(%rbp)
  80042024f1:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  80042024f8:	00 00 00 
  80042024fb:	48 8b 00             	mov    (%rax),%rax
  80042024fe:	48 85 c0             	test   %rax,%rax
  8004202501:	75 4e                	jne    8004202551 <boot_alloc+0x6b>
  8004202503:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  800420250a:	00 
  800420250b:	48 b8 d0 b5 6d 04 80 	movabs $0x80046db5d0,%rax
  8004202512:	00 00 00 
  8004202515:	48 8b 10             	mov    (%rax),%rdx
  8004202518:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420251c:	48 01 d0             	add    %rdx,%rax
  800420251f:	48 83 e8 01          	sub    $0x1,%rax
  8004202523:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202527:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420252b:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202530:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004202534:	48 89 d0             	mov    %rdx,%rax
  8004202537:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420253b:	48 29 c2             	sub    %rax,%rdx
  800420253e:	48 89 d0             	mov    %rdx,%rax
  8004202541:	48 89 c2             	mov    %rax,%rdx
  8004202544:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  800420254b:	00 00 00 
  800420254e:	48 89 10             	mov    %rdx,(%rax)
  8004202551:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004202554:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  800420255b:	00 00 00 
  800420255e:	48 8b 00             	mov    (%rax),%rax
  8004202561:	48 01 c2             	add    %rax,%rdx
  8004202564:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  800420256b:	00 00 00 
  800420256e:	48 8b 00             	mov    (%rax),%rax
  8004202571:	48 39 c2             	cmp    %rax,%rdx
  8004202574:	72 2f                	jb     80042025a5 <boot_alloc+0xbf>
  8004202576:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  800420257d:	00 00 00 
  8004202580:	48 8b 10             	mov    (%rax),%rdx
  8004202583:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004202586:	48 01 c2             	add    %rax,%rdx
  8004202589:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202590:	00 00 00 
  8004202593:	48 8b 00             	mov    (%rax),%rax
  8004202596:	48 05 00 40 00 08    	add    $0x8004000,%rax
  800420259c:	48 c1 e0 0c          	shl    $0xc,%rax
  80042025a0:	48 39 c2             	cmp    %rax,%rdx
  80042025a3:	76 2a                	jbe    80042025cf <boot_alloc+0xe9>
  80042025a5:	48 ba c0 e2 21 04 80 	movabs $0x800421e2c0,%rdx
  80042025ac:	00 00 00 
  80042025af:	be f3 00 00 00       	mov    $0xf3,%esi
  80042025b4:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042025bb:	00 00 00 
  80042025be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025c3:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042025ca:	00 00 00 
  80042025cd:	ff d1                	callq  *%rcx
  80042025cf:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  80042025d6:	00 00 00 
  80042025d9:	48 8b 00             	mov    (%rax),%rax
  80042025dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042025e0:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  80042025e7:	00 
  80042025e8:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  80042025ef:	00 00 00 
  80042025f2:	48 8b 10             	mov    (%rax),%rdx
  80042025f5:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042025f8:	48 01 d0             	add    %rdx,%rax
  80042025fb:	48 89 c2             	mov    %rax,%rdx
  80042025fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202602:	48 01 d0             	add    %rdx,%rax
  8004202605:	48 83 e8 01          	sub    $0x1,%rax
  8004202609:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420260d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202611:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202616:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420261a:	48 89 d0             	mov    %rdx,%rax
  800420261d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004202621:	48 29 c2             	sub    %rax,%rdx
  8004202624:	48 89 d0             	mov    %rdx,%rax
  8004202627:	48 89 c2             	mov    %rax,%rdx
  800420262a:	48 b8 48 c2 4d 04 80 	movabs $0x80044dc248,%rax
  8004202631:	00 00 00 
  8004202634:	48 89 10             	mov    %rdx,(%rax)
  8004202637:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420263b:	c9                   	leaveq 
  800420263c:	c3                   	retq   

000000800420263d <x64_vm_init>:
  800420263d:	55                   	push   %rbp
  800420263e:	48 89 e5             	mov    %rsp,%rbp
  8004202641:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004202645:	48 b8 43 22 20 04 80 	movabs $0x8004202243,%rax
  800420264c:	00 00 00 
  800420264f:	ff d0                	callq  *%rax
  8004202651:	bf 00 10 00 00       	mov    $0x1000,%edi
  8004202656:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  800420265d:	00 00 00 
  8004202660:	ff d0                	callq  *%rax
  8004202662:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420266a:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420266f:	be 00 00 00 00       	mov    $0x0,%esi
  8004202674:	48 89 c7             	mov    %rax,%rdi
  8004202677:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  800420267e:	00 00 00 
  8004202681:	ff d0                	callq  *%rax
  8004202683:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420268a:	00 00 00 
  800420268d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202691:	48 89 10             	mov    %rdx,(%rax)
  8004202694:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202698:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420269c:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042026a3:	00 00 00 
  80042026a6:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042026aa:	77 32                	ja     80042026de <x64_vm_init+0xa1>
  80042026ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026b0:	48 89 c1             	mov    %rax,%rcx
  80042026b3:	48 ba e8 e2 21 04 80 	movabs $0x800421e2e8,%rdx
  80042026ba:	00 00 00 
  80042026bd:	be 18 01 00 00       	mov    $0x118,%esi
  80042026c2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042026c9:	00 00 00 
  80042026cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026d1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042026d8:	00 00 00 
  80042026db:	41 ff d0             	callq  *%r8
  80042026de:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042026e5:	ff ff ff 
  80042026e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026ec:	48 01 c2             	add    %rax,%rdx
  80042026ef:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  80042026f6:	00 00 00 
  80042026f9:	48 89 10             	mov    %rdx,(%rax)
  80042026fc:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202703:	00 00 00 
  8004202706:	48 8b 00             	mov    (%rax),%rax
  8004202709:	48 c1 e0 04          	shl    $0x4,%rax
  800420270d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202711:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202715:	89 c7                	mov    %eax,%edi
  8004202717:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  800420271e:	00 00 00 
  8004202721:	ff d0                	callq  *%rax
  8004202723:	48 ba 00 b6 6d 04 80 	movabs $0x80046db600,%rdx
  800420272a:	00 00 00 
  800420272d:	48 89 02             	mov    %rax,(%rdx)
  8004202730:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202737:	00 00 00 
  800420273a:	48 8b 00             	mov    (%rax),%rax
  800420273d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202741:	be 00 00 00 00       	mov    $0x0,%esi
  8004202746:	48 89 c7             	mov    %rax,%rdi
  8004202749:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004202750:	00 00 00 
  8004202753:	ff d0                	callq  *%rax
  8004202755:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  800420275a:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  8004202761:	00 00 00 
  8004202764:	ff d0                	callq  *%rax
  8004202766:	48 ba 58 c2 4d 04 80 	movabs $0x80044dc258,%rdx
  800420276d:	00 00 00 
  8004202770:	48 89 02             	mov    %rax,(%rdx)
  8004202773:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420277a:	00 00 00 
  800420277d:	48 8b 00             	mov    (%rax),%rax
  8004202780:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  8004202785:	be 00 00 00 00       	mov    $0x0,%esi
  800420278a:	48 89 c7             	mov    %rax,%rdi
  800420278d:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004202794:	00 00 00 
  8004202797:	ff d0                	callq  *%rax
  8004202799:	48 b8 f7 2b 20 04 80 	movabs $0x8004202bf7,%rax
  80042027a0:	00 00 00 
  80042027a3:	ff d0                	callq  *%rax
  80042027a5:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042027ac:	00 00 00 
  80042027af:	48 8b 00             	mov    (%rax),%rax
  80042027b2:	48 c1 e0 04          	shl    $0x4,%rax
  80042027b6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042027ba:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  80042027c1:	00 00 00 
  80042027c4:	48 8b 00             	mov    (%rax),%rax
  80042027c7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042027cb:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027d2:	00 00 00 
  80042027d5:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042027d9:	77 32                	ja     800420280d <x64_vm_init+0x1d0>
  80042027db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042027df:	48 89 c1             	mov    %rax,%rcx
  80042027e2:	48 ba e8 e2 21 04 80 	movabs $0x800421e2e8,%rdx
  80042027e9:	00 00 00 
  80042027ec:	be 43 01 00 00       	mov    $0x143,%esi
  80042027f1:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042027f8:	00 00 00 
  80042027fb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202800:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202807:	00 00 00 
  800420280a:	41 ff d0             	callq  *%r8
  800420280d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202814:	ff ff ff 
  8004202817:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420281b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  800420281f:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004202826:	00 00 00 
  8004202829:	48 8b 00             	mov    (%rax),%rax
  800420282c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202830:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  8004202836:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  800420283d:	00 00 00 
  8004202840:	48 89 c7             	mov    %rax,%rdi
  8004202843:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  800420284a:	00 00 00 
  800420284d:	ff d0                	callq  *%rax
  800420284f:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  8004202856:	00 
  8004202857:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420285b:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004202861:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202865:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202869:	ba 00 00 00 00       	mov    $0x0,%edx
  800420286e:	48 f7 75 d8          	divq   -0x28(%rbp)
  8004202872:	48 89 d0             	mov    %rdx,%rax
  8004202875:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004202879:	48 29 c2             	sub    %rax,%rdx
  800420287c:	48 89 d0             	mov    %rdx,%rax
  800420287f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202883:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420288a:	00 00 00 
  800420288d:	48 8b 00             	mov    (%rax),%rax
  8004202890:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202894:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420289b:	00 00 00 
  800420289e:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  80042028a2:	77 32                	ja     80042028d6 <x64_vm_init+0x299>
  80042028a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028a8:	48 89 c1             	mov    %rax,%rcx
  80042028ab:	48 ba e8 e2 21 04 80 	movabs $0x800421e2e8,%rdx
  80042028b2:	00 00 00 
  80042028b5:	be 51 01 00 00       	mov    $0x151,%esi
  80042028ba:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042028c1:	00 00 00 
  80042028c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042028c9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042028d0:	00 00 00 
  80042028d3:	41 ff d0             	callq  *%r8
  80042028d6:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042028dd:	ff ff ff 
  80042028e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028e4:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042028e8:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042028ef:	00 00 00 
  80042028f2:	48 8b 00             	mov    (%rax),%rax
  80042028f5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042028f9:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  80042028ff:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  8004202906:	00 00 00 
  8004202909:	48 89 c7             	mov    %rax,%rdi
  800420290c:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  8004202913:	00 00 00 
  8004202916:	ff d0                	callq  *%rax
  8004202918:	48 b8 00 50 22 04 80 	movabs $0x8004225000,%rax
  800420291f:	00 00 00 
  8004202922:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004202926:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420292d:	00 00 00 
  8004202930:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202934:	77 32                	ja     8004202968 <x64_vm_init+0x32b>
  8004202936:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420293a:	48 89 c1             	mov    %rax,%rcx
  800420293d:	48 ba e8 e2 21 04 80 	movabs $0x800421e2e8,%rdx
  8004202944:	00 00 00 
  8004202947:	be 62 01 00 00       	mov    $0x162,%esi
  800420294c:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004202953:	00 00 00 
  8004202956:	b8 00 00 00 00       	mov    $0x0,%eax
  800420295b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202962:	00 00 00 
  8004202965:	41 ff d0             	callq  *%r8
  8004202968:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420296f:	ff ff ff 
  8004202972:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202976:	48 01 c2             	add    %rax,%rdx
  8004202979:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004202980:	00 00 00 
  8004202983:	48 8b 00             	mov    (%rax),%rax
  8004202986:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  800420298c:	48 89 d1             	mov    %rdx,%rcx
  800420298f:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202994:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  800420299b:	00 00 00 
  800420299e:	48 89 c7             	mov    %rax,%rdi
  80042029a1:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  80042029a8:	00 00 00 
  80042029ab:	ff d0                	callq  *%rax
  80042029ad:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042029b4:	00 00 00 
  80042029b7:	48 8b 00             	mov    (%rax),%rax
  80042029ba:	48 c1 e0 0c          	shl    $0xc,%rax
  80042029be:	48 89 c2             	mov    %rax,%rdx
  80042029c1:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042029c8:	00 00 00 
  80042029cb:	48 8b 00             	mov    (%rax),%rax
  80042029ce:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  80042029d4:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042029d9:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  80042029e0:	00 00 00 
  80042029e3:	48 89 c7             	mov    %rax,%rdi
  80042029e6:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  80042029ed:	00 00 00 
  80042029f0:	ff d0                	callq  *%rax
  80042029f2:	48 b8 0c 2b 20 04 80 	movabs $0x8004202b0c,%rax
  80042029f9:	00 00 00 
  80042029fc:	ff d0                	callq  *%rax
  80042029fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202a02:	48 83 c0 08          	add    $0x8,%rax
  8004202a06:	48 8b 00             	mov    (%rax),%rax
  8004202a09:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a0f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202a13:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a17:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a1b:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202a1e:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202a21:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202a28:	00 00 00 
  8004202a2b:	48 8b 00             	mov    (%rax),%rax
  8004202a2e:	48 39 c2             	cmp    %rax,%rdx
  8004202a31:	72 32                	jb     8004202a65 <x64_vm_init+0x428>
  8004202a33:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a37:	48 89 c1             	mov    %rax,%rcx
  8004202a3a:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004202a41:	00 00 00 
  8004202a44:	be 82 01 00 00       	mov    $0x182,%esi
  8004202a49:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004202a50:	00 00 00 
  8004202a53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a58:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202a5f:	00 00 00 
  8004202a62:	41 ff d0             	callq  *%r8
  8004202a65:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202a6c:	00 00 00 
  8004202a6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a73:	48 01 d0             	add    %rdx,%rax
  8004202a76:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202a7a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202a7e:	48 8b 00             	mov    (%rax),%rax
  8004202a81:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a87:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202a8b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202a8f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a93:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202a96:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202a99:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202aa0:	00 00 00 
  8004202aa3:	48 8b 00             	mov    (%rax),%rax
  8004202aa6:	48 39 c2             	cmp    %rax,%rdx
  8004202aa9:	72 32                	jb     8004202add <x64_vm_init+0x4a0>
  8004202aab:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aaf:	48 89 c1             	mov    %rax,%rcx
  8004202ab2:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004202ab9:	00 00 00 
  8004202abc:	be 83 01 00 00       	mov    $0x183,%esi
  8004202ac1:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004202ac8:	00 00 00 
  8004202acb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ad0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202ad7:	00 00 00 
  8004202ada:	41 ff d0             	callq  *%r8
  8004202add:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ae4:	00 00 00 
  8004202ae7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aeb:	48 01 d0             	add    %rdx,%rax
  8004202aee:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202af2:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  8004202af9:	00 00 00 
  8004202afc:	48 8b 00             	mov    (%rax),%rax
  8004202aff:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202b03:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202b07:	0f 22 d8             	mov    %rax,%cr3
  8004202b0a:	c9                   	leaveq 
  8004202b0b:	c3                   	retq   

0000008004202b0c <mem_init_mp>:
  8004202b0c:	55                   	push   %rbp
  8004202b0d:	48 89 e5             	mov    %rsp,%rbp
  8004202b10:	48 83 ec 20          	sub    $0x20,%rsp
  8004202b14:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202b1b:	e9 cb 00 00 00       	jmpq   8004202beb <mem_init_mp+0xdf>
  8004202b20:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202b23:	89 d0                	mov    %edx,%eax
  8004202b25:	01 c0                	add    %eax,%eax
  8004202b27:	01 d0                	add    %edx,%eax
  8004202b29:	c1 e0 0f             	shl    $0xf,%eax
  8004202b2c:	48 98                	cltq   
  8004202b2e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202b35:	00 00 00 
  8004202b38:	48 29 c2             	sub    %rax,%rdx
  8004202b3b:	48 89 d0             	mov    %rdx,%rax
  8004202b3e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202b42:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202b45:	48 98                	cltq   
  8004202b47:	48 c1 e0 10          	shl    $0x10,%rax
  8004202b4b:	48 89 c2             	mov    %rax,%rdx
  8004202b4e:	48 b8 00 e0 6d 04 80 	movabs $0x80046de000,%rax
  8004202b55:	00 00 00 
  8004202b58:	48 01 d0             	add    %rdx,%rax
  8004202b5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202b5f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202b66:	00 00 00 
  8004202b69:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202b6d:	77 32                	ja     8004202ba1 <mem_init_mp+0x95>
  8004202b6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b73:	48 89 c1             	mov    %rax,%rcx
  8004202b76:	48 ba e8 e2 21 04 80 	movabs $0x800421e2e8,%rdx
  8004202b7d:	00 00 00 
  8004202b80:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202b85:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004202b8c:	00 00 00 
  8004202b8f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b94:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202b9b:	00 00 00 
  8004202b9e:	41 ff d0             	callq  *%r8
  8004202ba1:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ba8:	ff ff ff 
  8004202bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202baf:	48 01 c2             	add    %rax,%rdx
  8004202bb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202bb6:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202bbd:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004202bc4:	00 00 00 
  8004202bc7:	48 8b 00             	mov    (%rax),%rax
  8004202bca:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202bd0:	48 89 d1             	mov    %rdx,%rcx
  8004202bd3:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202bd8:	48 89 c7             	mov    %rax,%rdi
  8004202bdb:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  8004202be2:	00 00 00 
  8004202be5:	ff d0                	callq  *%rax
  8004202be7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202beb:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202bef:	0f 8e 2b ff ff ff    	jle    8004202b20 <mem_init_mp+0x14>
  8004202bf5:	c9                   	leaveq 
  8004202bf6:	c3                   	retq   

0000008004202bf7 <page_init>:
  8004202bf7:	55                   	push   %rbp
  8004202bf8:	48 89 e5             	mov    %rsp,%rbp
  8004202bfb:	48 83 ec 50          	sub    $0x50,%rsp
  8004202bff:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202c04:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  8004202c0b:	00 00 00 
  8004202c0e:	ff d0                	callq  *%rax
  8004202c10:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202c14:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202c1b:	00 
  8004202c1c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202c23:	00 
  8004202c24:	e9 65 02 00 00       	jmpq   8004202e8e <page_init+0x297>
  8004202c29:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c30:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202c35:	74 1a                	je     8004202c51 <page_init+0x5a>
  8004202c37:	48 b8 30 c2 4d 04 80 	movabs $0x80044dc230,%rax
  8004202c3e:	00 00 00 
  8004202c41:	48 8b 00             	mov    (%rax),%rax
  8004202c44:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202c48:	73 07                	jae    8004202c51 <page_init+0x5a>
  8004202c4a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202c51:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202c56:	75 07                	jne    8004202c5f <page_init+0x68>
  8004202c58:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c5f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202c63:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202c67:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c6e:	00 00 00 
  8004202c71:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202c75:	77 32                	ja     8004202ca9 <page_init+0xb2>
  8004202c77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202c7b:	48 89 c1             	mov    %rax,%rcx
  8004202c7e:	48 ba e8 e2 21 04 80 	movabs $0x800421e2e8,%rdx
  8004202c85:	00 00 00 
  8004202c88:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202c8d:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004202c94:	00 00 00 
  8004202c97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c9c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202ca3:	00 00 00 
  8004202ca6:	41 ff d0             	callq  *%r8
  8004202ca9:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202cb0:	ff ff ff 
  8004202cb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202cb7:	48 01 d0             	add    %rdx,%rax
  8004202cba:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cbe:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202cc2:	77 07                	ja     8004202ccb <page_init+0xd4>
  8004202cc4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202ccb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ccf:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202cd5:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202cd9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202cdd:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202ce4:	00 00 00 
  8004202ce7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202ceb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202cef:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cf3:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202cf6:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202cf9:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202d00:	00 00 00 
  8004202d03:	48 8b 00             	mov    (%rax),%rax
  8004202d06:	48 39 c2             	cmp    %rax,%rdx
  8004202d09:	72 32                	jb     8004202d3d <page_init+0x146>
  8004202d0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d0f:	48 89 c1             	mov    %rax,%rcx
  8004202d12:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004202d19:	00 00 00 
  8004202d1c:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d21:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004202d28:	00 00 00 
  8004202d2b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202d30:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202d37:	00 00 00 
  8004202d3a:	41 ff d0             	callq  *%r8
  8004202d3d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202d44:	00 00 00 
  8004202d47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d4b:	48 01 d0             	add    %rdx,%rax
  8004202d4e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202d52:	0f 87 84 00 00 00    	ja     8004202ddc <page_init+0x1e5>
  8004202d58:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202d5f:	00 00 00 
  8004202d62:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202d68:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202d6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d70:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202d74:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202d77:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202d7a:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202d81:	00 00 00 
  8004202d84:	48 8b 00             	mov    (%rax),%rax
  8004202d87:	48 39 c2             	cmp    %rax,%rdx
  8004202d8a:	72 32                	jb     8004202dbe <page_init+0x1c7>
  8004202d8c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d90:	48 89 c1             	mov    %rax,%rcx
  8004202d93:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004202d9a:	00 00 00 
  8004202d9d:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202da2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004202da9:	00 00 00 
  8004202dac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202db1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004202db8:	00 00 00 
  8004202dbb:	41 ff d0             	callq  *%r8
  8004202dbe:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202dc5:	00 00 00 
  8004202dc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202dcc:	48 01 d0             	add    %rdx,%rax
  8004202dcf:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202dd3:	76 07                	jbe    8004202ddc <page_init+0x1e5>
  8004202dd5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202ddc:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202de3:	00 00 00 
  8004202de6:	48 8b 00             	mov    (%rax),%rax
  8004202de9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202ded:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202df1:	48 01 c2             	add    %rax,%rdx
  8004202df4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202df7:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202dfb:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202e02:	00 00 00 
  8004202e05:	48 8b 00             	mov    (%rax),%rax
  8004202e08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e0c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e10:	48 01 d0             	add    %rdx,%rax
  8004202e13:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202e1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202e1e:	75 69                	jne    8004202e89 <page_init+0x292>
  8004202e20:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202e25:	74 21                	je     8004202e48 <page_init+0x251>
  8004202e27:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202e2e:	00 00 00 
  8004202e31:	48 8b 00             	mov    (%rax),%rax
  8004202e34:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e38:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e3c:	48 01 c2             	add    %rax,%rdx
  8004202e3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e43:	48 89 10             	mov    %rdx,(%rax)
  8004202e46:	eb 25                	jmp    8004202e6d <page_init+0x276>
  8004202e48:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202e4f:	00 00 00 
  8004202e52:	48 8b 00             	mov    (%rax),%rax
  8004202e55:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e59:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e5d:	48 01 c2             	add    %rax,%rdx
  8004202e60:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202e67:	00 00 00 
  8004202e6a:	48 89 10             	mov    %rdx,(%rax)
  8004202e6d:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004202e74:	00 00 00 
  8004202e77:	48 8b 00             	mov    (%rax),%rax
  8004202e7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e7e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e82:	48 01 d0             	add    %rdx,%rax
  8004202e85:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202e89:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202e8e:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004202e95:	00 00 00 
  8004202e98:	48 8b 00             	mov    (%rax),%rax
  8004202e9b:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202e9f:	0f 82 84 fd ff ff    	jb     8004202c29 <page_init+0x32>
  8004202ea5:	c9                   	leaveq 
  8004202ea6:	c3                   	retq   

0000008004202ea7 <page_alloc>:
  8004202ea7:	55                   	push   %rbp
  8004202ea8:	48 89 e5             	mov    %rsp,%rbp
  8004202eab:	48 83 ec 20          	sub    $0x20,%rsp
  8004202eaf:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202eb2:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202eb9:	00 00 00 
  8004202ebc:	48 8b 00             	mov    (%rax),%rax
  8004202ebf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202ec3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202ec8:	74 5e                	je     8004202f28 <page_alloc+0x81>
  8004202eca:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202ed1:	00 00 00 
  8004202ed4:	48 8b 00             	mov    (%rax),%rax
  8004202ed7:	48 8b 10             	mov    (%rax),%rdx
  8004202eda:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202ee1:	00 00 00 
  8004202ee4:	48 89 10             	mov    %rdx,(%rax)
  8004202ee7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202eeb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202ef2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202ef5:	83 e0 01             	and    $0x1,%eax
  8004202ef8:	85 c0                	test   %eax,%eax
  8004202efa:	74 2c                	je     8004202f28 <page_alloc+0x81>
  8004202efc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f00:	48 89 c7             	mov    %rax,%rdi
  8004202f03:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  8004202f0a:	00 00 00 
  8004202f0d:	ff d0                	callq  *%rax
  8004202f0f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202f14:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f19:	48 89 c7             	mov    %rax,%rdi
  8004202f1c:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004202f23:	00 00 00 
  8004202f26:	ff d0                	callq  *%rax
  8004202f28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f2c:	c9                   	leaveq 
  8004202f2d:	c3                   	retq   

0000008004202f2e <page_initpp>:
  8004202f2e:	55                   	push   %rbp
  8004202f2f:	48 89 e5             	mov    %rsp,%rbp
  8004202f32:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f36:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f3e:	ba 10 00 00 00       	mov    $0x10,%edx
  8004202f43:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f48:	48 89 c7             	mov    %rax,%rdi
  8004202f4b:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004202f52:	00 00 00 
  8004202f55:	ff d0                	callq  *%rax
  8004202f57:	c9                   	leaveq 
  8004202f58:	c3                   	retq   

0000008004202f59 <page_free>:
  8004202f59:	55                   	push   %rbp
  8004202f5a:	48 89 e5             	mov    %rsp,%rbp
  8004202f5d:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f61:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f69:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202f6d:	66 85 c0             	test   %ax,%ax
  8004202f70:	75 0c                	jne    8004202f7e <page_free+0x25>
  8004202f72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f76:	48 8b 00             	mov    (%rax),%rax
  8004202f79:	48 85 c0             	test   %rax,%rax
  8004202f7c:	74 2c                	je     8004202faa <page_free+0x51>
  8004202f7e:	48 ba 10 e3 21 04 80 	movabs $0x800421e310,%rdx
  8004202f85:	00 00 00 
  8004202f88:	be 3d 02 00 00       	mov    $0x23d,%esi
  8004202f8d:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004202f94:	00 00 00 
  8004202f97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202f9c:	48 b9 0c 06 20 04 80 	movabs $0x800420060c,%rcx
  8004202fa3:	00 00 00 
  8004202fa6:	ff d1                	callq  *%rcx
  8004202fa8:	eb 2f                	jmp    8004202fd9 <page_free+0x80>
  8004202faa:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202fb1:	00 00 00 
  8004202fb4:	48 8b 10             	mov    (%rax),%rdx
  8004202fb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fbb:	48 89 10             	mov    %rdx,(%rax)
  8004202fbe:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004202fc5:	00 00 00 
  8004202fc8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fcc:	48 89 10             	mov    %rdx,(%rax)
  8004202fcf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fd3:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004202fd9:	c9                   	leaveq 
  8004202fda:	c3                   	retq   

0000008004202fdb <page_decref>:
  8004202fdb:	55                   	push   %rbp
  8004202fdc:	48 89 e5             	mov    %rsp,%rbp
  8004202fdf:	48 83 ec 10          	sub    $0x10,%rsp
  8004202fe3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202fe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202feb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202fef:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004202ff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ff6:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202ffa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ffe:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203002:	66 85 c0             	test   %ax,%ax
  8004203005:	75 13                	jne    800420301a <page_decref+0x3f>
  8004203007:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420300b:	48 89 c7             	mov    %rax,%rdi
  800420300e:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004203015:	00 00 00 
  8004203018:	ff d0                	callq  *%rax
  800420301a:	c9                   	leaveq 
  800420301b:	c3                   	retq   

000000800420301c <pml4e_walk>:
  800420301c:	55                   	push   %rbp
  800420301d:	48 89 e5             	mov    %rsp,%rbp
  8004203020:	53                   	push   %rbx
  8004203021:	48 83 ec 68          	sub    $0x68,%rsp
  8004203025:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203029:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420302d:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203030:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203035:	0f 84 4e 02 00 00    	je     8004203289 <pml4e_walk+0x26d>
  800420303b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420303f:	48 c1 e8 27          	shr    $0x27,%rax
  8004203043:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203048:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420304f:	00 
  8004203050:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203054:	48 01 d0             	add    %rdx,%rax
  8004203057:	48 8b 00             	mov    (%rax),%rax
  800420305a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420305e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203062:	83 e0 01             	and    $0x1,%eax
  8004203065:	48 85 c0             	test   %rax,%rax
  8004203068:	0f 85 7f 01 00 00    	jne    80042031ed <pml4e_walk+0x1d1>
  800420306e:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203072:	0f 84 75 01 00 00    	je     80042031ed <pml4e_walk+0x1d1>
  8004203078:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420307f:	00 
  8004203080:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203085:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420308c:	00 00 00 
  800420308f:	ff d0                	callq  *%rax
  8004203091:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203095:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420309a:	0f 84 43 01 00 00    	je     80042031e3 <pml4e_walk+0x1c7>
  80042030a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030a4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042030a8:	8d 50 01             	lea    0x1(%rax),%edx
  80042030ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030af:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042030b3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030b7:	48 c1 e8 27          	shr    $0x27,%rax
  80042030bb:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030c0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030c7:	00 
  80042030c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030cc:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042030d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030d4:	48 89 c7             	mov    %rax,%rdi
  80042030d7:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042030de:	00 00 00 
  80042030e1:	ff d0                	callq  *%rax
  80042030e3:	48 83 c8 07          	or     $0x7,%rax
  80042030e7:	48 89 03             	mov    %rax,(%rbx)
  80042030ea:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030ee:	48 c1 e8 27          	shr    $0x27,%rax
  80042030f2:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030f7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030fe:	00 
  80042030ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203103:	48 01 d0             	add    %rdx,%rax
  8004203106:	48 8b 00             	mov    (%rax),%rax
  8004203109:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420310f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203113:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203117:	48 c1 e8 0c          	shr    $0xc,%rax
  800420311b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420311e:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203121:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203128:	00 00 00 
  800420312b:	48 8b 00             	mov    (%rax),%rax
  800420312e:	48 39 c2             	cmp    %rax,%rdx
  8004203131:	72 32                	jb     8004203165 <pml4e_walk+0x149>
  8004203133:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203137:	48 89 c1             	mov    %rax,%rcx
  800420313a:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004203141:	00 00 00 
  8004203144:	be 79 02 00 00       	mov    $0x279,%esi
  8004203149:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004203150:	00 00 00 
  8004203153:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203158:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420315f:	00 00 00 
  8004203162:	41 ff d0             	callq  *%r8
  8004203165:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420316c:	00 00 00 
  800420316f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203173:	48 01 d0             	add    %rdx,%rax
  8004203176:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203179:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800420317d:	48 89 ce             	mov    %rcx,%rsi
  8004203180:	48 89 c7             	mov    %rax,%rdi
  8004203183:	48 b8 95 32 20 04 80 	movabs $0x8004203295,%rax
  800420318a:	00 00 00 
  800420318d:	ff d0                	callq  *%rax
  800420318f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203193:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203198:	74 09                	je     80042031a3 <pml4e_walk+0x187>
  800420319a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420319e:	e9 eb 00 00 00       	jmpq   800420328e <pml4e_walk+0x272>
  80042031a3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042031a7:	48 c1 e8 27          	shr    $0x27,%rax
  80042031ab:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031b0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042031b7:	00 
  80042031b8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042031bc:	48 01 d0             	add    %rdx,%rax
  80042031bf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042031c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031ca:	48 89 c7             	mov    %rax,%rdi
  80042031cd:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042031d4:	00 00 00 
  80042031d7:	ff d0                	callq  *%rax
  80042031d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031de:	e9 ab 00 00 00       	jmpq   800420328e <pml4e_walk+0x272>
  80042031e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031e8:	e9 a1 00 00 00       	jmpq   800420328e <pml4e_walk+0x272>
  80042031ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031f1:	83 e0 01             	and    $0x1,%eax
  80042031f4:	48 85 c0             	test   %rax,%rax
  80042031f7:	0f 84 8c 00 00 00    	je     8004203289 <pml4e_walk+0x26d>
  80042031fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203201:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203207:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420320b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420320f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203213:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004203216:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203219:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203220:	00 00 00 
  8004203223:	48 8b 00             	mov    (%rax),%rax
  8004203226:	48 39 c2             	cmp    %rax,%rdx
  8004203229:	72 32                	jb     800420325d <pml4e_walk+0x241>
  800420322b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420322f:	48 89 c1             	mov    %rax,%rcx
  8004203232:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004203239:	00 00 00 
  800420323c:	be 83 02 00 00       	mov    $0x283,%esi
  8004203241:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004203248:	00 00 00 
  800420324b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203250:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203257:	00 00 00 
  800420325a:	41 ff d0             	callq  *%r8
  800420325d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203264:	00 00 00 
  8004203267:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420326b:	48 01 d0             	add    %rdx,%rax
  800420326e:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203271:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203275:	48 89 ce             	mov    %rcx,%rsi
  8004203278:	48 89 c7             	mov    %rax,%rdi
  800420327b:	48 b8 95 32 20 04 80 	movabs $0x8004203295,%rax
  8004203282:	00 00 00 
  8004203285:	ff d0                	callq  *%rax
  8004203287:	eb 05                	jmp    800420328e <pml4e_walk+0x272>
  8004203289:	b8 00 00 00 00       	mov    $0x0,%eax
  800420328e:	48 83 c4 68          	add    $0x68,%rsp
  8004203292:	5b                   	pop    %rbx
  8004203293:	5d                   	pop    %rbp
  8004203294:	c3                   	retq   

0000008004203295 <pdpe_walk>:
  8004203295:	55                   	push   %rbp
  8004203296:	48 89 e5             	mov    %rsp,%rbp
  8004203299:	53                   	push   %rbx
  800420329a:	48 83 ec 68          	sub    $0x68,%rsp
  800420329e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  80042032a2:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  80042032a6:	89 55 9c             	mov    %edx,-0x64(%rbp)
  80042032a9:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042032ae:	0f 84 4e 02 00 00    	je     8004203502 <pdpe_walk+0x26d>
  80042032b4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032b8:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042032bc:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032c1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032c8:	00 
  80042032c9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032cd:	48 01 d0             	add    %rdx,%rax
  80042032d0:	48 8b 00             	mov    (%rax),%rax
  80042032d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042032d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042032db:	83 e0 01             	and    $0x1,%eax
  80042032de:	48 85 c0             	test   %rax,%rax
  80042032e1:	0f 85 7f 01 00 00    	jne    8004203466 <pdpe_walk+0x1d1>
  80042032e7:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042032eb:	0f 84 75 01 00 00    	je     8004203466 <pdpe_walk+0x1d1>
  80042032f1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042032f8:	00 
  80042032f9:	bf 01 00 00 00       	mov    $0x1,%edi
  80042032fe:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004203305:	00 00 00 
  8004203308:	ff d0                	callq  *%rax
  800420330a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420330e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203313:	0f 84 43 01 00 00    	je     800420345c <pdpe_walk+0x1c7>
  8004203319:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420331d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203321:	8d 50 01             	lea    0x1(%rax),%edx
  8004203324:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203328:	66 89 50 08          	mov    %dx,0x8(%rax)
  800420332c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203330:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203334:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203339:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203340:	00 
  8004203341:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203345:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004203349:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420334d:	48 89 c7             	mov    %rax,%rdi
  8004203350:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004203357:	00 00 00 
  800420335a:	ff d0                	callq  *%rax
  800420335c:	48 83 c8 07          	or     $0x7,%rax
  8004203360:	48 89 03             	mov    %rax,(%rbx)
  8004203363:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203367:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420336b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203370:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203377:	00 
  8004203378:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420337c:	48 01 d0             	add    %rdx,%rax
  800420337f:	48 8b 00             	mov    (%rax),%rax
  8004203382:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203388:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420338c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203390:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203394:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203397:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420339a:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042033a1:	00 00 00 
  80042033a4:	48 8b 00             	mov    (%rax),%rax
  80042033a7:	48 39 c2             	cmp    %rax,%rdx
  80042033aa:	72 32                	jb     80042033de <pdpe_walk+0x149>
  80042033ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033b0:	48 89 c1             	mov    %rax,%rcx
  80042033b3:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  80042033ba:	00 00 00 
  80042033bd:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042033c2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042033c9:	00 00 00 
  80042033cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033d1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042033d8:	00 00 00 
  80042033db:	41 ff d0             	callq  *%r8
  80042033de:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042033e5:	00 00 00 
  80042033e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033ec:	48 01 d0             	add    %rdx,%rax
  80042033ef:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033f2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033f6:	48 89 ce             	mov    %rcx,%rsi
  80042033f9:	48 89 c7             	mov    %rax,%rdi
  80042033fc:	48 b8 0e 35 20 04 80 	movabs $0x800420350e,%rax
  8004203403:	00 00 00 
  8004203406:	ff d0                	callq  *%rax
  8004203408:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420340c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203411:	74 09                	je     800420341c <pdpe_walk+0x187>
  8004203413:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203417:	e9 eb 00 00 00       	jmpq   8004203507 <pdpe_walk+0x272>
  800420341c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203420:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203424:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203429:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203430:	00 
  8004203431:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203435:	48 01 d0             	add    %rdx,%rax
  8004203438:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420343f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203443:	48 89 c7             	mov    %rax,%rdi
  8004203446:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420344d:	00 00 00 
  8004203450:	ff d0                	callq  *%rax
  8004203452:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203457:	e9 ab 00 00 00       	jmpq   8004203507 <pdpe_walk+0x272>
  800420345c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203461:	e9 a1 00 00 00       	jmpq   8004203507 <pdpe_walk+0x272>
  8004203466:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420346a:	83 e0 01             	and    $0x1,%eax
  800420346d:	48 85 c0             	test   %rax,%rax
  8004203470:	0f 84 8c 00 00 00    	je     8004203502 <pdpe_walk+0x26d>
  8004203476:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420347a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203480:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203484:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203488:	48 c1 e8 0c          	shr    $0xc,%rax
  800420348c:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420348f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203492:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203499:	00 00 00 
  800420349c:	48 8b 00             	mov    (%rax),%rax
  800420349f:	48 39 c2             	cmp    %rax,%rdx
  80042034a2:	72 32                	jb     80042034d6 <pdpe_walk+0x241>
  80042034a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034a8:	48 89 c1             	mov    %rax,%rcx
  80042034ab:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  80042034b2:	00 00 00 
  80042034b5:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042034ba:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042034c1:	00 00 00 
  80042034c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034c9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042034d0:	00 00 00 
  80042034d3:	41 ff d0             	callq  *%r8
  80042034d6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042034dd:	00 00 00 
  80042034e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034e4:	48 01 d0             	add    %rdx,%rax
  80042034e7:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042034ea:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042034ee:	48 89 ce             	mov    %rcx,%rsi
  80042034f1:	48 89 c7             	mov    %rax,%rdi
  80042034f4:	48 b8 0e 35 20 04 80 	movabs $0x800420350e,%rax
  80042034fb:	00 00 00 
  80042034fe:	ff d0                	callq  *%rax
  8004203500:	eb 05                	jmp    8004203507 <pdpe_walk+0x272>
  8004203502:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203507:	48 83 c4 68          	add    $0x68,%rsp
  800420350b:	5b                   	pop    %rbx
  800420350c:	5d                   	pop    %rbp
  800420350d:	c3                   	retq   

000000800420350e <pgdir_walk>:
  800420350e:	55                   	push   %rbp
  800420350f:	48 89 e5             	mov    %rsp,%rbp
  8004203512:	53                   	push   %rbx
  8004203513:	48 83 ec 58          	sub    $0x58,%rsp
  8004203517:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420351b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420351f:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004203522:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203527:	0f 84 fd 01 00 00    	je     800420372a <pgdir_walk+0x21c>
  800420352d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203531:	48 c1 e8 15          	shr    $0x15,%rax
  8004203535:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420353a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203541:	00 
  8004203542:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203546:	48 01 d0             	add    %rdx,%rax
  8004203549:	48 8b 00             	mov    (%rax),%rax
  800420354c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203550:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203554:	83 e0 01             	and    $0x1,%eax
  8004203557:	48 85 c0             	test   %rax,%rax
  800420355a:	0f 85 2f 01 00 00    	jne    800420368f <pgdir_walk+0x181>
  8004203560:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004203564:	0f 84 25 01 00 00    	je     800420368f <pgdir_walk+0x181>
  800420356a:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203571:	00 
  8004203572:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203577:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420357e:	00 00 00 
  8004203581:	ff d0                	callq  *%rax
  8004203583:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203587:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420358c:	0f 84 f3 00 00 00    	je     8004203685 <pgdir_walk+0x177>
  8004203592:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203596:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420359a:	8d 50 01             	lea    0x1(%rax),%edx
  800420359d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035a1:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042035a5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035a9:	48 c1 e8 15          	shr    $0x15,%rax
  80042035ad:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035b2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035b9:	00 
  80042035ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035be:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042035c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035c6:	48 89 c7             	mov    %rax,%rdi
  80042035c9:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042035d0:	00 00 00 
  80042035d3:	ff d0                	callq  *%rax
  80042035d5:	48 83 c8 07          	or     $0x7,%rax
  80042035d9:	48 89 03             	mov    %rax,(%rbx)
  80042035dc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035e0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035e4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035e9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035f0:	00 
  80042035f1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035f5:	48 c1 e8 15          	shr    $0x15,%rax
  80042035f9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035fe:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  8004203605:	00 
  8004203606:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420360a:	48 01 c8             	add    %rcx,%rax
  800420360d:	48 8b 00             	mov    (%rax),%rax
  8004203610:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203616:	48 01 d0             	add    %rdx,%rax
  8004203619:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420361d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203621:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203625:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203628:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420362b:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203632:	00 00 00 
  8004203635:	48 8b 00             	mov    (%rax),%rax
  8004203638:	48 39 c2             	cmp    %rax,%rdx
  800420363b:	72 32                	jb     800420366f <pgdir_walk+0x161>
  800420363d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203641:	48 89 c1             	mov    %rax,%rcx
  8004203644:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  800420364b:	00 00 00 
  800420364e:	be be 02 00 00       	mov    $0x2be,%esi
  8004203653:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420365a:	00 00 00 
  800420365d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203662:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203669:	00 00 00 
  800420366c:	41 ff d0             	callq  *%r8
  800420366f:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203676:	00 00 00 
  8004203679:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420367d:	48 01 d0             	add    %rdx,%rax
  8004203680:	e9 aa 00 00 00       	jmpq   800420372f <pgdir_walk+0x221>
  8004203685:	b8 00 00 00 00       	mov    $0x0,%eax
  800420368a:	e9 a0 00 00 00       	jmpq   800420372f <pgdir_walk+0x221>
  800420368f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203693:	83 e0 01             	and    $0x1,%eax
  8004203696:	48 85 c0             	test   %rax,%rax
  8004203699:	0f 84 8b 00 00 00    	je     800420372a <pgdir_walk+0x21c>
  800420369f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042036a3:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036a7:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036ac:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036b3:	00 
  80042036b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042036b8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042036be:	48 01 d0             	add    %rdx,%rax
  80042036c1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042036c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036c9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036cd:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042036d0:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042036d3:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042036da:	00 00 00 
  80042036dd:	48 8b 00             	mov    (%rax),%rax
  80042036e0:	48 39 c2             	cmp    %rax,%rdx
  80042036e3:	72 32                	jb     8004203717 <pgdir_walk+0x209>
  80042036e5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036e9:	48 89 c1             	mov    %rax,%rcx
  80042036ec:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  80042036f3:	00 00 00 
  80042036f6:	be c3 02 00 00       	mov    $0x2c3,%esi
  80042036fb:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004203702:	00 00 00 
  8004203705:	b8 00 00 00 00       	mov    $0x0,%eax
  800420370a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203711:	00 00 00 
  8004203714:	41 ff d0             	callq  *%r8
  8004203717:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420371e:	00 00 00 
  8004203721:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203725:	48 01 d0             	add    %rdx,%rax
  8004203728:	eb 05                	jmp    800420372f <pgdir_walk+0x221>
  800420372a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420372f:	48 83 c4 58          	add    $0x58,%rsp
  8004203733:	5b                   	pop    %rbx
  8004203734:	5d                   	pop    %rbp
  8004203735:	c3                   	retq   

0000008004203736 <boot_map_region>:
  8004203736:	55                   	push   %rbp
  8004203737:	48 89 e5             	mov    %rsp,%rbp
  800420373a:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800420373e:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203742:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203746:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420374a:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420374e:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  8004203752:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004203759:	00 
  800420375a:	e9 aa 02 00 00       	jmpq   8004203a09 <boot_map_region+0x2d3>
  800420375f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203763:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203767:	48 01 d0             	add    %rdx,%rax
  800420376a:	48 89 c1             	mov    %rax,%rcx
  800420376d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203771:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203776:	48 89 ce             	mov    %rcx,%rsi
  8004203779:	48 89 c7             	mov    %rax,%rdi
  800420377c:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004203783:	00 00 00 
  8004203786:	ff d0                	callq  *%rax
  8004203788:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420378c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203790:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004203794:	48 01 d0             	add    %rdx,%rax
  8004203797:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420379b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042037a0:	74 23                	je     80042037c5 <boot_map_region+0x8f>
  80042037a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042037a6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037ac:	48 89 c2             	mov    %rax,%rdx
  80042037af:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042037b2:	48 98                	cltq   
  80042037b4:	48 09 d0             	or     %rdx,%rax
  80042037b7:	48 83 c8 01          	or     $0x1,%rax
  80042037bb:	48 89 c2             	mov    %rax,%rdx
  80042037be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042037c2:	48 89 10             	mov    %rdx,(%rax)
  80042037c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042037c9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042037cd:	48 01 d0             	add    %rdx,%rax
  80042037d0:	48 c1 e8 27          	shr    $0x27,%rax
  80042037d4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037d9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037e0:	00 
  80042037e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042037e5:	48 01 d0             	add    %rdx,%rax
  80042037e8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042037ec:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042037f0:	48 01 ca             	add    %rcx,%rdx
  80042037f3:	48 c1 ea 27          	shr    $0x27,%rdx
  80042037f7:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042037fd:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203804:	00 
  8004203805:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203809:	48 01 ca             	add    %rcx,%rdx
  800420380c:	48 8b 0a             	mov    (%rdx),%rcx
  800420380f:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203812:	48 63 d2             	movslq %edx,%rdx
  8004203815:	48 09 ca             	or     %rcx,%rdx
  8004203818:	48 83 ca 01          	or     $0x1,%rdx
  800420381c:	48 89 10             	mov    %rdx,(%rax)
  800420381f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203823:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203827:	48 01 d0             	add    %rdx,%rax
  800420382a:	48 c1 e8 27          	shr    $0x27,%rax
  800420382e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203833:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420383a:	00 
  800420383b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420383f:	48 01 d0             	add    %rdx,%rax
  8004203842:	48 8b 00             	mov    (%rax),%rax
  8004203845:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420384b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420384f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203853:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203857:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420385a:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420385d:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203864:	00 00 00 
  8004203867:	48 8b 00             	mov    (%rax),%rax
  800420386a:	48 39 c2             	cmp    %rax,%rdx
  800420386d:	72 32                	jb     80042038a1 <boot_map_region+0x16b>
  800420386f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203873:	48 89 c1             	mov    %rax,%rcx
  8004203876:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  800420387d:	00 00 00 
  8004203880:	be e6 02 00 00       	mov    $0x2e6,%esi
  8004203885:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420388c:	00 00 00 
  800420388f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203894:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420389b:	00 00 00 
  800420389e:	41 ff d0             	callq  *%r8
  80042038a1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042038a8:	00 00 00 
  80042038ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042038af:	48 01 d0             	add    %rdx,%rax
  80042038b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042038b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038ba:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038be:	48 01 d0             	add    %rdx,%rax
  80042038c1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042038c5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042038ca:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042038d1:	00 
  80042038d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042038d6:	48 01 d0             	add    %rdx,%rax
  80042038d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042038dd:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042038e1:	48 01 ca             	add    %rcx,%rdx
  80042038e4:	48 c1 ea 1e          	shr    $0x1e,%rdx
  80042038e8:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042038ee:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042038f5:	00 
  80042038f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042038fa:	48 01 ca             	add    %rcx,%rdx
  80042038fd:	48 8b 0a             	mov    (%rdx),%rcx
  8004203900:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203903:	48 63 d2             	movslq %edx,%rdx
  8004203906:	48 09 ca             	or     %rcx,%rdx
  8004203909:	48 83 ca 01          	or     $0x1,%rdx
  800420390d:	48 89 10             	mov    %rdx,(%rax)
  8004203910:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203914:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004203918:	48 01 d0             	add    %rdx,%rax
  800420391b:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420391f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203924:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420392b:	00 
  800420392c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203930:	48 01 d0             	add    %rdx,%rax
  8004203933:	48 8b 00             	mov    (%rax),%rax
  8004203936:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420393c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203940:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203944:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203948:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420394b:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  800420394e:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203955:	00 00 00 
  8004203958:	48 8b 00             	mov    (%rax),%rax
  800420395b:	48 39 c2             	cmp    %rax,%rdx
  800420395e:	72 32                	jb     8004203992 <boot_map_region+0x25c>
  8004203960:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203964:	48 89 c1             	mov    %rax,%rcx
  8004203967:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  800420396e:	00 00 00 
  8004203971:	be e8 02 00 00       	mov    $0x2e8,%esi
  8004203976:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420397d:	00 00 00 
  8004203980:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203985:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420398c:	00 00 00 
  800420398f:	41 ff d0             	callq  *%r8
  8004203992:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203999:	00 00 00 
  800420399c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042039a0:	48 01 d0             	add    %rdx,%rax
  80042039a3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042039a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042039ab:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039af:	48 01 d0             	add    %rdx,%rax
  80042039b2:	48 c1 e8 15          	shr    $0x15,%rax
  80042039b6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042039bb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042039c2:	00 
  80042039c3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042039c7:	48 01 d0             	add    %rdx,%rax
  80042039ca:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042039ce:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042039d2:	48 01 ca             	add    %rcx,%rdx
  80042039d5:	48 c1 ea 15          	shr    $0x15,%rdx
  80042039d9:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042039df:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042039e6:	00 
  80042039e7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042039eb:	48 01 ca             	add    %rcx,%rdx
  80042039ee:	48 8b 0a             	mov    (%rdx),%rcx
  80042039f1:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042039f4:	48 63 d2             	movslq %edx,%rdx
  80042039f7:	48 09 ca             	or     %rcx,%rdx
  80042039fa:	48 83 ca 01          	or     $0x1,%rdx
  80042039fe:	48 89 10             	mov    %rdx,(%rax)
  8004203a01:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004203a08:	00 
  8004203a09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a0d:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203a11:	0f 82 48 fd ff ff    	jb     800420375f <boot_map_region+0x29>
  8004203a17:	c9                   	leaveq 
  8004203a18:	c3                   	retq   

0000008004203a19 <page_insert>:
  8004203a19:	55                   	push   %rbp
  8004203a1a:	48 89 e5             	mov    %rsp,%rbp
  8004203a1d:	48 83 ec 60          	sub    $0x60,%rsp
  8004203a21:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203a25:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203a29:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203a2d:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203a30:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203a35:	0f 84 47 03 00 00    	je     8004203d82 <page_insert+0x369>
  8004203a3b:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203a40:	0f 84 3c 03 00 00    	je     8004203d82 <page_insert+0x369>
  8004203a46:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203a4a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a4e:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203a53:	48 89 ce             	mov    %rcx,%rsi
  8004203a56:	48 89 c7             	mov    %rax,%rdi
  8004203a59:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004203a60:	00 00 00 
  8004203a63:	ff d0                	callq  *%rax
  8004203a65:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203a69:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203a6e:	0f 84 07 03 00 00    	je     8004203d7b <page_insert+0x362>
  8004203a74:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203a78:	48 c1 e8 27          	shr    $0x27,%rax
  8004203a7c:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a81:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a88:	00 
  8004203a89:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a8d:	48 01 d0             	add    %rdx,%rax
  8004203a90:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203a94:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203a98:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a9e:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203aa5:	00 
  8004203aa6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203aaa:	48 01 ca             	add    %rcx,%rdx
  8004203aad:	48 8b 0a             	mov    (%rdx),%rcx
  8004203ab0:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203ab3:	80 e6 f1             	and    $0xf1,%dh
  8004203ab6:	48 63 d2             	movslq %edx,%rdx
  8004203ab9:	48 09 ca             	or     %rcx,%rdx
  8004203abc:	48 89 10             	mov    %rdx,(%rax)
  8004203abf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203ac3:	48 c1 e8 27          	shr    $0x27,%rax
  8004203ac7:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203acc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ad3:	00 
  8004203ad4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203ad8:	48 01 d0             	add    %rdx,%rax
  8004203adb:	48 8b 00             	mov    (%rax),%rax
  8004203ade:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203ae4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203ae8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203aec:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203af0:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203af3:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203af6:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203afd:	00 00 00 
  8004203b00:	48 8b 00             	mov    (%rax),%rax
  8004203b03:	48 39 c2             	cmp    %rax,%rdx
  8004203b06:	72 32                	jb     8004203b3a <page_insert+0x121>
  8004203b08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b0c:	48 89 c1             	mov    %rax,%rcx
  8004203b0f:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004203b16:	00 00 00 
  8004203b19:	be 13 03 00 00       	mov    $0x313,%esi
  8004203b1e:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004203b25:	00 00 00 
  8004203b28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203b2d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203b34:	00 00 00 
  8004203b37:	41 ff d0             	callq  *%r8
  8004203b3a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203b41:	00 00 00 
  8004203b44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b48:	48 01 d0             	add    %rdx,%rax
  8004203b4b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b4f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b53:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b57:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b5c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203b63:	00 
  8004203b64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203b68:	48 01 d0             	add    %rdx,%rax
  8004203b6b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203b6f:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203b73:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b79:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b80:	00 
  8004203b81:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203b85:	48 01 ca             	add    %rcx,%rdx
  8004203b88:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b8b:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203b8e:	80 e6 f1             	and    $0xf1,%dh
  8004203b91:	48 63 d2             	movslq %edx,%rdx
  8004203b94:	48 09 ca             	or     %rcx,%rdx
  8004203b97:	48 89 10             	mov    %rdx,(%rax)
  8004203b9a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b9e:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203ba2:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ba7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203bae:	00 
  8004203baf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203bb3:	48 01 d0             	add    %rdx,%rax
  8004203bb6:	48 8b 00             	mov    (%rax),%rax
  8004203bb9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203bbf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203bc3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bc7:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203bcb:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203bce:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203bd1:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004203bd8:	00 00 00 
  8004203bdb:	48 8b 00             	mov    (%rax),%rax
  8004203bde:	48 39 c2             	cmp    %rax,%rdx
  8004203be1:	72 32                	jb     8004203c15 <page_insert+0x1fc>
  8004203be3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203be7:	48 89 c1             	mov    %rax,%rcx
  8004203bea:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004203bf1:	00 00 00 
  8004203bf4:	be 15 03 00 00       	mov    $0x315,%esi
  8004203bf9:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004203c00:	00 00 00 
  8004203c03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203c08:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203c0f:	00 00 00 
  8004203c12:	41 ff d0             	callq  *%r8
  8004203c15:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c1c:	00 00 00 
  8004203c1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203c23:	48 01 d0             	add    %rdx,%rax
  8004203c26:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203c2a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c2e:	48 c1 e8 15          	shr    $0x15,%rax
  8004203c32:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c37:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c3e:	00 
  8004203c3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203c43:	48 01 d0             	add    %rdx,%rax
  8004203c46:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203c4a:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203c4e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203c54:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203c5b:	00 
  8004203c5c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203c60:	48 01 ca             	add    %rcx,%rdx
  8004203c63:	48 8b 0a             	mov    (%rdx),%rcx
  8004203c66:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203c69:	80 e6 f1             	and    $0xf1,%dh
  8004203c6c:	48 63 d2             	movslq %edx,%rdx
  8004203c6f:	48 09 ca             	or     %rcx,%rdx
  8004203c72:	48 89 10             	mov    %rdx,(%rax)
  8004203c75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203c79:	48 8b 00             	mov    (%rax),%rax
  8004203c7c:	83 e0 01             	and    $0x1,%eax
  8004203c7f:	48 85 c0             	test   %rax,%rax
  8004203c82:	74 70                	je     8004203cf4 <page_insert+0x2db>
  8004203c84:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203c88:	48 89 c7             	mov    %rax,%rdi
  8004203c8b:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004203c92:	00 00 00 
  8004203c95:	ff d0                	callq  *%rax
  8004203c97:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203c9b:	48 8b 12             	mov    (%rdx),%rdx
  8004203c9e:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203ca5:	48 39 d0             	cmp    %rdx,%rax
  8004203ca8:	75 4a                	jne    8004203cf4 <page_insert+0x2db>
  8004203caa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cae:	48 8b 00             	mov    (%rax),%rax
  8004203cb1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cb7:	48 89 c2             	mov    %rax,%rdx
  8004203cba:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203cbd:	48 98                	cltq   
  8004203cbf:	48 09 d0             	or     %rdx,%rax
  8004203cc2:	48 83 c8 01          	or     $0x1,%rax
  8004203cc6:	48 89 c2             	mov    %rax,%rdx
  8004203cc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ccd:	48 89 10             	mov    %rdx,(%rax)
  8004203cd0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cd4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203cd8:	48 89 d6             	mov    %rdx,%rsi
  8004203cdb:	48 89 c7             	mov    %rax,%rdi
  8004203cde:	48 b8 87 3e 20 04 80 	movabs $0x8004203e87,%rax
  8004203ce5:	00 00 00 
  8004203ce8:	ff d0                	callq  *%rax
  8004203cea:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203cef:	e9 93 00 00 00       	jmpq   8004203d87 <page_insert+0x36e>
  8004203cf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cf8:	48 8b 00             	mov    (%rax),%rax
  8004203cfb:	83 e0 01             	and    $0x1,%eax
  8004203cfe:	48 85 c0             	test   %rax,%rax
  8004203d01:	74 1a                	je     8004203d1d <page_insert+0x304>
  8004203d03:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d0b:	48 89 d6             	mov    %rdx,%rsi
  8004203d0e:	48 89 c7             	mov    %rax,%rdi
  8004203d11:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  8004203d18:	00 00 00 
  8004203d1b:	ff d0                	callq  *%rax
  8004203d1d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d21:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203d25:	8d 50 01             	lea    0x1(%rax),%edx
  8004203d28:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d2c:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203d30:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d34:	48 89 c7             	mov    %rax,%rdi
  8004203d37:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004203d3e:	00 00 00 
  8004203d41:	ff d0                	callq  *%rax
  8004203d43:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203d46:	48 63 d2             	movslq %edx,%rdx
  8004203d49:	48 09 d0             	or     %rdx,%rax
  8004203d4c:	48 83 c8 01          	or     $0x1,%rax
  8004203d50:	48 89 c2             	mov    %rax,%rdx
  8004203d53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d57:	48 89 10             	mov    %rdx,(%rax)
  8004203d5a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d62:	48 89 d6             	mov    %rdx,%rsi
  8004203d65:	48 89 c7             	mov    %rax,%rdi
  8004203d68:	48 b8 87 3e 20 04 80 	movabs $0x8004203e87,%rax
  8004203d6f:	00 00 00 
  8004203d72:	ff d0                	callq  *%rax
  8004203d74:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d79:	eb 0c                	jmp    8004203d87 <page_insert+0x36e>
  8004203d7b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d80:	eb 05                	jmp    8004203d87 <page_insert+0x36e>
  8004203d82:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d87:	c9                   	leaveq 
  8004203d88:	c3                   	retq   

0000008004203d89 <page_lookup>:
  8004203d89:	55                   	push   %rbp
  8004203d8a:	48 89 e5             	mov    %rsp,%rbp
  8004203d8d:	48 83 ec 30          	sub    $0x30,%rsp
  8004203d91:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203d95:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203d99:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203d9d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203da2:	74 69                	je     8004203e0d <page_lookup+0x84>
  8004203da4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203da8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203dac:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203db1:	48 89 ce             	mov    %rcx,%rsi
  8004203db4:	48 89 c7             	mov    %rax,%rdi
  8004203db7:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004203dbe:	00 00 00 
  8004203dc1:	ff d0                	callq  *%rax
  8004203dc3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203dc7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203dcc:	74 3f                	je     8004203e0d <page_lookup+0x84>
  8004203dce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dd2:	48 8b 00             	mov    (%rax),%rax
  8004203dd5:	83 e0 01             	and    $0x1,%eax
  8004203dd8:	48 85 c0             	test   %rax,%rax
  8004203ddb:	74 30                	je     8004203e0d <page_lookup+0x84>
  8004203ddd:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203de2:	74 0b                	je     8004203def <page_lookup+0x66>
  8004203de4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203de8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203dec:	48 89 10             	mov    %rdx,(%rax)
  8004203def:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203df3:	48 8b 00             	mov    (%rax),%rax
  8004203df6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203dfc:	48 89 c7             	mov    %rax,%rdi
  8004203dff:	48 b8 4c 1b 20 04 80 	movabs $0x8004201b4c,%rax
  8004203e06:	00 00 00 
  8004203e09:	ff d0                	callq  *%rax
  8004203e0b:	eb 05                	jmp    8004203e12 <page_lookup+0x89>
  8004203e0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e12:	c9                   	leaveq 
  8004203e13:	c3                   	retq   

0000008004203e14 <page_remove>:
  8004203e14:	55                   	push   %rbp
  8004203e15:	48 89 e5             	mov    %rsp,%rbp
  8004203e18:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e1c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e20:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e24:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203e28:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203e2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e30:	48 89 ce             	mov    %rcx,%rsi
  8004203e33:	48 89 c7             	mov    %rax,%rdi
  8004203e36:	48 b8 89 3d 20 04 80 	movabs $0x8004203d89,%rax
  8004203e3d:	00 00 00 
  8004203e40:	ff d0                	callq  *%rax
  8004203e42:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203e46:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203e4b:	74 38                	je     8004203e85 <page_remove+0x71>
  8004203e4d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203e51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e55:	48 89 d6             	mov    %rdx,%rsi
  8004203e58:	48 89 c7             	mov    %rax,%rdi
  8004203e5b:	48 b8 87 3e 20 04 80 	movabs $0x8004203e87,%rax
  8004203e62:	00 00 00 
  8004203e65:	ff d0                	callq  *%rax
  8004203e67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e6b:	48 89 c7             	mov    %rax,%rdi
  8004203e6e:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004203e75:	00 00 00 
  8004203e78:	ff d0                	callq  *%rax
  8004203e7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203e7e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203e85:	c9                   	leaveq 
  8004203e86:	c3                   	retq   

0000008004203e87 <tlb_invalidate>:
  8004203e87:	55                   	push   %rbp
  8004203e88:	48 89 e5             	mov    %rsp,%rbp
  8004203e8b:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e8f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e93:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e97:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203e9c:	75 35                	jne    8004203ed3 <tlb_invalidate+0x4c>
  8004203e9e:	48 b9 37 e3 21 04 80 	movabs $0x800421e337,%rcx
  8004203ea5:	00 00 00 
  8004203ea8:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004203eaf:	00 00 00 
  8004203eb2:	be 72 03 00 00       	mov    $0x372,%esi
  8004203eb7:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004203ebe:	00 00 00 
  8004203ec1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ec6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004203ecd:	00 00 00 
  8004203ed0:	41 ff d0             	callq  *%r8
  8004203ed3:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004203eda:	00 00 00 
  8004203edd:	ff d0                	callq  *%rax
  8004203edf:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004203ee6:	00 00 00 
  8004203ee9:	48 98                	cltq   
  8004203eeb:	48 c1 e0 03          	shl    $0x3,%rax
  8004203eef:	48 89 c1             	mov    %rax,%rcx
  8004203ef2:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203ef6:	48 01 c8             	add    %rcx,%rax
  8004203ef9:	48 01 d0             	add    %rdx,%rax
  8004203efc:	48 83 c0 08          	add    $0x8,%rax
  8004203f00:	48 8b 00             	mov    (%rax),%rax
  8004203f03:	48 85 c0             	test   %rax,%rax
  8004203f06:	74 3d                	je     8004203f45 <tlb_invalidate+0xbe>
  8004203f08:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004203f0f:	00 00 00 
  8004203f12:	ff d0                	callq  *%rax
  8004203f14:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004203f1b:	00 00 00 
  8004203f1e:	48 98                	cltq   
  8004203f20:	48 c1 e0 03          	shl    $0x3,%rax
  8004203f24:	48 89 c1             	mov    %rax,%rcx
  8004203f27:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203f2b:	48 01 c8             	add    %rcx,%rax
  8004203f2e:	48 01 d0             	add    %rdx,%rax
  8004203f31:	48 83 c0 08          	add    $0x8,%rax
  8004203f35:	48 8b 00             	mov    (%rax),%rax
  8004203f38:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004203f3f:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004203f43:	75 0f                	jne    8004203f54 <tlb_invalidate+0xcd>
  8004203f45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203f49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004203f4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f51:	0f 01 38             	invlpg (%rax)
  8004203f54:	c9                   	leaveq 
  8004203f55:	c3                   	retq   

0000008004203f56 <mmio_map_region>:
  8004203f56:	55                   	push   %rbp
  8004203f57:	48 89 e5             	mov    %rsp,%rbp
  8004203f5a:	48 83 ec 30          	sub    $0x30,%rsp
  8004203f5e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004203f62:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004203f66:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203f6d:	00 00 00 
  8004203f70:	48 8b 00             	mov    (%rax),%rax
  8004203f73:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f77:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  8004203f7e:	00 
  8004203f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203f83:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203f87:	48 01 d0             	add    %rdx,%rax
  8004203f8a:	48 83 e8 01          	sub    $0x1,%rax
  8004203f8e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203f92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f96:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f9b:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004203f9f:	48 89 d0             	mov    %rdx,%rax
  8004203fa2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004203fa6:	48 29 c2             	sub    %rax,%rdx
  8004203fa9:	48 89 d0             	mov    %rdx,%rax
  8004203fac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203fb0:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fb7:	00 00 00 
  8004203fba:	48 8b 10             	mov    (%rax),%rdx
  8004203fbd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203fc1:	48 01 c2             	add    %rax,%rdx
  8004203fc4:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fcb:	00 00 00 
  8004203fce:	48 89 10             	mov    %rdx,(%rax)
  8004203fd1:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fd8:	00 00 00 
  8004203fdb:	48 8b 10             	mov    (%rax),%rdx
  8004203fde:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004203fe5:	00 00 00 
  8004203fe8:	48 39 c2             	cmp    %rax,%rdx
  8004203feb:	76 2a                	jbe    8004204017 <mmio_map_region+0xc1>
  8004203fed:	48 ba 48 e3 21 04 80 	movabs $0x800421e348,%rdx
  8004203ff4:	00 00 00 
  8004203ff7:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004203ffc:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204003:	00 00 00 
  8004204006:	b8 00 00 00 00       	mov    $0x0,%eax
  800420400b:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004204012:	00 00 00 
  8004204015:	ff d1                	callq  *%rcx
  8004204017:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420401e:	00 00 00 
  8004204021:	48 8b 00             	mov    (%rax),%rax
  8004204024:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004204028:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420402c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204030:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  8004204036:	48 89 c7             	mov    %rax,%rdi
  8004204039:	48 b8 36 37 20 04 80 	movabs $0x8004203736,%rax
  8004204040:	00 00 00 
  8004204043:	ff d0                	callq  *%rax
  8004204045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204049:	c9                   	leaveq 
  800420404a:	c3                   	retq   

000000800420404b <user_mem_check>:
  800420404b:	55                   	push   %rbp
  800420404c:	48 89 e5             	mov    %rsp,%rbp
  800420404f:	48 83 ec 40          	sub    $0x40,%rsp
  8004204053:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004204057:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420405b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800420405f:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004204062:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204066:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420406a:	48 01 d0             	add    %rdx,%rax
  800420406d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204071:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204075:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420407c:	00 00 00 
  800420407f:	48 39 c2             	cmp    %rax,%rdx
  8004204082:	77 0a                	ja     800420408e <user_mem_check+0x43>
  8004204084:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204088:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420408c:	76 1b                	jbe    80042040a9 <user_mem_check+0x5e>
  800420408e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204092:	48 b8 40 c2 4d 04 80 	movabs $0x80044dc240,%rax
  8004204099:	00 00 00 
  800420409c:	48 89 10             	mov    %rdx,(%rax)
  800420409f:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  80042040a4:	e9 c0 00 00 00       	jmpq   8004204169 <user_mem_check+0x11e>
  80042040a9:	e9 a8 00 00 00       	jmpq   8004204156 <user_mem_check+0x10b>
  80042040ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042040b2:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042040b9:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042040bd:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040c2:	48 89 ce             	mov    %rcx,%rsi
  80042040c5:	48 89 c7             	mov    %rax,%rdi
  80042040c8:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  80042040cf:	00 00 00 
  80042040d2:	ff d0                	callq  *%rax
  80042040d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042040d8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042040dd:	74 1f                	je     80042040fe <user_mem_check+0xb3>
  80042040df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040e3:	48 8b 10             	mov    (%rax),%rdx
  80042040e6:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040e9:	83 c8 01             	or     $0x1,%eax
  80042040ec:	48 98                	cltq   
  80042040ee:	48 21 c2             	and    %rax,%rdx
  80042040f1:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040f4:	83 c8 01             	or     $0x1,%eax
  80042040f7:	48 98                	cltq   
  80042040f9:	48 39 c2             	cmp    %rax,%rdx
  80042040fc:	74 18                	je     8004204116 <user_mem_check+0xcb>
  80042040fe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204102:	48 b8 40 c2 4d 04 80 	movabs $0x80044dc240,%rax
  8004204109:	00 00 00 
  800420410c:	48 89 10             	mov    %rdx,(%rax)
  800420410f:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204114:	eb 53                	jmp    8004204169 <user_mem_check+0x11e>
  8004204116:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  800420411d:	00 
  800420411e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204122:	48 83 c0 01          	add    $0x1,%rax
  8004204126:	48 89 c2             	mov    %rax,%rdx
  8004204129:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420412d:	48 01 d0             	add    %rdx,%rax
  8004204130:	48 83 e8 01          	sub    $0x1,%rax
  8004204134:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204138:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420413c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204141:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004204145:	48 89 d0             	mov    %rdx,%rax
  8004204148:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420414c:	48 29 c2             	sub    %rax,%rdx
  800420414f:	48 89 d0             	mov    %rdx,%rax
  8004204152:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204156:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420415a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420415e:	0f 82 4a ff ff ff    	jb     80042040ae <user_mem_check+0x63>
  8004204164:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204169:	c9                   	leaveq 
  800420416a:	c3                   	retq   

000000800420416b <user_mem_assert>:
  800420416b:	55                   	push   %rbp
  800420416c:	48 89 e5             	mov    %rsp,%rbp
  800420416f:	48 83 ec 20          	sub    $0x20,%rsp
  8004204173:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004204177:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420417b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420417f:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004204182:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204185:	83 c8 04             	or     $0x4,%eax
  8004204188:	89 c1                	mov    %eax,%ecx
  800420418a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420418e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004204192:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204196:	48 89 c7             	mov    %rax,%rdi
  8004204199:	48 b8 4b 40 20 04 80 	movabs $0x800420404b,%rax
  80042041a0:	00 00 00 
  80042041a3:	ff d0                	callq  *%rax
  80042041a5:	85 c0                	test   %eax,%eax
  80042041a7:	79 47                	jns    80042041f0 <user_mem_assert+0x85>
  80042041a9:	48 b8 40 c2 4d 04 80 	movabs $0x80044dc240,%rax
  80042041b0:	00 00 00 
  80042041b3:	48 8b 10             	mov    (%rax),%rdx
  80042041b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041ba:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042041c0:	89 c6                	mov    %eax,%esi
  80042041c2:	48 bf 68 e3 21 04 80 	movabs $0x800421e368,%rdi
  80042041c9:	00 00 00 
  80042041cc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042041d1:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042041d8:	00 00 00 
  80042041db:	ff d1                	callq  *%rcx
  80042041dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041e1:	48 89 c7             	mov    %rax,%rdi
  80042041e4:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  80042041eb:	00 00 00 
  80042041ee:	ff d0                	callq  *%rax
  80042041f0:	c9                   	leaveq 
  80042041f1:	c3                   	retq   

00000080042041f2 <check_page_free_list>:
  80042041f2:	55                   	push   %rbp
  80042041f3:	48 89 e5             	mov    %rsp,%rbp
  80042041f6:	48 83 ec 60          	sub    $0x60,%rsp
  80042041fa:	89 f8                	mov    %edi,%eax
  80042041fc:	88 45 ac             	mov    %al,-0x54(%rbp)
  80042041ff:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204203:	74 07                	je     800420420c <check_page_free_list+0x1a>
  8004204205:	b8 01 00 00 00       	mov    $0x1,%eax
  800420420a:	eb 05                	jmp    8004204211 <check_page_free_list+0x1f>
  800420420c:	b8 00 02 00 00       	mov    $0x200,%eax
  8004204211:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004204214:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420421b:	00 
  800420421c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204223:	00 
  8004204224:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  800420422b:	00 00 00 
  800420422e:	48 8b 00             	mov    (%rax),%rax
  8004204231:	48 85 c0             	test   %rax,%rax
  8004204234:	75 2a                	jne    8004204260 <check_page_free_list+0x6e>
  8004204236:	48 ba a0 e3 21 04 80 	movabs $0x800421e3a0,%rdx
  800420423d:	00 00 00 
  8004204240:	be fd 03 00 00       	mov    $0x3fd,%esi
  8004204245:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420424c:	00 00 00 
  800420424f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204254:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800420425b:	00 00 00 
  800420425e:	ff d1                	callq  *%rcx
  8004204260:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204264:	0f 84 a9 00 00 00    	je     8004204313 <check_page_free_list+0x121>
  800420426a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800420426e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004204272:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  8004204276:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420427a:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004204281:	00 00 00 
  8004204284:	48 8b 00             	mov    (%rax),%rax
  8004204287:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420428b:	eb 58                	jmp    80042042e5 <check_page_free_list+0xf3>
  800420428d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204291:	48 89 c7             	mov    %rax,%rdi
  8004204294:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420429b:	00 00 00 
  800420429e:	ff d0                	callq  *%rax
  80042042a0:	48 c1 e8 15          	shr    $0x15,%rax
  80042042a4:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042042a9:	48 89 c2             	mov    %rax,%rdx
  80042042ac:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042af:	48 39 c2             	cmp    %rax,%rdx
  80042042b2:	0f 93 c0             	setae  %al
  80042042b5:	0f b6 c0             	movzbl %al,%eax
  80042042b8:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042042bb:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042be:	48 98                	cltq   
  80042042c0:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042042c5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042c9:	48 89 10             	mov    %rdx,(%rax)
  80042042cc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042d0:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042d3:	48 98                	cltq   
  80042042d5:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  80042042da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042de:	48 8b 00             	mov    (%rax),%rax
  80042042e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042042e5:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042042ea:	75 a1                	jne    800420428d <check_page_free_list+0x9b>
  80042042ec:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042042f0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042042f7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042042fb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042042ff:	48 89 10             	mov    %rdx,(%rax)
  8004204302:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204306:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  800420430d:	00 00 00 
  8004204310:	48 89 10             	mov    %rdx,(%rax)
  8004204313:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  800420431a:	00 00 00 
  800420431d:	48 8b 00             	mov    (%rax),%rax
  8004204320:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204324:	eb 5e                	jmp    8004204384 <check_page_free_list+0x192>
  8004204326:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420432a:	48 89 c7             	mov    %rax,%rdi
  800420432d:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204334:	00 00 00 
  8004204337:	ff d0                	callq  *%rax
  8004204339:	48 c1 e8 15          	shr    $0x15,%rax
  800420433d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204342:	48 89 c2             	mov    %rax,%rdx
  8004204345:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204348:	48 39 c2             	cmp    %rax,%rdx
  800420434b:	73 2c                	jae    8004204379 <check_page_free_list+0x187>
  800420434d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204351:	48 89 c7             	mov    %rax,%rdi
  8004204354:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  800420435b:	00 00 00 
  800420435e:	ff d0                	callq  *%rax
  8004204360:	ba 80 00 00 00       	mov    $0x80,%edx
  8004204365:	be 97 00 00 00       	mov    $0x97,%esi
  800420436a:	48 89 c7             	mov    %rax,%rdi
  800420436d:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004204374:	00 00 00 
  8004204377:	ff d0                	callq  *%rax
  8004204379:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420437d:	48 8b 00             	mov    (%rax),%rax
  8004204380:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204384:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204389:	75 9b                	jne    8004204326 <check_page_free_list+0x134>
  800420438b:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204390:	48 b8 e6 24 20 04 80 	movabs $0x80042024e6,%rax
  8004204397:	00 00 00 
  800420439a:	ff d0                	callq  *%rax
  800420439c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042043a0:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  80042043a7:	00 00 00 
  80042043aa:	48 8b 00             	mov    (%rax),%rax
  80042043ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043b1:	e9 20 03 00 00       	jmpq   80042046d6 <check_page_free_list+0x4e4>
  80042043b6:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  80042043bd:	00 00 00 
  80042043c0:	48 8b 00             	mov    (%rax),%rax
  80042043c3:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042043c7:	73 35                	jae    80042043fe <check_page_free_list+0x20c>
  80042043c9:	48 b9 c4 e3 21 04 80 	movabs $0x800421e3c4,%rcx
  80042043d0:	00 00 00 
  80042043d3:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042043da:	00 00 00 
  80042043dd:	be 17 04 00 00       	mov    $0x417,%esi
  80042043e2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042043e9:	00 00 00 
  80042043ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042043f1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042043f8:	00 00 00 
  80042043fb:	41 ff d0             	callq  *%r8
  80042043fe:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004204405:	00 00 00 
  8004204408:	48 8b 10             	mov    (%rax),%rdx
  800420440b:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004204412:	00 00 00 
  8004204415:	48 8b 00             	mov    (%rax),%rax
  8004204418:	48 c1 e0 04          	shl    $0x4,%rax
  800420441c:	48 01 d0             	add    %rdx,%rax
  800420441f:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204423:	77 35                	ja     800420445a <check_page_free_list+0x268>
  8004204425:	48 b9 d0 e3 21 04 80 	movabs $0x800421e3d0,%rcx
  800420442c:	00 00 00 
  800420442f:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204436:	00 00 00 
  8004204439:	be 18 04 00 00       	mov    $0x418,%esi
  800420443e:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204445:	00 00 00 
  8004204448:	b8 00 00 00 00       	mov    $0x0,%eax
  800420444d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204454:	00 00 00 
  8004204457:	41 ff d0             	callq  *%r8
  800420445a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420445e:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004204465:	00 00 00 
  8004204468:	48 8b 00             	mov    (%rax),%rax
  800420446b:	48 29 c2             	sub    %rax,%rdx
  800420446e:	48 89 d0             	mov    %rdx,%rax
  8004204471:	83 e0 0f             	and    $0xf,%eax
  8004204474:	48 85 c0             	test   %rax,%rax
  8004204477:	74 35                	je     80042044ae <check_page_free_list+0x2bc>
  8004204479:	48 b9 e8 e3 21 04 80 	movabs $0x800421e3e8,%rcx
  8004204480:	00 00 00 
  8004204483:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420448a:	00 00 00 
  800420448d:	be 19 04 00 00       	mov    $0x419,%esi
  8004204492:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204499:	00 00 00 
  800420449c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044a1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042044a8:	00 00 00 
  80042044ab:	41 ff d0             	callq  *%r8
  80042044ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044b2:	48 89 c7             	mov    %rax,%rdi
  80042044b5:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042044bc:	00 00 00 
  80042044bf:	ff d0                	callq  *%rax
  80042044c1:	48 85 c0             	test   %rax,%rax
  80042044c4:	75 35                	jne    80042044fb <check_page_free_list+0x309>
  80042044c6:	48 b9 1a e4 21 04 80 	movabs $0x800421e41a,%rcx
  80042044cd:	00 00 00 
  80042044d0:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042044d7:	00 00 00 
  80042044da:	be 1c 04 00 00       	mov    $0x41c,%esi
  80042044df:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042044e6:	00 00 00 
  80042044e9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044ee:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042044f5:	00 00 00 
  80042044f8:	41 ff d0             	callq  *%r8
  80042044fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044ff:	48 89 c7             	mov    %rax,%rdi
  8004204502:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204509:	00 00 00 
  800420450c:	ff d0                	callq  *%rax
  800420450e:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004204514:	75 35                	jne    800420454b <check_page_free_list+0x359>
  8004204516:	48 b9 2b e4 21 04 80 	movabs $0x800421e42b,%rcx
  800420451d:	00 00 00 
  8004204520:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204527:	00 00 00 
  800420452a:	be 1d 04 00 00       	mov    $0x41d,%esi
  800420452f:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204536:	00 00 00 
  8004204539:	b8 00 00 00 00       	mov    $0x0,%eax
  800420453e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204545:	00 00 00 
  8004204548:	41 ff d0             	callq  *%r8
  800420454b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420454f:	48 89 c7             	mov    %rax,%rdi
  8004204552:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204559:	00 00 00 
  800420455c:	ff d0                	callq  *%rax
  800420455e:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204564:	75 35                	jne    800420459b <check_page_free_list+0x3a9>
  8004204566:	48 b9 48 e4 21 04 80 	movabs $0x800421e448,%rcx
  800420456d:	00 00 00 
  8004204570:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204577:	00 00 00 
  800420457a:	be 1e 04 00 00       	mov    $0x41e,%esi
  800420457f:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204586:	00 00 00 
  8004204589:	b8 00 00 00 00       	mov    $0x0,%eax
  800420458e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204595:	00 00 00 
  8004204598:	41 ff d0             	callq  *%r8
  800420459b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420459f:	48 89 c7             	mov    %rax,%rdi
  80042045a2:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042045a9:	00 00 00 
  80042045ac:	ff d0                	callq  *%rax
  80042045ae:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042045b4:	75 35                	jne    80042045eb <check_page_free_list+0x3f9>
  80042045b6:	48 b9 6b e4 21 04 80 	movabs $0x800421e46b,%rcx
  80042045bd:	00 00 00 
  80042045c0:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042045c7:	00 00 00 
  80042045ca:	be 1f 04 00 00       	mov    $0x41f,%esi
  80042045cf:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042045d6:	00 00 00 
  80042045d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045de:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042045e5:	00 00 00 
  80042045e8:	41 ff d0             	callq  *%r8
  80042045eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045ef:	48 89 c7             	mov    %rax,%rdi
  80042045f2:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042045f9:	00 00 00 
  80042045fc:	ff d0                	callq  *%rax
  80042045fe:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  8004204604:	76 4e                	jbe    8004204654 <check_page_free_list+0x462>
  8004204606:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420460a:	48 89 c7             	mov    %rax,%rdi
  800420460d:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  8004204614:	00 00 00 
  8004204617:	ff d0                	callq  *%rax
  8004204619:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420461d:	73 35                	jae    8004204654 <check_page_free_list+0x462>
  800420461f:	48 b9 88 e4 21 04 80 	movabs $0x800421e488,%rcx
  8004204626:	00 00 00 
  8004204629:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204630:	00 00 00 
  8004204633:	be 20 04 00 00       	mov    $0x420,%esi
  8004204638:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420463f:	00 00 00 
  8004204642:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204647:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420464e:	00 00 00 
  8004204651:	41 ff d0             	callq  *%r8
  8004204654:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204658:	48 89 c7             	mov    %rax,%rdi
  800420465b:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204662:	00 00 00 
  8004204665:	ff d0                	callq  *%rax
  8004204667:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  800420466d:	75 35                	jne    80042046a4 <check_page_free_list+0x4b2>
  800420466f:	48 b9 cd e4 21 04 80 	movabs $0x800421e4cd,%rcx
  8004204676:	00 00 00 
  8004204679:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204680:	00 00 00 
  8004204683:	be 23 04 00 00       	mov    $0x423,%esi
  8004204688:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420468f:	00 00 00 
  8004204692:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204697:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420469e:	00 00 00 
  80042046a1:	41 ff d0             	callq  *%r8
  80042046a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046a8:	48 89 c7             	mov    %rax,%rdi
  80042046ab:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042046b2:	00 00 00 
  80042046b5:	ff d0                	callq  *%rax
  80042046b7:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042046bd:	77 07                	ja     80042046c6 <check_page_free_list+0x4d4>
  80042046bf:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042046c4:	eb 05                	jmp    80042046cb <check_page_free_list+0x4d9>
  80042046c6:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042046cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046cf:	48 8b 00             	mov    (%rax),%rax
  80042046d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042046d6:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042046db:	0f 85 d5 fc ff ff    	jne    80042043b6 <check_page_free_list+0x1c4>
  80042046e1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042046e6:	75 35                	jne    800420471d <check_page_free_list+0x52b>
  80042046e8:	48 b9 ea e4 21 04 80 	movabs $0x800421e4ea,%rcx
  80042046ef:	00 00 00 
  80042046f2:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042046f9:	00 00 00 
  80042046fc:	be 2c 04 00 00       	mov    $0x42c,%esi
  8004204701:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204708:	00 00 00 
  800420470b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204710:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204717:	00 00 00 
  800420471a:	41 ff d0             	callq  *%r8
  800420471d:	c9                   	leaveq 
  800420471e:	c3                   	retq   

000000800420471f <check_page_alloc>:
  800420471f:	55                   	push   %rbp
  8004204720:	48 89 e5             	mov    %rsp,%rbp
  8004204723:	48 83 ec 40          	sub    $0x40,%rsp
  8004204727:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  800420472e:	00 00 00 
  8004204731:	48 8b 00             	mov    (%rax),%rax
  8004204734:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204738:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  800420473f:	eb 37                	jmp    8004204778 <check_page_alloc+0x59>
  8004204741:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204745:	48 89 c7             	mov    %rax,%rdi
  8004204748:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  800420474f:	00 00 00 
  8004204752:	ff d0                	callq  *%rax
  8004204754:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204759:	be 97 00 00 00       	mov    $0x97,%esi
  800420475e:	48 89 c7             	mov    %rax,%rdi
  8004204761:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004204768:	00 00 00 
  800420476b:	ff d0                	callq  *%rax
  800420476d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204771:	48 8b 00             	mov    (%rax),%rax
  8004204774:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204778:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420477d:	75 c2                	jne    8004204741 <check_page_alloc+0x22>
  800420477f:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004204786:	00 00 00 
  8004204789:	48 8b 00             	mov    (%rax),%rax
  800420478c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204790:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204797:	e9 ec 01 00 00       	jmpq   8004204988 <check_page_alloc+0x269>
  800420479c:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  80042047a3:	00 00 00 
  80042047a6:	48 8b 00             	mov    (%rax),%rax
  80042047a9:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042047ad:	73 35                	jae    80042047e4 <check_page_alloc+0xc5>
  80042047af:	48 b9 fb e4 21 04 80 	movabs $0x800421e4fb,%rcx
  80042047b6:	00 00 00 
  80042047b9:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042047c0:	00 00 00 
  80042047c3:	be 46 04 00 00       	mov    $0x446,%esi
  80042047c8:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042047cf:	00 00 00 
  80042047d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047d7:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042047de:	00 00 00 
  80042047e1:	41 ff d0             	callq  *%r8
  80042047e4:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  80042047eb:	00 00 00 
  80042047ee:	48 8b 10             	mov    (%rax),%rdx
  80042047f1:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042047f8:	00 00 00 
  80042047fb:	48 8b 00             	mov    (%rax),%rax
  80042047fe:	48 c1 e0 04          	shl    $0x4,%rax
  8004204802:	48 01 d0             	add    %rdx,%rax
  8004204805:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204809:	77 35                	ja     8004204840 <check_page_alloc+0x121>
  800420480b:	48 b9 08 e5 21 04 80 	movabs $0x800421e508,%rcx
  8004204812:	00 00 00 
  8004204815:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420481c:	00 00 00 
  800420481f:	be 47 04 00 00       	mov    $0x447,%esi
  8004204824:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420482b:	00 00 00 
  800420482e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204833:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420483a:	00 00 00 
  800420483d:	41 ff d0             	callq  *%r8
  8004204840:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204844:	48 89 c7             	mov    %rax,%rdi
  8004204847:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420484e:	00 00 00 
  8004204851:	ff d0                	callq  *%rax
  8004204853:	48 85 c0             	test   %rax,%rax
  8004204856:	75 35                	jne    800420488d <check_page_alloc+0x16e>
  8004204858:	48 b9 1d e5 21 04 80 	movabs $0x800421e51d,%rcx
  800420485f:	00 00 00 
  8004204862:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204869:	00 00 00 
  800420486c:	be 4a 04 00 00       	mov    $0x44a,%esi
  8004204871:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204878:	00 00 00 
  800420487b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204880:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204887:	00 00 00 
  800420488a:	41 ff d0             	callq  *%r8
  800420488d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204891:	48 89 c7             	mov    %rax,%rdi
  8004204894:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420489b:	00 00 00 
  800420489e:	ff d0                	callq  *%rax
  80042048a0:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  80042048a6:	75 35                	jne    80042048dd <check_page_alloc+0x1be>
  80042048a8:	48 b9 2f e5 21 04 80 	movabs $0x800421e52f,%rcx
  80042048af:	00 00 00 
  80042048b2:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042048b9:	00 00 00 
  80042048bc:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042048c1:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042048c8:	00 00 00 
  80042048cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042048d0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042048d7:	00 00 00 
  80042048da:	41 ff d0             	callq  *%r8
  80042048dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048e1:	48 89 c7             	mov    %rax,%rdi
  80042048e4:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042048eb:	00 00 00 
  80042048ee:	ff d0                	callq  *%rax
  80042048f0:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042048f6:	75 35                	jne    800420492d <check_page_alloc+0x20e>
  80042048f8:	48 b9 50 e5 21 04 80 	movabs $0x800421e550,%rcx
  80042048ff:	00 00 00 
  8004204902:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204909:	00 00 00 
  800420490c:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204911:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204918:	00 00 00 
  800420491b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204920:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204927:	00 00 00 
  800420492a:	41 ff d0             	callq  *%r8
  800420492d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204931:	48 89 c7             	mov    %rax,%rdi
  8004204934:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420493b:	00 00 00 
  800420493e:	ff d0                	callq  *%rax
  8004204940:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  8004204946:	75 35                	jne    800420497d <check_page_alloc+0x25e>
  8004204948:	48 b9 74 e5 21 04 80 	movabs $0x800421e574,%rcx
  800420494f:	00 00 00 
  8004204952:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204959:	00 00 00 
  800420495c:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204961:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204968:	00 00 00 
  800420496b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204970:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204977:	00 00 00 
  800420497a:	41 ff d0             	callq  *%r8
  800420497d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204981:	48 8b 00             	mov    (%rax),%rax
  8004204984:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204988:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420498d:	0f 85 09 fe ff ff    	jne    800420479c <check_page_alloc+0x7d>
  8004204993:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420499a:	00 
  800420499b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420499f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042049a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042049a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049ab:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049b0:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  80042049b7:	00 00 00 
  80042049ba:	ff d0                	callq  *%rax
  80042049bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049c0:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042049c5:	75 35                	jne    80042049fc <check_page_alloc+0x2dd>
  80042049c7:	48 b9 8f e5 21 04 80 	movabs $0x800421e58f,%rcx
  80042049ce:	00 00 00 
  80042049d1:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042049d8:	00 00 00 
  80042049db:	be 51 04 00 00       	mov    $0x451,%esi
  80042049e0:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042049e7:	00 00 00 
  80042049ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049ef:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042049f6:	00 00 00 
  80042049f9:	41 ff d0             	callq  *%r8
  80042049fc:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a01:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204a08:	00 00 00 
  8004204a0b:	ff d0                	callq  *%rax
  8004204a0d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204a11:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204a16:	75 35                	jne    8004204a4d <check_page_alloc+0x32e>
  8004204a18:	48 b9 a5 e5 21 04 80 	movabs $0x800421e5a5,%rcx
  8004204a1f:	00 00 00 
  8004204a22:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204a29:	00 00 00 
  8004204a2c:	be 52 04 00 00       	mov    $0x452,%esi
  8004204a31:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204a38:	00 00 00 
  8004204a3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a40:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204a47:	00 00 00 
  8004204a4a:	41 ff d0             	callq  *%r8
  8004204a4d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a52:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204a59:	00 00 00 
  8004204a5c:	ff d0                	callq  *%rax
  8004204a5e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204a62:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204a67:	75 35                	jne    8004204a9e <check_page_alloc+0x37f>
  8004204a69:	48 b9 bb e5 21 04 80 	movabs $0x800421e5bb,%rcx
  8004204a70:	00 00 00 
  8004204a73:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204a7a:	00 00 00 
  8004204a7d:	be 53 04 00 00       	mov    $0x453,%esi
  8004204a82:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204a89:	00 00 00 
  8004204a8c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a91:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204a98:	00 00 00 
  8004204a9b:	41 ff d0             	callq  *%r8
  8004204a9e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204aa3:	75 35                	jne    8004204ada <check_page_alloc+0x3bb>
  8004204aa5:	48 b9 d1 e5 21 04 80 	movabs $0x800421e5d1,%rcx
  8004204aac:	00 00 00 
  8004204aaf:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204ab6:	00 00 00 
  8004204ab9:	be 54 04 00 00       	mov    $0x454,%esi
  8004204abe:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204ac5:	00 00 00 
  8004204ac8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204acd:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204ad4:	00 00 00 
  8004204ad7:	41 ff d0             	callq  *%r8
  8004204ada:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204adf:	74 0a                	je     8004204aeb <check_page_alloc+0x3cc>
  8004204ae1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ae5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204ae9:	75 35                	jne    8004204b20 <check_page_alloc+0x401>
  8004204aeb:	48 b9 d5 e5 21 04 80 	movabs $0x800421e5d5,%rcx
  8004204af2:	00 00 00 
  8004204af5:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204afc:	00 00 00 
  8004204aff:	be 55 04 00 00       	mov    $0x455,%esi
  8004204b04:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204b0b:	00 00 00 
  8004204b0e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b13:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204b1a:	00 00 00 
  8004204b1d:	41 ff d0             	callq  *%r8
  8004204b20:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204b25:	74 14                	je     8004204b3b <check_page_alloc+0x41c>
  8004204b27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b2b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204b2f:	74 0a                	je     8004204b3b <check_page_alloc+0x41c>
  8004204b31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b35:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204b39:	75 35                	jne    8004204b70 <check_page_alloc+0x451>
  8004204b3b:	48 b9 e8 e5 21 04 80 	movabs $0x800421e5e8,%rcx
  8004204b42:	00 00 00 
  8004204b45:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204b4c:	00 00 00 
  8004204b4f:	be 56 04 00 00       	mov    $0x456,%esi
  8004204b54:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204b5b:	00 00 00 
  8004204b5e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b63:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204b6a:	00 00 00 
  8004204b6d:	41 ff d0             	callq  *%r8
  8004204b70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204b74:	48 89 c7             	mov    %rax,%rdi
  8004204b77:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204b7e:	00 00 00 
  8004204b81:	ff d0                	callq  *%rax
  8004204b83:	48 ba f8 b5 6d 04 80 	movabs $0x80046db5f8,%rdx
  8004204b8a:	00 00 00 
  8004204b8d:	48 8b 12             	mov    (%rdx),%rdx
  8004204b90:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204b94:	48 39 d0             	cmp    %rdx,%rax
  8004204b97:	72 35                	jb     8004204bce <check_page_alloc+0x4af>
  8004204b99:	48 b9 08 e6 21 04 80 	movabs $0x800421e608,%rcx
  8004204ba0:	00 00 00 
  8004204ba3:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204baa:	00 00 00 
  8004204bad:	be 57 04 00 00       	mov    $0x457,%esi
  8004204bb2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204bb9:	00 00 00 
  8004204bbc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bc1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204bc8:	00 00 00 
  8004204bcb:	41 ff d0             	callq  *%r8
  8004204bce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bd2:	48 89 c7             	mov    %rax,%rdi
  8004204bd5:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204bdc:	00 00 00 
  8004204bdf:	ff d0                	callq  *%rax
  8004204be1:	48 ba f8 b5 6d 04 80 	movabs $0x80046db5f8,%rdx
  8004204be8:	00 00 00 
  8004204beb:	48 8b 12             	mov    (%rdx),%rdx
  8004204bee:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204bf2:	48 39 d0             	cmp    %rdx,%rax
  8004204bf5:	72 35                	jb     8004204c2c <check_page_alloc+0x50d>
  8004204bf7:	48 b9 25 e6 21 04 80 	movabs $0x800421e625,%rcx
  8004204bfe:	00 00 00 
  8004204c01:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204c08:	00 00 00 
  8004204c0b:	be 58 04 00 00       	mov    $0x458,%esi
  8004204c10:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204c17:	00 00 00 
  8004204c1a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c1f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204c26:	00 00 00 
  8004204c29:	41 ff d0             	callq  *%r8
  8004204c2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c30:	48 89 c7             	mov    %rax,%rdi
  8004204c33:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004204c3a:	00 00 00 
  8004204c3d:	ff d0                	callq  *%rax
  8004204c3f:	48 ba f8 b5 6d 04 80 	movabs $0x80046db5f8,%rdx
  8004204c46:	00 00 00 
  8004204c49:	48 8b 12             	mov    (%rdx),%rdx
  8004204c4c:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204c50:	48 39 d0             	cmp    %rdx,%rax
  8004204c53:	72 35                	jb     8004204c8a <check_page_alloc+0x56b>
  8004204c55:	48 b9 42 e6 21 04 80 	movabs $0x800421e642,%rcx
  8004204c5c:	00 00 00 
  8004204c5f:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204c66:	00 00 00 
  8004204c69:	be 59 04 00 00       	mov    $0x459,%esi
  8004204c6e:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204c75:	00 00 00 
  8004204c78:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c7d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204c84:	00 00 00 
  8004204c87:	41 ff d0             	callq  *%r8
  8004204c8a:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004204c91:	00 00 00 
  8004204c94:	48 8b 00             	mov    (%rax),%rax
  8004204c97:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204c9b:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004204ca2:	00 00 00 
  8004204ca5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204cac:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204cb1:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204cb8:	00 00 00 
  8004204cbb:	ff d0                	callq  *%rax
  8004204cbd:	48 85 c0             	test   %rax,%rax
  8004204cc0:	74 35                	je     8004204cf7 <check_page_alloc+0x5d8>
  8004204cc2:	48 b9 5f e6 21 04 80 	movabs $0x800421e65f,%rcx
  8004204cc9:	00 00 00 
  8004204ccc:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204cd3:	00 00 00 
  8004204cd6:	be 60 04 00 00       	mov    $0x460,%esi
  8004204cdb:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204ce2:	00 00 00 
  8004204ce5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cea:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204cf1:	00 00 00 
  8004204cf4:	41 ff d0             	callq  *%r8
  8004204cf7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cfb:	48 89 c7             	mov    %rax,%rdi
  8004204cfe:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004204d05:	00 00 00 
  8004204d08:	ff d0                	callq  *%rax
  8004204d0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d0e:	48 89 c7             	mov    %rax,%rdi
  8004204d11:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004204d18:	00 00 00 
  8004204d1b:	ff d0                	callq  *%rax
  8004204d1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d21:	48 89 c7             	mov    %rax,%rdi
  8004204d24:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004204d2b:	00 00 00 
  8004204d2e:	ff d0                	callq  *%rax
  8004204d30:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204d37:	00 
  8004204d38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d3c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204d40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d48:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d4d:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204d54:	00 00 00 
  8004204d57:	ff d0                	callq  *%rax
  8004204d59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204d62:	75 35                	jne    8004204d99 <check_page_alloc+0x67a>
  8004204d64:	48 b9 8f e5 21 04 80 	movabs $0x800421e58f,%rcx
  8004204d6b:	00 00 00 
  8004204d6e:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204d75:	00 00 00 
  8004204d78:	be 67 04 00 00       	mov    $0x467,%esi
  8004204d7d:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204d84:	00 00 00 
  8004204d87:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d8c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204d93:	00 00 00 
  8004204d96:	41 ff d0             	callq  *%r8
  8004204d99:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d9e:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204da5:	00 00 00 
  8004204da8:	ff d0                	callq  *%rax
  8004204daa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204dae:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204db3:	75 35                	jne    8004204dea <check_page_alloc+0x6cb>
  8004204db5:	48 b9 a5 e5 21 04 80 	movabs $0x800421e5a5,%rcx
  8004204dbc:	00 00 00 
  8004204dbf:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204dc6:	00 00 00 
  8004204dc9:	be 68 04 00 00       	mov    $0x468,%esi
  8004204dce:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204dd5:	00 00 00 
  8004204dd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ddd:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204de4:	00 00 00 
  8004204de7:	41 ff d0             	callq  *%r8
  8004204dea:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204def:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204df6:	00 00 00 
  8004204df9:	ff d0                	callq  *%rax
  8004204dfb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204dff:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204e04:	75 35                	jne    8004204e3b <check_page_alloc+0x71c>
  8004204e06:	48 b9 bb e5 21 04 80 	movabs $0x800421e5bb,%rcx
  8004204e0d:	00 00 00 
  8004204e10:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204e17:	00 00 00 
  8004204e1a:	be 69 04 00 00       	mov    $0x469,%esi
  8004204e1f:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204e26:	00 00 00 
  8004204e29:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e2e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204e35:	00 00 00 
  8004204e38:	41 ff d0             	callq  *%r8
  8004204e3b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e40:	75 35                	jne    8004204e77 <check_page_alloc+0x758>
  8004204e42:	48 b9 d1 e5 21 04 80 	movabs $0x800421e5d1,%rcx
  8004204e49:	00 00 00 
  8004204e4c:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204e53:	00 00 00 
  8004204e56:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204e5b:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204e62:	00 00 00 
  8004204e65:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e6a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204e71:	00 00 00 
  8004204e74:	41 ff d0             	callq  *%r8
  8004204e77:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204e7c:	74 0a                	je     8004204e88 <check_page_alloc+0x769>
  8004204e7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e82:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204e86:	75 35                	jne    8004204ebd <check_page_alloc+0x79e>
  8004204e88:	48 b9 d5 e5 21 04 80 	movabs $0x800421e5d5,%rcx
  8004204e8f:	00 00 00 
  8004204e92:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204e99:	00 00 00 
  8004204e9c:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204ea1:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204ea8:	00 00 00 
  8004204eab:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204eb0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204eb7:	00 00 00 
  8004204eba:	41 ff d0             	callq  *%r8
  8004204ebd:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204ec2:	74 14                	je     8004204ed8 <check_page_alloc+0x7b9>
  8004204ec4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ec8:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204ecc:	74 0a                	je     8004204ed8 <check_page_alloc+0x7b9>
  8004204ece:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ed2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204ed6:	75 35                	jne    8004204f0d <check_page_alloc+0x7ee>
  8004204ed8:	48 b9 e8 e5 21 04 80 	movabs $0x800421e5e8,%rcx
  8004204edf:	00 00 00 
  8004204ee2:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204ee9:	00 00 00 
  8004204eec:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004204ef1:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204ef8:	00 00 00 
  8004204efb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f00:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204f07:	00 00 00 
  8004204f0a:	41 ff d0             	callq  *%r8
  8004204f0d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f12:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204f19:	00 00 00 
  8004204f1c:	ff d0                	callq  *%rax
  8004204f1e:	48 85 c0             	test   %rax,%rax
  8004204f21:	74 35                	je     8004204f58 <check_page_alloc+0x839>
  8004204f23:	48 b9 5f e6 21 04 80 	movabs $0x800421e65f,%rcx
  8004204f2a:	00 00 00 
  8004204f2d:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204f34:	00 00 00 
  8004204f37:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004204f3c:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204f43:	00 00 00 
  8004204f46:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f4b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204f52:	00 00 00 
  8004204f55:	41 ff d0             	callq  *%r8
  8004204f58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f5c:	48 89 c7             	mov    %rax,%rdi
  8004204f5f:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  8004204f66:	00 00 00 
  8004204f69:	ff d0                	callq  *%rax
  8004204f6b:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204f70:	be 01 00 00 00       	mov    $0x1,%esi
  8004204f75:	48 89 c7             	mov    %rax,%rdi
  8004204f78:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004204f7f:	00 00 00 
  8004204f82:	ff d0                	callq  *%rax
  8004204f84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f88:	48 89 c7             	mov    %rax,%rdi
  8004204f8b:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004204f92:	00 00 00 
  8004204f95:	ff d0                	callq  *%rax
  8004204f97:	bf 01 00 00 00       	mov    $0x1,%edi
  8004204f9c:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004204fa3:	00 00 00 
  8004204fa6:	ff d0                	callq  *%rax
  8004204fa8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204fac:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fb1:	75 35                	jne    8004204fe8 <check_page_alloc+0x8c9>
  8004204fb3:	48 b9 6e e6 21 04 80 	movabs $0x800421e66e,%rcx
  8004204fba:	00 00 00 
  8004204fbd:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004204fc4:	00 00 00 
  8004204fc7:	be 72 04 00 00       	mov    $0x472,%esi
  8004204fcc:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004204fd3:	00 00 00 
  8004204fd6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fdb:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004204fe2:	00 00 00 
  8004204fe5:	41 ff d0             	callq  *%r8
  8004204fe8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fed:	74 0a                	je     8004204ff9 <check_page_alloc+0x8da>
  8004204fef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204ff3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204ff7:	74 35                	je     800420502e <check_page_alloc+0x90f>
  8004204ff9:	48 b9 8c e6 21 04 80 	movabs $0x800421e68c,%rcx
  8004205000:	00 00 00 
  8004205003:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420500a:	00 00 00 
  800420500d:	be 73 04 00 00       	mov    $0x473,%esi
  8004205012:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205019:	00 00 00 
  800420501c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205021:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205028:	00 00 00 
  800420502b:	41 ff d0             	callq  *%r8
  800420502e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205032:	48 89 c7             	mov    %rax,%rdi
  8004205035:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  800420503c:	00 00 00 
  800420503f:	ff d0                	callq  *%rax
  8004205041:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205045:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800420504c:	eb 4d                	jmp    800420509b <check_page_alloc+0x97c>
  800420504e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004205051:	48 63 d0             	movslq %eax,%rdx
  8004205054:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205058:	48 01 d0             	add    %rdx,%rax
  800420505b:	0f b6 00             	movzbl (%rax),%eax
  800420505e:	84 c0                	test   %al,%al
  8004205060:	74 35                	je     8004205097 <check_page_alloc+0x978>
  8004205062:	48 b9 9c e6 21 04 80 	movabs $0x800421e69c,%rcx
  8004205069:	00 00 00 
  800420506c:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205073:	00 00 00 
  8004205076:	be 76 04 00 00       	mov    $0x476,%esi
  800420507b:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205082:	00 00 00 
  8004205085:	b8 00 00 00 00       	mov    $0x0,%eax
  800420508a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205091:	00 00 00 
  8004205094:	41 ff d0             	callq  *%r8
  8004205097:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800420509b:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  80042050a2:	7e aa                	jle    800420504e <check_page_alloc+0x92f>
  80042050a4:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  80042050ab:	00 00 00 
  80042050ae:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042050b2:	48 89 10             	mov    %rdx,(%rax)
  80042050b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050b9:	48 89 c7             	mov    %rax,%rdi
  80042050bc:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042050c3:	00 00 00 
  80042050c6:	ff d0                	callq  *%rax
  80042050c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042050cc:	48 89 c7             	mov    %rax,%rdi
  80042050cf:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042050d6:	00 00 00 
  80042050d9:	ff d0                	callq  *%rax
  80042050db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042050df:	48 89 c7             	mov    %rax,%rdi
  80042050e2:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042050e9:	00 00 00 
  80042050ec:	ff d0                	callq  *%rax
  80042050ee:	48 bf a8 e6 21 04 80 	movabs $0x800421e6a8,%rdi
  80042050f5:	00 00 00 
  80042050f8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050fd:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004205104:	00 00 00 
  8004205107:	ff d2                	callq  *%rdx
  8004205109:	c9                   	leaveq 
  800420510a:	c3                   	retq   

000000800420510b <check_boot_pml4e>:
  800420510b:	55                   	push   %rbp
  800420510c:	48 89 e5             	mov    %rsp,%rbp
  800420510f:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  8004205116:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  800420511d:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004205124:	00 00 00 
  8004205127:	48 8b 00             	mov    (%rax),%rax
  800420512a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420512e:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004205135:	00 
  8004205136:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420513d:	00 00 00 
  8004205140:	48 8b 00             	mov    (%rax),%rax
  8004205143:	48 c1 e0 04          	shl    $0x4,%rax
  8004205147:	48 89 c2             	mov    %rax,%rdx
  800420514a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420514e:	48 01 d0             	add    %rdx,%rax
  8004205151:	48 83 e8 01          	sub    $0x1,%rax
  8004205155:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205159:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420515d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205162:	48 f7 75 e0          	divq   -0x20(%rbp)
  8004205166:	48 89 d0             	mov    %rdx,%rax
  8004205169:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800420516d:	48 29 c2             	sub    %rax,%rdx
  8004205170:	48 89 d0             	mov    %rdx,%rax
  8004205173:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004205177:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420517e:	00 
  800420517f:	e9 d4 00 00 00       	jmpq   8004205258 <check_boot_pml4e+0x14d>
  8004205184:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  800420518b:	00 00 00 
  800420518e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205192:	48 01 c2             	add    %rax,%rdx
  8004205195:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205199:	48 89 d6             	mov    %rdx,%rsi
  800420519c:	48 89 c7             	mov    %rax,%rdi
  800420519f:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  80042051a6:	00 00 00 
  80042051a9:	ff d0                	callq  *%rax
  80042051ab:	48 ba 00 b6 6d 04 80 	movabs $0x80046db600,%rdx
  80042051b2:	00 00 00 
  80042051b5:	48 8b 12             	mov    (%rdx),%rdx
  80042051b8:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042051bc:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042051c3:	00 00 00 
  80042051c6:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  80042051ca:	77 32                	ja     80042051fe <check_boot_pml4e+0xf3>
  80042051cc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042051d0:	48 89 c1             	mov    %rax,%rcx
  80042051d3:	48 ba e8 e2 21 04 80 	movabs $0x800421e2e8,%rdx
  80042051da:	00 00 00 
  80042051dd:	be 96 04 00 00       	mov    $0x496,%esi
  80042051e2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042051e9:	00 00 00 
  80042051ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051f1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042051f8:	00 00 00 
  80042051fb:	41 ff d0             	callq  *%r8
  80042051fe:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205205:	ff ff ff 
  8004205208:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420520c:	48 01 d1             	add    %rdx,%rcx
  800420520f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205213:	48 01 ca             	add    %rcx,%rdx
  8004205216:	48 39 d0             	cmp    %rdx,%rax
  8004205219:	74 35                	je     8004205250 <check_boot_pml4e+0x145>
  800420521b:	48 b9 c8 e6 21 04 80 	movabs $0x800421e6c8,%rcx
  8004205222:	00 00 00 
  8004205225:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420522c:	00 00 00 
  800420522f:	be 96 04 00 00       	mov    $0x496,%esi
  8004205234:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420523b:	00 00 00 
  800420523e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205243:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420524a:	00 00 00 
  800420524d:	41 ff d0             	callq  *%r8
  8004205250:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  8004205257:	00 
  8004205258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420525c:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205260:	0f 82 1e ff ff ff    	jb     8004205184 <check_boot_pml4e+0x79>
  8004205266:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  800420526d:	00 
  800420526e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205272:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004205278:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420527c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205280:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205285:	48 f7 75 c8          	divq   -0x38(%rbp)
  8004205289:	48 89 d0             	mov    %rdx,%rax
  800420528c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004205290:	48 29 c2             	sub    %rax,%rdx
  8004205293:	48 89 d0             	mov    %rdx,%rax
  8004205296:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420529a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042052a1:	00 
  80042052a2:	e9 d4 00 00 00       	jmpq   800420537b <check_boot_pml4e+0x270>
  80042052a7:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042052ae:	00 00 00 
  80042052b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052b5:	48 01 c2             	add    %rax,%rdx
  80042052b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052bc:	48 89 d6             	mov    %rdx,%rsi
  80042052bf:	48 89 c7             	mov    %rax,%rdi
  80042052c2:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  80042052c9:	00 00 00 
  80042052cc:	ff d0                	callq  *%rax
  80042052ce:	48 ba 58 c2 4d 04 80 	movabs $0x80044dc258,%rdx
  80042052d5:	00 00 00 
  80042052d8:	48 8b 12             	mov    (%rdx),%rdx
  80042052db:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042052df:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052e6:	00 00 00 
  80042052e9:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  80042052ed:	77 32                	ja     8004205321 <check_boot_pml4e+0x216>
  80042052ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042052f3:	48 89 c1             	mov    %rax,%rcx
  80042052f6:	48 ba e8 e2 21 04 80 	movabs $0x800421e2e8,%rdx
  80042052fd:	00 00 00 
  8004205300:	be 9d 04 00 00       	mov    $0x49d,%esi
  8004205305:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420530c:	00 00 00 
  800420530f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205314:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420531b:	00 00 00 
  800420531e:	41 ff d0             	callq  *%r8
  8004205321:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004205328:	ff ff ff 
  800420532b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800420532f:	48 01 d1             	add    %rdx,%rcx
  8004205332:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205336:	48 01 ca             	add    %rcx,%rdx
  8004205339:	48 39 d0             	cmp    %rdx,%rax
  800420533c:	74 35                	je     8004205373 <check_boot_pml4e+0x268>
  800420533e:	48 b9 00 e7 21 04 80 	movabs $0x800421e700,%rcx
  8004205345:	00 00 00 
  8004205348:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420534f:	00 00 00 
  8004205352:	be 9d 04 00 00       	mov    $0x49d,%esi
  8004205357:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420535e:	00 00 00 
  8004205361:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205366:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420536d:	00 00 00 
  8004205370:	41 ff d0             	callq  *%r8
  8004205373:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420537a:	00 
  800420537b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420537f:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205383:	0f 82 1e ff ff ff    	jb     80042052a7 <check_boot_pml4e+0x19c>
  8004205389:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205390:	00 
  8004205391:	eb 6a                	jmp    80042053fd <check_boot_pml4e+0x2f2>
  8004205393:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420539a:	00 00 00 
  800420539d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042053a1:	48 01 c2             	add    %rax,%rdx
  80042053a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042053a8:	48 89 d6             	mov    %rdx,%rsi
  80042053ab:	48 89 c7             	mov    %rax,%rdi
  80042053ae:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  80042053b5:	00 00 00 
  80042053b8:	ff d0                	callq  *%rax
  80042053ba:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042053be:	74 35                	je     80042053f5 <check_boot_pml4e+0x2ea>
  80042053c0:	48 b9 38 e7 21 04 80 	movabs $0x800421e738,%rcx
  80042053c7:	00 00 00 
  80042053ca:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042053d1:	00 00 00 
  80042053d4:	be a2 04 00 00       	mov    $0x4a2,%esi
  80042053d9:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042053e0:	00 00 00 
  80042053e3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053e8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042053ef:	00 00 00 
  80042053f2:	41 ff d0             	callq  *%r8
  80042053f5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042053fc:	00 
  80042053fd:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004205404:	00 00 00 
  8004205407:	48 8b 00             	mov    (%rax),%rax
  800420540a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420540e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205412:	0f 87 7b ff ff ff    	ja     8004205393 <check_boot_pml4e+0x288>
  8004205418:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420541f:	00 
  8004205420:	e9 a1 01 00 00       	jmpq   80042055c6 <check_boot_pml4e+0x4bb>
  8004205425:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004205429:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420542d:	48 89 d0             	mov    %rdx,%rax
  8004205430:	48 01 c0             	add    %rax,%rax
  8004205433:	48 01 d0             	add    %rdx,%rax
  8004205436:	48 c1 e0 0f          	shl    $0xf,%rax
  800420543a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205441:	00 00 00 
  8004205444:	48 29 c2             	sub    %rax,%rdx
  8004205447:	48 89 d0             	mov    %rdx,%rax
  800420544a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420544e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205455:	00 
  8004205456:	e9 e0 00 00 00       	jmpq   800420553b <check_boot_pml4e+0x430>
  800420545b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420545f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205463:	48 01 d0             	add    %rdx,%rax
  8004205466:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  800420546d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205471:	48 89 d6             	mov    %rdx,%rsi
  8004205474:	48 89 c7             	mov    %rax,%rdi
  8004205477:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420547e:	00 00 00 
  8004205481:	ff d0                	callq  *%rax
  8004205483:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004205487:	48 89 d1             	mov    %rdx,%rcx
  800420548a:	48 c1 e1 10          	shl    $0x10,%rcx
  800420548e:	48 ba 00 e0 6d 04 80 	movabs $0x80046de000,%rdx
  8004205495:	00 00 00 
  8004205498:	48 01 ca             	add    %rcx,%rdx
  800420549b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  800420549f:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042054a6:	00 00 00 
  80042054a9:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042054ad:	77 32                	ja     80042054e1 <check_boot_pml4e+0x3d6>
  80042054af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042054b3:	48 89 c1             	mov    %rax,%rcx
  80042054b6:	48 ba e8 e2 21 04 80 	movabs $0x800421e2e8,%rdx
  80042054bd:	00 00 00 
  80042054c0:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042054c5:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042054cc:	00 00 00 
  80042054cf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054d4:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042054db:	00 00 00 
  80042054de:	41 ff d0             	callq  *%r8
  80042054e1:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042054e8:	ff ff ff 
  80042054eb:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042054ef:	48 01 d1             	add    %rdx,%rcx
  80042054f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042054f6:	48 01 ca             	add    %rcx,%rdx
  80042054f9:	48 39 d0             	cmp    %rdx,%rax
  80042054fc:	74 35                	je     8004205533 <check_boot_pml4e+0x428>
  80042054fe:	48 b9 60 e7 21 04 80 	movabs $0x800421e760,%rcx
  8004205505:	00 00 00 
  8004205508:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420550f:	00 00 00 
  8004205512:	be ab 04 00 00       	mov    $0x4ab,%esi
  8004205517:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420551e:	00 00 00 
  8004205521:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205526:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420552d:	00 00 00 
  8004205530:	41 ff d0             	callq  *%r8
  8004205533:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420553a:	00 
  800420553b:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  8004205542:	00 
  8004205543:	0f 86 12 ff ff ff    	jbe    800420545b <check_boot_pml4e+0x350>
  8004205549:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205550:	00 
  8004205551:	eb 64                	jmp    80042055b7 <check_boot_pml4e+0x4ac>
  8004205553:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205557:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420555b:	48 01 c2             	add    %rax,%rdx
  800420555e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205562:	48 89 d6             	mov    %rdx,%rsi
  8004205565:	48 89 c7             	mov    %rax,%rdi
  8004205568:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420556f:	00 00 00 
  8004205572:	ff d0                	callq  *%rax
  8004205574:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004205578:	74 35                	je     80042055af <check_boot_pml4e+0x4a4>
  800420557a:	48 b9 a8 e7 21 04 80 	movabs $0x800421e7a8,%rcx
  8004205581:	00 00 00 
  8004205584:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420558b:	00 00 00 
  800420558e:	be ad 04 00 00       	mov    $0x4ad,%esi
  8004205593:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420559a:	00 00 00 
  800420559d:	b8 00 00 00 00       	mov    $0x0,%eax
  80042055a2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042055a9:	00 00 00 
  80042055ac:	41 ff d0             	callq  *%r8
  80042055af:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042055b6:	00 
  80042055b7:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042055be:	00 
  80042055bf:	76 92                	jbe    8004205553 <check_boot_pml4e+0x448>
  80042055c1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042055c6:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  80042055cb:	0f 86 54 fe ff ff    	jbe    8004205425 <check_boot_pml4e+0x31a>
  80042055d1:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042055d8:	00 00 00 
  80042055db:	48 8b 00             	mov    (%rax),%rax
  80042055de:	48 83 c0 08          	add    $0x8,%rax
  80042055e2:	48 8b 00             	mov    (%rax),%rax
  80042055e5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042055eb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042055ef:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042055f3:	48 c1 e8 0c          	shr    $0xc,%rax
  80042055f7:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042055fa:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042055fd:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004205604:	00 00 00 
  8004205607:	48 8b 00             	mov    (%rax),%rax
  800420560a:	48 39 c2             	cmp    %rax,%rdx
  800420560d:	72 32                	jb     8004205641 <check_boot_pml4e+0x536>
  800420560f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205613:	48 89 c1             	mov    %rax,%rcx
  8004205616:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  800420561d:	00 00 00 
  8004205620:	be b7 04 00 00       	mov    $0x4b7,%esi
  8004205625:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420562c:	00 00 00 
  800420562f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205634:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420563b:	00 00 00 
  800420563e:	41 ff d0             	callq  *%r8
  8004205641:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205648:	00 00 00 
  800420564b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420564f:	48 01 d0             	add    %rdx,%rax
  8004205652:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004205656:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420565a:	48 8b 00             	mov    (%rax),%rax
  800420565d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205663:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004205667:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420566b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420566f:	89 45 84             	mov    %eax,-0x7c(%rbp)
  8004205672:	8b 55 84             	mov    -0x7c(%rbp),%edx
  8004205675:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420567c:	00 00 00 
  800420567f:	48 8b 00             	mov    (%rax),%rax
  8004205682:	48 39 c2             	cmp    %rax,%rdx
  8004205685:	72 32                	jb     80042056b9 <check_boot_pml4e+0x5ae>
  8004205687:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420568b:	48 89 c1             	mov    %rax,%rcx
  800420568e:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004205695:	00 00 00 
  8004205698:	be b8 04 00 00       	mov    $0x4b8,%esi
  800420569d:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042056a4:	00 00 00 
  80042056a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056ac:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042056b3:	00 00 00 
  80042056b6:	41 ff d0             	callq  *%r8
  80042056b9:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042056c0:	00 00 00 
  80042056c3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042056c7:	48 01 d0             	add    %rdx,%rax
  80042056ca:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042056d1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042056d8:	00 
  80042056d9:	e9 50 01 00 00       	jmpq   800420582e <check_boot_pml4e+0x723>
  80042056de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056e2:	48 83 f8 04          	cmp    $0x4,%rax
  80042056e6:	72 67                	jb     800420574f <check_boot_pml4e+0x644>
  80042056e8:	48 83 f8 05          	cmp    $0x5,%rax
  80042056ec:	76 06                	jbe    80042056f4 <check_boot_pml4e+0x5e9>
  80042056ee:	48 83 f8 1f          	cmp    $0x1f,%rax
  80042056f2:	75 5b                	jne    800420574f <check_boot_pml4e+0x644>
  80042056f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056f8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042056ff:	00 
  8004205700:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205707:	48 01 d0             	add    %rdx,%rax
  800420570a:	48 8b 00             	mov    (%rax),%rax
  800420570d:	83 e0 01             	and    $0x1,%eax
  8004205710:	48 85 c0             	test   %rax,%rax
  8004205713:	75 35                	jne    800420574a <check_boot_pml4e+0x63f>
  8004205715:	48 b9 cb e7 21 04 80 	movabs $0x800421e7cb,%rcx
  800420571c:	00 00 00 
  800420571f:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205726:	00 00 00 
  8004205729:	be c2 04 00 00       	mov    $0x4c2,%esi
  800420572e:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205735:	00 00 00 
  8004205738:	b8 00 00 00 00       	mov    $0x0,%eax
  800420573d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205744:	00 00 00 
  8004205747:	41 ff d0             	callq  *%r8
  800420574a:	e9 da 00 00 00       	jmpq   8004205829 <check_boot_pml4e+0x71e>
  800420574f:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  8004205754:	0f 86 ce 00 00 00    	jbe    8004205828 <check_boot_pml4e+0x71d>
  800420575a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420575e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205765:	00 
  8004205766:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420576d:	48 01 d0             	add    %rdx,%rax
  8004205770:	48 8b 00             	mov    (%rax),%rax
  8004205773:	83 e0 01             	and    $0x1,%eax
  8004205776:	48 85 c0             	test   %rax,%rax
  8004205779:	74 5a                	je     80042057d5 <check_boot_pml4e+0x6ca>
  800420577b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420577f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205786:	00 
  8004205787:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420578e:	48 01 d0             	add    %rdx,%rax
  8004205791:	48 8b 00             	mov    (%rax),%rax
  8004205794:	83 e0 02             	and    $0x2,%eax
  8004205797:	48 85 c0             	test   %rax,%rax
  800420579a:	0f 85 88 00 00 00    	jne    8004205828 <check_boot_pml4e+0x71d>
  80042057a0:	48 b9 dc e7 21 04 80 	movabs $0x800421e7dc,%rcx
  80042057a7:	00 00 00 
  80042057aa:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042057b1:	00 00 00 
  80042057b4:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042057b9:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042057c0:	00 00 00 
  80042057c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057c8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042057cf:	00 00 00 
  80042057d2:	41 ff d0             	callq  *%r8
  80042057d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042057d9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042057e0:	00 
  80042057e1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042057e8:	48 01 d0             	add    %rdx,%rax
  80042057eb:	48 8b 00             	mov    (%rax),%rax
  80042057ee:	48 85 c0             	test   %rax,%rax
  80042057f1:	74 35                	je     8004205828 <check_boot_pml4e+0x71d>
  80042057f3:	48 b9 ed e7 21 04 80 	movabs $0x800421e7ed,%rcx
  80042057fa:	00 00 00 
  80042057fd:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205804:	00 00 00 
  8004205807:	be c9 04 00 00       	mov    $0x4c9,%esi
  800420580c:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205813:	00 00 00 
  8004205816:	b8 00 00 00 00       	mov    $0x0,%eax
  800420581b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205822:	00 00 00 
  8004205825:	41 ff d0             	callq  *%r8
  8004205828:	90                   	nop
  8004205829:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  800420582e:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  8004205835:	00 
  8004205836:	0f 86 a2 fe ff ff    	jbe    80042056de <check_boot_pml4e+0x5d3>
  800420583c:	48 bf 00 e8 21 04 80 	movabs $0x800421e800,%rdi
  8004205843:	00 00 00 
  8004205846:	b8 00 00 00 00       	mov    $0x0,%eax
  800420584b:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004205852:	00 00 00 
  8004205855:	ff d2                	callq  *%rdx
  8004205857:	c9                   	leaveq 
  8004205858:	c3                   	retq   

0000008004205859 <check_va2pa>:
  8004205859:	55                   	push   %rbp
  800420585a:	48 89 e5             	mov    %rsp,%rbp
  800420585d:	48 83 ec 60          	sub    $0x60,%rsp
  8004205861:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004205865:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004205869:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420586d:	48 c1 e8 27          	shr    $0x27,%rax
  8004205871:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205876:	48 c1 e0 03          	shl    $0x3,%rax
  800420587a:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  800420587e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205882:	48 8b 00             	mov    (%rax),%rax
  8004205885:	83 e0 01             	and    $0x1,%eax
  8004205888:	48 85 c0             	test   %rax,%rax
  800420588b:	75 0c                	jne    8004205899 <check_va2pa+0x40>
  800420588d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205894:	e9 38 02 00 00       	jmpq   8004205ad1 <check_va2pa+0x278>
  8004205899:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420589d:	48 8b 00             	mov    (%rax),%rax
  80042058a0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042058a6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042058aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058ae:	48 c1 e8 0c          	shr    $0xc,%rax
  80042058b2:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042058b5:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042058b8:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042058bf:	00 00 00 
  80042058c2:	48 8b 00             	mov    (%rax),%rax
  80042058c5:	48 39 c2             	cmp    %rax,%rdx
  80042058c8:	72 32                	jb     80042058fc <check_va2pa+0xa3>
  80042058ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058ce:	48 89 c1             	mov    %rax,%rcx
  80042058d1:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  80042058d8:	00 00 00 
  80042058db:	be e1 04 00 00       	mov    $0x4e1,%esi
  80042058e0:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042058e7:	00 00 00 
  80042058ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042058ef:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042058f6:	00 00 00 
  80042058f9:	41 ff d0             	callq  *%r8
  80042058fc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205903:	00 00 00 
  8004205906:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420590a:	48 01 d0             	add    %rdx,%rax
  800420590d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205911:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205915:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205919:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420591e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205925:	00 
  8004205926:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420592a:	48 01 d0             	add    %rdx,%rax
  800420592d:	48 8b 00             	mov    (%rax),%rax
  8004205930:	83 e0 01             	and    $0x1,%eax
  8004205933:	48 85 c0             	test   %rax,%rax
  8004205936:	75 0c                	jne    8004205944 <check_va2pa+0xeb>
  8004205938:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  800420593f:	e9 8d 01 00 00       	jmpq   8004205ad1 <check_va2pa+0x278>
  8004205944:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205948:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420594c:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205951:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205958:	00 
  8004205959:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420595d:	48 01 d0             	add    %rdx,%rax
  8004205960:	48 8b 00             	mov    (%rax),%rax
  8004205963:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205969:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420596d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205971:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205975:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004205978:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420597b:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004205982:	00 00 00 
  8004205985:	48 8b 00             	mov    (%rax),%rax
  8004205988:	48 39 c2             	cmp    %rax,%rdx
  800420598b:	72 32                	jb     80042059bf <check_va2pa+0x166>
  800420598d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205991:	48 89 c1             	mov    %rax,%rcx
  8004205994:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  800420599b:	00 00 00 
  800420599e:	be e5 04 00 00       	mov    $0x4e5,%esi
  80042059a3:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042059aa:	00 00 00 
  80042059ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042059b2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042059b9:	00 00 00 
  80042059bc:	41 ff d0             	callq  *%r8
  80042059bf:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042059c6:	00 00 00 
  80042059c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042059cd:	48 01 d0             	add    %rdx,%rax
  80042059d0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042059d4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059d8:	48 c1 e8 15          	shr    $0x15,%rax
  80042059dc:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059e1:	48 c1 e0 03          	shl    $0x3,%rax
  80042059e5:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  80042059e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059ed:	48 8b 00             	mov    (%rax),%rax
  80042059f0:	83 e0 01             	and    $0x1,%eax
  80042059f3:	48 85 c0             	test   %rax,%rax
  80042059f6:	75 0c                	jne    8004205a04 <check_va2pa+0x1ab>
  80042059f8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059ff:	e9 cd 00 00 00       	jmpq   8004205ad1 <check_va2pa+0x278>
  8004205a04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205a08:	48 8b 00             	mov    (%rax),%rax
  8004205a0b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205a11:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205a15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a19:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a1d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205a20:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205a23:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004205a2a:	00 00 00 
  8004205a2d:	48 8b 00             	mov    (%rax),%rax
  8004205a30:	48 39 c2             	cmp    %rax,%rdx
  8004205a33:	72 32                	jb     8004205a67 <check_va2pa+0x20e>
  8004205a35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a39:	48 89 c1             	mov    %rax,%rcx
  8004205a3c:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004205a43:	00 00 00 
  8004205a46:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205a4b:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205a52:	00 00 00 
  8004205a55:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a5a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205a61:	00 00 00 
  8004205a64:	41 ff d0             	callq  *%r8
  8004205a67:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a6e:	00 00 00 
  8004205a71:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a75:	48 01 d0             	add    %rdx,%rax
  8004205a78:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205a7c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a80:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a84:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a89:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a90:	00 
  8004205a91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205a95:	48 01 d0             	add    %rdx,%rax
  8004205a98:	48 8b 00             	mov    (%rax),%rax
  8004205a9b:	83 e0 01             	and    $0x1,%eax
  8004205a9e:	48 85 c0             	test   %rax,%rax
  8004205aa1:	75 09                	jne    8004205aac <check_va2pa+0x253>
  8004205aa3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205aaa:	eb 25                	jmp    8004205ad1 <check_va2pa+0x278>
  8004205aac:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205ab0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205ab4:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205ab9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205ac0:	00 
  8004205ac1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205ac5:	48 01 d0             	add    %rdx,%rax
  8004205ac8:	48 8b 00             	mov    (%rax),%rax
  8004205acb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205ad1:	c9                   	leaveq 
  8004205ad2:	c3                   	retq   

0000008004205ad3 <page_check>:
  8004205ad3:	55                   	push   %rbp
  8004205ad4:	48 89 e5             	mov    %rsp,%rbp
  8004205ad7:	53                   	push   %rbx
  8004205ad8:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205adf:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205ae6:	00 
  8004205ae7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205aeb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205aef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205af3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205af7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205afb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205aff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205b03:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b07:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205b0b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b0f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b14:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205b1b:	00 00 00 
  8004205b1e:	ff d0                	callq  *%rax
  8004205b20:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b24:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205b29:	75 35                	jne    8004205b60 <page_check+0x8d>
  8004205b2b:	48 b9 1f e8 21 04 80 	movabs $0x800421e81f,%rcx
  8004205b32:	00 00 00 
  8004205b35:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205b3c:	00 00 00 
  8004205b3f:	be 02 05 00 00       	mov    $0x502,%esi
  8004205b44:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205b4b:	00 00 00 
  8004205b4e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b53:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205b5a:	00 00 00 
  8004205b5d:	41 ff d0             	callq  *%r8
  8004205b60:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b65:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205b6c:	00 00 00 
  8004205b6f:	ff d0                	callq  *%rax
  8004205b71:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b75:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205b7a:	75 35                	jne    8004205bb1 <page_check+0xde>
  8004205b7c:	48 b9 33 e8 21 04 80 	movabs $0x800421e833,%rcx
  8004205b83:	00 00 00 
  8004205b86:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205b8d:	00 00 00 
  8004205b90:	be 03 05 00 00       	mov    $0x503,%esi
  8004205b95:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205b9c:	00 00 00 
  8004205b9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ba4:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205bab:	00 00 00 
  8004205bae:	41 ff d0             	callq  *%r8
  8004205bb1:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205bb6:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205bbd:	00 00 00 
  8004205bc0:	ff d0                	callq  *%rax
  8004205bc2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205bc6:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205bcb:	75 35                	jne    8004205c02 <page_check+0x12f>
  8004205bcd:	48 b9 47 e8 21 04 80 	movabs $0x800421e847,%rcx
  8004205bd4:	00 00 00 
  8004205bd7:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205bde:	00 00 00 
  8004205be1:	be 04 05 00 00       	mov    $0x504,%esi
  8004205be6:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205bed:	00 00 00 
  8004205bf0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205bf5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205bfc:	00 00 00 
  8004205bff:	41 ff d0             	callq  *%r8
  8004205c02:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c07:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205c0e:	00 00 00 
  8004205c11:	ff d0                	callq  *%rax
  8004205c13:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c17:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205c1c:	75 35                	jne    8004205c53 <page_check+0x180>
  8004205c1e:	48 b9 5b e8 21 04 80 	movabs $0x800421e85b,%rcx
  8004205c25:	00 00 00 
  8004205c28:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205c2f:	00 00 00 
  8004205c32:	be 05 05 00 00       	mov    $0x505,%esi
  8004205c37:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205c3e:	00 00 00 
  8004205c41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c46:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205c4d:	00 00 00 
  8004205c50:	41 ff d0             	callq  *%r8
  8004205c53:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c58:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205c5f:	00 00 00 
  8004205c62:	ff d0                	callq  *%rax
  8004205c64:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c68:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205c6d:	75 35                	jne    8004205ca4 <page_check+0x1d1>
  8004205c6f:	48 b9 6f e8 21 04 80 	movabs $0x800421e86f,%rcx
  8004205c76:	00 00 00 
  8004205c79:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205c80:	00 00 00 
  8004205c83:	be 06 05 00 00       	mov    $0x506,%esi
  8004205c88:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205c8f:	00 00 00 
  8004205c92:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c97:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205c9e:	00 00 00 
  8004205ca1:	41 ff d0             	callq  *%r8
  8004205ca4:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205ca9:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205cb0:	00 00 00 
  8004205cb3:	ff d0                	callq  *%rax
  8004205cb5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205cb9:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205cbe:	75 35                	jne    8004205cf5 <page_check+0x222>
  8004205cc0:	48 b9 83 e8 21 04 80 	movabs $0x800421e883,%rcx
  8004205cc7:	00 00 00 
  8004205cca:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205cd1:	00 00 00 
  8004205cd4:	be 07 05 00 00       	mov    $0x507,%esi
  8004205cd9:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205ce0:	00 00 00 
  8004205ce3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ce8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205cef:	00 00 00 
  8004205cf2:	41 ff d0             	callq  *%r8
  8004205cf5:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205cfa:	75 35                	jne    8004205d31 <page_check+0x25e>
  8004205cfc:	48 b9 d1 e5 21 04 80 	movabs $0x800421e5d1,%rcx
  8004205d03:	00 00 00 
  8004205d06:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205d0d:	00 00 00 
  8004205d10:	be 09 05 00 00       	mov    $0x509,%esi
  8004205d15:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205d1c:	00 00 00 
  8004205d1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d24:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205d2b:	00 00 00 
  8004205d2e:	41 ff d0             	callq  *%r8
  8004205d31:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205d36:	74 0a                	je     8004205d42 <page_check+0x26f>
  8004205d38:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205d3c:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d40:	75 35                	jne    8004205d77 <page_check+0x2a4>
  8004205d42:	48 b9 d5 e5 21 04 80 	movabs $0x800421e5d5,%rcx
  8004205d49:	00 00 00 
  8004205d4c:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205d53:	00 00 00 
  8004205d56:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205d5b:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205d62:	00 00 00 
  8004205d65:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d6a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205d71:	00 00 00 
  8004205d74:	41 ff d0             	callq  *%r8
  8004205d77:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d7c:	74 14                	je     8004205d92 <page_check+0x2bf>
  8004205d7e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d82:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205d86:	74 0a                	je     8004205d92 <page_check+0x2bf>
  8004205d88:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d8c:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d90:	75 35                	jne    8004205dc7 <page_check+0x2f4>
  8004205d92:	48 b9 e8 e5 21 04 80 	movabs $0x800421e5e8,%rcx
  8004205d99:	00 00 00 
  8004205d9c:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205da3:	00 00 00 
  8004205da6:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205dab:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205db2:	00 00 00 
  8004205db5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dba:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205dc1:	00 00 00 
  8004205dc4:	41 ff d0             	callq  *%r8
  8004205dc7:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205dcc:	74 1e                	je     8004205dec <page_check+0x319>
  8004205dce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dd2:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205dd6:	74 14                	je     8004205dec <page_check+0x319>
  8004205dd8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205ddc:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205de0:	74 0a                	je     8004205dec <page_check+0x319>
  8004205de2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205de6:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205dea:	75 35                	jne    8004205e21 <page_check+0x34e>
  8004205dec:	48 b9 98 e8 21 04 80 	movabs $0x800421e898,%rcx
  8004205df3:	00 00 00 
  8004205df6:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205dfd:	00 00 00 
  8004205e00:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205e05:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205e0c:	00 00 00 
  8004205e0f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e14:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205e1b:	00 00 00 
  8004205e1e:	41 ff d0             	callq  *%r8
  8004205e21:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205e26:	74 28                	je     8004205e50 <page_check+0x37d>
  8004205e28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e2c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e30:	74 1e                	je     8004205e50 <page_check+0x37d>
  8004205e32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e36:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e3a:	74 14                	je     8004205e50 <page_check+0x37d>
  8004205e3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e40:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205e44:	74 0a                	je     8004205e50 <page_check+0x37d>
  8004205e46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e4a:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e4e:	75 35                	jne    8004205e85 <page_check+0x3b2>
  8004205e50:	48 b9 c8 e8 21 04 80 	movabs $0x800421e8c8,%rcx
  8004205e57:	00 00 00 
  8004205e5a:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205e61:	00 00 00 
  8004205e64:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205e69:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205e70:	00 00 00 
  8004205e73:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e78:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205e7f:	00 00 00 
  8004205e82:	41 ff d0             	callq  *%r8
  8004205e85:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205e8a:	74 32                	je     8004205ebe <page_check+0x3eb>
  8004205e8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e90:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205e94:	74 28                	je     8004205ebe <page_check+0x3eb>
  8004205e96:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e9a:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e9e:	74 1e                	je     8004205ebe <page_check+0x3eb>
  8004205ea0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ea4:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205ea8:	74 14                	je     8004205ebe <page_check+0x3eb>
  8004205eaa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eae:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205eb2:	74 0a                	je     8004205ebe <page_check+0x3eb>
  8004205eb4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eb8:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205ebc:	75 35                	jne    8004205ef3 <page_check+0x420>
  8004205ebe:	48 b9 08 e9 21 04 80 	movabs $0x800421e908,%rcx
  8004205ec5:	00 00 00 
  8004205ec8:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205ecf:	00 00 00 
  8004205ed2:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004205ed7:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205ede:	00 00 00 
  8004205ee1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205ee6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205eed:	00 00 00 
  8004205ef0:	41 ff d0             	callq  *%r8
  8004205ef3:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004205efa:	00 00 00 
  8004205efd:	48 8b 00             	mov    (%rax),%rax
  8004205f00:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205f04:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004205f0b:	00 00 00 
  8004205f0e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004205f15:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205f1a:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004205f21:	00 00 00 
  8004205f24:	ff d0                	callq  *%rax
  8004205f26:	48 85 c0             	test   %rax,%rax
  8004205f29:	74 35                	je     8004205f60 <page_check+0x48d>
  8004205f2b:	48 b9 5f e6 21 04 80 	movabs $0x800421e65f,%rcx
  8004205f32:	00 00 00 
  8004205f35:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205f3c:	00 00 00 
  8004205f3f:	be 15 05 00 00       	mov    $0x515,%esi
  8004205f44:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205f4b:	00 00 00 
  8004205f4e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f53:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205f5a:	00 00 00 
  8004205f5d:	41 ff d0             	callq  *%r8
  8004205f60:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004205f67:	00 00 00 
  8004205f6a:	48 8b 00             	mov    (%rax),%rax
  8004205f6d:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  8004205f74:	be 00 00 00 00       	mov    $0x0,%esi
  8004205f79:	48 89 c7             	mov    %rax,%rdi
  8004205f7c:	48 b8 89 3d 20 04 80 	movabs $0x8004203d89,%rax
  8004205f83:	00 00 00 
  8004205f86:	ff d0                	callq  *%rax
  8004205f88:	48 85 c0             	test   %rax,%rax
  8004205f8b:	74 35                	je     8004205fc2 <page_check+0x4ef>
  8004205f8d:	48 b9 58 e9 21 04 80 	movabs $0x800421e958,%rcx
  8004205f94:	00 00 00 
  8004205f97:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004205f9e:	00 00 00 
  8004205fa1:	be 18 05 00 00       	mov    $0x518,%esi
  8004205fa6:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004205fad:	00 00 00 
  8004205fb0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fb5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004205fbc:	00 00 00 
  8004205fbf:	41 ff d0             	callq  *%r8
  8004205fc2:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004205fc9:	00 00 00 
  8004205fcc:	48 8b 00             	mov    (%rax),%rax
  8004205fcf:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004205fd3:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004205fd8:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205fdd:	48 89 c7             	mov    %rax,%rdi
  8004205fe0:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004205fe7:	00 00 00 
  8004205fea:	ff d0                	callq  *%rax
  8004205fec:	85 c0                	test   %eax,%eax
  8004205fee:	78 35                	js     8004206025 <page_check+0x552>
  8004205ff0:	48 b9 90 e9 21 04 80 	movabs $0x800421e990,%rcx
  8004205ff7:	00 00 00 
  8004205ffa:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206001:	00 00 00 
  8004206004:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004206009:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206010:	00 00 00 
  8004206013:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206018:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420601f:	00 00 00 
  8004206022:	41 ff d0             	callq  *%r8
  8004206025:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206029:	48 89 c7             	mov    %rax,%rdi
  800420602c:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  8004206033:	00 00 00 
  8004206036:	ff d0                	callq  *%rax
  8004206038:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420603f:	00 00 00 
  8004206042:	48 8b 00             	mov    (%rax),%rax
  8004206045:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206049:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420604e:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206053:	48 89 c7             	mov    %rax,%rdi
  8004206056:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420605d:	00 00 00 
  8004206060:	ff d0                	callq  *%rax
  8004206062:	85 c0                	test   %eax,%eax
  8004206064:	78 35                	js     800420609b <page_check+0x5c8>
  8004206066:	48 b9 90 e9 21 04 80 	movabs $0x800421e990,%rcx
  800420606d:	00 00 00 
  8004206070:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206077:	00 00 00 
  800420607a:	be 1f 05 00 00       	mov    $0x51f,%esi
  800420607f:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206086:	00 00 00 
  8004206089:	b8 00 00 00 00       	mov    $0x0,%eax
  800420608e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206095:	00 00 00 
  8004206098:	41 ff d0             	callq  *%r8
  800420609b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420609f:	48 89 c7             	mov    %rax,%rdi
  80042060a2:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042060a9:	00 00 00 
  80042060ac:	ff d0                	callq  *%rax
  80042060ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042060b2:	48 89 c7             	mov    %rax,%rdi
  80042060b5:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  80042060bc:	00 00 00 
  80042060bf:	ff d0                	callq  *%rax
  80042060c1:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042060c8:	00 00 00 
  80042060cb:	48 8b 00             	mov    (%rax),%rax
  80042060ce:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042060d2:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042060d7:	ba 00 00 00 00       	mov    $0x0,%edx
  80042060dc:	48 89 c7             	mov    %rax,%rdi
  80042060df:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  80042060e6:	00 00 00 
  80042060e9:	ff d0                	callq  *%rax
  80042060eb:	85 c0                	test   %eax,%eax
  80042060ed:	74 35                	je     8004206124 <page_check+0x651>
  80042060ef:	48 b9 c0 e9 21 04 80 	movabs $0x800421e9c0,%rcx
  80042060f6:	00 00 00 
  80042060f9:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206100:	00 00 00 
  8004206103:	be 25 05 00 00       	mov    $0x525,%esi
  8004206108:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420610f:	00 00 00 
  8004206112:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206117:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420611e:	00 00 00 
  8004206121:	41 ff d0             	callq  *%r8
  8004206124:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420612b:	00 00 00 
  800420612e:	48 8b 00             	mov    (%rax),%rax
  8004206131:	48 8b 00             	mov    (%rax),%rax
  8004206134:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420613a:	48 89 c3             	mov    %rax,%rbx
  800420613d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206141:	48 89 c7             	mov    %rax,%rdi
  8004206144:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  800420614b:	00 00 00 
  800420614e:	ff d0                	callq  *%rax
  8004206150:	48 39 c3             	cmp    %rax,%rbx
  8004206153:	0f 84 97 00 00 00    	je     80042061f0 <page_check+0x71d>
  8004206159:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206160:	00 00 00 
  8004206163:	48 8b 00             	mov    (%rax),%rax
  8004206166:	48 8b 00             	mov    (%rax),%rax
  8004206169:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420616f:	48 89 c3             	mov    %rax,%rbx
  8004206172:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206176:	48 89 c7             	mov    %rax,%rdi
  8004206179:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206180:	00 00 00 
  8004206183:	ff d0                	callq  *%rax
  8004206185:	48 39 c3             	cmp    %rax,%rbx
  8004206188:	74 66                	je     80042061f0 <page_check+0x71d>
  800420618a:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206191:	00 00 00 
  8004206194:	48 8b 00             	mov    (%rax),%rax
  8004206197:	48 8b 00             	mov    (%rax),%rax
  800420619a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042061a0:	48 89 c3             	mov    %rax,%rbx
  80042061a3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042061a7:	48 89 c7             	mov    %rax,%rdi
  80042061aa:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042061b1:	00 00 00 
  80042061b4:	ff d0                	callq  *%rax
  80042061b6:	48 39 c3             	cmp    %rax,%rbx
  80042061b9:	74 35                	je     80042061f0 <page_check+0x71d>
  80042061bb:	48 b9 f0 e9 21 04 80 	movabs $0x800421e9f0,%rcx
  80042061c2:	00 00 00 
  80042061c5:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042061cc:	00 00 00 
  80042061cf:	be 26 05 00 00       	mov    $0x526,%esi
  80042061d4:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042061db:	00 00 00 
  80042061de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061e3:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042061ea:	00 00 00 
  80042061ed:	41 ff d0             	callq  *%r8
  80042061f0:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042061f7:	00 00 00 
  80042061fa:	48 8b 00             	mov    (%rax),%rax
  80042061fd:	be 00 00 00 00       	mov    $0x0,%esi
  8004206202:	48 89 c7             	mov    %rax,%rdi
  8004206205:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420620c:	00 00 00 
  800420620f:	ff d0                	callq  *%rax
  8004206211:	48 89 c3             	mov    %rax,%rbx
  8004206214:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206218:	48 89 c7             	mov    %rax,%rdi
  800420621b:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206222:	00 00 00 
  8004206225:	ff d0                	callq  *%rax
  8004206227:	48 39 c3             	cmp    %rax,%rbx
  800420622a:	74 35                	je     8004206261 <page_check+0x78e>
  800420622c:	48 b9 78 ea 21 04 80 	movabs $0x800421ea78,%rcx
  8004206233:	00 00 00 
  8004206236:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420623d:	00 00 00 
  8004206240:	be 27 05 00 00       	mov    $0x527,%esi
  8004206245:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420624c:	00 00 00 
  800420624f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206254:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420625b:	00 00 00 
  800420625e:	41 ff d0             	callq  *%r8
  8004206261:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206265:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206269:	66 83 f8 01          	cmp    $0x1,%ax
  800420626d:	74 35                	je     80042062a4 <page_check+0x7d1>
  800420626f:	48 b9 a5 ea 21 04 80 	movabs $0x800421eaa5,%rcx
  8004206276:	00 00 00 
  8004206279:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206280:	00 00 00 
  8004206283:	be 28 05 00 00       	mov    $0x528,%esi
  8004206288:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420628f:	00 00 00 
  8004206292:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206297:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420629e:	00 00 00 
  80042062a1:	41 ff d0             	callq  *%r8
  80042062a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042062a8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062ac:	66 83 f8 01          	cmp    $0x1,%ax
  80042062b0:	74 35                	je     80042062e7 <page_check+0x814>
  80042062b2:	48 b9 b6 ea 21 04 80 	movabs $0x800421eab6,%rcx
  80042062b9:	00 00 00 
  80042062bc:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042062c3:	00 00 00 
  80042062c6:	be 29 05 00 00       	mov    $0x529,%esi
  80042062cb:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042062d2:	00 00 00 
  80042062d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042062da:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042062e1:	00 00 00 
  80042062e4:	41 ff d0             	callq  *%r8
  80042062e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062eb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062ef:	66 83 f8 01          	cmp    $0x1,%ax
  80042062f3:	74 35                	je     800420632a <page_check+0x857>
  80042062f5:	48 b9 c7 ea 21 04 80 	movabs $0x800421eac7,%rcx
  80042062fc:	00 00 00 
  80042062ff:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206306:	00 00 00 
  8004206309:	be 2a 05 00 00       	mov    $0x52a,%esi
  800420630e:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206315:	00 00 00 
  8004206318:	b8 00 00 00 00       	mov    $0x0,%eax
  800420631d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206324:	00 00 00 
  8004206327:	41 ff d0             	callq  *%r8
  800420632a:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206331:	00 00 00 
  8004206334:	48 8b 00             	mov    (%rax),%rax
  8004206337:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420633b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206340:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206345:	48 89 c7             	mov    %rax,%rdi
  8004206348:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420634f:	00 00 00 
  8004206352:	ff d0                	callq  *%rax
  8004206354:	85 c0                	test   %eax,%eax
  8004206356:	74 35                	je     800420638d <page_check+0x8ba>
  8004206358:	48 b9 d8 ea 21 04 80 	movabs $0x800421ead8,%rcx
  800420635f:	00 00 00 
  8004206362:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206369:	00 00 00 
  800420636c:	be 2c 05 00 00       	mov    $0x52c,%esi
  8004206371:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206378:	00 00 00 
  800420637b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206380:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206387:	00 00 00 
  800420638a:	41 ff d0             	callq  *%r8
  800420638d:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206394:	00 00 00 
  8004206397:	48 8b 00             	mov    (%rax),%rax
  800420639a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420639f:	48 89 c7             	mov    %rax,%rdi
  80042063a2:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  80042063a9:	00 00 00 
  80042063ac:	ff d0                	callq  *%rax
  80042063ae:	48 89 c3             	mov    %rax,%rbx
  80042063b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063b5:	48 89 c7             	mov    %rax,%rdi
  80042063b8:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  80042063bf:	00 00 00 
  80042063c2:	ff d0                	callq  *%rax
  80042063c4:	48 39 c3             	cmp    %rax,%rbx
  80042063c7:	74 35                	je     80042063fe <page_check+0x92b>
  80042063c9:	48 b9 10 eb 21 04 80 	movabs $0x800421eb10,%rcx
  80042063d0:	00 00 00 
  80042063d3:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042063da:	00 00 00 
  80042063dd:	be 2d 05 00 00       	mov    $0x52d,%esi
  80042063e2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042063e9:	00 00 00 
  80042063ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063f1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042063f8:	00 00 00 
  80042063fb:	41 ff d0             	callq  *%r8
  80042063fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206402:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206406:	66 83 f8 02          	cmp    $0x2,%ax
  800420640a:	74 35                	je     8004206441 <page_check+0x96e>
  800420640c:	48 b9 40 eb 21 04 80 	movabs $0x800421eb40,%rcx
  8004206413:	00 00 00 
  8004206416:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420641d:	00 00 00 
  8004206420:	be 2e 05 00 00       	mov    $0x52e,%esi
  8004206425:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420642c:	00 00 00 
  800420642f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206434:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420643b:	00 00 00 
  800420643e:	41 ff d0             	callq  *%r8
  8004206441:	bf 00 00 00 00       	mov    $0x0,%edi
  8004206446:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420644d:	00 00 00 
  8004206450:	ff d0                	callq  *%rax
  8004206452:	48 85 c0             	test   %rax,%rax
  8004206455:	74 35                	je     800420648c <page_check+0x9b9>
  8004206457:	48 b9 5f e6 21 04 80 	movabs $0x800421e65f,%rcx
  800420645e:	00 00 00 
  8004206461:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206468:	00 00 00 
  800420646b:	be 31 05 00 00       	mov    $0x531,%esi
  8004206470:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206477:	00 00 00 
  800420647a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420647f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206486:	00 00 00 
  8004206489:	41 ff d0             	callq  *%r8
  800420648c:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206493:	00 00 00 
  8004206496:	48 8b 00             	mov    (%rax),%rax
  8004206499:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420649d:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042064a2:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042064a7:	48 89 c7             	mov    %rax,%rdi
  80042064aa:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  80042064b1:	00 00 00 
  80042064b4:	ff d0                	callq  *%rax
  80042064b6:	85 c0                	test   %eax,%eax
  80042064b8:	74 35                	je     80042064ef <page_check+0xa1c>
  80042064ba:	48 b9 d8 ea 21 04 80 	movabs $0x800421ead8,%rcx
  80042064c1:	00 00 00 
  80042064c4:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042064cb:	00 00 00 
  80042064ce:	be 34 05 00 00       	mov    $0x534,%esi
  80042064d3:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042064da:	00 00 00 
  80042064dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064e2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042064e9:	00 00 00 
  80042064ec:	41 ff d0             	callq  *%r8
  80042064ef:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042064f6:	00 00 00 
  80042064f9:	48 8b 00             	mov    (%rax),%rax
  80042064fc:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206501:	48 89 c7             	mov    %rax,%rdi
  8004206504:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420650b:	00 00 00 
  800420650e:	ff d0                	callq  *%rax
  8004206510:	48 89 c3             	mov    %rax,%rbx
  8004206513:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206517:	48 89 c7             	mov    %rax,%rdi
  800420651a:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206521:	00 00 00 
  8004206524:	ff d0                	callq  *%rax
  8004206526:	48 39 c3             	cmp    %rax,%rbx
  8004206529:	74 35                	je     8004206560 <page_check+0xa8d>
  800420652b:	48 b9 10 eb 21 04 80 	movabs $0x800421eb10,%rcx
  8004206532:	00 00 00 
  8004206535:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420653c:	00 00 00 
  800420653f:	be 35 05 00 00       	mov    $0x535,%esi
  8004206544:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420654b:	00 00 00 
  800420654e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206553:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420655a:	00 00 00 
  800420655d:	41 ff d0             	callq  *%r8
  8004206560:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206564:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206568:	66 83 f8 02          	cmp    $0x2,%ax
  800420656c:	74 35                	je     80042065a3 <page_check+0xad0>
  800420656e:	48 b9 40 eb 21 04 80 	movabs $0x800421eb40,%rcx
  8004206575:	00 00 00 
  8004206578:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420657f:	00 00 00 
  8004206582:	be 36 05 00 00       	mov    $0x536,%esi
  8004206587:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420658e:	00 00 00 
  8004206591:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206596:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420659d:	00 00 00 
  80042065a0:	41 ff d0             	callq  *%r8
  80042065a3:	bf 00 00 00 00       	mov    $0x0,%edi
  80042065a8:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  80042065af:	00 00 00 
  80042065b2:	ff d0                	callq  *%rax
  80042065b4:	48 85 c0             	test   %rax,%rax
  80042065b7:	74 35                	je     80042065ee <page_check+0xb1b>
  80042065b9:	48 b9 5f e6 21 04 80 	movabs $0x800421e65f,%rcx
  80042065c0:	00 00 00 
  80042065c3:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042065ca:	00 00 00 
  80042065cd:	be 3a 05 00 00       	mov    $0x53a,%esi
  80042065d2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042065d9:	00 00 00 
  80042065dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065e1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042065e8:	00 00 00 
  80042065eb:	41 ff d0             	callq  *%r8
  80042065ee:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042065f5:	00 00 00 
  80042065f8:	48 8b 00             	mov    (%rax),%rax
  80042065fb:	48 8b 00             	mov    (%rax),%rax
  80042065fe:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206604:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004206608:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420660c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206610:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004206613:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004206616:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420661d:	00 00 00 
  8004206620:	48 8b 00             	mov    (%rax),%rax
  8004206623:	48 39 c2             	cmp    %rax,%rdx
  8004206626:	72 32                	jb     800420665a <page_check+0xb87>
  8004206628:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420662c:	48 89 c1             	mov    %rax,%rcx
  800420662f:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004206636:	00 00 00 
  8004206639:	be 3c 05 00 00       	mov    $0x53c,%esi
  800420663e:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206645:	00 00 00 
  8004206648:	b8 00 00 00 00       	mov    $0x0,%eax
  800420664d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206654:	00 00 00 
  8004206657:	41 ff d0             	callq  *%r8
  800420665a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206661:	00 00 00 
  8004206664:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206668:	48 01 d0             	add    %rdx,%rax
  800420666b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420666f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004206673:	48 8b 00             	mov    (%rax),%rax
  8004206676:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420667c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004206680:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206684:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206688:	89 45 8c             	mov    %eax,-0x74(%rbp)
  800420668b:	8b 55 8c             	mov    -0x74(%rbp),%edx
  800420668e:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004206695:	00 00 00 
  8004206698:	48 8b 00             	mov    (%rax),%rax
  800420669b:	48 39 c2             	cmp    %rax,%rdx
  800420669e:	72 32                	jb     80042066d2 <page_check+0xbff>
  80042066a0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066a4:	48 89 c1             	mov    %rax,%rcx
  80042066a7:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  80042066ae:	00 00 00 
  80042066b1:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042066b6:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042066bd:	00 00 00 
  80042066c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066c5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042066cc:	00 00 00 
  80042066cf:	41 ff d0             	callq  *%r8
  80042066d2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042066d9:	00 00 00 
  80042066dc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066e0:	48 01 d0             	add    %rdx,%rax
  80042066e3:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042066e7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042066eb:	48 8b 00             	mov    (%rax),%rax
  80042066ee:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042066f4:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042066fb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004206702:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206706:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  800420670c:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  8004206712:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004206719:	00 00 00 
  800420671c:	48 8b 00             	mov    (%rax),%rax
  800420671f:	48 39 c2             	cmp    %rax,%rdx
  8004206722:	72 35                	jb     8004206759 <page_check+0xc86>
  8004206724:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420672b:	48 89 c1             	mov    %rax,%rcx
  800420672e:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004206735:	00 00 00 
  8004206738:	be 3e 05 00 00       	mov    $0x53e,%esi
  800420673d:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206744:	00 00 00 
  8004206747:	b8 00 00 00 00       	mov    $0x0,%eax
  800420674c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206753:	00 00 00 
  8004206756:	41 ff d0             	callq  *%r8
  8004206759:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206760:	00 00 00 
  8004206763:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420676a:	48 01 d0             	add    %rdx,%rax
  800420676d:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004206774:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420677b:	00 00 00 
  800420677e:	48 8b 00             	mov    (%rax),%rax
  8004206781:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206786:	be 00 10 00 00       	mov    $0x1000,%esi
  800420678b:	48 89 c7             	mov    %rax,%rdi
  800420678e:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004206795:	00 00 00 
  8004206798:	ff d0                	callq  *%rax
  800420679a:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  80042067a1:	48 83 c2 08          	add    $0x8,%rdx
  80042067a5:	48 39 d0             	cmp    %rdx,%rax
  80042067a8:	74 35                	je     80042067df <page_check+0xd0c>
  80042067aa:	48 b9 58 eb 21 04 80 	movabs $0x800421eb58,%rcx
  80042067b1:	00 00 00 
  80042067b4:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042067bb:	00 00 00 
  80042067be:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042067c3:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042067ca:	00 00 00 
  80042067cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067d2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042067d9:	00 00 00 
  80042067dc:	41 ff d0             	callq  *%r8
  80042067df:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042067e6:	00 00 00 
  80042067e9:	48 8b 00             	mov    (%rax),%rax
  80042067ec:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042067f0:	b9 04 00 00 00       	mov    $0x4,%ecx
  80042067f5:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042067fa:	48 89 c7             	mov    %rax,%rdi
  80042067fd:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004206804:	00 00 00 
  8004206807:	ff d0                	callq  *%rax
  8004206809:	85 c0                	test   %eax,%eax
  800420680b:	74 35                	je     8004206842 <page_check+0xd6f>
  800420680d:	48 b9 98 eb 21 04 80 	movabs $0x800421eb98,%rcx
  8004206814:	00 00 00 
  8004206817:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420681e:	00 00 00 
  8004206821:	be 42 05 00 00       	mov    $0x542,%esi
  8004206826:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420682d:	00 00 00 
  8004206830:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206835:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420683c:	00 00 00 
  800420683f:	41 ff d0             	callq  *%r8
  8004206842:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206849:	00 00 00 
  800420684c:	48 8b 00             	mov    (%rax),%rax
  800420684f:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206854:	48 89 c7             	mov    %rax,%rdi
  8004206857:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420685e:	00 00 00 
  8004206861:	ff d0                	callq  *%rax
  8004206863:	48 89 c3             	mov    %rax,%rbx
  8004206866:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420686a:	48 89 c7             	mov    %rax,%rdi
  800420686d:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206874:	00 00 00 
  8004206877:	ff d0                	callq  *%rax
  8004206879:	48 39 c3             	cmp    %rax,%rbx
  800420687c:	74 35                	je     80042068b3 <page_check+0xde0>
  800420687e:	48 b9 10 eb 21 04 80 	movabs $0x800421eb10,%rcx
  8004206885:	00 00 00 
  8004206888:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420688f:	00 00 00 
  8004206892:	be 43 05 00 00       	mov    $0x543,%esi
  8004206897:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420689e:	00 00 00 
  80042068a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068a6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042068ad:	00 00 00 
  80042068b0:	41 ff d0             	callq  *%r8
  80042068b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042068b7:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042068bb:	66 83 f8 02          	cmp    $0x2,%ax
  80042068bf:	74 35                	je     80042068f6 <page_check+0xe23>
  80042068c1:	48 b9 40 eb 21 04 80 	movabs $0x800421eb40,%rcx
  80042068c8:	00 00 00 
  80042068cb:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042068d2:	00 00 00 
  80042068d5:	be 44 05 00 00       	mov    $0x544,%esi
  80042068da:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042068e1:	00 00 00 
  80042068e4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068e9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042068f0:	00 00 00 
  80042068f3:	41 ff d0             	callq  *%r8
  80042068f6:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042068fd:	00 00 00 
  8004206900:	48 8b 00             	mov    (%rax),%rax
  8004206903:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206908:	be 00 10 00 00       	mov    $0x1000,%esi
  800420690d:	48 89 c7             	mov    %rax,%rdi
  8004206910:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004206917:	00 00 00 
  800420691a:	ff d0                	callq  *%rax
  800420691c:	48 8b 00             	mov    (%rax),%rax
  800420691f:	83 e0 04             	and    $0x4,%eax
  8004206922:	48 85 c0             	test   %rax,%rax
  8004206925:	75 35                	jne    800420695c <page_check+0xe89>
  8004206927:	48 b9 d8 eb 21 04 80 	movabs $0x800421ebd8,%rcx
  800420692e:	00 00 00 
  8004206931:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206938:	00 00 00 
  800420693b:	be 45 05 00 00       	mov    $0x545,%esi
  8004206940:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206947:	00 00 00 
  800420694a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420694f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206956:	00 00 00 
  8004206959:	41 ff d0             	callq  *%r8
  800420695c:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206963:	00 00 00 
  8004206966:	48 8b 00             	mov    (%rax),%rax
  8004206969:	48 8b 00             	mov    (%rax),%rax
  800420696c:	83 e0 04             	and    $0x4,%eax
  800420696f:	48 85 c0             	test   %rax,%rax
  8004206972:	75 35                	jne    80042069a9 <page_check+0xed6>
  8004206974:	48 b9 0b ec 21 04 80 	movabs $0x800421ec0b,%rcx
  800420697b:	00 00 00 
  800420697e:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206985:	00 00 00 
  8004206988:	be 46 05 00 00       	mov    $0x546,%esi
  800420698d:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206994:	00 00 00 
  8004206997:	b8 00 00 00 00       	mov    $0x0,%eax
  800420699c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042069a3:	00 00 00 
  80042069a6:	41 ff d0             	callq  *%r8
  80042069a9:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042069b0:	00 00 00 
  80042069b3:	48 8b 00             	mov    (%rax),%rax
  80042069b6:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042069ba:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042069bf:	ba 00 00 20 00       	mov    $0x200000,%edx
  80042069c4:	48 89 c7             	mov    %rax,%rdi
  80042069c7:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  80042069ce:	00 00 00 
  80042069d1:	ff d0                	callq  *%rax
  80042069d3:	85 c0                	test   %eax,%eax
  80042069d5:	78 35                	js     8004206a0c <page_check+0xf39>
  80042069d7:	48 b9 28 ec 21 04 80 	movabs $0x800421ec28,%rcx
  80042069de:	00 00 00 
  80042069e1:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042069e8:	00 00 00 
  80042069eb:	be 4a 05 00 00       	mov    $0x54a,%esi
  80042069f0:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042069f7:	00 00 00 
  80042069fa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069ff:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206a06:	00 00 00 
  8004206a09:	41 ff d0             	callq  *%r8
  8004206a0c:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206a13:	00 00 00 
  8004206a16:	48 8b 00             	mov    (%rax),%rax
  8004206a19:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206a1d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206a22:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206a27:	48 89 c7             	mov    %rax,%rdi
  8004206a2a:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004206a31:	00 00 00 
  8004206a34:	ff d0                	callq  *%rax
  8004206a36:	85 c0                	test   %eax,%eax
  8004206a38:	74 35                	je     8004206a6f <page_check+0xf9c>
  8004206a3a:	48 b9 60 ec 21 04 80 	movabs $0x800421ec60,%rcx
  8004206a41:	00 00 00 
  8004206a44:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206a4b:	00 00 00 
  8004206a4e:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206a53:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206a5a:	00 00 00 
  8004206a5d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a62:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206a69:	00 00 00 
  8004206a6c:	41 ff d0             	callq  *%r8
  8004206a6f:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206a76:	00 00 00 
  8004206a79:	48 8b 00             	mov    (%rax),%rax
  8004206a7c:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a81:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a86:	48 89 c7             	mov    %rax,%rdi
  8004206a89:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004206a90:	00 00 00 
  8004206a93:	ff d0                	callq  *%rax
  8004206a95:	48 8b 00             	mov    (%rax),%rax
  8004206a98:	83 e0 04             	and    $0x4,%eax
  8004206a9b:	48 85 c0             	test   %rax,%rax
  8004206a9e:	74 35                	je     8004206ad5 <page_check+0x1002>
  8004206aa0:	48 b9 98 ec 21 04 80 	movabs $0x800421ec98,%rcx
  8004206aa7:	00 00 00 
  8004206aaa:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206ab1:	00 00 00 
  8004206ab4:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206ab9:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206ac0:	00 00 00 
  8004206ac3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ac8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206acf:	00 00 00 
  8004206ad2:	41 ff d0             	callq  *%r8
  8004206ad5:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206adc:	00 00 00 
  8004206adf:	48 8b 00             	mov    (%rax),%rax
  8004206ae2:	be 00 00 00 00       	mov    $0x0,%esi
  8004206ae7:	48 89 c7             	mov    %rax,%rdi
  8004206aea:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206af1:	00 00 00 
  8004206af4:	ff d0                	callq  *%rax
  8004206af6:	48 89 c3             	mov    %rax,%rbx
  8004206af9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206afd:	48 89 c7             	mov    %rax,%rdi
  8004206b00:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206b07:	00 00 00 
  8004206b0a:	ff d0                	callq  *%rax
  8004206b0c:	48 39 c3             	cmp    %rax,%rbx
  8004206b0f:	74 35                	je     8004206b46 <page_check+0x1073>
  8004206b11:	48 b9 d0 ec 21 04 80 	movabs $0x800421ecd0,%rcx
  8004206b18:	00 00 00 
  8004206b1b:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206b22:	00 00 00 
  8004206b25:	be 51 05 00 00       	mov    $0x551,%esi
  8004206b2a:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206b31:	00 00 00 
  8004206b34:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b39:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206b40:	00 00 00 
  8004206b43:	41 ff d0             	callq  *%r8
  8004206b46:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206b4d:	00 00 00 
  8004206b50:	48 8b 00             	mov    (%rax),%rax
  8004206b53:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206b58:	48 89 c7             	mov    %rax,%rdi
  8004206b5b:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206b62:	00 00 00 
  8004206b65:	ff d0                	callq  *%rax
  8004206b67:	48 89 c3             	mov    %rax,%rbx
  8004206b6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206b6e:	48 89 c7             	mov    %rax,%rdi
  8004206b71:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206b78:	00 00 00 
  8004206b7b:	ff d0                	callq  *%rax
  8004206b7d:	48 39 c3             	cmp    %rax,%rbx
  8004206b80:	74 35                	je     8004206bb7 <page_check+0x10e4>
  8004206b82:	48 b9 00 ed 21 04 80 	movabs $0x800421ed00,%rcx
  8004206b89:	00 00 00 
  8004206b8c:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206b93:	00 00 00 
  8004206b96:	be 52 05 00 00       	mov    $0x552,%esi
  8004206b9b:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206ba2:	00 00 00 
  8004206ba5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206baa:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206bb1:	00 00 00 
  8004206bb4:	41 ff d0             	callq  *%r8
  8004206bb7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206bbb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bbf:	66 83 f8 02          	cmp    $0x2,%ax
  8004206bc3:	74 35                	je     8004206bfa <page_check+0x1127>
  8004206bc5:	48 b9 30 ed 21 04 80 	movabs $0x800421ed30,%rcx
  8004206bcc:	00 00 00 
  8004206bcf:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206bd6:	00 00 00 
  8004206bd9:	be 54 05 00 00       	mov    $0x554,%esi
  8004206bde:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206be5:	00 00 00 
  8004206be8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206bed:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206bf4:	00 00 00 
  8004206bf7:	41 ff d0             	callq  *%r8
  8004206bfa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206bfe:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206c02:	66 83 f8 01          	cmp    $0x1,%ax
  8004206c06:	74 35                	je     8004206c3d <page_check+0x116a>
  8004206c08:	48 b9 41 ed 21 04 80 	movabs $0x800421ed41,%rcx
  8004206c0f:	00 00 00 
  8004206c12:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206c19:	00 00 00 
  8004206c1c:	be 55 05 00 00       	mov    $0x555,%esi
  8004206c21:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206c28:	00 00 00 
  8004206c2b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c30:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206c37:	00 00 00 
  8004206c3a:	41 ff d0             	callq  *%r8
  8004206c3d:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206c44:	00 00 00 
  8004206c47:	48 8b 00             	mov    (%rax),%rax
  8004206c4a:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c4f:	48 89 c7             	mov    %rax,%rdi
  8004206c52:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  8004206c59:	00 00 00 
  8004206c5c:	ff d0                	callq  *%rax
  8004206c5e:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206c65:	00 00 00 
  8004206c68:	48 8b 00             	mov    (%rax),%rax
  8004206c6b:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c70:	48 89 c7             	mov    %rax,%rdi
  8004206c73:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206c7a:	00 00 00 
  8004206c7d:	ff d0                	callq  *%rax
  8004206c7f:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206c83:	74 35                	je     8004206cba <page_check+0x11e7>
  8004206c85:	48 b9 58 ed 21 04 80 	movabs $0x800421ed58,%rcx
  8004206c8c:	00 00 00 
  8004206c8f:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206c96:	00 00 00 
  8004206c99:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206c9e:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206ca5:	00 00 00 
  8004206ca8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206cad:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206cb4:	00 00 00 
  8004206cb7:	41 ff d0             	callq  *%r8
  8004206cba:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206cc1:	00 00 00 
  8004206cc4:	48 8b 00             	mov    (%rax),%rax
  8004206cc7:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206ccc:	48 89 c7             	mov    %rax,%rdi
  8004206ccf:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206cd6:	00 00 00 
  8004206cd9:	ff d0                	callq  *%rax
  8004206cdb:	48 89 c3             	mov    %rax,%rbx
  8004206cde:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206ce2:	48 89 c7             	mov    %rax,%rdi
  8004206ce5:	48 b8 27 1b 20 04 80 	movabs $0x8004201b27,%rax
  8004206cec:	00 00 00 
  8004206cef:	ff d0                	callq  *%rax
  8004206cf1:	48 39 c3             	cmp    %rax,%rbx
  8004206cf4:	74 35                	je     8004206d2b <page_check+0x1258>
  8004206cf6:	48 b9 00 ed 21 04 80 	movabs $0x800421ed00,%rcx
  8004206cfd:	00 00 00 
  8004206d00:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206d07:	00 00 00 
  8004206d0a:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206d0f:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206d16:	00 00 00 
  8004206d19:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d1e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206d25:	00 00 00 
  8004206d28:	41 ff d0             	callq  *%r8
  8004206d2b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d2f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d33:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d37:	74 35                	je     8004206d6e <page_check+0x129b>
  8004206d39:	48 b9 a5 ea 21 04 80 	movabs $0x800421eaa5,%rcx
  8004206d40:	00 00 00 
  8004206d43:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206d4a:	00 00 00 
  8004206d4d:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206d52:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206d59:	00 00 00 
  8004206d5c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d61:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206d68:	00 00 00 
  8004206d6b:	41 ff d0             	callq  *%r8
  8004206d6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d72:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d76:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d7a:	74 35                	je     8004206db1 <page_check+0x12de>
  8004206d7c:	48 b9 41 ed 21 04 80 	movabs $0x800421ed41,%rcx
  8004206d83:	00 00 00 
  8004206d86:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206d8d:	00 00 00 
  8004206d90:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206d95:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206d9c:	00 00 00 
  8004206d9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206da4:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206dab:	00 00 00 
  8004206dae:	41 ff d0             	callq  *%r8
  8004206db1:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206db8:	00 00 00 
  8004206dbb:	48 8b 00             	mov    (%rax),%rax
  8004206dbe:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206dc2:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206dc7:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206dcc:	48 89 c7             	mov    %rax,%rdi
  8004206dcf:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004206dd6:	00 00 00 
  8004206dd9:	ff d0                	callq  *%rax
  8004206ddb:	85 c0                	test   %eax,%eax
  8004206ddd:	74 35                	je     8004206e14 <page_check+0x1341>
  8004206ddf:	48 b9 60 ec 21 04 80 	movabs $0x800421ec60,%rcx
  8004206de6:	00 00 00 
  8004206de9:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206df0:	00 00 00 
  8004206df3:	be 61 05 00 00       	mov    $0x561,%esi
  8004206df8:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206dff:	00 00 00 
  8004206e02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e07:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206e0e:	00 00 00 
  8004206e11:	41 ff d0             	callq  *%r8
  8004206e14:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e18:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e1c:	66 85 c0             	test   %ax,%ax
  8004206e1f:	75 35                	jne    8004206e56 <page_check+0x1383>
  8004206e21:	48 b9 7b ed 21 04 80 	movabs $0x800421ed7b,%rcx
  8004206e28:	00 00 00 
  8004206e2b:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206e32:	00 00 00 
  8004206e35:	be 62 05 00 00       	mov    $0x562,%esi
  8004206e3a:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206e41:	00 00 00 
  8004206e44:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e49:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206e50:	00 00 00 
  8004206e53:	41 ff d0             	callq  *%r8
  8004206e56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e5a:	48 8b 00             	mov    (%rax),%rax
  8004206e5d:	48 85 c0             	test   %rax,%rax
  8004206e60:	74 35                	je     8004206e97 <page_check+0x13c4>
  8004206e62:	48 b9 87 ed 21 04 80 	movabs $0x800421ed87,%rcx
  8004206e69:	00 00 00 
  8004206e6c:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206e73:	00 00 00 
  8004206e76:	be 63 05 00 00       	mov    $0x563,%esi
  8004206e7b:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206e82:	00 00 00 
  8004206e85:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e8a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206e91:	00 00 00 
  8004206e94:	41 ff d0             	callq  *%r8
  8004206e97:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206e9e:	00 00 00 
  8004206ea1:	48 8b 00             	mov    (%rax),%rax
  8004206ea4:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206ea9:	48 89 c7             	mov    %rax,%rdi
  8004206eac:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  8004206eb3:	00 00 00 
  8004206eb6:	ff d0                	callq  *%rax
  8004206eb8:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206ebf:	00 00 00 
  8004206ec2:	48 8b 00             	mov    (%rax),%rax
  8004206ec5:	be 00 00 00 00       	mov    $0x0,%esi
  8004206eca:	48 89 c7             	mov    %rax,%rdi
  8004206ecd:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206ed4:	00 00 00 
  8004206ed7:	ff d0                	callq  *%rax
  8004206ed9:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206edd:	74 35                	je     8004206f14 <page_check+0x1441>
  8004206edf:	48 b9 58 ed 21 04 80 	movabs $0x800421ed58,%rcx
  8004206ee6:	00 00 00 
  8004206ee9:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206ef0:	00 00 00 
  8004206ef3:	be 67 05 00 00       	mov    $0x567,%esi
  8004206ef8:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206eff:	00 00 00 
  8004206f02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f07:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206f0e:	00 00 00 
  8004206f11:	41 ff d0             	callq  *%r8
  8004206f14:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206f1b:	00 00 00 
  8004206f1e:	48 8b 00             	mov    (%rax),%rax
  8004206f21:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206f26:	48 89 c7             	mov    %rax,%rdi
  8004206f29:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004206f30:	00 00 00 
  8004206f33:	ff d0                	callq  *%rax
  8004206f35:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206f39:	74 35                	je     8004206f70 <page_check+0x149d>
  8004206f3b:	48 b9 a0 ed 21 04 80 	movabs $0x800421eda0,%rcx
  8004206f42:	00 00 00 
  8004206f45:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206f4c:	00 00 00 
  8004206f4f:	be 68 05 00 00       	mov    $0x568,%esi
  8004206f54:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206f5b:	00 00 00 
  8004206f5e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f63:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206f6a:	00 00 00 
  8004206f6d:	41 ff d0             	callq  *%r8
  8004206f70:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f74:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f78:	66 85 c0             	test   %ax,%ax
  8004206f7b:	74 35                	je     8004206fb2 <page_check+0x14df>
  8004206f7d:	48 b9 c6 ed 21 04 80 	movabs $0x800421edc6,%rcx
  8004206f84:	00 00 00 
  8004206f87:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206f8e:	00 00 00 
  8004206f91:	be 69 05 00 00       	mov    $0x569,%esi
  8004206f96:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206f9d:	00 00 00 
  8004206fa0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fa5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206fac:	00 00 00 
  8004206faf:	41 ff d0             	callq  *%r8
  8004206fb2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206fb6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206fba:	66 83 f8 01          	cmp    $0x1,%ax
  8004206fbe:	74 35                	je     8004206ff5 <page_check+0x1522>
  8004206fc0:	48 b9 41 ed 21 04 80 	movabs $0x800421ed41,%rcx
  8004206fc7:	00 00 00 
  8004206fca:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004206fd1:	00 00 00 
  8004206fd4:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004206fd9:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004206fe0:	00 00 00 
  8004206fe3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fe8:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004206fef:	00 00 00 
  8004206ff2:	41 ff d0             	callq  *%r8
  8004206ff5:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004206ffc:	00 00 00 
  8004206fff:	48 8b 00             	mov    (%rax),%rax
  8004207002:	48 8b 00             	mov    (%rax),%rax
  8004207005:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420700b:	48 89 c7             	mov    %rax,%rdi
  800420700e:	48 b8 4c 1b 20 04 80 	movabs $0x8004201b4c,%rax
  8004207015:	00 00 00 
  8004207018:	ff d0                	callq  *%rax
  800420701a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004207021:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207028:	00 00 00 
  800420702b:	48 8b 00             	mov    (%rax),%rax
  800420702e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207035:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207039:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420703d:	66 83 f8 01          	cmp    $0x1,%ax
  8004207041:	74 35                	je     8004207078 <page_check+0x15a5>
  8004207043:	48 b9 41 ed 21 04 80 	movabs $0x800421ed41,%rcx
  800420704a:	00 00 00 
  800420704d:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207054:	00 00 00 
  8004207057:	be 80 05 00 00       	mov    $0x580,%esi
  800420705c:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207063:	00 00 00 
  8004207066:	b8 00 00 00 00       	mov    $0x0,%eax
  800420706b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207072:	00 00 00 
  8004207075:	41 ff d0             	callq  *%r8
  8004207078:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420707f:	48 89 c7             	mov    %rax,%rdi
  8004207082:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004207089:	00 00 00 
  800420708c:	ff d0                	callq  *%rax
  800420708e:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207095:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004207099:	74 13                	je     80042070ae <page_check+0x15db>
  800420709b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420709f:	48 89 c7             	mov    %rax,%rdi
  80042070a2:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042070a9:	00 00 00 
  80042070ac:	ff d0                	callq  *%rax
  80042070ae:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070b5:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042070b9:	74 13                	je     80042070ce <page_check+0x15fb>
  80042070bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070bf:	48 89 c7             	mov    %rax,%rdi
  80042070c2:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042070c9:	00 00 00 
  80042070cc:	ff d0                	callq  *%rax
  80042070ce:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070d5:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042070d9:	74 13                	je     80042070ee <page_check+0x161b>
  80042070db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042070df:	48 89 c7             	mov    %rax,%rdi
  80042070e2:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042070e9:	00 00 00 
  80042070ec:	ff d0                	callq  *%rax
  80042070ee:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  80042070f5:	00 40 06 00 
  80042070f9:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207100:	00 00 00 
  8004207103:	48 8b 00             	mov    (%rax),%rax
  8004207106:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  800420710d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004207112:	48 89 ce             	mov    %rcx,%rsi
  8004207115:	48 89 c7             	mov    %rax,%rdi
  8004207118:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  800420711f:	00 00 00 
  8004207122:	ff d0                	callq  *%rax
  8004207124:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  800420712b:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207132:	00 00 00 
  8004207135:	48 8b 00             	mov    (%rax),%rax
  8004207138:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800420713f:	48 c1 ea 27          	shr    $0x27,%rdx
  8004207143:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004207149:	48 c1 e2 03          	shl    $0x3,%rdx
  800420714d:	48 01 d0             	add    %rdx,%rax
  8004207150:	48 8b 00             	mov    (%rax),%rax
  8004207153:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207159:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207160:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207167:	48 c1 e8 0c          	shr    $0xc,%rax
  800420716b:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  8004207171:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  8004207177:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420717e:	00 00 00 
  8004207181:	48 8b 00             	mov    (%rax),%rax
  8004207184:	48 39 c2             	cmp    %rax,%rdx
  8004207187:	72 35                	jb     80042071be <page_check+0x16eb>
  8004207189:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207190:	48 89 c1             	mov    %rax,%rcx
  8004207193:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  800420719a:	00 00 00 
  800420719d:	be 88 05 00 00       	mov    $0x588,%esi
  80042071a2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042071a9:	00 00 00 
  80042071ac:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071b1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042071b8:	00 00 00 
  80042071bb:	41 ff d0             	callq  *%r8
  80042071be:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042071c5:	00 00 00 
  80042071c8:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042071cf:	48 01 d0             	add    %rdx,%rax
  80042071d2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042071d6:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042071dd:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042071e1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042071e6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042071ed:	00 
  80042071ee:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042071f2:	48 01 d0             	add    %rdx,%rax
  80042071f5:	48 8b 00             	mov    (%rax),%rax
  80042071f8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042071fe:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004207205:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800420720c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207210:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  8004207216:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  800420721c:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207223:	00 00 00 
  8004207226:	48 8b 00             	mov    (%rax),%rax
  8004207229:	48 39 c2             	cmp    %rax,%rdx
  800420722c:	72 35                	jb     8004207263 <page_check+0x1790>
  800420722e:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207235:	48 89 c1             	mov    %rax,%rcx
  8004207238:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  800420723f:	00 00 00 
  8004207242:	be 89 05 00 00       	mov    $0x589,%esi
  8004207247:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420724e:	00 00 00 
  8004207251:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207256:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420725d:	00 00 00 
  8004207260:	41 ff d0             	callq  *%r8
  8004207263:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420726a:	00 00 00 
  800420726d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207274:	48 01 d0             	add    %rdx,%rax
  8004207277:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420727b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207282:	48 c1 e8 15          	shr    $0x15,%rax
  8004207286:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420728b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207292:	00 
  8004207293:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004207297:	48 01 d0             	add    %rdx,%rax
  800420729a:	48 8b 00             	mov    (%rax),%rax
  800420729d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042072a3:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042072aa:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072b1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072b5:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042072bb:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042072c1:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042072c8:	00 00 00 
  80042072cb:	48 8b 00             	mov    (%rax),%rax
  80042072ce:	48 39 c2             	cmp    %rax,%rdx
  80042072d1:	72 35                	jb     8004207308 <page_check+0x1835>
  80042072d3:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072da:	48 89 c1             	mov    %rax,%rcx
  80042072dd:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  80042072e4:	00 00 00 
  80042072e7:	be 8a 05 00 00       	mov    $0x58a,%esi
  80042072ec:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042072f3:	00 00 00 
  80042072f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072fb:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207302:	00 00 00 
  8004207305:	41 ff d0             	callq  *%r8
  8004207308:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420730f:	00 00 00 
  8004207312:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004207319:	48 01 d0             	add    %rdx,%rax
  800420731c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004207323:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420732a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420732e:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004207333:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420733a:	00 
  800420733b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004207342:	48 01 c2             	add    %rax,%rdx
  8004207345:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  800420734c:	48 39 c2             	cmp    %rax,%rdx
  800420734f:	74 35                	je     8004207386 <page_check+0x18b3>
  8004207351:	48 b9 d7 ed 21 04 80 	movabs $0x800421edd7,%rcx
  8004207358:	00 00 00 
  800420735b:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207362:	00 00 00 
  8004207365:	be 8b 05 00 00       	mov    $0x58b,%esi
  800420736a:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207371:	00 00 00 
  8004207374:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207379:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207380:	00 00 00 
  8004207383:	41 ff d0             	callq  *%r8
  8004207386:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420738a:	48 89 c7             	mov    %rax,%rdi
  800420738d:	48 b8 bd 1b 20 04 80 	movabs $0x8004201bbd,%rax
  8004207394:	00 00 00 
  8004207397:	ff d0                	callq  *%rax
  8004207399:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420739e:	be ff 00 00 00       	mov    $0xff,%esi
  80042073a3:	48 89 c7             	mov    %rax,%rdi
  80042073a6:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  80042073ad:	00 00 00 
  80042073b0:	ff d0                	callq  *%rax
  80042073b2:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042073b9:	00 00 00 
  80042073bc:	48 8b 00             	mov    (%rax),%rax
  80042073bf:	ba 01 00 00 00       	mov    $0x1,%edx
  80042073c4:	be 00 00 00 00       	mov    $0x0,%esi
  80042073c9:	48 89 c7             	mov    %rax,%rdi
  80042073cc:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  80042073d3:	00 00 00 
  80042073d6:	ff d0                	callq  *%rax
  80042073d8:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042073df:	00 00 00 
  80042073e2:	48 8b 00             	mov    (%rax),%rax
  80042073e5:	48 8b 00             	mov    (%rax),%rax
  80042073e8:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073ee:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042073f5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042073fc:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207400:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  8004207406:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800420740c:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207413:	00 00 00 
  8004207416:	48 8b 00             	mov    (%rax),%rax
  8004207419:	48 39 c2             	cmp    %rax,%rdx
  800420741c:	72 35                	jb     8004207453 <page_check+0x1980>
  800420741e:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207425:	48 89 c1             	mov    %rax,%rcx
  8004207428:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  800420742f:	00 00 00 
  8004207432:	be 90 05 00 00       	mov    $0x590,%esi
  8004207437:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420743e:	00 00 00 
  8004207441:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207446:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420744d:	00 00 00 
  8004207450:	41 ff d0             	callq  *%r8
  8004207453:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420745a:	00 00 00 
  800420745d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207464:	48 01 d0             	add    %rdx,%rax
  8004207467:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420746b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420746f:	48 8b 00             	mov    (%rax),%rax
  8004207472:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207478:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  800420747f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004207486:	48 c1 e8 0c          	shr    $0xc,%rax
  800420748a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004207490:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004207496:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800420749d:	00 00 00 
  80042074a0:	48 8b 00             	mov    (%rax),%rax
  80042074a3:	48 39 c2             	cmp    %rax,%rdx
  80042074a6:	72 35                	jb     80042074dd <page_check+0x1a0a>
  80042074a8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074af:	48 89 c1             	mov    %rax,%rcx
  80042074b2:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  80042074b9:	00 00 00 
  80042074bc:	be 91 05 00 00       	mov    $0x591,%esi
  80042074c1:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042074c8:	00 00 00 
  80042074cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074d0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042074d7:	00 00 00 
  80042074da:	41 ff d0             	callq  *%r8
  80042074dd:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042074e4:	00 00 00 
  80042074e7:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074ee:	48 01 d0             	add    %rdx,%rax
  80042074f1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042074f5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042074f9:	48 8b 00             	mov    (%rax),%rax
  80042074fc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207502:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004207509:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207510:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207514:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  800420751a:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207520:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207527:	00 00 00 
  800420752a:	48 8b 00             	mov    (%rax),%rax
  800420752d:	48 39 c2             	cmp    %rax,%rdx
  8004207530:	72 35                	jb     8004207567 <page_check+0x1a94>
  8004207532:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207539:	48 89 c1             	mov    %rax,%rcx
  800420753c:	48 ba 38 e1 21 04 80 	movabs $0x800421e138,%rdx
  8004207543:	00 00 00 
  8004207546:	be 92 05 00 00       	mov    $0x592,%esi
  800420754b:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207552:	00 00 00 
  8004207555:	b8 00 00 00 00       	mov    $0x0,%eax
  800420755a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207561:	00 00 00 
  8004207564:	41 ff d0             	callq  *%r8
  8004207567:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420756e:	00 00 00 
  8004207571:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207578:	48 01 d0             	add    %rdx,%rax
  800420757b:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207582:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004207589:	eb 58                	jmp    80042075e3 <page_check+0x1b10>
  800420758b:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207592:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004207595:	48 63 d2             	movslq %edx,%rdx
  8004207598:	48 c1 e2 03          	shl    $0x3,%rdx
  800420759c:	48 01 d0             	add    %rdx,%rax
  800420759f:	48 8b 00             	mov    (%rax),%rax
  80042075a2:	83 e0 01             	and    $0x1,%eax
  80042075a5:	48 85 c0             	test   %rax,%rax
  80042075a8:	74 35                	je     80042075df <page_check+0x1b0c>
  80042075aa:	48 b9 ef ed 21 04 80 	movabs $0x800421edef,%rcx
  80042075b1:	00 00 00 
  80042075b4:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042075bb:	00 00 00 
  80042075be:	be 94 05 00 00       	mov    $0x594,%esi
  80042075c3:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042075ca:	00 00 00 
  80042075cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042075d2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042075d9:	00 00 00 
  80042075dc:	41 ff d0             	callq  *%r8
  80042075df:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042075e3:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  80042075ea:	7e 9f                	jle    800420758b <page_check+0x1ab8>
  80042075ec:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042075f3:	00 00 00 
  80042075f6:	48 8b 00             	mov    (%rax),%rax
  80042075f9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207600:	48 b8 38 c2 4d 04 80 	movabs $0x80044dc238,%rax
  8004207607:	00 00 00 
  800420760a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420760e:	48 89 10             	mov    %rdx,(%rax)
  8004207611:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207615:	48 89 c7             	mov    %rax,%rdi
  8004207618:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420761f:	00 00 00 
  8004207622:	ff d0                	callq  *%rax
  8004207624:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004207628:	48 89 c7             	mov    %rax,%rdi
  800420762b:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004207632:	00 00 00 
  8004207635:	ff d0                	callq  *%rax
  8004207637:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420763b:	48 89 c7             	mov    %rax,%rdi
  800420763e:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004207645:	00 00 00 
  8004207648:	ff d0                	callq  *%rax
  800420764a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420764e:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207652:	66 85 c0             	test   %ax,%ax
  8004207655:	74 35                	je     800420768c <page_check+0x1bb9>
  8004207657:	48 b9 06 ee 21 04 80 	movabs $0x800421ee06,%rcx
  800420765e:	00 00 00 
  8004207661:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207668:	00 00 00 
  800420766b:	be a0 05 00 00       	mov    $0x5a0,%esi
  8004207670:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207677:	00 00 00 
  800420767a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420767f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207686:	00 00 00 
  8004207689:	41 ff d0             	callq  *%r8
  800420768c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004207690:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207694:	66 85 c0             	test   %ax,%ax
  8004207697:	74 35                	je     80042076ce <page_check+0x1bfb>
  8004207699:	48 b9 c6 ed 21 04 80 	movabs $0x800421edc6,%rcx
  80042076a0:	00 00 00 
  80042076a3:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042076aa:	00 00 00 
  80042076ad:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042076b2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042076b9:	00 00 00 
  80042076bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076c1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042076c8:	00 00 00 
  80042076cb:	41 ff d0             	callq  *%r8
  80042076ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042076d2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042076d6:	66 85 c0             	test   %ax,%ax
  80042076d9:	74 35                	je     8004207710 <page_check+0x1c3d>
  80042076db:	48 b9 17 ee 21 04 80 	movabs $0x800421ee17,%rcx
  80042076e2:	00 00 00 
  80042076e5:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042076ec:	00 00 00 
  80042076ef:	be a2 05 00 00       	mov    $0x5a2,%esi
  80042076f4:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042076fb:	00 00 00 
  80042076fe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207703:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420770a:	00 00 00 
  800420770d:	41 ff d0             	callq  *%r8
  8004207710:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207714:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207718:	66 85 c0             	test   %ax,%ax
  800420771b:	74 35                	je     8004207752 <page_check+0x1c7f>
  800420771d:	48 b9 28 ee 21 04 80 	movabs $0x800421ee28,%rcx
  8004207724:	00 00 00 
  8004207727:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420772e:	00 00 00 
  8004207731:	be a3 05 00 00       	mov    $0x5a3,%esi
  8004207736:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420773d:	00 00 00 
  8004207740:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207745:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420774c:	00 00 00 
  800420774f:	41 ff d0             	callq  *%r8
  8004207752:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004207756:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420775a:	66 85 c0             	test   %ax,%ax
  800420775d:	74 35                	je     8004207794 <page_check+0x1cc1>
  800420775f:	48 b9 39 ee 21 04 80 	movabs $0x800421ee39,%rcx
  8004207766:	00 00 00 
  8004207769:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207770:	00 00 00 
  8004207773:	be a4 05 00 00       	mov    $0x5a4,%esi
  8004207778:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420777f:	00 00 00 
  8004207782:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207787:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420778e:	00 00 00 
  8004207791:	41 ff d0             	callq  *%r8
  8004207794:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004207798:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420779c:	66 85 c0             	test   %ax,%ax
  800420779f:	74 35                	je     80042077d6 <page_check+0x1d03>
  80042077a1:	48 b9 4a ee 21 04 80 	movabs $0x800421ee4a,%rcx
  80042077a8:	00 00 00 
  80042077ab:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042077b2:	00 00 00 
  80042077b5:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042077ba:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042077c1:	00 00 00 
  80042077c4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077c9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042077d0:	00 00 00 
  80042077d3:	41 ff d0             	callq  *%r8
  80042077d6:	be 01 10 00 00       	mov    $0x1001,%esi
  80042077db:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077e0:	48 b8 56 3f 20 04 80 	movabs $0x8004203f56,%rax
  80042077e7:	00 00 00 
  80042077ea:	ff d0                	callq  *%rax
  80042077ec:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  80042077f3:	be 00 10 00 00       	mov    $0x1000,%esi
  80042077f8:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077fd:	48 b8 56 3f 20 04 80 	movabs $0x8004203f56,%rax
  8004207804:	00 00 00 
  8004207807:	ff d0                	callq  *%rax
  8004207809:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207810:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207817:	00 00 00 
  800420781a:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  8004207821:	76 1d                	jbe    8004207840 <page_check+0x1d6d>
  8004207823:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420782a:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207831:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207838:	00 00 00 
  800420783b:	48 39 c2             	cmp    %rax,%rdx
  800420783e:	76 35                	jbe    8004207875 <page_check+0x1da2>
  8004207840:	48 b9 60 ee 21 04 80 	movabs $0x800421ee60,%rcx
  8004207847:	00 00 00 
  800420784a:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207851:	00 00 00 
  8004207854:	be ac 05 00 00       	mov    $0x5ac,%esi
  8004207859:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207860:	00 00 00 
  8004207863:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207868:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420786f:	00 00 00 
  8004207872:	41 ff d0             	callq  *%r8
  8004207875:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420787c:	00 00 00 
  800420787f:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  8004207886:	76 1d                	jbe    80042078a5 <page_check+0x1dd2>
  8004207888:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  800420788f:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207896:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420789d:	00 00 00 
  80042078a0:	48 39 c2             	cmp    %rax,%rdx
  80042078a3:	76 35                	jbe    80042078da <page_check+0x1e07>
  80042078a5:	48 b9 88 ee 21 04 80 	movabs $0x800421ee88,%rcx
  80042078ac:	00 00 00 
  80042078af:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042078b6:	00 00 00 
  80042078b9:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042078be:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042078c5:	00 00 00 
  80042078c8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078cd:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042078d4:	00 00 00 
  80042078d7:	41 ff d0             	callq  *%r8
  80042078da:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042078e1:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078e6:	48 85 c0             	test   %rax,%rax
  80042078e9:	75 11                	jne    80042078fc <page_check+0x1e29>
  80042078eb:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042078f2:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078f7:	48 85 c0             	test   %rax,%rax
  80042078fa:	74 35                	je     8004207931 <page_check+0x1e5e>
  80042078fc:	48 b9 b0 ee 21 04 80 	movabs $0x800421eeb0,%rcx
  8004207903:	00 00 00 
  8004207906:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  800420790d:	00 00 00 
  8004207910:	be af 05 00 00       	mov    $0x5af,%esi
  8004207915:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  800420791c:	00 00 00 
  800420791f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207924:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420792b:	00 00 00 
  800420792e:	41 ff d0             	callq  *%r8
  8004207931:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207938:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  800420793e:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207945:	76 35                	jbe    800420797c <page_check+0x1ea9>
  8004207947:	48 b9 d7 ee 21 04 80 	movabs $0x800421eed7,%rcx
  800420794e:	00 00 00 
  8004207951:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207958:	00 00 00 
  800420795b:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207960:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207967:	00 00 00 
  800420796a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420796f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207976:	00 00 00 
  8004207979:	41 ff d0             	callq  *%r8
  800420797c:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207983:	00 00 00 
  8004207986:	48 8b 00             	mov    (%rax),%rax
  8004207989:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207990:	48 89 d6             	mov    %rdx,%rsi
  8004207993:	48 89 c7             	mov    %rax,%rdi
  8004207996:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  800420799d:	00 00 00 
  80042079a0:	ff d0                	callq  *%rax
  80042079a2:	48 85 c0             	test   %rax,%rax
  80042079a5:	74 35                	je     80042079dc <page_check+0x1f09>
  80042079a7:	48 b9 f0 ee 21 04 80 	movabs $0x800421eef0,%rcx
  80042079ae:	00 00 00 
  80042079b1:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  80042079b8:	00 00 00 
  80042079bb:	be b4 05 00 00       	mov    $0x5b4,%esi
  80042079c0:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  80042079c7:	00 00 00 
  80042079ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079cf:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042079d6:	00 00 00 
  80042079d9:	41 ff d0             	callq  *%r8
  80042079dc:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042079e3:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  80042079ea:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  80042079f1:	00 00 00 
  80042079f4:	48 8b 00             	mov    (%rax),%rax
  80042079f7:	48 89 d6             	mov    %rdx,%rsi
  80042079fa:	48 89 c7             	mov    %rax,%rdi
  80042079fd:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004207a04:	00 00 00 
  8004207a07:	ff d0                	callq  *%rax
  8004207a09:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207a0f:	74 35                	je     8004207a46 <page_check+0x1f73>
  8004207a11:	48 b9 18 ef 21 04 80 	movabs $0x800421ef18,%rcx
  8004207a18:	00 00 00 
  8004207a1b:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207a22:	00 00 00 
  8004207a25:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207a2a:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207a31:	00 00 00 
  8004207a34:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a39:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207a40:	00 00 00 
  8004207a43:	41 ff d0             	callq  *%r8
  8004207a46:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207a4d:	00 00 00 
  8004207a50:	48 8b 00             	mov    (%rax),%rax
  8004207a53:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207a5a:	48 89 d6             	mov    %rdx,%rsi
  8004207a5d:	48 89 c7             	mov    %rax,%rdi
  8004207a60:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004207a67:	00 00 00 
  8004207a6a:	ff d0                	callq  *%rax
  8004207a6c:	48 85 c0             	test   %rax,%rax
  8004207a6f:	74 35                	je     8004207aa6 <page_check+0x1fd3>
  8004207a71:	48 b9 48 ef 21 04 80 	movabs $0x800421ef48,%rcx
  8004207a78:	00 00 00 
  8004207a7b:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207a82:	00 00 00 
  8004207a85:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207a8a:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207a91:	00 00 00 
  8004207a94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a99:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207aa0:	00 00 00 
  8004207aa3:	41 ff d0             	callq  *%r8
  8004207aa6:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207aad:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207ab4:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207abb:	00 00 00 
  8004207abe:	48 8b 00             	mov    (%rax),%rax
  8004207ac1:	48 89 d6             	mov    %rdx,%rsi
  8004207ac4:	48 89 c7             	mov    %rax,%rdi
  8004207ac7:	48 b8 59 58 20 04 80 	movabs $0x8004205859,%rax
  8004207ace:	00 00 00 
  8004207ad1:	ff d0                	callq  *%rax
  8004207ad3:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207ad7:	74 35                	je     8004207b0e <page_check+0x203b>
  8004207ad9:	48 b9 70 ef 21 04 80 	movabs $0x800421ef70,%rcx
  8004207ae0:	00 00 00 
  8004207ae3:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207aea:	00 00 00 
  8004207aed:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207af2:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207af9:	00 00 00 
  8004207afc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b01:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207b08:	00 00 00 
  8004207b0b:	41 ff d0             	callq  *%r8
  8004207b0e:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b15:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207b1c:	00 00 00 
  8004207b1f:	48 8b 00             	mov    (%rax),%rax
  8004207b22:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b27:	48 89 ce             	mov    %rcx,%rsi
  8004207b2a:	48 89 c7             	mov    %rax,%rdi
  8004207b2d:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207b34:	00 00 00 
  8004207b37:	ff d0                	callq  *%rax
  8004207b39:	48 8b 00             	mov    (%rax),%rax
  8004207b3c:	83 e0 1a             	and    $0x1a,%eax
  8004207b3f:	48 85 c0             	test   %rax,%rax
  8004207b42:	75 35                	jne    8004207b79 <page_check+0x20a6>
  8004207b44:	48 b9 a0 ef 21 04 80 	movabs $0x800421efa0,%rcx
  8004207b4b:	00 00 00 
  8004207b4e:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207b55:	00 00 00 
  8004207b58:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207b5d:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207b64:	00 00 00 
  8004207b67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b6c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207b73:	00 00 00 
  8004207b76:	41 ff d0             	callq  *%r8
  8004207b79:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b80:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207b87:	00 00 00 
  8004207b8a:	48 8b 00             	mov    (%rax),%rax
  8004207b8d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b92:	48 89 ce             	mov    %rcx,%rsi
  8004207b95:	48 89 c7             	mov    %rax,%rdi
  8004207b98:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207b9f:	00 00 00 
  8004207ba2:	ff d0                	callq  *%rax
  8004207ba4:	48 8b 00             	mov    (%rax),%rax
  8004207ba7:	83 e0 04             	and    $0x4,%eax
  8004207baa:	48 85 c0             	test   %rax,%rax
  8004207bad:	74 35                	je     8004207be4 <page_check+0x2111>
  8004207baf:	48 b9 e8 ef 21 04 80 	movabs $0x800421efe8,%rcx
  8004207bb6:	00 00 00 
  8004207bb9:	48 ba b1 e1 21 04 80 	movabs $0x800421e1b1,%rdx
  8004207bc0:	00 00 00 
  8004207bc3:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207bc8:	48 bf c6 e1 21 04 80 	movabs $0x800421e1c6,%rdi
  8004207bcf:	00 00 00 
  8004207bd2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bd7:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207bde:	00 00 00 
  8004207be1:	41 ff d0             	callq  *%r8
  8004207be4:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207beb:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207bf2:	00 00 00 
  8004207bf5:	48 8b 00             	mov    (%rax),%rax
  8004207bf8:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207bfd:	48 89 ce             	mov    %rcx,%rsi
  8004207c00:	48 89 c7             	mov    %rax,%rdi
  8004207c03:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207c0a:	00 00 00 
  8004207c0d:	ff d0                	callq  *%rax
  8004207c0f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c16:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207c1d:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207c23:	48 89 c1             	mov    %rax,%rcx
  8004207c26:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207c2d:	00 00 00 
  8004207c30:	48 8b 00             	mov    (%rax),%rax
  8004207c33:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c38:	48 89 ce             	mov    %rcx,%rsi
  8004207c3b:	48 89 c7             	mov    %rax,%rdi
  8004207c3e:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207c45:	00 00 00 
  8004207c48:	ff d0                	callq  *%rax
  8004207c4a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c51:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207c58:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004207c5f:	00 00 00 
  8004207c62:	48 8b 00             	mov    (%rax),%rax
  8004207c65:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c6a:	48 89 ce             	mov    %rcx,%rsi
  8004207c6d:	48 89 c7             	mov    %rax,%rdi
  8004207c70:	48 b8 1c 30 20 04 80 	movabs $0x800420301c,%rax
  8004207c77:	00 00 00 
  8004207c7a:	ff d0                	callq  *%rax
  8004207c7c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c83:	48 bf 1b f0 21 04 80 	movabs $0x800421f01b,%rdi
  8004207c8a:	00 00 00 
  8004207c8d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c92:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004207c99:	00 00 00 
  8004207c9c:	ff d2                	callq  *%rdx
  8004207c9e:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207ca5:	5b                   	pop    %rbx
  8004207ca6:	5d                   	pop    %rbp
  8004207ca7:	c3                   	retq   

0000008004207ca8 <page2ppn>:
  8004207ca8:	55                   	push   %rbp
  8004207ca9:	48 89 e5             	mov    %rsp,%rbp
  8004207cac:	48 83 ec 08          	sub    $0x8,%rsp
  8004207cb0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cb4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207cb8:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004207cbf:	00 00 00 
  8004207cc2:	48 8b 00             	mov    (%rax),%rax
  8004207cc5:	48 29 c2             	sub    %rax,%rdx
  8004207cc8:	48 89 d0             	mov    %rdx,%rax
  8004207ccb:	48 c1 f8 04          	sar    $0x4,%rax
  8004207ccf:	c9                   	leaveq 
  8004207cd0:	c3                   	retq   

0000008004207cd1 <page2pa>:
  8004207cd1:	55                   	push   %rbp
  8004207cd2:	48 89 e5             	mov    %rsp,%rbp
  8004207cd5:	48 83 ec 08          	sub    $0x8,%rsp
  8004207cd9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207ce1:	48 89 c7             	mov    %rax,%rdi
  8004207ce4:	48 b8 a8 7c 20 04 80 	movabs $0x8004207ca8,%rax
  8004207ceb:	00 00 00 
  8004207cee:	ff d0                	callq  *%rax
  8004207cf0:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207cf4:	c9                   	leaveq 
  8004207cf5:	c3                   	retq   

0000008004207cf6 <pa2page>:
  8004207cf6:	55                   	push   %rbp
  8004207cf7:	48 89 e5             	mov    %rsp,%rbp
  8004207cfa:	48 83 ec 10          	sub    $0x10,%rsp
  8004207cfe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207d02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d06:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d0a:	48 89 c2             	mov    %rax,%rdx
  8004207d0d:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207d14:	00 00 00 
  8004207d17:	48 8b 00             	mov    (%rax),%rax
  8004207d1a:	48 39 c2             	cmp    %rax,%rdx
  8004207d1d:	72 2a                	jb     8004207d49 <pa2page+0x53>
  8004207d1f:	48 ba 38 f0 21 04 80 	movabs $0x800421f038,%rdx
  8004207d26:	00 00 00 
  8004207d29:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207d2e:	48 bf 57 f0 21 04 80 	movabs $0x800421f057,%rdi
  8004207d35:	00 00 00 
  8004207d38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d3d:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004207d44:	00 00 00 
  8004207d47:	ff d1                	callq  *%rcx
  8004207d49:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  8004207d50:	00 00 00 
  8004207d53:	48 8b 00             	mov    (%rax),%rax
  8004207d56:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207d5a:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207d5e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207d62:	48 01 d0             	add    %rdx,%rax
  8004207d65:	c9                   	leaveq 
  8004207d66:	c3                   	retq   

0000008004207d67 <page2kva>:
  8004207d67:	55                   	push   %rbp
  8004207d68:	48 89 e5             	mov    %rsp,%rbp
  8004207d6b:	48 83 ec 20          	sub    $0x20,%rsp
  8004207d6f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207d73:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207d77:	48 89 c7             	mov    %rax,%rdi
  8004207d7a:	48 b8 d1 7c 20 04 80 	movabs $0x8004207cd1,%rax
  8004207d81:	00 00 00 
  8004207d84:	ff d0                	callq  *%rax
  8004207d86:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207d8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d8e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d92:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207d95:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207d98:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004207d9f:	00 00 00 
  8004207da2:	48 8b 00             	mov    (%rax),%rax
  8004207da5:	48 39 c2             	cmp    %rax,%rdx
  8004207da8:	72 32                	jb     8004207ddc <page2kva+0x75>
  8004207daa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dae:	48 89 c1             	mov    %rax,%rcx
  8004207db1:	48 ba 68 f0 21 04 80 	movabs $0x800421f068,%rdx
  8004207db8:	00 00 00 
  8004207dbb:	be 62 00 00 00       	mov    $0x62,%esi
  8004207dc0:	48 bf 57 f0 21 04 80 	movabs $0x800421f057,%rdi
  8004207dc7:	00 00 00 
  8004207dca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dcf:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004207dd6:	00 00 00 
  8004207dd9:	41 ff d0             	callq  *%r8
  8004207ddc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207de3:	00 00 00 
  8004207de6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dea:	48 01 d0             	add    %rdx,%rax
  8004207ded:	c9                   	leaveq 
  8004207dee:	c3                   	retq   

0000008004207def <unlock_kernel>:
  8004207def:	55                   	push   %rbp
  8004207df0:	48 89 e5             	mov    %rsp,%rbp
  8004207df3:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004207dfa:	00 00 00 
  8004207dfd:	48 b8 cc 7f 21 04 80 	movabs $0x8004217fcc,%rax
  8004207e04:	00 00 00 
  8004207e07:	ff d0                	callq  *%rax
  8004207e09:	f3 90                	pause  
  8004207e0b:	5d                   	pop    %rbp
  8004207e0c:	c3                   	retq   

0000008004207e0d <envid2env>:
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207e0d:	55                   	push   %rbp
  8004207e0e:	48 89 e5             	mov    %rsp,%rbp
  8004207e11:	53                   	push   %rbx
  8004207e12:	48 83 ec 28          	sub    $0x28,%rsp
  8004207e16:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207e19:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207e1d:	89 d0                	mov    %edx,%eax
  8004207e1f:	88 45 d8             	mov    %al,-0x28(%rbp)
	struct Env *e;

	// if envid is 0, the function should return the current environment
	// it doesn't actually return the env - it puts the env in *env_store
	if (envid == 0) {
  8004207e22:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207e26:	75 41                	jne    8004207e69 <envid2env+0x5c>
		*env_store = curenv;
  8004207e28:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004207e2f:	00 00 00 
  8004207e32:	ff d0                	callq  *%rax
  8004207e34:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004207e3b:	00 00 00 
  8004207e3e:	48 98                	cltq   
  8004207e40:	48 c1 e0 03          	shl    $0x3,%rax
  8004207e44:	48 89 c1             	mov    %rax,%rcx
  8004207e47:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207e4b:	48 01 c8             	add    %rcx,%rax
  8004207e4e:	48 01 d0             	add    %rdx,%rax
  8004207e51:	48 83 c0 08          	add    $0x8,%rax
  8004207e55:	48 8b 10             	mov    (%rax),%rdx
  8004207e58:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207e5c:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  8004207e5f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e64:	e9 fd 00 00 00       	jmpq   8004207f66 <envid2env+0x159>

	// it should use the ENVX() macro found in inc/env.h, not straight reference
	// e = &envs[envid];
	// use ENVX() macro to get the correct index in the envs variable 
	// and use that to look stuff up
	e = &envs[ENVX(envid)];
  8004207e69:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207e70:	00 00 00 
  8004207e73:	48 8b 10             	mov    (%rax),%rdx
  8004207e76:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207e79:	48 98                	cltq   
  8004207e7b:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207e80:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207e87:	48 01 d0             	add    %rdx,%rax
  8004207e8a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207e8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e92:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207e98:	85 c0                	test   %eax,%eax
  8004207e9a:	74 0f                	je     8004207eab <envid2env+0x9e>
  8004207e9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ea0:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207ea6:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207ea9:	74 15                	je     8004207ec0 <envid2env+0xb3>
		*env_store = 0;
  8004207eab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207eaf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207eb6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207ebb:	e9 a6 00 00 00       	jmpq   8004207f66 <envid2env+0x159>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004207ec0:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207ec4:	0f 84 8c 00 00 00    	je     8004207f56 <envid2env+0x149>
  8004207eca:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004207ed1:	00 00 00 
  8004207ed4:	ff d0                	callq  *%rax
  8004207ed6:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004207edd:	00 00 00 
  8004207ee0:	48 98                	cltq   
  8004207ee2:	48 c1 e0 03          	shl    $0x3,%rax
  8004207ee6:	48 89 c1             	mov    %rax,%rcx
  8004207ee9:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207eed:	48 01 c8             	add    %rcx,%rax
  8004207ef0:	48 01 d0             	add    %rdx,%rax
  8004207ef3:	48 83 c0 08          	add    $0x8,%rax
  8004207ef7:	48 8b 00             	mov    (%rax),%rax
  8004207efa:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004207efe:	74 56                	je     8004207f56 <envid2env+0x149>
  8004207f00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207f04:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004207f0a:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004207f11:	00 00 00 
  8004207f14:	ff d0                	callq  *%rax
  8004207f16:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004207f1d:	00 00 00 
  8004207f20:	48 98                	cltq   
  8004207f22:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f26:	48 89 c1             	mov    %rax,%rcx
  8004207f29:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f2d:	48 01 c8             	add    %rcx,%rax
  8004207f30:	48 01 d0             	add    %rdx,%rax
  8004207f33:	48 83 c0 08          	add    $0x8,%rax
  8004207f37:	48 8b 00             	mov    (%rax),%rax
  8004207f3a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207f40:	39 c3                	cmp    %eax,%ebx
  8004207f42:	74 12                	je     8004207f56 <envid2env+0x149>
		*env_store = 0;
  8004207f44:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f48:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207f4f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207f54:	eb 10                	jmp    8004207f66 <envid2env+0x159>
	}

	// should be *env_store = e;, this might literaly work tho
	// env_store = &e;
	*env_store = e;
  8004207f56:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f5a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004207f5e:	48 89 10             	mov    %rdx,(%rax)
	return 0;
  8004207f61:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004207f66:	48 83 c4 28          	add    $0x28,%rsp
  8004207f6a:	5b                   	pop    %rbx
  8004207f6b:	5d                   	pop    %rbp
  8004207f6c:	c3                   	retq   

0000008004207f6d <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  8004207f6d:	55                   	push   %rbp
  8004207f6e:	48 89 e5             	mov    %rsp,%rbp
  8004207f71:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207f75:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004207f7c:	eb 6d                	jmp    8004207feb <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  8004207f7e:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207f85:	00 00 00 
  8004207f88:	48 8b 10             	mov    (%rax),%rdx
  8004207f8b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f8e:	48 98                	cltq   
  8004207f90:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f97:	48 01 d0             	add    %rdx,%rax
  8004207f9a:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004207fa1:	00 00 00 
		envs[i].env_link = &envs[i+1];
  8004207fa4:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207fab:	00 00 00 
  8004207fae:	48 8b 10             	mov    (%rax),%rdx
  8004207fb1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fb4:	48 98                	cltq   
  8004207fb6:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fbd:	48 01 c2             	add    %rax,%rdx
  8004207fc0:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207fc7:	00 00 00 
  8004207fca:	48 8b 08             	mov    (%rax),%rcx
  8004207fcd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fd0:	48 98                	cltq   
  8004207fd2:	48 83 c0 01          	add    $0x1,%rax
  8004207fd6:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fdd:	48 01 c8             	add    %rcx,%rax
  8004207fe0:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207fe7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004207feb:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004207ff2:	7e 8a                	jle    8004207f7e <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  8004207ff4:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004207ffb:	00 00 00 
  8004207ffe:	48 8b 00             	mov    (%rax),%rax
  8004208001:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004208007:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  800420800e:	00 00 00 00 
	env_free_list = &envs[0];
  8004208012:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004208019:	00 00 00 
  800420801c:	48 8b 10             	mov    (%rax),%rdx
  800420801f:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004208026:	00 00 00 
  8004208029:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  800420802c:	48 b8 3a 80 20 04 80 	movabs $0x800420803a,%rax
  8004208033:	00 00 00 
  8004208036:	ff d0                	callq  *%rax
}
  8004208038:	c9                   	leaveq 
  8004208039:	c3                   	retq   

000000800420803a <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  800420803a:	55                   	push   %rbp
  800420803b:	48 89 e5             	mov    %rsp,%rbp
  800420803e:	53                   	push   %rbx
  800420803f:	48 83 ec 10          	sub    $0x10,%rsp
  8004208043:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420804a:	00 00 00 
  800420804d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  8004208051:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208055:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  8004208058:	b8 23 00 00 00       	mov    $0x23,%eax
  800420805d:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  800420805f:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208064:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  8004208066:	b8 10 00 00 00       	mov    $0x10,%eax
  800420806b:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  800420806d:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208072:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  8004208074:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208079:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  800420807b:	b8 08 00 00 00       	mov    $0x8,%eax
  8004208080:	89 c3                	mov    %eax,%ebx
  8004208082:	53                   	push   %rbx
  8004208083:	48 b8 90 80 20 04 80 	movabs $0x8004208090,%rax
  800420808a:	00 00 00 
  800420808d:	50                   	push   %rax
  800420808e:	48 cb                	lretq  
  8004208090:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  8004208096:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  800420809a:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  800420809d:	48 83 c4 10          	add    $0x10,%rsp
  80042080a1:	5b                   	pop    %rbx
  80042080a2:	5d                   	pop    %rbp
  80042080a3:	c3                   	retq   

00000080042080a4 <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  80042080a4:	55                   	push   %rbp
  80042080a5:	48 89 e5             	mov    %rsp,%rbp
  80042080a8:	48 83 ec 20          	sub    $0x20,%rsp
  80042080ac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  80042080b0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042080b7:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  80042080b8:	bf 01 00 00 00       	mov    $0x1,%edi
  80042080bd:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  80042080c4:	00 00 00 
  80042080c7:	ff d0                	callq  *%rax
  80042080c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042080cd:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042080d2:	75 0a                	jne    80042080de <env_setup_vm+0x3a>
		return -E_NO_MEM;
  80042080d4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042080d9:	e9 bc 00 00 00       	jmpq   800420819a <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  80042080de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042080e6:	8d 50 01             	lea    0x1(%rax),%edx
  80042080e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080ed:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  80042080f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080f5:	48 89 c7             	mov    %rax,%rdi
  80042080f8:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  80042080ff:	00 00 00 
  8004208102:	ff d0                	callq  *%rax
  8004208104:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208108:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  800420810f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208113:	48 89 c7             	mov    %rax,%rdi
  8004208116:	48 b8 d1 7c 20 04 80 	movabs $0x8004207cd1,%rax
  800420811d:	00 00 00 
  8004208120:	ff d0                	callq  *%rax
  8004208122:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004208126:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  800420812d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208131:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208138:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420813d:	be 00 00 00 00       	mov    $0x0,%esi
  8004208142:	48 89 c7             	mov    %rax,%rdi
  8004208145:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  800420814c:	00 00 00 
  800420814f:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  8004208151:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208155:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420815c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208160:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  8004208167:	00 00 00 
  800420816a:	48 8b 00             	mov    (%rax),%rax
  800420816d:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004208171:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  8004208174:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208178:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420817f:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8004208183:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208187:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420818e:	48 83 c8 05          	or     $0x5,%rax
  8004208192:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  8004208195:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420819a:	c9                   	leaveq 
  800420819b:	c3                   	retq   

000000800420819c <env_guest_alloc>:

#ifndef VMM_GUEST
int
env_guest_alloc(struct Env **newenv_store, envid_t parent_id)
{
  800420819c:	55                   	push   %rbp
  800420819d:	48 89 e5             	mov    %rsp,%rbp
  80042081a0:	48 83 ec 50          	sub    $0x50,%rsp
  80042081a4:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  80042081a8:	89 75 b4             	mov    %esi,-0x4c(%rbp)
	int32_t generation;
	struct Env *e;

	if (!(e = env_free_list))
  80042081ab:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  80042081b2:	00 00 00 
  80042081b5:	48 8b 00             	mov    (%rax),%rax
  80042081b8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042081bc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042081c1:	75 0a                	jne    80042081cd <env_guest_alloc+0x31>
		return -E_NO_FREE_ENV;
  80042081c3:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  80042081c8:	e9 47 04 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>

	memset(&e->env_vmxinfo, 0, sizeof(struct VmxGuestInfo));
  80042081cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042081d1:	48 05 20 01 00 00    	add    $0x120,%rax
  80042081d7:	ba 48 00 00 00       	mov    $0x48,%edx
  80042081dc:	be 00 00 00 00       	mov    $0x0,%esi
  80042081e1:	48 89 c7             	mov    %rax,%rdi
  80042081e4:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  80042081eb:	00 00 00 
  80042081ee:	ff d0                	callq  *%rax

	// allocate a page for the EPT PML4..
	struct PageInfo *p = NULL;
  80042081f0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042081f7:	00 

	if (!(p = page_alloc(ALLOC_ZERO)))
  80042081f8:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081fd:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004208204:	00 00 00 
  8004208207:	ff d0                	callq  *%rax
  8004208209:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420820d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004208212:	75 0a                	jne    800420821e <env_guest_alloc+0x82>
		return -E_NO_MEM;
  8004208214:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208219:	e9 f6 03 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>

	memset(p, 0, sizeof(struct PageInfo));
  800420821e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208222:	ba 10 00 00 00       	mov    $0x10,%edx
  8004208227:	be 00 00 00 00       	mov    $0x0,%esi
  800420822c:	48 89 c7             	mov    %rax,%rdi
  800420822f:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004208236:	00 00 00 
  8004208239:	ff d0                	callq  *%rax
	p->pp_ref       += 1;
  800420823b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420823f:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208243:	8d 50 01             	lea    0x1(%rax),%edx
  8004208246:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420824a:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  800420824e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208252:	48 89 c7             	mov    %rax,%rdi
  8004208255:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  800420825c:	00 00 00 
  800420825f:	ff d0                	callq  *%rax
  8004208261:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208265:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  800420826c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208270:	48 89 c7             	mov    %rax,%rdi
  8004208273:	48 b8 d1 7c 20 04 80 	movabs $0x8004207cd1,%rax
  800420827a:	00 00 00 
  800420827d:	ff d0                	callq  *%rax
  800420827f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208283:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	// Allocate a VMCS.
	struct PageInfo *q = vmx_init_vmcs();
  800420828a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420828f:	48 ba a2 ac 21 04 80 	movabs $0x800421aca2,%rdx
  8004208296:	00 00 00 
  8004208299:	ff d2                	callq  *%rdx
  800420829b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (!q) {
  800420829f:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042082a4:	75 1d                	jne    80042082c3 <env_guest_alloc+0x127>
		page_decref(p);
  80042082a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042082aa:	48 89 c7             	mov    %rax,%rdi
  80042082ad:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042082b4:	00 00 00 
  80042082b7:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042082b9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042082be:	e9 51 03 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>
	}
	q->pp_ref += 1;
  80042082c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082c7:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042082cb:	8d 50 01             	lea    0x1(%rax),%edx
  80042082ce:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082d2:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.vmcs = page2kva(q);
  80042082d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082da:	48 89 c7             	mov    %rax,%rdi
  80042082dd:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  80042082e4:	00 00 00 
  80042082e7:	ff d0                	callq  *%rax
  80042082e9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042082ed:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)

	// Allocate a page for msr load/store area.
	struct PageInfo *r = NULL;
  80042082f4:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042082fb:	00 
	if (!(r = page_alloc(ALLOC_ZERO))) {
  80042082fc:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208301:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004208308:	00 00 00 
  800420830b:	ff d0                	callq  *%rax
  800420830d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208311:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004208316:	75 30                	jne    8004208348 <env_guest_alloc+0x1ac>
		page_decref(p);
  8004208318:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420831c:	48 89 c7             	mov    %rax,%rdi
  800420831f:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004208326:	00 00 00 
  8004208329:	ff d0                	callq  *%rax
		page_decref(q);
  800420832b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420832f:	48 89 c7             	mov    %rax,%rdi
  8004208332:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004208339:	00 00 00 
  800420833c:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  800420833e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208343:	e9 cc 02 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>
	}
	r->pp_ref += 1;
  8004208348:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420834c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208350:	8d 50 01             	lea    0x1(%rax),%edx
  8004208353:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208357:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.msr_host_area = page2kva(r);
  800420835b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420835f:	48 89 c7             	mov    %rax,%rdi
  8004208362:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  8004208369:	00 00 00 
  800420836c:	ff d0                	callq  *%rax
  800420836e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208372:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
	e->env_vmxinfo.msr_guest_area = page2kva(r) + PGSIZE / 2;
  8004208379:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420837d:	48 89 c7             	mov    %rax,%rdi
  8004208380:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  8004208387:	00 00 00 
  800420838a:	ff d0                	callq  *%rax
  800420838c:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
  8004208393:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208397:	48 89 90 58 01 00 00 	mov    %rdx,0x158(%rax)

	// Allocate pages for IO bitmaps.
	struct PageInfo *s = NULL;
  800420839e:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  80042083a5:	00 
	if (!(s = page_alloc(ALLOC_ZERO))) {
  80042083a6:	bf 01 00 00 00       	mov    $0x1,%edi
  80042083ab:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  80042083b2:	00 00 00 
  80042083b5:	ff d0                	callq  *%rax
  80042083b7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042083bb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042083c0:	75 43                	jne    8004208405 <env_guest_alloc+0x269>
		page_decref(p);
  80042083c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042083c6:	48 89 c7             	mov    %rax,%rdi
  80042083c9:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042083d0:	00 00 00 
  80042083d3:	ff d0                	callq  *%rax
		page_decref(q);
  80042083d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042083d9:	48 89 c7             	mov    %rax,%rdi
  80042083dc:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042083e3:	00 00 00 
  80042083e6:	ff d0                	callq  *%rax
		page_decref(r);
  80042083e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042083ec:	48 89 c7             	mov    %rax,%rdi
  80042083ef:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042083f6:	00 00 00 
  80042083f9:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042083fb:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208400:	e9 0f 02 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>
	}
	s->pp_ref += 1;
  8004208405:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208409:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420840d:	8d 50 01             	lea    0x1(%rax),%edx
  8004208410:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208414:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_a = page2kva(s);
  8004208418:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420841c:	48 89 c7             	mov    %rax,%rdi
  800420841f:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  8004208426:	00 00 00 
  8004208429:	ff d0                	callq  *%rax
  800420842b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420842f:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)

	struct PageInfo *t = NULL;
  8004208436:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800420843d:	00 
	if (!(t = page_alloc(ALLOC_ZERO))) {
  800420843e:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208443:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420844a:	00 00 00 
  800420844d:	ff d0                	callq  *%rax
  800420844f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208453:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004208458:	75 56                	jne    80042084b0 <env_guest_alloc+0x314>
		page_decref(p);
  800420845a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420845e:	48 89 c7             	mov    %rax,%rdi
  8004208461:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004208468:	00 00 00 
  800420846b:	ff d0                	callq  *%rax
		page_decref(q);
  800420846d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208471:	48 89 c7             	mov    %rax,%rdi
  8004208474:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420847b:	00 00 00 
  800420847e:	ff d0                	callq  *%rax
		page_decref(r);
  8004208480:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208484:	48 89 c7             	mov    %rax,%rdi
  8004208487:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420848e:	00 00 00 
  8004208491:	ff d0                	callq  *%rax
		page_decref(s);
  8004208493:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208497:	48 89 c7             	mov    %rax,%rdi
  800420849a:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042084a1:	00 00 00 
  80042084a4:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042084a6:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042084ab:	e9 64 01 00 00       	jmpq   8004208614 <env_guest_alloc+0x478>
	}
	t->pp_ref += 1;
  80042084b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084b4:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042084b8:	8d 50 01             	lea    0x1(%rax),%edx
  80042084bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084bf:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_b = page2kva(t);
  80042084c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084c7:	48 89 c7             	mov    %rax,%rdi
  80042084ca:	48 b8 67 7d 20 04 80 	movabs $0x8004207d67,%rax
  80042084d1:	00 00 00 
  80042084d4:	ff d0                	callq  *%rax
  80042084d6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084da:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042084e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084e5:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042084eb:	05 00 10 00 00       	add    $0x1000,%eax
  80042084f0:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042084f5:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042084f8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042084fc:	7f 07                	jg     8004208505 <env_guest_alloc+0x369>
		generation = 1 << ENVGENSHIFT;
  80042084fe:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  8004208505:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208509:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  8004208510:	00 00 00 
  8004208513:	48 8b 00             	mov    (%rax),%rax
  8004208516:	48 29 c2             	sub    %rax,%rdx
  8004208519:	48 89 d0             	mov    %rdx,%rax
  800420851c:	48 c1 f8 03          	sar    $0x3,%rax
  8004208520:	48 89 c2             	mov    %rax,%rdx
  8004208523:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420852a:	fa a4 4f 
  800420852d:	48 0f af c2          	imul   %rdx,%rax
  8004208531:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208534:	89 c2                	mov    %eax,%edx
  8004208536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420853a:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208540:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208544:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004208547:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_GUEST;
  800420854d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208551:	c7 80 d0 00 00 00 03 	movl   $0x3,0xd0(%rax)
  8004208558:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  800420855b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420855f:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208566:	00 00 00 

	e->env_vmxinfo.vcpunum = vcpu_count++;
  8004208569:	48 b8 50 c2 4d 04 80 	movabs $0x80044dc250,%rax
  8004208570:	00 00 00 
  8004208573:	8b 00                	mov    (%rax),%eax
  8004208575:	8d 48 01             	lea    0x1(%rax),%ecx
  8004208578:	48 ba 50 c2 4d 04 80 	movabs $0x80044dc250,%rdx
  800420857f:	00 00 00 
  8004208582:	89 0a                	mov    %ecx,(%rdx)
  8004208584:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208588:	89 82 60 01 00 00    	mov    %eax,0x160(%rdx)
    	cprintf("VCPUNUM allocated: %d\n", e->env_vmxinfo.vcpunum);
  800420858e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208592:	8b 80 60 01 00 00    	mov    0x160(%rax),%eax
  8004208598:	89 c6                	mov    %eax,%esi
  800420859a:	48 bf 8b f0 21 04 80 	movabs $0x800421f08b,%rdi
  80042085a1:	00 00 00 
  80042085a4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042085a9:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042085b0:	00 00 00 
  80042085b3:	ff d2                	callq  *%rdx

	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042085b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085b9:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042085be:	be 00 00 00 00       	mov    $0x0,%esi
  80042085c3:	48 89 c7             	mov    %rax,%rdi
  80042085c6:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  80042085cd:	00 00 00 
  80042085d0:	ff d0                	callq  *%rax

	e->env_pgfault_upcall = 0;
  80042085d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085d6:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  80042085dd:	00 00 00 00 
	e->env_ipc_recving = 0;
  80042085e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085e5:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  80042085ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085f0:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  80042085f7:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  80042085fe:	00 00 00 
  8004208601:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208604:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208608:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420860c:	48 89 10             	mov    %rdx,(%rax)

	return 0;
  800420860f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208614:	c9                   	leaveq 
  8004208615:	c3                   	retq   

0000008004208616 <env_guest_free>:

void env_guest_free(struct Env *e) {
  8004208616:	55                   	push   %rbp
  8004208617:	48 89 e5             	mov    %rsp,%rbp
  800420861a:	53                   	push   %rbx
  800420861b:	48 83 ec 38          	sub    $0x38,%rsp
  800420861f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	// Free the VMCS.
	page_decref(pa2page(PADDR(e->env_vmxinfo.vmcs)));
  8004208623:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208627:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800420862e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208632:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208639:	00 00 00 
  800420863c:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004208640:	77 32                	ja     8004208674 <env_guest_free+0x5e>
  8004208642:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208646:	48 89 c1             	mov    %rax,%rcx
  8004208649:	48 ba a8 f0 21 04 80 	movabs $0x800421f0a8,%rdx
  8004208650:	00 00 00 
  8004208653:	be 40 01 00 00       	mov    $0x140,%esi
  8004208658:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  800420865f:	00 00 00 
  8004208662:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208667:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420866e:	00 00 00 
  8004208671:	41 ff d0             	callq  *%r8
  8004208674:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420867b:	ff ff ff 
  800420867e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208682:	48 01 d0             	add    %rdx,%rax
  8004208685:	48 89 c7             	mov    %rax,%rdi
  8004208688:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420868f:	00 00 00 
  8004208692:	ff d0                	callq  *%rax
  8004208694:	48 89 c7             	mov    %rax,%rdi
  8004208697:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420869e:	00 00 00 
  80042086a1:	ff d0                	callq  *%rax
	// Free msr load/store area.
	page_decref(pa2page(PADDR(e->env_vmxinfo.msr_host_area)));
  80042086a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042086a7:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  80042086ae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042086b2:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042086b9:	00 00 00 
  80042086bc:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042086c0:	77 32                	ja     80042086f4 <env_guest_free+0xde>
  80042086c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086c6:	48 89 c1             	mov    %rax,%rcx
  80042086c9:	48 ba a8 f0 21 04 80 	movabs $0x800421f0a8,%rdx
  80042086d0:	00 00 00 
  80042086d3:	be 42 01 00 00       	mov    $0x142,%esi
  80042086d8:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  80042086df:	00 00 00 
  80042086e2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042086e7:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042086ee:	00 00 00 
  80042086f1:	41 ff d0             	callq  *%r8
  80042086f4:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042086fb:	ff ff ff 
  80042086fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208702:	48 01 d0             	add    %rdx,%rax
  8004208705:	48 89 c7             	mov    %rax,%rdi
  8004208708:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420870f:	00 00 00 
  8004208712:	ff d0                	callq  *%rax
  8004208714:	48 89 c7             	mov    %rax,%rdi
  8004208717:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420871e:	00 00 00 
  8004208721:	ff d0                	callq  *%rax
	// Free IO bitmaps page.
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_a)));
  8004208723:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208727:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800420872e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208732:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208739:	00 00 00 
  800420873c:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004208740:	77 32                	ja     8004208774 <env_guest_free+0x15e>
  8004208742:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208746:	48 89 c1             	mov    %rax,%rcx
  8004208749:	48 ba a8 f0 21 04 80 	movabs $0x800421f0a8,%rdx
  8004208750:	00 00 00 
  8004208753:	be 44 01 00 00       	mov    $0x144,%esi
  8004208758:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  800420875f:	00 00 00 
  8004208762:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208767:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420876e:	00 00 00 
  8004208771:	41 ff d0             	callq  *%r8
  8004208774:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420877b:	ff ff ff 
  800420877e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208782:	48 01 d0             	add    %rdx,%rax
  8004208785:	48 89 c7             	mov    %rax,%rdi
  8004208788:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420878f:	00 00 00 
  8004208792:	ff d0                	callq  *%rax
  8004208794:	48 89 c7             	mov    %rax,%rdi
  8004208797:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420879e:	00 00 00 
  80042087a1:	ff d0                	callq  *%rax
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_b)));
  80042087a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042087a7:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  80042087ae:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042087b2:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042087b9:	00 00 00 
  80042087bc:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042087c0:	77 32                	ja     80042087f4 <env_guest_free+0x1de>
  80042087c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087c6:	48 89 c1             	mov    %rax,%rcx
  80042087c9:	48 ba a8 f0 21 04 80 	movabs $0x800421f0a8,%rdx
  80042087d0:	00 00 00 
  80042087d3:	be 45 01 00 00       	mov    $0x145,%esi
  80042087d8:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  80042087df:	00 00 00 
  80042087e2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042087e7:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042087ee:	00 00 00 
  80042087f1:	41 ff d0             	callq  *%r8
  80042087f4:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042087fb:	ff ff ff 
  80042087fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208802:	48 01 d0             	add    %rdx,%rax
  8004208805:	48 89 c7             	mov    %rax,%rdi
  8004208808:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420880f:	00 00 00 
  8004208812:	ff d0                	callq  *%rax
  8004208814:	48 89 c7             	mov    %rax,%rdi
  8004208817:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420881e:	00 00 00 
  8004208821:	ff d0                	callq  *%rax

	// Free the host pages that were allocated for the guest and
	// the EPT tables itself.
	free_guest_mem(e->env_pml4e);
  8004208823:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208827:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420882e:	48 89 c7             	mov    %rax,%rdi
  8004208831:	48 b8 0e 99 21 04 80 	movabs $0x800421990e,%rax
  8004208838:	00 00 00 
  800420883b:	ff d0                	callq  *%rax

	// Free the EPT PML4 page.
	page_decref(pa2page(e->env_cr3));
  800420883d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208841:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208848:	48 89 c7             	mov    %rax,%rdi
  800420884b:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  8004208852:	00 00 00 
  8004208855:	ff d0                	callq  *%rax
  8004208857:	48 89 c7             	mov    %rax,%rdi
  800420885a:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004208861:	00 00 00 
  8004208864:	ff d0                	callq  *%rax
	e->env_pml4e = 0;
  8004208866:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420886a:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208871:	00 00 00 00 
	e->env_cr3 = 0;
  8004208875:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208879:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208880:	00 00 00 00 

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208884:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208888:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  800420888f:	00 00 00 
	e->env_link = env_free_list;
  8004208892:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004208899:	00 00 00 
  800420889c:	48 8b 10             	mov    (%rax),%rdx
  800420889f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088a3:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  80042088aa:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  80042088b1:	00 00 00 
  80042088b4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042088b8:	48 89 10             	mov    %rdx,(%rax)

	cprintf("[%08x] free vmx guest env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  80042088bb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088bf:	8b 98 c8 00 00 00    	mov    0xc8(%rax),%ebx
  80042088c5:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  80042088cc:	00 00 00 
  80042088cf:	ff d0                	callq  *%rax
  80042088d1:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042088d8:	00 00 00 
  80042088db:	48 98                	cltq   
  80042088dd:	48 c1 e0 03          	shl    $0x3,%rax
  80042088e1:	48 89 c1             	mov    %rax,%rcx
  80042088e4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042088e8:	48 01 c8             	add    %rcx,%rax
  80042088eb:	48 01 d0             	add    %rdx,%rax
  80042088ee:	48 83 c0 08          	add    $0x8,%rax
  80042088f2:	48 8b 00             	mov    (%rax),%rax
  80042088f5:	48 85 c0             	test   %rax,%rax
  80042088f8:	74 38                	je     8004208932 <env_guest_free+0x31c>
  80042088fa:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004208901:	00 00 00 
  8004208904:	ff d0                	callq  *%rax
  8004208906:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420890d:	00 00 00 
  8004208910:	48 98                	cltq   
  8004208912:	48 c1 e0 03          	shl    $0x3,%rax
  8004208916:	48 89 c1             	mov    %rax,%rcx
  8004208919:	48 c1 e1 04          	shl    $0x4,%rcx
  800420891d:	48 01 c8             	add    %rcx,%rax
  8004208920:	48 01 d0             	add    %rdx,%rax
  8004208923:	48 83 c0 08          	add    $0x8,%rax
  8004208927:	48 8b 00             	mov    (%rax),%rax
  800420892a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208930:	eb 05                	jmp    8004208937 <env_guest_free+0x321>
  8004208932:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208937:	89 da                	mov    %ebx,%edx
  8004208939:	89 c6                	mov    %eax,%esi
  800420893b:	48 bf d8 f0 21 04 80 	movabs $0x800421f0d8,%rdi
  8004208942:	00 00 00 
  8004208945:	b8 00 00 00 00       	mov    $0x0,%eax
  800420894a:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  8004208951:	00 00 00 
  8004208954:	ff d1                	callq  *%rcx
}
  8004208956:	48 83 c4 38          	add    $0x38,%rsp
  800420895a:	5b                   	pop    %rbx
  800420895b:	5d                   	pop    %rbp
  800420895c:	c3                   	retq   

000000800420895d <env_alloc>:
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  800420895d:	55                   	push   %rbp
  800420895e:	48 89 e5             	mov    %rsp,%rbp
  8004208961:	48 83 ec 30          	sub    $0x30,%rsp
  8004208965:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208969:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  800420896c:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004208973:	00 00 00 
  8004208976:	48 8b 00             	mov    (%rax),%rax
  8004208979:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420897d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208982:	75 0a                	jne    800420898e <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  8004208984:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  8004208989:	e9 5b 01 00 00       	jmpq   8004208ae9 <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  800420898e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208992:	48 89 c7             	mov    %rax,%rdi
  8004208995:	48 b8 a4 80 20 04 80 	movabs $0x80042080a4,%rax
  800420899c:	00 00 00 
  800420899f:	ff d0                	callq  *%rax
  80042089a1:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042089a4:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  80042089a8:	79 08                	jns    80042089b2 <env_alloc+0x55>
		return r;
  80042089aa:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042089ad:	e9 37 01 00 00       	jmpq   8004208ae9 <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042089b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089b6:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042089bc:	05 00 10 00 00       	add    $0x1000,%eax
  80042089c1:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042089c6:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042089c9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042089cd:	7f 07                	jg     80042089d6 <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  80042089cf:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042089d6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042089da:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  80042089e1:	00 00 00 
  80042089e4:	48 8b 00             	mov    (%rax),%rax
  80042089e7:	48 29 c2             	sub    %rax,%rdx
  80042089ea:	48 89 d0             	mov    %rdx,%rax
  80042089ed:	48 c1 f8 03          	sar    $0x3,%rax
  80042089f1:	48 89 c2             	mov    %rax,%rdx
  80042089f4:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042089fb:	fa a4 4f 
  80042089fe:	48 0f af c2          	imul   %rdx,%rax
  8004208a02:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208a05:	89 c2                	mov    %eax,%edx
  8004208a07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a0b:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208a11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a15:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208a18:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  8004208a1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a22:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  8004208a29:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  8004208a2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a30:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208a37:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  8004208a3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a3e:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004208a43:	be 00 00 00 00       	mov    $0x0,%esi
  8004208a48:	48 89 c7             	mov    %rax,%rdi
  8004208a4b:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004208a52:	00 00 00 
  8004208a55:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004208a57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a5b:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004208a62:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004208a64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a68:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  8004208a6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a72:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208a79:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  8004208a7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a7f:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  8004208a84:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004208a8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a8f:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004208a96:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208a98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a9c:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208aa3:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  8004208aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aab:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208ab2:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  8004208ab6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aba:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208ac1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208ac5:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208acc:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004208ad3:	00 00 00 
  8004208ad6:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208ad9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208add:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208ae1:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  8004208ae4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208ae9:	c9                   	leaveq 
  8004208aea:	c3                   	retq   

0000008004208aeb <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004208aeb:	55                   	push   %rbp
  8004208aec:	48 89 e5             	mov    %rsp,%rbp
  8004208aef:	48 83 ec 40          	sub    $0x40,%rsp
  8004208af3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208af7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208afb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  8004208aff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208b03:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b07:	48 01 d0             	add    %rdx,%rax
  8004208b0a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  8004208b0e:	e9 c8 00 00 00       	jmpq   8004208bdb <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  8004208b13:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208b18:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004208b1f:	00 00 00 
  8004208b22:	ff d0                	callq  *%rax
  8004208b24:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208b28:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208b2d:	75 30                	jne    8004208b5f <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  8004208b2f:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  8004208b34:	48 ba f8 f0 21 04 80 	movabs $0x800421f0f8,%rdx
  8004208b3b:	00 00 00 
  8004208b3e:	be b2 01 00 00       	mov    $0x1b2,%esi
  8004208b43:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  8004208b4a:	00 00 00 
  8004208b4d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b52:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004208b59:	00 00 00 
  8004208b5c:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  8004208b5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208b63:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208b6a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b6e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004208b72:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208b77:	48 89 c7             	mov    %rax,%rdi
  8004208b7a:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004208b81:	00 00 00 
  8004208b84:	ff d0                	callq  *%rax
  8004208b86:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208b89:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208b8d:	79 30                	jns    8004208bbf <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  8004208b8f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208b92:	89 c1                	mov    %eax,%ecx
  8004208b94:	48 ba 20 f1 21 04 80 	movabs $0x800421f120,%rdx
  8004208b9b:	00 00 00 
  8004208b9e:	be b6 01 00 00       	mov    $0x1b6,%esi
  8004208ba3:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  8004208baa:	00 00 00 
  8004208bad:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208bb2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004208bb9:	00 00 00 
  8004208bbc:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  8004208bbf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bc3:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208bc9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208bcd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208bd1:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208bd7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  8004208bdb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bdf:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208be3:	0f 82 2a ff ff ff    	jb     8004208b13 <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
	}
}
  8004208be9:	c9                   	leaveq 
  8004208bea:	c3                   	retq   

0000008004208beb <load_icode>:
//
// load_icode panics if it encounters problems.
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004208beb:	55                   	push   %rbp
  8004208bec:	48 89 e5             	mov    %rsp,%rbp
  8004208bef:	53                   	push   %rbx
  8004208bf0:	48 83 ec 78          	sub    $0x78,%rsp
  8004208bf4:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208bf8:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  8004208bfc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208c00:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208c04:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208c09:	0f 84 6f 03 00 00    	je     8004208f7e <load_icode+0x393>
  8004208c0f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c13:	8b 00                	mov    (%rax),%eax
  8004208c15:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208c1a:	0f 85 5e 03 00 00    	jne    8004208f7e <load_icode+0x393>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  8004208c20:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208c24:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208c2b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208c2f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208c36:	00 00 00 
  8004208c39:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004208c3d:	77 32                	ja     8004208c71 <load_icode+0x86>
  8004208c3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c43:	48 89 c1             	mov    %rax,%rcx
  8004208c46:	48 ba a8 f0 21 04 80 	movabs $0x800421f0a8,%rdx
  8004208c4d:	00 00 00 
  8004208c50:	be d8 01 00 00       	mov    $0x1d8,%esi
  8004208c55:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  8004208c5c:	00 00 00 
  8004208c5f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c64:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004208c6b:	00 00 00 
  8004208c6e:	41 ff d0             	callq  *%r8
  8004208c71:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208c78:	ff ff ff 
  8004208c7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c7f:	48 01 d0             	add    %rdx,%rax
  8004208c82:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004208c86:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c8a:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  8004208c8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c91:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208c95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c99:	48 01 d0             	add    %rdx,%rax
  8004208c9c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  8004208ca0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ca4:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208ca8:	0f b7 c0             	movzwl %ax,%eax
  8004208cab:	48 c1 e0 03          	shl    $0x3,%rax
  8004208caf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208cb6:	00 
  8004208cb7:	48 29 c2             	sub    %rax,%rdx
  8004208cba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cbe:	48 01 d0             	add    %rdx,%rax
  8004208cc1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for(;ph < eph; ph++) {
  8004208cc5:	e9 bd 00 00 00       	jmpq   8004208d87 <load_icode+0x19c>
			if (ph->p_type == ELF_PROG_LOAD) {
  8004208cca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cce:	8b 00                	mov    (%rax),%eax
  8004208cd0:	83 f8 01             	cmp    $0x1,%eax
  8004208cd3:	0f 85 a9 00 00 00    	jne    8004208d82 <load_icode+0x197>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208cd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cdd:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208ce1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208ce5:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208ce9:	48 89 c1             	mov    %rax,%rcx
  8004208cec:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208cf0:	48 89 ce             	mov    %rcx,%rsi
  8004208cf3:	48 89 c7             	mov    %rax,%rdi
  8004208cf6:	48 b8 eb 8a 20 04 80 	movabs $0x8004208aeb,%rax
  8004208cfd:	00 00 00 
  8004208d00:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  8004208d02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d06:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d0e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004208d12:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d16:	48 01 c1             	add    %rax,%rcx
  8004208d19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d1d:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208d21:	48 89 ce             	mov    %rcx,%rsi
  8004208d24:	48 89 c7             	mov    %rax,%rdi
  8004208d27:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  8004208d2e:	00 00 00 
  8004208d31:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  8004208d33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d37:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d3f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004208d43:	48 39 c2             	cmp    %rax,%rdx
  8004208d46:	73 3a                	jae    8004208d82 <load_icode+0x197>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  8004208d48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d4c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208d50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d54:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d58:	48 29 c2             	sub    %rax,%rdx
  8004208d5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d5f:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004208d63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d67:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d6b:	48 01 c8             	add    %rcx,%rax
  8004208d6e:	be 00 00 00 00       	mov    $0x0,%esi
  8004208d73:	48 89 c7             	mov    %rax,%rdi
  8004208d76:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004208d7d:	00 00 00 
  8004208d80:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  8004208d82:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  8004208d87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d8b:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208d8f:	0f 82 35 ff ff ff    	jb     8004208cca <load_icode+0xdf>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  8004208d95:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d99:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208d9e:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208da3:	48 89 c7             	mov    %rax,%rdi
  8004208da6:	48 b8 eb 8a 20 04 80 	movabs $0x8004208aeb,%rax
  8004208dad:	00 00 00 
  8004208db0:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  8004208db2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208db6:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208dba:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dbe:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  8004208dc5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dc9:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208dce:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  8004208dd5:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208ddc:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208ddd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208de1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208de5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208de9:	48 01 d0             	add    %rdx,%rax
  8004208dec:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  8004208df0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208df4:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208df8:	0f b7 c0             	movzwl %ax,%eax
  8004208dfb:	48 c1 e0 06          	shl    $0x6,%rax
  8004208dff:	48 89 c2             	mov    %rax,%rdx
  8004208e02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e06:	48 01 d0             	add    %rdx,%rax
  8004208e09:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  8004208e0d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e11:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004208e15:	0f b7 c0             	movzwl %ax,%eax
  8004208e18:	48 c1 e0 06          	shl    $0x6,%rax
  8004208e1c:	48 89 c2             	mov    %rax,%rdx
  8004208e1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e23:	48 01 d0             	add    %rdx,%rax
  8004208e26:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for(;sh < esh; sh++) {
  8004208e2a:	e9 27 01 00 00       	jmpq   8004208f56 <load_icode+0x36b>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  8004208e2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208e33:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208e37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e3b:	8b 00                	mov    (%rax),%eax
  8004208e3d:	89 c0                	mov    %eax,%eax
  8004208e3f:	48 01 c2             	add    %rax,%rdx
  8004208e42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e46:	48 01 d0             	add    %rdx,%rax
  8004208e49:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  8004208e4d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e51:	48 be 48 f1 21 04 80 	movabs $0x800421f148,%rsi
  8004208e58:	00 00 00 
  8004208e5b:	48 89 c7             	mov    %rax,%rdi
  8004208e5e:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  8004208e65:	00 00 00 
  8004208e68:	ff d0                	callq  *%rax
  8004208e6a:	85 c0                	test   %eax,%eax
  8004208e6c:	0f 84 84 00 00 00    	je     8004208ef6 <load_icode+0x30b>
  8004208e72:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e76:	48 be 54 f1 21 04 80 	movabs $0x800421f154,%rsi
  8004208e7d:	00 00 00 
  8004208e80:	48 89 c7             	mov    %rax,%rdi
  8004208e83:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  8004208e8a:	00 00 00 
  8004208e8d:	ff d0                	callq  *%rax
  8004208e8f:	85 c0                	test   %eax,%eax
  8004208e91:	74 63                	je     8004208ef6 <load_icode+0x30b>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  8004208e93:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e97:	48 be 62 f1 21 04 80 	movabs $0x800421f162,%rsi
  8004208e9e:	00 00 00 
  8004208ea1:	48 89 c7             	mov    %rax,%rdi
  8004208ea4:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  8004208eab:	00 00 00 
  8004208eae:	ff d0                	callq  *%rax
  8004208eb0:	85 c0                	test   %eax,%eax
  8004208eb2:	74 42                	je     8004208ef6 <load_icode+0x30b>
  8004208eb4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208eb8:	48 be 6e f1 21 04 80 	movabs $0x800421f16e,%rsi
  8004208ebf:	00 00 00 
  8004208ec2:	48 89 c7             	mov    %rax,%rdi
  8004208ec5:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  8004208ecc:	00 00 00 
  8004208ecf:	ff d0                	callq  *%rax
  8004208ed1:	85 c0                	test   %eax,%eax
  8004208ed3:	74 21                	je     8004208ef6 <load_icode+0x30b>
			   || !strcmp(name, ".debug_str")) {
  8004208ed5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ed9:	48 be 78 f1 21 04 80 	movabs $0x800421f178,%rsi
  8004208ee0:	00 00 00 
  8004208ee3:	48 89 c7             	mov    %rax,%rdi
  8004208ee6:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  8004208eed:	00 00 00 
  8004208ef0:	ff d0                	callq  *%rax
  8004208ef2:	85 c0                	test   %eax,%eax
  8004208ef4:	75 5b                	jne    8004208f51 <load_icode+0x366>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  8004208ef6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208efa:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208efe:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004208f02:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208f06:	48 89 ce             	mov    %rcx,%rsi
  8004208f09:	48 89 c7             	mov    %rax,%rdi
  8004208f0c:	48 b8 eb 8a 20 04 80 	movabs $0x8004208aeb,%rax
  8004208f13:	00 00 00 
  8004208f16:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  8004208f18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f1c:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208f20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f24:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004208f28:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208f2c:	48 01 c1             	add    %rax,%rcx
  8004208f2f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208f33:	48 89 ce             	mov    %rcx,%rsi
  8004208f36:	48 89 c7             	mov    %rax,%rdi
  8004208f39:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  8004208f40:	00 00 00 
  8004208f43:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  8004208f45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f49:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208f4d:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  8004208f51:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  8004208f56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f5a:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  8004208f5e:	0f 82 cb fe ff ff    	jb     8004208e2f <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  8004208f64:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  8004208f6b:	00 00 00 
  8004208f6e:	48 8b 00             	mov    (%rax),%rax
  8004208f71:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004208f75:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208f79:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208f7c:	eb 2a                	jmp    8004208fa8 <load_icode+0x3bd>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  8004208f7e:	48 ba 83 f1 21 04 80 	movabs $0x800421f183,%rdx
  8004208f85:	00 00 00 
  8004208f88:	be f9 01 00 00       	mov    $0x1f9,%esi
  8004208f8d:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  8004208f94:	00 00 00 
  8004208f97:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f9c:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004208fa3:	00 00 00 
  8004208fa6:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  8004208fa8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208fac:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208fb0:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  8004208fb7:	48 83 c4 78          	add    $0x78,%rsp
  8004208fbb:	5b                   	pop    %rbx
  8004208fbc:	5d                   	pop    %rbp
  8004208fbd:	c3                   	retq   

0000008004208fbe <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  8004208fbe:	55                   	push   %rbp
  8004208fbf:	48 89 e5             	mov    %rsp,%rbp
  8004208fc2:	48 83 ec 20          	sub    $0x20,%rsp
  8004208fc6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208fca:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  8004208fcd:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208fd1:	be 00 00 00 00       	mov    $0x0,%esi
  8004208fd6:	48 89 c7             	mov    %rax,%rdi
  8004208fd9:	48 b8 5d 89 20 04 80 	movabs $0x800420895d,%rax
  8004208fe0:	00 00 00 
  8004208fe3:	ff d0                	callq  *%rax
  8004208fe5:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208fe8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208fec:	79 30                	jns    800420901e <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  8004208fee:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208ff1:	89 c1                	mov    %eax,%ecx
  8004208ff3:	48 ba 98 f1 21 04 80 	movabs $0x800421f198,%rdx
  8004208ffa:	00 00 00 
  8004208ffd:	be 0d 02 00 00       	mov    $0x20d,%esi
  8004209002:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  8004209009:	00 00 00 
  800420900c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209011:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004209018:	00 00 00 
  800420901b:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  800420901e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209022:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209026:	48 89 d6             	mov    %rdx,%rsi
  8004209029:	48 89 c7             	mov    %rax,%rdi
  800420902c:	48 b8 eb 8b 20 04 80 	movabs $0x8004208beb,%rax
  8004209033:	00 00 00 
  8004209036:	ff d0                	callq  *%rax
	e->env_type = type;
  8004209038:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420903c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800420903f:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  8004209045:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  8004209049:	75 19                	jne    8004209064 <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  800420904b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420904f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004209053:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  800420905a:	80 ce 30             	or     $0x30,%dh
  800420905d:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  8004209064:	c9                   	leaveq 
  8004209065:	c3                   	retq   

0000008004209066 <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  8004209066:	55                   	push   %rbp
  8004209067:	48 89 e5             	mov    %rsp,%rbp
  800420906a:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004209071:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
	pte_t *pt;
	uint64_t pdeno, pteno;
	physaddr_t pa;

#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  8004209078:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420907f:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209085:	83 f8 03             	cmp    $0x3,%eax
  8004209088:	75 1b                	jne    80042090a5 <env_free+0x3f>
		env_guest_free(e);
  800420908a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209091:	48 89 c7             	mov    %rax,%rdi
  8004209094:	48 b8 16 86 20 04 80 	movabs $0x8004208616,%rax
  800420909b:	00 00 00 
  800420909e:	ff d0                	callq  *%rax
		return;
  80042090a0:	e9 78 04 00 00       	jmpq   800420951d <env_free+0x4b7>
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  80042090a5:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  80042090ac:	00 00 00 
  80042090af:	ff d0                	callq  *%rax
  80042090b1:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042090b8:	00 00 00 
  80042090bb:	48 98                	cltq   
  80042090bd:	48 c1 e0 03          	shl    $0x3,%rax
  80042090c1:	48 89 c1             	mov    %rax,%rcx
  80042090c4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090c8:	48 01 c8             	add    %rcx,%rax
  80042090cb:	48 01 d0             	add    %rdx,%rax
  80042090ce:	48 83 c0 08          	add    $0x8,%rax
  80042090d2:	48 8b 00             	mov    (%rax),%rax
  80042090d5:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  80042090dc:	75 18                	jne    80042090f6 <env_free+0x90>
		lcr3(boot_cr3);
  80042090de:	48 b8 e8 b5 6d 04 80 	movabs $0x80046db5e8,%rax
  80042090e5:	00 00 00 
  80042090e8:	48 8b 00             	mov    (%rax),%rax
  80042090eb:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042090ef:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042090f3:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  80042090f6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042090fd:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209104:	48 8b 00             	mov    (%rax),%rax
  8004209107:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420910d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004209111:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209115:	48 c1 e8 0c          	shr    $0xc,%rax
  8004209119:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420911c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420911f:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004209126:	00 00 00 
  8004209129:	48 8b 00             	mov    (%rax),%rax
  800420912c:	48 39 c2             	cmp    %rax,%rdx
  800420912f:	72 32                	jb     8004209163 <env_free+0xfd>
  8004209131:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209135:	48 89 c1             	mov    %rax,%rcx
  8004209138:	48 ba 68 f0 21 04 80 	movabs $0x800421f068,%rdx
  800420913f:	00 00 00 
  8004209142:	be 32 02 00 00       	mov    $0x232,%esi
  8004209147:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  800420914e:	00 00 00 
  8004209151:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209156:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420915d:	00 00 00 
  8004209160:	41 ff d0             	callq  *%r8
  8004209163:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420916a:	00 00 00 
  800420916d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209171:	48 01 d0             	add    %rdx,%rax
  8004209174:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  8004209178:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420917f:	00 
  8004209180:	e9 ab 02 00 00       	jmpq   8004209430 <env_free+0x3ca>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  8004209185:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209189:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209190:	00 
  8004209191:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209195:	48 01 d0             	add    %rdx,%rax
  8004209198:	48 8b 00             	mov    (%rax),%rax
  800420919b:	83 e0 01             	and    $0x1,%eax
  800420919e:	48 85 c0             	test   %rax,%rax
  80042091a1:	75 05                	jne    80042091a8 <env_free+0x142>
			continue;
  80042091a3:	e9 83 02 00 00       	jmpq   800420942b <env_free+0x3c5>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  80042091a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091ac:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042091b3:	00 
  80042091b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042091b8:	48 01 d0             	add    %rdx,%rax
  80042091bb:	48 8b 00             	mov    (%rax),%rax
  80042091be:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042091c4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042091c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091cc:	48 c1 e8 0c          	shr    $0xc,%rax
  80042091d0:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042091d3:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042091d6:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042091dd:	00 00 00 
  80042091e0:	48 8b 00             	mov    (%rax),%rax
  80042091e3:	48 39 c2             	cmp    %rax,%rdx
  80042091e6:	72 32                	jb     800420921a <env_free+0x1b4>
  80042091e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091ec:	48 89 c1             	mov    %rax,%rcx
  80042091ef:	48 ba 68 f0 21 04 80 	movabs $0x800421f068,%rdx
  80042091f6:	00 00 00 
  80042091f9:	be 3a 02 00 00       	mov    $0x23a,%esi
  80042091fe:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  8004209205:	00 00 00 
  8004209208:	b8 00 00 00 00       	mov    $0x0,%eax
  800420920d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004209214:	00 00 00 
  8004209217:	41 ff d0             	callq  *%r8
  800420921a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004209221:	00 00 00 
  8004209224:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004209228:	48 01 d0             	add    %rdx,%rax
  800420922b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  800420922f:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209234:	75 07                	jne    800420923d <env_free+0x1d7>
  8004209236:	b8 04 00 00 00       	mov    $0x4,%eax
  800420923b:	eb 05                	jmp    8004209242 <env_free+0x1dc>
  800420923d:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004209242:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004209245:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420924c:	00 
  800420924d:	e9 6e 01 00 00       	jmpq   80042093c0 <env_free+0x35a>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004209252:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209256:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420925d:	00 
  800420925e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209262:	48 01 d0             	add    %rdx,%rax
  8004209265:	48 8b 00             	mov    (%rax),%rax
  8004209268:	83 e0 01             	and    $0x1,%eax
  800420926b:	48 85 c0             	test   %rax,%rax
  800420926e:	75 05                	jne    8004209275 <env_free+0x20f>
				continue;
  8004209270:	e9 46 01 00 00       	jmpq   80042093bb <env_free+0x355>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004209275:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209279:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209280:	00 
  8004209281:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209285:	48 01 d0             	add    %rdx,%rax
  8004209288:	48 8b 00             	mov    (%rax),%rax
  800420928b:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209291:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  8004209295:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209299:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420929d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092a1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042092a5:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042092a8:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042092ab:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042092b2:	00 00 00 
  80042092b5:	48 8b 00             	mov    (%rax),%rax
  80042092b8:	48 39 c2             	cmp    %rax,%rdx
  80042092bb:	72 32                	jb     80042092ef <env_free+0x289>
  80042092bd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092c1:	48 89 c1             	mov    %rax,%rcx
  80042092c4:	48 ba 68 f0 21 04 80 	movabs $0x800421f068,%rdx
  80042092cb:	00 00 00 
  80042092ce:	be 44 02 00 00       	mov    $0x244,%esi
  80042092d3:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  80042092da:	00 00 00 
  80042092dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092e2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042092e9:	00 00 00 
  80042092ec:	41 ff d0             	callq  *%r8
  80042092ef:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042092f6:	00 00 00 
  80042092f9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092fd:	48 01 d0             	add    %rdx,%rax
  8004209300:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004209304:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420930b:	00 
  800420930c:	eb 67                	jmp    8004209375 <env_free+0x30f>
				if (pt[pteno] & PTE_P){
  800420930e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209312:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209319:	00 
  800420931a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420931e:	48 01 d0             	add    %rdx,%rax
  8004209321:	48 8b 00             	mov    (%rax),%rax
  8004209324:	83 e0 01             	and    $0x1,%eax
  8004209327:	48 85 c0             	test   %rax,%rax
  800420932a:	74 44                	je     8004209370 <env_free+0x30a>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  800420932c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209330:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004209334:	48 89 c2             	mov    %rax,%rdx
  8004209337:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420933b:	48 c1 e0 15          	shl    $0x15,%rax
  800420933f:	48 09 c2             	or     %rax,%rdx
  8004209342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209346:	48 c1 e0 0c          	shl    $0xc,%rax
  800420934a:	48 09 d0             	or     %rdx,%rax
  800420934d:	48 89 c2             	mov    %rax,%rdx
  8004209350:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209357:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420935e:	48 89 d6             	mov    %rdx,%rsi
  8004209361:	48 89 c7             	mov    %rax,%rdi
  8004209364:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  800420936b:	00 00 00 
  800420936e:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004209370:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004209375:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  800420937c:	00 
  800420937d:	76 8f                	jbe    800420930e <env_free+0x2a8>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  800420937f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209383:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420938a:	00 
  800420938b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420938f:	48 01 d0             	add    %rdx,%rax
  8004209392:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  8004209399:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420939d:	48 89 c7             	mov    %rax,%rdi
  80042093a0:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  80042093a7:	00 00 00 
  80042093aa:	ff d0                	callq  *%rax
  80042093ac:	48 89 c7             	mov    %rax,%rdi
  80042093af:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042093b6:	00 00 00 
  80042093b9:	ff d0                	callq  *%rax
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  80042093bb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042093c0:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042093c3:	48 98                	cltq   
  80042093c5:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042093c9:	0f 87 83 fe ff ff    	ja     8004209252 <env_free+0x1ec>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  80042093cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093d3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093da:	00 
  80042093db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093df:	48 01 d0             	add    %rdx,%rax
  80042093e2:	48 8b 00             	mov    (%rax),%rax
  80042093e5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042093eb:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  80042093ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093f3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093fa:	00 
  80042093fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093ff:	48 01 d0             	add    %rdx,%rax
  8004209402:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  8004209409:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420940d:	48 89 c7             	mov    %rax,%rdi
  8004209410:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  8004209417:	00 00 00 
  800420941a:	ff d0                	callq  *%rax
  800420941c:	48 89 c7             	mov    %rax,%rdi
  800420941f:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  8004209426:	00 00 00 
  8004209429:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420942b:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004209430:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209435:	0f 86 4a fd ff ff    	jbe    8004209185 <env_free+0x11f>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  800420943b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209442:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209449:	48 8b 00             	mov    (%rax),%rax
  800420944c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209452:	48 89 c7             	mov    %rax,%rdi
  8004209455:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  800420945c:	00 00 00 
  800420945f:	ff d0                	callq  *%rax
  8004209461:	48 89 c7             	mov    %rax,%rdi
  8004209464:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800420946b:	00 00 00 
  800420946e:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004209470:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209477:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420947e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004209485:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420948c:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209493:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  8004209497:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420949e:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  80042094a5:	00 00 00 00 
	e->env_cr3 = 0;
  80042094a9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094b0:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  80042094b7:	00 00 00 00 
	page_decref(pa2page(pa));
  80042094bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042094bf:	48 89 c7             	mov    %rax,%rdi
  80042094c2:	48 b8 f6 7c 20 04 80 	movabs $0x8004207cf6,%rax
  80042094c9:	00 00 00 
  80042094cc:	ff d0                	callq  *%rax
  80042094ce:	48 89 c7             	mov    %rax,%rdi
  80042094d1:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042094d8:	00 00 00 
  80042094db:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  80042094dd:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094e4:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042094eb:	00 00 00 
	e->env_link = env_free_list;
  80042094ee:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  80042094f5:	00 00 00 
  80042094f8:	48 8b 10             	mov    (%rax),%rdx
  80042094fb:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209502:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  8004209509:	48 b8 60 c2 4d 04 80 	movabs $0x80044dc260,%rax
  8004209510:	00 00 00 
  8004209513:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420951a:	48 89 10             	mov    %rdx,(%rax)
}
  800420951d:	c9                   	leaveq 
  800420951e:	c3                   	retq   

000000800420951f <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  800420951f:	55                   	push   %rbp
  8004209520:	48 89 e5             	mov    %rsp,%rbp
  8004209523:	48 83 ec 10          	sub    $0x10,%rsp
  8004209527:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  800420952b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420952f:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209535:	83 f8 03             	cmp    $0x3,%eax
  8004209538:	75 49                	jne    8004209583 <env_destroy+0x64>
  800420953a:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004209541:	00 00 00 
  8004209544:	ff d0                	callq  *%rax
  8004209546:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420954d:	00 00 00 
  8004209550:	48 98                	cltq   
  8004209552:	48 c1 e0 03          	shl    $0x3,%rax
  8004209556:	48 89 c1             	mov    %rax,%rcx
  8004209559:	48 c1 e1 04          	shl    $0x4,%rcx
  800420955d:	48 01 c8             	add    %rcx,%rax
  8004209560:	48 01 d0             	add    %rdx,%rax
  8004209563:	48 83 c0 08          	add    $0x8,%rax
  8004209567:	48 8b 00             	mov    (%rax),%rax
  800420956a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800420956e:	74 13                	je     8004209583 <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004209570:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209574:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  800420957b:	00 00 00 
		return;
  800420957e:	e9 89 00 00 00       	jmpq   800420960c <env_destroy+0xed>
	}

	env_free(e);
  8004209583:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209587:	48 89 c7             	mov    %rax,%rdi
  800420958a:	48 b8 66 90 20 04 80 	movabs $0x8004209066,%rax
  8004209591:	00 00 00 
  8004209594:	ff d0                	callq  *%rax
	if (curenv == e) {
  8004209596:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420959d:	00 00 00 
  80042095a0:	ff d0                	callq  *%rax
  80042095a2:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042095a9:	00 00 00 
  80042095ac:	48 98                	cltq   
  80042095ae:	48 c1 e0 03          	shl    $0x3,%rax
  80042095b2:	48 89 c1             	mov    %rax,%rcx
  80042095b5:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095b9:	48 01 c8             	add    %rcx,%rax
  80042095bc:	48 01 d0             	add    %rdx,%rax
  80042095bf:	48 83 c0 08          	add    $0x8,%rax
  80042095c3:	48 8b 00             	mov    (%rax),%rax
  80042095c6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042095ca:	75 40                	jne    800420960c <env_destroy+0xed>
		curenv = NULL;
  80042095cc:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  80042095d3:	00 00 00 
  80042095d6:	ff d0                	callq  *%rax
  80042095d8:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042095df:	00 00 00 
  80042095e2:	48 98                	cltq   
  80042095e4:	48 c1 e0 03          	shl    $0x3,%rax
  80042095e8:	48 89 c1             	mov    %rax,%rcx
  80042095eb:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095ef:	48 01 c8             	add    %rcx,%rax
  80042095f2:	48 01 d0             	add    %rdx,%rax
  80042095f5:	48 83 c0 08          	add    $0x8,%rax
  80042095f9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  8004209600:	48 b8 26 da 20 04 80 	movabs $0x800420da26,%rax
  8004209607:	00 00 00 
  800420960a:	ff d0                	callq  *%rax
	}
}
  800420960c:	c9                   	leaveq 
  800420960d:	c3                   	retq   

000000800420960e <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  800420960e:	55                   	push   %rbp
  800420960f:	48 89 e5             	mov    %rsp,%rbp
  8004209612:	53                   	push   %rbx
  8004209613:	48 83 ec 18          	sub    $0x18,%rsp
  8004209617:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  800420961b:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004209622:	00 00 00 
  8004209625:	ff d0                	callq  *%rax
  8004209627:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420962e:	00 00 00 
  8004209631:	48 98                	cltq   
  8004209633:	48 c1 e0 03          	shl    $0x3,%rax
  8004209637:	48 89 c1             	mov    %rax,%rcx
  800420963a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420963e:	48 01 c8             	add    %rcx,%rax
  8004209641:	48 01 d0             	add    %rdx,%rax
  8004209644:	48 83 c0 08          	add    $0x8,%rax
  8004209648:	48 8b 18             	mov    (%rax),%rbx
  800420964b:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004209652:	00 00 00 
  8004209655:	ff d0                	callq  *%rax
  8004209657:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  800420965d:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004209661:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004209665:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  800420966a:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  800420966f:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004209674:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  8004209679:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  800420967e:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004209683:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  8004209688:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  800420968d:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004209692:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  8004209697:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  800420969c:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  80042096a1:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  80042096a6:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  80042096ab:	48 83 c4 78          	add    $0x78,%rsp
  80042096af:	8e 04 24             	mov    (%rsp),%es
  80042096b2:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  80042096b6:	48 83 c4 10          	add    $0x10,%rsp
  80042096ba:	48 83 c4 10          	add    $0x10,%rsp
  80042096be:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  80042096c0:	48 ba c0 f1 21 04 80 	movabs $0x800421f1c0,%rdx
  80042096c7:	00 00 00 
  80042096ca:	be 90 02 00 00       	mov    $0x290,%esi
  80042096cf:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  80042096d6:	00 00 00 
  80042096d9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042096de:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042096e5:	00 00 00 
  80042096e8:	ff d1                	callq  *%rcx

00000080042096ea <env_run>:
// This function does not return.
//
// CHANGED FOR LAB 0
void
env_run(struct Env *e)
{
  80042096ea:	55                   	push   %rbp
  80042096eb:	48 89 e5             	mov    %rsp,%rbp
  80042096ee:	48 83 ec 20          	sub    $0x20,%rsp
  80042096f2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  80042096f6:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  80042096fd:	00 00 00 
  8004209700:	ff d0                	callq  *%rax
  8004209702:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004209709:	00 00 00 
  800420970c:	48 98                	cltq   
  800420970e:	48 c1 e0 03          	shl    $0x3,%rax
  8004209712:	48 89 c1             	mov    %rax,%rcx
  8004209715:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209719:	48 01 c8             	add    %rcx,%rax
  800420971c:	48 01 d0             	add    %rdx,%rax
  800420971f:	48 83 c0 08          	add    $0x8,%rax
  8004209723:	48 8b 00             	mov    (%rax),%rax
  8004209726:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420972a:	0f 84 28 01 00 00    	je     8004209858 <env_run+0x16e>
		if (curenv && curenv->env_status == ENV_RUNNING)
  8004209730:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004209737:	00 00 00 
  800420973a:	ff d0                	callq  *%rax
  800420973c:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004209743:	00 00 00 
  8004209746:	48 98                	cltq   
  8004209748:	48 c1 e0 03          	shl    $0x3,%rax
  800420974c:	48 89 c1             	mov    %rax,%rcx
  800420974f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209753:	48 01 c8             	add    %rcx,%rax
  8004209756:	48 01 d0             	add    %rdx,%rax
  8004209759:	48 83 c0 08          	add    $0x8,%rax
  800420975d:	48 8b 00             	mov    (%rax),%rax
  8004209760:	48 85 c0             	test   %rax,%rax
  8004209763:	74 75                	je     80042097da <env_run+0xf0>
  8004209765:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420976c:	00 00 00 
  800420976f:	ff d0                	callq  *%rax
  8004209771:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004209778:	00 00 00 
  800420977b:	48 98                	cltq   
  800420977d:	48 c1 e0 03          	shl    $0x3,%rax
  8004209781:	48 89 c1             	mov    %rax,%rcx
  8004209784:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209788:	48 01 c8             	add    %rcx,%rax
  800420978b:	48 01 d0             	add    %rdx,%rax
  800420978e:	48 83 c0 08          	add    $0x8,%rax
  8004209792:	48 8b 00             	mov    (%rax),%rax
  8004209795:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420979b:	83 f8 03             	cmp    $0x3,%eax
  800420979e:	75 3a                	jne    80042097da <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  80042097a0:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  80042097a7:	00 00 00 
  80042097aa:	ff d0                	callq  *%rax
  80042097ac:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042097b3:	00 00 00 
  80042097b6:	48 98                	cltq   
  80042097b8:	48 c1 e0 03          	shl    $0x3,%rax
  80042097bc:	48 89 c1             	mov    %rax,%rcx
  80042097bf:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097c3:	48 01 c8             	add    %rcx,%rax
  80042097c6:	48 01 d0             	add    %rdx,%rax
  80042097c9:	48 83 c0 08          	add    $0x8,%rax
  80042097cd:	48 8b 00             	mov    (%rax),%rax
  80042097d0:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042097d7:	00 00 00 
		// cprintf("cpu %d switch from env %d to env %d\n",
		// 	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  80042097da:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  80042097e1:	00 00 00 
  80042097e4:	ff d0                	callq  *%rax
  80042097e6:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042097ed:	00 00 00 
  80042097f0:	48 98                	cltq   
  80042097f2:	48 c1 e0 03          	shl    $0x3,%rax
  80042097f6:	48 89 c1             	mov    %rax,%rcx
  80042097f9:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097fd:	48 01 c8             	add    %rcx,%rax
  8004209800:	48 01 d0             	add    %rdx,%rax
  8004209803:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004209807:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420980b:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  800420980e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209812:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  8004209819:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?
		e->env_runs++; // increment the number of times the env has been run
  800420981c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209820:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  8004209826:	8d 50 01             	lea    0x1(%rax),%edx
  8004209829:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420982d:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  8004209833:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209837:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420983d:	83 f8 03             	cmp    $0x3,%eax
  8004209840:	74 16                	je     8004209858 <env_run+0x16e>
			lcr3(e->env_cr3);
  8004209842:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209846:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420984d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004209851:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209855:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  8004209858:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420985c:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209862:	83 f8 03             	cmp    $0x3,%eax
  8004209865:	74 35                	je     800420989c <env_run+0x1b2>
  8004209867:	48 b9 cc f1 21 04 80 	movabs $0x800421f1cc,%rcx
  800420986e:	00 00 00 
  8004209871:	48 ba e9 f1 21 04 80 	movabs $0x800421f1e9,%rdx
  8004209878:	00 00 00 
  800420987b:	be b2 02 00 00       	mov    $0x2b2,%esi
  8004209880:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  8004209887:	00 00 00 
  800420988a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420988f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004209896:	00 00 00 
  8004209899:	41 ff d0             	callq  *%r8


#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  800420989c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098a0:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  80042098a6:	83 f8 03             	cmp    $0x3,%eax
  80042098a9:	75 3d                	jne    80042098e8 <env_run+0x1fe>
		vmx_vmrun(e);
  80042098ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098af:	48 89 c7             	mov    %rax,%rdi
  80042098b2:	48 b8 04 d0 21 04 80 	movabs $0x800421d004,%rax
  80042098b9:	00 00 00 
  80042098bc:	ff d0                	callq  *%rax
		panic ("vmx_run never returns\n");
  80042098be:	48 ba fe f1 21 04 80 	movabs $0x800421f1fe,%rdx
  80042098c5:	00 00 00 
  80042098c8:	be b8 02 00 00       	mov    $0x2b8,%esi
  80042098cd:	48 bf cc f0 21 04 80 	movabs $0x800421f0cc,%rdi
  80042098d4:	00 00 00 
  80042098d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042098dc:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042098e3:	00 00 00 
  80042098e6:	ff d1                	callq  *%rcx
	}
	else {
		unlock_kernel();
  80042098e8:	48 b8 ef 7d 20 04 80 	movabs $0x8004207def,%rax
  80042098ef:	00 00 00 
  80042098f2:	ff d0                	callq  *%rax
		env_pop_tf(&e->env_tf);
  80042098f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098f8:	48 89 c7             	mov    %rax,%rdi
  80042098fb:	48 b8 0e 96 20 04 80 	movabs $0x800420960e,%rax
  8004209902:	00 00 00 
  8004209905:	ff d0                	callq  *%rax

0000008004209907 <mc146818_read>:
  8004209907:	55                   	push   %rbp
  8004209908:	48 89 e5             	mov    %rsp,%rbp
  800420990b:	48 83 ec 14          	sub    $0x14,%rsp
  800420990f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209912:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209915:	0f b6 c0             	movzbl %al,%eax
  8004209918:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420991f:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209922:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209926:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209929:	ee                   	out    %al,(%dx)
  800420992a:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004209931:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209934:	89 c2                	mov    %eax,%edx
  8004209936:	ec                   	in     (%dx),%al
  8004209937:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420993a:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420993e:	0f b6 c0             	movzbl %al,%eax
  8004209941:	c9                   	leaveq 
  8004209942:	c3                   	retq   

0000008004209943 <mc146818_write>:
  8004209943:	55                   	push   %rbp
  8004209944:	48 89 e5             	mov    %rsp,%rbp
  8004209947:	48 83 ec 18          	sub    $0x18,%rsp
  800420994b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420994e:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004209951:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209954:	0f b6 c0             	movzbl %al,%eax
  8004209957:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  800420995e:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209961:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209965:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209968:	ee                   	out    %al,(%dx)
  8004209969:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800420996c:	0f b6 c0             	movzbl %al,%eax
  800420996f:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  8004209976:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004209979:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  800420997d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209980:	ee                   	out    %al,(%dx)
  8004209981:	c9                   	leaveq 
  8004209982:	c3                   	retq   

0000008004209983 <pic_init>:
  8004209983:	55                   	push   %rbp
  8004209984:	48 89 e5             	mov    %rsp,%rbp
  8004209987:	48 83 ec 70          	sub    $0x70,%rsp
  800420998b:	48 b8 68 c2 4d 04 80 	movabs $0x80044dc268,%rax
  8004209992:	00 00 00 
  8004209995:	c6 00 01             	movb   $0x1,(%rax)
  8004209998:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  800420999f:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  80042099a3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  80042099a7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042099aa:	ee                   	out    %al,(%dx)
  80042099ab:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042099b2:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042099b6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042099ba:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042099bd:	ee                   	out    %al,(%dx)
  80042099be:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  80042099c5:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  80042099c9:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042099cd:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042099d0:	ee                   	out    %al,(%dx)
  80042099d1:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  80042099d8:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  80042099dc:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042099e0:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042099e3:	ee                   	out    %al,(%dx)
  80042099e4:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  80042099eb:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  80042099ef:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042099f3:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042099f6:	ee                   	out    %al,(%dx)
  80042099f7:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  80042099fe:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  8004209a02:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004209a06:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004209a09:	ee                   	out    %al,(%dx)
  8004209a0a:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  8004209a11:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209a15:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209a19:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004209a1c:	ee                   	out    %al,(%dx)
  8004209a1d:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209a24:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209a28:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004209a2c:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004209a2f:	ee                   	out    %al,(%dx)
  8004209a30:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209a37:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  8004209a3b:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004209a3f:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004209a42:	ee                   	out    %al,(%dx)
  8004209a43:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  8004209a4a:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  8004209a4e:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  8004209a52:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209a55:	ee                   	out    %al,(%dx)
  8004209a56:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  8004209a5d:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  8004209a61:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209a65:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209a68:	ee                   	out    %al,(%dx)
  8004209a69:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  8004209a70:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209a74:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209a78:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209a7b:	ee                   	out    %al,(%dx)
  8004209a7c:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209a83:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209a87:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209a8b:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004209a8e:	ee                   	out    %al,(%dx)
  8004209a8f:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209a96:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209a9a:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  8004209a9e:	8b 55 94             	mov    -0x6c(%rbp),%edx
  8004209aa1:	ee                   	out    %al,(%dx)
  8004209aa2:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209aa9:	00 00 00 
  8004209aac:	0f b7 00             	movzwl (%rax),%eax
  8004209aaf:	66 83 f8 ff          	cmp    $0xffff,%ax
  8004209ab3:	74 1e                	je     8004209ad3 <pic_init+0x150>
  8004209ab5:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209abc:	00 00 00 
  8004209abf:	0f b7 00             	movzwl (%rax),%eax
  8004209ac2:	0f b7 c0             	movzwl %ax,%eax
  8004209ac5:	89 c7                	mov    %eax,%edi
  8004209ac7:	48 b8 d5 9a 20 04 80 	movabs $0x8004209ad5,%rax
  8004209ace:	00 00 00 
  8004209ad1:	ff d0                	callq  *%rax
  8004209ad3:	c9                   	leaveq 
  8004209ad4:	c3                   	retq   

0000008004209ad5 <irq_setmask_8259A>:
  8004209ad5:	55                   	push   %rbp
  8004209ad6:	48 89 e5             	mov    %rsp,%rbp
  8004209ad9:	48 83 ec 30          	sub    $0x30,%rsp
  8004209add:	89 f8                	mov    %edi,%eax
  8004209adf:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  8004209ae3:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209aea:	00 00 00 
  8004209aed:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  8004209af1:	66 89 10             	mov    %dx,(%rax)
  8004209af4:	48 b8 68 c2 4d 04 80 	movabs $0x80044dc268,%rax
  8004209afb:	00 00 00 
  8004209afe:	0f b6 00             	movzbl (%rax),%eax
  8004209b01:	83 f0 01             	xor    $0x1,%eax
  8004209b04:	84 c0                	test   %al,%al
  8004209b06:	74 05                	je     8004209b0d <irq_setmask_8259A+0x38>
  8004209b08:	e9 b7 00 00 00       	jmpq   8004209bc4 <irq_setmask_8259A+0xef>
  8004209b0d:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b11:	0f b6 c0             	movzbl %al,%eax
  8004209b14:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209b1b:	88 45 f7             	mov    %al,-0x9(%rbp)
  8004209b1e:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209b22:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209b25:	ee                   	out    %al,(%dx)
  8004209b26:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b2a:	66 c1 e8 08          	shr    $0x8,%ax
  8004209b2e:	0f b6 c0             	movzbl %al,%eax
  8004209b31:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209b38:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004209b3b:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004209b3f:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209b42:	ee                   	out    %al,(%dx)
  8004209b43:	48 bf 15 f2 21 04 80 	movabs $0x800421f215,%rdi
  8004209b4a:	00 00 00 
  8004209b4d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b52:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004209b59:	00 00 00 
  8004209b5c:	ff d2                	callq  *%rdx
  8004209b5e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209b65:	eb 3c                	jmp    8004209ba3 <irq_setmask_8259A+0xce>
  8004209b67:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b6b:	f7 d0                	not    %eax
  8004209b6d:	89 c2                	mov    %eax,%edx
  8004209b6f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b72:	89 c1                	mov    %eax,%ecx
  8004209b74:	d3 fa                	sar    %cl,%edx
  8004209b76:	89 d0                	mov    %edx,%eax
  8004209b78:	83 e0 01             	and    $0x1,%eax
  8004209b7b:	85 c0                	test   %eax,%eax
  8004209b7d:	74 20                	je     8004209b9f <irq_setmask_8259A+0xca>
  8004209b7f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b82:	89 c6                	mov    %eax,%esi
  8004209b84:	48 bf 29 f2 21 04 80 	movabs $0x800421f229,%rdi
  8004209b8b:	00 00 00 
  8004209b8e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b93:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004209b9a:	00 00 00 
  8004209b9d:	ff d2                	callq  *%rdx
  8004209b9f:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209ba3:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004209ba7:	7e be                	jle    8004209b67 <irq_setmask_8259A+0x92>
  8004209ba9:	48 bf 2d f2 21 04 80 	movabs $0x800421f22d,%rdi
  8004209bb0:	00 00 00 
  8004209bb3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209bb8:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004209bbf:	00 00 00 
  8004209bc2:	ff d2                	callq  *%rdx
  8004209bc4:	c9                   	leaveq 
  8004209bc5:	c3                   	retq   

0000008004209bc6 <irq_eoi>:
  8004209bc6:	55                   	push   %rbp
  8004209bc7:	48 89 e5             	mov    %rsp,%rbp
  8004209bca:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bce:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209bd5:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209bd9:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209bdd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209be0:	ee                   	out    %al,(%dx)
  8004209be1:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209be8:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  8004209bec:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209bf0:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209bf3:	ee                   	out    %al,(%dx)
  8004209bf4:	c9                   	leaveq 
  8004209bf5:	c3                   	retq   

0000008004209bf6 <putch>:
  8004209bf6:	55                   	push   %rbp
  8004209bf7:	48 89 e5             	mov    %rsp,%rbp
  8004209bfa:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bfe:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209c01:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209c05:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c08:	89 c7                	mov    %eax,%edi
  8004209c0a:	48 b8 ff 11 20 04 80 	movabs $0x80042011ff,%rax
  8004209c11:	00 00 00 
  8004209c14:	ff d0                	callq  *%rax
  8004209c16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209c1a:	48 83 c0 04          	add    $0x4,%rax
  8004209c1e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209c22:	c9                   	leaveq 
  8004209c23:	c3                   	retq   

0000008004209c24 <vcprintf>:
  8004209c24:	55                   	push   %rbp
  8004209c25:	48 89 e5             	mov    %rsp,%rbp
  8004209c28:	48 83 ec 30          	sub    $0x30,%rsp
  8004209c2c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209c30:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209c34:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209c3b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004209c3f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209c43:	48 8b 0a             	mov    (%rdx),%rcx
  8004209c46:	48 89 08             	mov    %rcx,(%rax)
  8004209c49:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209c4d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209c51:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209c55:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209c59:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  8004209c5d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004209c61:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209c65:	48 89 c6             	mov    %rax,%rsi
  8004209c68:	48 bf f6 9b 20 04 80 	movabs $0x8004209bf6,%rdi
  8004209c6f:	00 00 00 
  8004209c72:	48 b8 7b ff 20 04 80 	movabs $0x800420ff7b,%rax
  8004209c79:	00 00 00 
  8004209c7c:	ff d0                	callq  *%rax
  8004209c7e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c81:	c9                   	leaveq 
  8004209c82:	c3                   	retq   

0000008004209c83 <cprintf>:
  8004209c83:	55                   	push   %rbp
  8004209c84:	48 89 e5             	mov    %rsp,%rbp
  8004209c87:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  8004209c8e:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209c95:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  8004209c9c:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004209ca3:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209caa:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004209cb1:	84 c0                	test   %al,%al
  8004209cb3:	74 20                	je     8004209cd5 <cprintf+0x52>
  8004209cb5:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209cb9:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209cbd:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209cc1:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209cc5:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209cc9:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209ccd:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209cd1:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209cd5:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004209cdc:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209ce3:	00 00 00 
  8004209ce6:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004209ced:	00 00 00 
  8004209cf0:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209cf4:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209cfb:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209d02:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209d09:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209d10:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209d17:	48 8b 0a             	mov    (%rdx),%rcx
  8004209d1a:	48 89 08             	mov    %rcx,(%rax)
  8004209d1d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209d21:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209d25:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209d29:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209d2d:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209d34:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004209d3b:	48 89 d6             	mov    %rdx,%rsi
  8004209d3e:	48 89 c7             	mov    %rax,%rdi
  8004209d41:	48 b8 24 9c 20 04 80 	movabs $0x8004209c24,%rax
  8004209d48:	00 00 00 
  8004209d4b:	ff d0                	callq  *%rax
  8004209d4d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209d53:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209d59:	c9                   	leaveq 
  8004209d5a:	c3                   	retq   

0000008004209d5b <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004209d5b:	55                   	push   %rbp
  8004209d5c:	48 89 e5             	mov    %rsp,%rbp
  8004209d5f:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209d63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209d67:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004209d6a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209d6e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004209d71:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209d75:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209d78:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004209d7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004209d7e:	c9                   	leaveq 
  8004209d7f:	c3                   	retq   

0000008004209d80 <lock_kernel>:
  8004209d80:	55                   	push   %rbp
  8004209d81:	48 89 e5             	mov    %rsp,%rbp
  8004209d84:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004209d8b:	00 00 00 
  8004209d8e:	48 b8 f5 7e 21 04 80 	movabs $0x8004217ef5,%rax
  8004209d95:	00 00 00 
  8004209d98:	ff d0                	callq  *%rax
  8004209d9a:	5d                   	pop    %rbp
  8004209d9b:	c3                   	retq   

0000008004209d9c <trapname>:
  8004209d9c:	55                   	push   %rbp
  8004209d9d:	48 89 e5             	mov    %rsp,%rbp
  8004209da0:	48 83 ec 04          	sub    $0x4,%rsp
  8004209da4:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209da7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209daa:	83 f8 13             	cmp    $0x13,%eax
  8004209dad:	77 16                	ja     8004209dc5 <trapname+0x29>
  8004209daf:	48 b8 40 f6 21 04 80 	movabs $0x800421f640,%rax
  8004209db6:	00 00 00 
  8004209db9:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209dbc:	48 63 d2             	movslq %edx,%rdx
  8004209dbf:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209dc3:	eb 34                	jmp    8004209df9 <trapname+0x5d>
  8004209dc5:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209dc9:	75 0c                	jne    8004209dd7 <trapname+0x3b>
  8004209dcb:	48 b8 40 f2 21 04 80 	movabs $0x800421f240,%rax
  8004209dd2:	00 00 00 
  8004209dd5:	eb 22                	jmp    8004209df9 <trapname+0x5d>
  8004209dd7:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  8004209ddb:	7e 12                	jle    8004209def <trapname+0x53>
  8004209ddd:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209de1:	7f 0c                	jg     8004209def <trapname+0x53>
  8004209de3:	48 b8 4c f2 21 04 80 	movabs $0x800421f24c,%rax
  8004209dea:	00 00 00 
  8004209ded:	eb 0a                	jmp    8004209df9 <trapname+0x5d>
  8004209def:	48 b8 5f f2 21 04 80 	movabs $0x800421f25f,%rax
  8004209df6:	00 00 00 
  8004209df9:	c9                   	leaveq 
  8004209dfa:	c3                   	retq   

0000008004209dfb <trap_init>:
  8004209dfb:	55                   	push   %rbp
  8004209dfc:	48 89 e5             	mov    %rsp,%rbp
  8004209dff:	48 83 ec 10          	sub    $0x10,%rsp
  8004209e03:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209e0a:	e9 7d 01 00 00       	jmpq   8004209f8c <trap_init+0x191>
  8004209e0f:	48 b8 c6 d8 20 04 80 	movabs $0x800420d8c6,%rax
  8004209e16:	00 00 00 
  8004209e19:	48 ba 80 c2 4d 04 80 	movabs $0x80044dc280,%rdx
  8004209e20:	00 00 00 
  8004209e23:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209e26:	48 63 c9             	movslq %ecx,%rcx
  8004209e29:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209e2d:	48 01 ca             	add    %rcx,%rdx
  8004209e30:	66 89 02             	mov    %ax,(%rdx)
  8004209e33:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209e3a:	00 00 00 
  8004209e3d:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e40:	48 63 d2             	movslq %edx,%rdx
  8004209e43:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e47:	48 01 d0             	add    %rdx,%rax
  8004209e4a:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209e50:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209e57:	00 00 00 
  8004209e5a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e5d:	48 63 d2             	movslq %edx,%rdx
  8004209e60:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e64:	48 01 d0             	add    %rdx,%rax
  8004209e67:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e6b:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e6e:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e71:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209e78:	00 00 00 
  8004209e7b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e7e:	48 63 d2             	movslq %edx,%rdx
  8004209e81:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e85:	48 01 d0             	add    %rdx,%rax
  8004209e88:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e8c:	83 e2 07             	and    $0x7,%edx
  8004209e8f:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e92:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209e99:	00 00 00 
  8004209e9c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e9f:	48 63 d2             	movslq %edx,%rdx
  8004209ea2:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209ea6:	48 01 d0             	add    %rdx,%rax
  8004209ea9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ead:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209eb0:	83 ca 0e             	or     $0xe,%edx
  8004209eb3:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eb6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209ebd:	00 00 00 
  8004209ec0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ec3:	48 63 d2             	movslq %edx,%rdx
  8004209ec6:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209eca:	48 01 d0             	add    %rdx,%rax
  8004209ecd:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ed1:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ed4:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ed7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209ede:	00 00 00 
  8004209ee1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ee4:	48 63 d2             	movslq %edx,%rdx
  8004209ee7:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209eeb:	48 01 d0             	add    %rdx,%rax
  8004209eee:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ef2:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209ef5:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ef8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209eff:	00 00 00 
  8004209f02:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f05:	48 63 d2             	movslq %edx,%rdx
  8004209f08:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f0c:	48 01 d0             	add    %rdx,%rax
  8004209f0f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209f13:	83 ca 80             	or     $0xffffff80,%edx
  8004209f16:	88 50 05             	mov    %dl,0x5(%rax)
  8004209f19:	48 b8 c6 d8 20 04 80 	movabs $0x800420d8c6,%rax
  8004209f20:	00 00 00 
  8004209f23:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f27:	48 ba 80 c2 4d 04 80 	movabs $0x80044dc280,%rdx
  8004209f2e:	00 00 00 
  8004209f31:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f34:	48 63 c9             	movslq %ecx,%rcx
  8004209f37:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f3b:	48 01 ca             	add    %rcx,%rdx
  8004209f3e:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209f42:	48 b8 c6 d8 20 04 80 	movabs $0x800420d8c6,%rax
  8004209f49:	00 00 00 
  8004209f4c:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f50:	48 ba 80 c2 4d 04 80 	movabs $0x80044dc280,%rdx
  8004209f57:	00 00 00 
  8004209f5a:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f5d:	48 63 c9             	movslq %ecx,%rcx
  8004209f60:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f64:	48 01 ca             	add    %rcx,%rdx
  8004209f67:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209f6a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209f71:	00 00 00 
  8004209f74:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f77:	48 63 d2             	movslq %edx,%rdx
  8004209f7a:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f7e:	48 01 d0             	add    %rdx,%rax
  8004209f81:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209f88:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209f8c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209f8f:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209f94:	0f 86 75 fe ff ff    	jbe    8004209e0f <trap_init+0x14>
  8004209f9a:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  8004209fa1:	00 00 00 
  8004209fa4:	89 c2                	mov    %eax,%edx
  8004209fa6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209fad:	00 00 00 
  8004209fb0:	66 89 10             	mov    %dx,(%rax)
  8004209fb3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209fba:	00 00 00 
  8004209fbd:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209fc3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209fca:	00 00 00 
  8004209fcd:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fd1:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209fd4:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fd7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209fde:	00 00 00 
  8004209fe1:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fe5:	83 e2 07             	and    $0x7,%edx
  8004209fe8:	88 50 04             	mov    %dl,0x4(%rax)
  8004209feb:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  8004209ff2:	00 00 00 
  8004209ff5:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ff9:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ffc:	83 ca 0e             	or     $0xe,%edx
  8004209fff:	88 50 05             	mov    %dl,0x5(%rax)
  800420a002:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a009:	00 00 00 
  800420a00c:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a010:	83 e2 ef             	and    $0xffffffef,%edx
  800420a013:	88 50 05             	mov    %dl,0x5(%rax)
  800420a016:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a01d:	00 00 00 
  800420a020:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a024:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a027:	88 50 05             	mov    %dl,0x5(%rax)
  800420a02a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a031:	00 00 00 
  800420a034:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a038:	83 ca 80             	or     $0xffffff80,%edx
  800420a03b:	88 50 05             	mov    %dl,0x5(%rax)
  800420a03e:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  800420a045:	00 00 00 
  800420a048:	48 c1 e8 10          	shr    $0x10,%rax
  800420a04c:	89 c2                	mov    %eax,%edx
  800420a04e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a055:	00 00 00 
  800420a058:	66 89 50 06          	mov    %dx,0x6(%rax)
  800420a05c:	48 b8 d0 d7 20 04 80 	movabs $0x800420d7d0,%rax
  800420a063:	00 00 00 
  800420a066:	48 c1 e8 20          	shr    $0x20,%rax
  800420a06a:	89 c2                	mov    %eax,%edx
  800420a06c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a073:	00 00 00 
  800420a076:	89 50 08             	mov    %edx,0x8(%rax)
  800420a079:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a080:	00 00 00 
  800420a083:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  800420a08a:	48 b8 da d7 20 04 80 	movabs $0x800420d7da,%rax
  800420a091:	00 00 00 
  800420a094:	89 c2                	mov    %eax,%edx
  800420a096:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a09d:	00 00 00 
  800420a0a0:	66 89 50 10          	mov    %dx,0x10(%rax)
  800420a0a4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0ab:	00 00 00 
  800420a0ae:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  800420a0b4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0bb:	00 00 00 
  800420a0be:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0c2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a0c5:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0c8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0cf:	00 00 00 
  800420a0d2:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0d6:	83 e2 07             	and    $0x7,%edx
  800420a0d9:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0dc:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0e3:	00 00 00 
  800420a0e6:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0ea:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0ed:	83 ca 0e             	or     $0xe,%edx
  800420a0f0:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0f3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a0fa:	00 00 00 
  800420a0fd:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a101:	83 e2 ef             	and    $0xffffffef,%edx
  800420a104:	88 50 15             	mov    %dl,0x15(%rax)
  800420a107:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a10e:	00 00 00 
  800420a111:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a115:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a118:	88 50 15             	mov    %dl,0x15(%rax)
  800420a11b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a122:	00 00 00 
  800420a125:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a129:	83 ca 80             	or     $0xffffff80,%edx
  800420a12c:	88 50 15             	mov    %dl,0x15(%rax)
  800420a12f:	48 b8 da d7 20 04 80 	movabs $0x800420d7da,%rax
  800420a136:	00 00 00 
  800420a139:	48 c1 e8 10          	shr    $0x10,%rax
  800420a13d:	89 c2                	mov    %eax,%edx
  800420a13f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a146:	00 00 00 
  800420a149:	66 89 50 16          	mov    %dx,0x16(%rax)
  800420a14d:	48 b8 da d7 20 04 80 	movabs $0x800420d7da,%rax
  800420a154:	00 00 00 
  800420a157:	48 c1 e8 20          	shr    $0x20,%rax
  800420a15b:	89 c2                	mov    %eax,%edx
  800420a15d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a164:	00 00 00 
  800420a167:	89 50 18             	mov    %edx,0x18(%rax)
  800420a16a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a171:	00 00 00 
  800420a174:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  800420a17b:	48 b8 e4 d7 20 04 80 	movabs $0x800420d7e4,%rax
  800420a182:	00 00 00 
  800420a185:	89 c2                	mov    %eax,%edx
  800420a187:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a18e:	00 00 00 
  800420a191:	66 89 50 20          	mov    %dx,0x20(%rax)
  800420a195:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a19c:	00 00 00 
  800420a19f:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  800420a1a5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1ac:	00 00 00 
  800420a1af:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1b3:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a1b6:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1b9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1c0:	00 00 00 
  800420a1c3:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1c7:	83 e2 07             	and    $0x7,%edx
  800420a1ca:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1cd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1d4:	00 00 00 
  800420a1d7:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1db:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1de:	83 ca 0e             	or     $0xe,%edx
  800420a1e1:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1e4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1eb:	00 00 00 
  800420a1ee:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1f2:	83 e2 ef             	and    $0xffffffef,%edx
  800420a1f5:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1f8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a1ff:	00 00 00 
  800420a202:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a206:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a209:	88 50 25             	mov    %dl,0x25(%rax)
  800420a20c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a213:	00 00 00 
  800420a216:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a21a:	83 ca 80             	or     $0xffffff80,%edx
  800420a21d:	88 50 25             	mov    %dl,0x25(%rax)
  800420a220:	48 b8 e4 d7 20 04 80 	movabs $0x800420d7e4,%rax
  800420a227:	00 00 00 
  800420a22a:	48 c1 e8 10          	shr    $0x10,%rax
  800420a22e:	89 c2                	mov    %eax,%edx
  800420a230:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a237:	00 00 00 
  800420a23a:	66 89 50 26          	mov    %dx,0x26(%rax)
  800420a23e:	48 b8 e4 d7 20 04 80 	movabs $0x800420d7e4,%rax
  800420a245:	00 00 00 
  800420a248:	48 c1 e8 20          	shr    $0x20,%rax
  800420a24c:	89 c2                	mov    %eax,%edx
  800420a24e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a255:	00 00 00 
  800420a258:	89 50 28             	mov    %edx,0x28(%rax)
  800420a25b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a262:	00 00 00 
  800420a265:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  800420a26c:	48 b8 ee d7 20 04 80 	movabs $0x800420d7ee,%rax
  800420a273:	00 00 00 
  800420a276:	89 c2                	mov    %eax,%edx
  800420a278:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a27f:	00 00 00 
  800420a282:	66 89 50 30          	mov    %dx,0x30(%rax)
  800420a286:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a28d:	00 00 00 
  800420a290:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  800420a296:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a29d:	00 00 00 
  800420a2a0:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2a4:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a2a7:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2aa:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a2b1:	00 00 00 
  800420a2b4:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2b8:	83 e2 07             	and    $0x7,%edx
  800420a2bb:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2be:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a2c5:	00 00 00 
  800420a2c8:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2cc:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a2cf:	83 ca 0e             	or     $0xe,%edx
  800420a2d2:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2d5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a2dc:	00 00 00 
  800420a2df:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2e3:	83 e2 ef             	and    $0xffffffef,%edx
  800420a2e6:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2e9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a2f0:	00 00 00 
  800420a2f3:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2f7:	83 ca 60             	or     $0x60,%edx
  800420a2fa:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2fd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a304:	00 00 00 
  800420a307:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a30b:	83 ca 80             	or     $0xffffff80,%edx
  800420a30e:	88 50 35             	mov    %dl,0x35(%rax)
  800420a311:	48 b8 ee d7 20 04 80 	movabs $0x800420d7ee,%rax
  800420a318:	00 00 00 
  800420a31b:	48 c1 e8 10          	shr    $0x10,%rax
  800420a31f:	89 c2                	mov    %eax,%edx
  800420a321:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a328:	00 00 00 
  800420a32b:	66 89 50 36          	mov    %dx,0x36(%rax)
  800420a32f:	48 b8 ee d7 20 04 80 	movabs $0x800420d7ee,%rax
  800420a336:	00 00 00 
  800420a339:	48 c1 e8 20          	shr    $0x20,%rax
  800420a33d:	89 c2                	mov    %eax,%edx
  800420a33f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a346:	00 00 00 
  800420a349:	89 50 38             	mov    %edx,0x38(%rax)
  800420a34c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a353:	00 00 00 
  800420a356:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  800420a35d:	48 b8 f8 d7 20 04 80 	movabs $0x800420d7f8,%rax
  800420a364:	00 00 00 
  800420a367:	89 c2                	mov    %eax,%edx
  800420a369:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a370:	00 00 00 
  800420a373:	66 89 50 40          	mov    %dx,0x40(%rax)
  800420a377:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a37e:	00 00 00 
  800420a381:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  800420a387:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a38e:	00 00 00 
  800420a391:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a395:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a398:	88 50 44             	mov    %dl,0x44(%rax)
  800420a39b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a3a2:	00 00 00 
  800420a3a5:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a3a9:	83 e2 07             	and    $0x7,%edx
  800420a3ac:	88 50 44             	mov    %dl,0x44(%rax)
  800420a3af:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a3b6:	00 00 00 
  800420a3b9:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3bd:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a3c0:	83 ca 0e             	or     $0xe,%edx
  800420a3c3:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3c6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a3cd:	00 00 00 
  800420a3d0:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3d4:	83 e2 ef             	and    $0xffffffef,%edx
  800420a3d7:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3da:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a3e1:	00 00 00 
  800420a3e4:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3e8:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a3eb:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ee:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a3f5:	00 00 00 
  800420a3f8:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3fc:	83 ca 80             	or     $0xffffff80,%edx
  800420a3ff:	88 50 45             	mov    %dl,0x45(%rax)
  800420a402:	48 b8 f8 d7 20 04 80 	movabs $0x800420d7f8,%rax
  800420a409:	00 00 00 
  800420a40c:	48 c1 e8 10          	shr    $0x10,%rax
  800420a410:	89 c2                	mov    %eax,%edx
  800420a412:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a419:	00 00 00 
  800420a41c:	66 89 50 46          	mov    %dx,0x46(%rax)
  800420a420:	48 b8 f8 d7 20 04 80 	movabs $0x800420d7f8,%rax
  800420a427:	00 00 00 
  800420a42a:	48 c1 e8 20          	shr    $0x20,%rax
  800420a42e:	89 c2                	mov    %eax,%edx
  800420a430:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a437:	00 00 00 
  800420a43a:	89 50 48             	mov    %edx,0x48(%rax)
  800420a43d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a444:	00 00 00 
  800420a447:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  800420a44e:	48 b8 02 d8 20 04 80 	movabs $0x800420d802,%rax
  800420a455:	00 00 00 
  800420a458:	89 c2                	mov    %eax,%edx
  800420a45a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a461:	00 00 00 
  800420a464:	66 89 50 50          	mov    %dx,0x50(%rax)
  800420a468:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a46f:	00 00 00 
  800420a472:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  800420a478:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a47f:	00 00 00 
  800420a482:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a486:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a489:	88 50 54             	mov    %dl,0x54(%rax)
  800420a48c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a493:	00 00 00 
  800420a496:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a49a:	83 e2 07             	and    $0x7,%edx
  800420a49d:	88 50 54             	mov    %dl,0x54(%rax)
  800420a4a0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a4a7:	00 00 00 
  800420a4aa:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a4b1:	83 ca 0e             	or     $0xe,%edx
  800420a4b4:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4b7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a4be:	00 00 00 
  800420a4c1:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4c5:	83 e2 ef             	and    $0xffffffef,%edx
  800420a4c8:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4cb:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a4d2:	00 00 00 
  800420a4d5:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4d9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a4dc:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4df:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a4e6:	00 00 00 
  800420a4e9:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4ed:	83 ca 80             	or     $0xffffff80,%edx
  800420a4f0:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4f3:	48 b8 02 d8 20 04 80 	movabs $0x800420d802,%rax
  800420a4fa:	00 00 00 
  800420a4fd:	48 c1 e8 10          	shr    $0x10,%rax
  800420a501:	89 c2                	mov    %eax,%edx
  800420a503:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a50a:	00 00 00 
  800420a50d:	66 89 50 56          	mov    %dx,0x56(%rax)
  800420a511:	48 b8 02 d8 20 04 80 	movabs $0x800420d802,%rax
  800420a518:	00 00 00 
  800420a51b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a51f:	89 c2                	mov    %eax,%edx
  800420a521:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a528:	00 00 00 
  800420a52b:	89 50 58             	mov    %edx,0x58(%rax)
  800420a52e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a535:	00 00 00 
  800420a538:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  800420a53f:	48 b8 0c d8 20 04 80 	movabs $0x800420d80c,%rax
  800420a546:	00 00 00 
  800420a549:	89 c2                	mov    %eax,%edx
  800420a54b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a552:	00 00 00 
  800420a555:	66 89 50 60          	mov    %dx,0x60(%rax)
  800420a559:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a560:	00 00 00 
  800420a563:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  800420a569:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a570:	00 00 00 
  800420a573:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a577:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a57a:	88 50 64             	mov    %dl,0x64(%rax)
  800420a57d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a584:	00 00 00 
  800420a587:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a58b:	83 e2 07             	and    $0x7,%edx
  800420a58e:	88 50 64             	mov    %dl,0x64(%rax)
  800420a591:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a598:	00 00 00 
  800420a59b:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a59f:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a5a2:	83 ca 0e             	or     $0xe,%edx
  800420a5a5:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5a8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a5af:	00 00 00 
  800420a5b2:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5b6:	83 e2 ef             	and    $0xffffffef,%edx
  800420a5b9:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5bc:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a5c3:	00 00 00 
  800420a5c6:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5ca:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a5cd:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5d0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a5d7:	00 00 00 
  800420a5da:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5de:	83 ca 80             	or     $0xffffff80,%edx
  800420a5e1:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5e4:	48 b8 0c d8 20 04 80 	movabs $0x800420d80c,%rax
  800420a5eb:	00 00 00 
  800420a5ee:	48 c1 e8 10          	shr    $0x10,%rax
  800420a5f2:	89 c2                	mov    %eax,%edx
  800420a5f4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a5fb:	00 00 00 
  800420a5fe:	66 89 50 66          	mov    %dx,0x66(%rax)
  800420a602:	48 b8 0c d8 20 04 80 	movabs $0x800420d80c,%rax
  800420a609:	00 00 00 
  800420a60c:	48 c1 e8 20          	shr    $0x20,%rax
  800420a610:	89 c2                	mov    %eax,%edx
  800420a612:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a619:	00 00 00 
  800420a61c:	89 50 68             	mov    %edx,0x68(%rax)
  800420a61f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a626:	00 00 00 
  800420a629:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  800420a630:	48 b8 16 d8 20 04 80 	movabs $0x800420d816,%rax
  800420a637:	00 00 00 
  800420a63a:	89 c2                	mov    %eax,%edx
  800420a63c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a643:	00 00 00 
  800420a646:	66 89 50 70          	mov    %dx,0x70(%rax)
  800420a64a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a651:	00 00 00 
  800420a654:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  800420a65a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a661:	00 00 00 
  800420a664:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a668:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a66b:	88 50 74             	mov    %dl,0x74(%rax)
  800420a66e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a675:	00 00 00 
  800420a678:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a67c:	83 e2 07             	and    $0x7,%edx
  800420a67f:	88 50 74             	mov    %dl,0x74(%rax)
  800420a682:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a689:	00 00 00 
  800420a68c:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a690:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a693:	83 ca 0e             	or     $0xe,%edx
  800420a696:	88 50 75             	mov    %dl,0x75(%rax)
  800420a699:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a6a0:	00 00 00 
  800420a6a3:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6a7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a6aa:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6ad:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a6b4:	00 00 00 
  800420a6b7:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6bb:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a6be:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6c1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a6c8:	00 00 00 
  800420a6cb:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6cf:	83 ca 80             	or     $0xffffff80,%edx
  800420a6d2:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6d5:	48 b8 16 d8 20 04 80 	movabs $0x800420d816,%rax
  800420a6dc:	00 00 00 
  800420a6df:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6e3:	89 c2                	mov    %eax,%edx
  800420a6e5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a6ec:	00 00 00 
  800420a6ef:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a6f3:	48 b8 16 d8 20 04 80 	movabs $0x800420d816,%rax
  800420a6fa:	00 00 00 
  800420a6fd:	48 c1 e8 20          	shr    $0x20,%rax
  800420a701:	89 c2                	mov    %eax,%edx
  800420a703:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a70a:	00 00 00 
  800420a70d:	89 50 78             	mov    %edx,0x78(%rax)
  800420a710:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a717:	00 00 00 
  800420a71a:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a721:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a728:	00 00 00 
  800420a72b:	89 c2                	mov    %eax,%edx
  800420a72d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a734:	00 00 00 
  800420a737:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a73e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a745:	00 00 00 
  800420a748:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a74f:	08 00 
  800420a751:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a758:	00 00 00 
  800420a75b:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a762:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a765:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a76b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a772:	00 00 00 
  800420a775:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a77c:	83 e2 07             	and    $0x7,%edx
  800420a77f:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a785:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a78c:	00 00 00 
  800420a78f:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a796:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a799:	83 ca 0e             	or     $0xe,%edx
  800420a79c:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7a2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a7a9:	00 00 00 
  800420a7ac:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7b3:	83 e2 ef             	and    $0xffffffef,%edx
  800420a7b6:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7bc:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a7c3:	00 00 00 
  800420a7c6:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7cd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7d0:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7d6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a7dd:	00 00 00 
  800420a7e0:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7e7:	83 ca 80             	or     $0xffffff80,%edx
  800420a7ea:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7f0:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a7f7:	00 00 00 
  800420a7fa:	48 c1 e8 10          	shr    $0x10,%rax
  800420a7fe:	89 c2                	mov    %eax,%edx
  800420a800:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a807:	00 00 00 
  800420a80a:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a811:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a818:	00 00 00 
  800420a81b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a81f:	89 c2                	mov    %eax,%edx
  800420a821:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a828:	00 00 00 
  800420a82b:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a831:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a838:	00 00 00 
  800420a83b:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a842:	00 00 00 
  800420a845:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420a84c:	00 00 00 
  800420a84f:	89 c2                	mov    %eax,%edx
  800420a851:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a858:	00 00 00 
  800420a85b:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a862:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a869:	00 00 00 
  800420a86c:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a873:	08 00 
  800420a875:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a87c:	00 00 00 
  800420a87f:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a886:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a889:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a88f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a896:	00 00 00 
  800420a899:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a8a0:	83 e2 07             	and    $0x7,%edx
  800420a8a3:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a8a9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a8b0:	00 00 00 
  800420a8b3:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ba:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8bd:	83 ca 0e             	or     $0xe,%edx
  800420a8c0:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8c6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a8cd:	00 00 00 
  800420a8d0:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8d7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8da:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8e0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a8e7:	00 00 00 
  800420a8ea:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8f1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a8f4:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8fa:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a901:	00 00 00 
  800420a904:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a90b:	83 ca 80             	or     $0xffffff80,%edx
  800420a90e:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a914:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420a91b:	00 00 00 
  800420a91e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a922:	89 c2                	mov    %eax,%edx
  800420a924:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a92b:	00 00 00 
  800420a92e:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a935:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420a93c:	00 00 00 
  800420a93f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a943:	89 c2                	mov    %eax,%edx
  800420a945:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a94c:	00 00 00 
  800420a94f:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a955:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a95c:	00 00 00 
  800420a95f:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a966:	00 00 00 
  800420a969:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420a970:	00 00 00 
  800420a973:	89 c2                	mov    %eax,%edx
  800420a975:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a97c:	00 00 00 
  800420a97f:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a986:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a98d:	00 00 00 
  800420a990:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a997:	08 00 
  800420a999:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a9a0:	00 00 00 
  800420a9a3:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9aa:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a9ad:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9b3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a9ba:	00 00 00 
  800420a9bd:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9c4:	83 e2 07             	and    $0x7,%edx
  800420a9c7:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9cd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a9d4:	00 00 00 
  800420a9d7:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9de:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9e1:	83 ca 0e             	or     $0xe,%edx
  800420a9e4:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9ea:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420a9f1:	00 00 00 
  800420a9f4:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9fb:	83 e2 ef             	and    $0xffffffef,%edx
  800420a9fe:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa04:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa0b:	00 00 00 
  800420aa0e:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa15:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aa18:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa1e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa25:	00 00 00 
  800420aa28:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa2f:	83 ca 80             	or     $0xffffff80,%edx
  800420aa32:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa38:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420aa3f:	00 00 00 
  800420aa42:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa46:	89 c2                	mov    %eax,%edx
  800420aa48:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa4f:	00 00 00 
  800420aa52:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420aa59:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420aa60:	00 00 00 
  800420aa63:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa67:	89 c2                	mov    %eax,%edx
  800420aa69:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa70:	00 00 00 
  800420aa73:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420aa79:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aa80:	00 00 00 
  800420aa83:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420aa8a:	00 00 00 
  800420aa8d:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420aa94:	00 00 00 
  800420aa97:	89 c2                	mov    %eax,%edx
  800420aa99:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aaa0:	00 00 00 
  800420aaa3:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420aaaa:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aab1:	00 00 00 
  800420aab4:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420aabb:	08 00 
  800420aabd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aac4:	00 00 00 
  800420aac7:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aace:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aad1:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aad7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aade:	00 00 00 
  800420aae1:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aae8:	83 e2 07             	and    $0x7,%edx
  800420aaeb:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aaf1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aaf8:	00 00 00 
  800420aafb:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab02:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ab05:	83 ca 0e             	or     $0xe,%edx
  800420ab08:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab0e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab15:	00 00 00 
  800420ab18:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab1f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab22:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab28:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab2f:	00 00 00 
  800420ab32:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab39:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab3c:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab42:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab49:	00 00 00 
  800420ab4c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab53:	83 ca 80             	or     $0xffffff80,%edx
  800420ab56:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab5c:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420ab63:	00 00 00 
  800420ab66:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab6a:	89 c2                	mov    %eax,%edx
  800420ab6c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab73:	00 00 00 
  800420ab76:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420ab7d:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420ab84:	00 00 00 
  800420ab87:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab8b:	89 c2                	mov    %eax,%edx
  800420ab8d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ab94:	00 00 00 
  800420ab97:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420ab9d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aba4:	00 00 00 
  800420aba7:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420abae:	00 00 00 
  800420abb1:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420abb8:	00 00 00 
  800420abbb:	89 c2                	mov    %eax,%edx
  800420abbd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420abc4:	00 00 00 
  800420abc7:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420abce:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420abd5:	00 00 00 
  800420abd8:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420abdf:	08 00 
  800420abe1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420abe8:	00 00 00 
  800420abeb:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420abf2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420abf5:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420abfb:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac02:	00 00 00 
  800420ac05:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ac0c:	83 e2 07             	and    $0x7,%edx
  800420ac0f:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420ac15:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac1c:	00 00 00 
  800420ac1f:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac26:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac29:	83 ca 0e             	or     $0xe,%edx
  800420ac2c:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac32:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac39:	00 00 00 
  800420ac3c:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac43:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac46:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac4c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac53:	00 00 00 
  800420ac56:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac5d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac60:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac66:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac6d:	00 00 00 
  800420ac70:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac77:	83 ca 80             	or     $0xffffff80,%edx
  800420ac7a:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac80:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420ac87:	00 00 00 
  800420ac8a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac8e:	89 c2                	mov    %eax,%edx
  800420ac90:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ac97:	00 00 00 
  800420ac9a:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420aca1:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aca8:	00 00 00 
  800420acab:	48 c1 e8 20          	shr    $0x20,%rax
  800420acaf:	89 c2                	mov    %eax,%edx
  800420acb1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420acb8:	00 00 00 
  800420acbb:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420acc1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420acc8:	00 00 00 
  800420accb:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420acd2:	00 00 00 
  800420acd5:	48 b8 48 d8 20 04 80 	movabs $0x800420d848,%rax
  800420acdc:	00 00 00 
  800420acdf:	89 c2                	mov    %eax,%edx
  800420ace1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ace8:	00 00 00 
  800420aceb:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420acf2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420acf9:	00 00 00 
  800420acfc:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420ad03:	08 00 
  800420ad05:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad0c:	00 00 00 
  800420ad0f:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad16:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ad19:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad1f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad26:	00 00 00 
  800420ad29:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad30:	83 e2 07             	and    $0x7,%edx
  800420ad33:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad39:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad40:	00 00 00 
  800420ad43:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad4a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad4d:	83 ca 0e             	or     $0xe,%edx
  800420ad50:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad56:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad5d:	00 00 00 
  800420ad60:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad67:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad6a:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad70:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad77:	00 00 00 
  800420ad7a:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad81:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad84:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad8a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ad91:	00 00 00 
  800420ad94:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad9b:	83 ca 80             	or     $0xffffff80,%edx
  800420ad9e:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ada4:	48 b8 48 d8 20 04 80 	movabs $0x800420d848,%rax
  800420adab:	00 00 00 
  800420adae:	48 c1 e8 10          	shr    $0x10,%rax
  800420adb2:	89 c2                	mov    %eax,%edx
  800420adb4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420adbb:	00 00 00 
  800420adbe:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420adc5:	48 b8 48 d8 20 04 80 	movabs $0x800420d848,%rax
  800420adcc:	00 00 00 
  800420adcf:	48 c1 e8 20          	shr    $0x20,%rax
  800420add3:	89 c2                	mov    %eax,%edx
  800420add5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420addc:	00 00 00 
  800420addf:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420ade5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420adec:	00 00 00 
  800420adef:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420adf6:	00 00 00 
  800420adf9:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420ae00:	00 00 00 
  800420ae03:	89 c2                	mov    %eax,%edx
  800420ae05:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae0c:	00 00 00 
  800420ae0f:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420ae16:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae1d:	00 00 00 
  800420ae20:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420ae27:	08 00 
  800420ae29:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae30:	00 00 00 
  800420ae33:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae3a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae3d:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae43:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae4a:	00 00 00 
  800420ae4d:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae54:	83 e2 07             	and    $0x7,%edx
  800420ae57:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae5d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae64:	00 00 00 
  800420ae67:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae6e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae71:	83 ca 0e             	or     $0xe,%edx
  800420ae74:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae7a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae81:	00 00 00 
  800420ae84:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae8b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae8e:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae94:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ae9b:	00 00 00 
  800420ae9e:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aea5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aea8:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aeae:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aeb5:	00 00 00 
  800420aeb8:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aebf:	83 ca 80             	or     $0xffffff80,%edx
  800420aec2:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aec8:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420aecf:	00 00 00 
  800420aed2:	48 c1 e8 10          	shr    $0x10,%rax
  800420aed6:	89 c2                	mov    %eax,%edx
  800420aed8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420aedf:	00 00 00 
  800420aee2:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420aee9:	48 b8 50 d8 20 04 80 	movabs $0x800420d850,%rax
  800420aef0:	00 00 00 
  800420aef3:	48 c1 e8 20          	shr    $0x20,%rax
  800420aef7:	89 c2                	mov    %eax,%edx
  800420aef9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af00:	00 00 00 
  800420af03:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420af09:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af10:	00 00 00 
  800420af13:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420af1a:	00 00 00 
  800420af1d:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420af24:	00 00 00 
  800420af27:	89 c2                	mov    %eax,%edx
  800420af29:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af30:	00 00 00 
  800420af33:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420af3a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af41:	00 00 00 
  800420af44:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420af4b:	08 00 
  800420af4d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af54:	00 00 00 
  800420af57:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af5e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af61:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af67:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af6e:	00 00 00 
  800420af71:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af78:	83 e2 07             	and    $0x7,%edx
  800420af7b:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af81:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420af88:	00 00 00 
  800420af8b:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af92:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af95:	83 ca 0e             	or     $0xe,%edx
  800420af98:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af9e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420afa5:	00 00 00 
  800420afa8:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afaf:	83 e2 ef             	and    $0xffffffef,%edx
  800420afb2:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afb8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420afbf:	00 00 00 
  800420afc2:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afc9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afcc:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afd2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420afd9:	00 00 00 
  800420afdc:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afe3:	83 ca 80             	or     $0xffffff80,%edx
  800420afe6:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afec:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420aff3:	00 00 00 
  800420aff6:	48 c1 e8 10          	shr    $0x10,%rax
  800420affa:	89 c2                	mov    %eax,%edx
  800420affc:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b003:	00 00 00 
  800420b006:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420b00d:	48 b8 56 d8 20 04 80 	movabs $0x800420d856,%rax
  800420b014:	00 00 00 
  800420b017:	48 c1 e8 20          	shr    $0x20,%rax
  800420b01b:	89 c2                	mov    %eax,%edx
  800420b01d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b024:	00 00 00 
  800420b027:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420b02d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b034:	00 00 00 
  800420b037:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420b03e:	00 00 00 
  800420b041:	48 b8 5a d8 20 04 80 	movabs $0x800420d85a,%rax
  800420b048:	00 00 00 
  800420b04b:	89 c2                	mov    %eax,%edx
  800420b04d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b054:	00 00 00 
  800420b057:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420b05e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b065:	00 00 00 
  800420b068:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420b06f:	08 00 
  800420b071:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b078:	00 00 00 
  800420b07b:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b082:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b085:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b08b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b092:	00 00 00 
  800420b095:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b09c:	83 e2 07             	and    $0x7,%edx
  800420b09f:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b0a5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b0ac:	00 00 00 
  800420b0af:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0b6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b0b9:	83 ca 0e             	or     $0xe,%edx
  800420b0bc:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0c2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b0c9:	00 00 00 
  800420b0cc:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0d3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0d6:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0dc:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b0e3:	00 00 00 
  800420b0e6:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0ed:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b0f0:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0f6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b0fd:	00 00 00 
  800420b100:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b107:	83 ca 80             	or     $0xffffff80,%edx
  800420b10a:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b110:	48 b8 5a d8 20 04 80 	movabs $0x800420d85a,%rax
  800420b117:	00 00 00 
  800420b11a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b11e:	89 c2                	mov    %eax,%edx
  800420b120:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b127:	00 00 00 
  800420b12a:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420b131:	48 b8 5a d8 20 04 80 	movabs $0x800420d85a,%rax
  800420b138:	00 00 00 
  800420b13b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b13f:	89 c2                	mov    %eax,%edx
  800420b141:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b148:	00 00 00 
  800420b14b:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420b151:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b158:	00 00 00 
  800420b15b:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420b162:	00 00 00 
  800420b165:	48 b8 60 d8 20 04 80 	movabs $0x800420d860,%rax
  800420b16c:	00 00 00 
  800420b16f:	89 c2                	mov    %eax,%edx
  800420b171:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b178:	00 00 00 
  800420b17b:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420b182:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b189:	00 00 00 
  800420b18c:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420b193:	08 00 
  800420b195:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b19c:	00 00 00 
  800420b19f:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1a6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b1a9:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1af:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b1b6:	00 00 00 
  800420b1b9:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1c0:	83 e2 07             	and    $0x7,%edx
  800420b1c3:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1c9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b1d0:	00 00 00 
  800420b1d3:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1da:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1dd:	83 ca 0e             	or     $0xe,%edx
  800420b1e0:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1e6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b1ed:	00 00 00 
  800420b1f0:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1f7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b1fa:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b200:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b207:	00 00 00 
  800420b20a:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b211:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b214:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b21a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b221:	00 00 00 
  800420b224:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b22b:	83 ca 80             	or     $0xffffff80,%edx
  800420b22e:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b234:	48 b8 60 d8 20 04 80 	movabs $0x800420d860,%rax
  800420b23b:	00 00 00 
  800420b23e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b242:	89 c2                	mov    %eax,%edx
  800420b244:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b24b:	00 00 00 
  800420b24e:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420b255:	48 b8 60 d8 20 04 80 	movabs $0x800420d860,%rax
  800420b25c:	00 00 00 
  800420b25f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b263:	89 c2                	mov    %eax,%edx
  800420b265:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b26c:	00 00 00 
  800420b26f:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420b275:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b27c:	00 00 00 
  800420b27f:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420b286:	00 00 00 
  800420b289:	48 b8 66 d8 20 04 80 	movabs $0x800420d866,%rax
  800420b290:	00 00 00 
  800420b293:	89 c2                	mov    %eax,%edx
  800420b295:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b29c:	00 00 00 
  800420b29f:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420b2a6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b2ad:	00 00 00 
  800420b2b0:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420b2b7:	08 00 
  800420b2b9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b2c0:	00 00 00 
  800420b2c3:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2ca:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2cd:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2d3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b2da:	00 00 00 
  800420b2dd:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2e4:	83 e2 07             	and    $0x7,%edx
  800420b2e7:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2ed:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b2f4:	00 00 00 
  800420b2f7:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b2fe:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b301:	83 ca 0e             	or     $0xe,%edx
  800420b304:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b30a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b311:	00 00 00 
  800420b314:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b31b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b31e:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b324:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b32b:	00 00 00 
  800420b32e:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b335:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b338:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b33e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b345:	00 00 00 
  800420b348:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b34f:	83 ca 80             	or     $0xffffff80,%edx
  800420b352:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b358:	48 b8 66 d8 20 04 80 	movabs $0x800420d866,%rax
  800420b35f:	00 00 00 
  800420b362:	48 c1 e8 10          	shr    $0x10,%rax
  800420b366:	89 c2                	mov    %eax,%edx
  800420b368:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b36f:	00 00 00 
  800420b372:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420b379:	48 b8 66 d8 20 04 80 	movabs $0x800420d866,%rax
  800420b380:	00 00 00 
  800420b383:	48 c1 e8 20          	shr    $0x20,%rax
  800420b387:	89 c2                	mov    %eax,%edx
  800420b389:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b390:	00 00 00 
  800420b393:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420b399:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3a0:	00 00 00 
  800420b3a3:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420b3aa:	00 00 00 
  800420b3ad:	48 b8 6c d8 20 04 80 	movabs $0x800420d86c,%rax
  800420b3b4:	00 00 00 
  800420b3b7:	89 c2                	mov    %eax,%edx
  800420b3b9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3c0:	00 00 00 
  800420b3c3:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420b3ca:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3d1:	00 00 00 
  800420b3d4:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420b3db:	08 00 
  800420b3dd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3e4:	00 00 00 
  800420b3e7:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3ee:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b3f1:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b3f7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b3fe:	00 00 00 
  800420b401:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b408:	83 e2 07             	and    $0x7,%edx
  800420b40b:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b411:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b418:	00 00 00 
  800420b41b:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b422:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b425:	83 ca 0e             	or     $0xe,%edx
  800420b428:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b42e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b435:	00 00 00 
  800420b438:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b43f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b442:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b448:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b44f:	00 00 00 
  800420b452:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b459:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b45c:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b462:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b469:	00 00 00 
  800420b46c:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b473:	83 ca 80             	or     $0xffffff80,%edx
  800420b476:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b47c:	48 b8 6c d8 20 04 80 	movabs $0x800420d86c,%rax
  800420b483:	00 00 00 
  800420b486:	48 c1 e8 10          	shr    $0x10,%rax
  800420b48a:	89 c2                	mov    %eax,%edx
  800420b48c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b493:	00 00 00 
  800420b496:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420b49d:	48 b8 6c d8 20 04 80 	movabs $0x800420d86c,%rax
  800420b4a4:	00 00 00 
  800420b4a7:	48 c1 e8 20          	shr    $0x20,%rax
  800420b4ab:	89 c2                	mov    %eax,%edx
  800420b4ad:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b4b4:	00 00 00 
  800420b4b7:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420b4bd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b4c4:	00 00 00 
  800420b4c7:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420b4ce:	00 00 00 
  800420b4d1:	48 b8 72 d8 20 04 80 	movabs $0x800420d872,%rax
  800420b4d8:	00 00 00 
  800420b4db:	89 c2                	mov    %eax,%edx
  800420b4dd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b4e4:	00 00 00 
  800420b4e7:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420b4ee:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b4f5:	00 00 00 
  800420b4f8:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420b4ff:	08 00 
  800420b501:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b508:	00 00 00 
  800420b50b:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b512:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b515:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b51b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b522:	00 00 00 
  800420b525:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b52c:	83 e2 07             	and    $0x7,%edx
  800420b52f:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b535:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b53c:	00 00 00 
  800420b53f:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b546:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b549:	83 ca 0e             	or     $0xe,%edx
  800420b54c:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b552:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b559:	00 00 00 
  800420b55c:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b563:	83 e2 ef             	and    $0xffffffef,%edx
  800420b566:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b56c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b573:	00 00 00 
  800420b576:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b57d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b580:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b586:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b58d:	00 00 00 
  800420b590:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b597:	83 ca 80             	or     $0xffffff80,%edx
  800420b59a:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b5a0:	48 b8 72 d8 20 04 80 	movabs $0x800420d872,%rax
  800420b5a7:	00 00 00 
  800420b5aa:	48 c1 e8 10          	shr    $0x10,%rax
  800420b5ae:	89 c2                	mov    %eax,%edx
  800420b5b0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b5b7:	00 00 00 
  800420b5ba:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420b5c1:	48 b8 72 d8 20 04 80 	movabs $0x800420d872,%rax
  800420b5c8:	00 00 00 
  800420b5cb:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5cf:	89 c2                	mov    %eax,%edx
  800420b5d1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b5d8:	00 00 00 
  800420b5db:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420b5e1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b5e8:	00 00 00 
  800420b5eb:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420b5f2:	00 00 00 
  800420b5f5:	48 b8 78 d8 20 04 80 	movabs $0x800420d878,%rax
  800420b5fc:	00 00 00 
  800420b5ff:	89 c2                	mov    %eax,%edx
  800420b601:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b608:	00 00 00 
  800420b60b:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420b612:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b619:	00 00 00 
  800420b61c:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420b623:	08 00 
  800420b625:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b62c:	00 00 00 
  800420b62f:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b636:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b639:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b63f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b646:	00 00 00 
  800420b649:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b650:	83 e2 07             	and    $0x7,%edx
  800420b653:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b659:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b660:	00 00 00 
  800420b663:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b66a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b66d:	83 ca 0e             	or     $0xe,%edx
  800420b670:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b676:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b67d:	00 00 00 
  800420b680:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b687:	83 e2 ef             	and    $0xffffffef,%edx
  800420b68a:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b690:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b697:	00 00 00 
  800420b69a:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6a1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b6a4:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6aa:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b6b1:	00 00 00 
  800420b6b4:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6bb:	83 ca 80             	or     $0xffffff80,%edx
  800420b6be:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6c4:	48 b8 78 d8 20 04 80 	movabs $0x800420d878,%rax
  800420b6cb:	00 00 00 
  800420b6ce:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6d2:	89 c2                	mov    %eax,%edx
  800420b6d4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b6db:	00 00 00 
  800420b6de:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b6e5:	48 b8 78 d8 20 04 80 	movabs $0x800420d878,%rax
  800420b6ec:	00 00 00 
  800420b6ef:	48 c1 e8 20          	shr    $0x20,%rax
  800420b6f3:	89 c2                	mov    %eax,%edx
  800420b6f5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b6fc:	00 00 00 
  800420b6ff:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b705:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b70c:	00 00 00 
  800420b70f:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b716:	00 00 00 
  800420b719:	48 b8 7e d8 20 04 80 	movabs $0x800420d87e,%rax
  800420b720:	00 00 00 
  800420b723:	89 c2                	mov    %eax,%edx
  800420b725:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b72c:	00 00 00 
  800420b72f:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b736:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b73d:	00 00 00 
  800420b740:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b747:	08 00 
  800420b749:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b750:	00 00 00 
  800420b753:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b75a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b75d:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b763:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b76a:	00 00 00 
  800420b76d:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b774:	83 e2 07             	and    $0x7,%edx
  800420b777:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b77d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b784:	00 00 00 
  800420b787:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b78e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b791:	83 ca 0e             	or     $0xe,%edx
  800420b794:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b79a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b7a1:	00 00 00 
  800420b7a4:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7ab:	83 e2 ef             	and    $0xffffffef,%edx
  800420b7ae:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7b4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b7bb:	00 00 00 
  800420b7be:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7c5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b7c8:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7ce:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b7d5:	00 00 00 
  800420b7d8:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7df:	83 ca 80             	or     $0xffffff80,%edx
  800420b7e2:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7e8:	48 b8 7e d8 20 04 80 	movabs $0x800420d87e,%rax
  800420b7ef:	00 00 00 
  800420b7f2:	48 c1 e8 10          	shr    $0x10,%rax
  800420b7f6:	89 c2                	mov    %eax,%edx
  800420b7f8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b7ff:	00 00 00 
  800420b802:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b809:	48 b8 7e d8 20 04 80 	movabs $0x800420d87e,%rax
  800420b810:	00 00 00 
  800420b813:	48 c1 e8 20          	shr    $0x20,%rax
  800420b817:	89 c2                	mov    %eax,%edx
  800420b819:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b820:	00 00 00 
  800420b823:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b829:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b830:	00 00 00 
  800420b833:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b83a:	00 00 00 
  800420b83d:	48 b8 84 d8 20 04 80 	movabs $0x800420d884,%rax
  800420b844:	00 00 00 
  800420b847:	89 c2                	mov    %eax,%edx
  800420b849:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b850:	00 00 00 
  800420b853:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b85a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b861:	00 00 00 
  800420b864:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b86b:	08 00 
  800420b86d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b874:	00 00 00 
  800420b877:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b87e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b881:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b887:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b88e:	00 00 00 
  800420b891:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b898:	83 e2 07             	and    $0x7,%edx
  800420b89b:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b8a1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b8a8:	00 00 00 
  800420b8ab:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8b2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b8b5:	83 ca 0e             	or     $0xe,%edx
  800420b8b8:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8be:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b8c5:	00 00 00 
  800420b8c8:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8cf:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8d2:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8d8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b8df:	00 00 00 
  800420b8e2:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8e9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b8ec:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8f2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b8f9:	00 00 00 
  800420b8fc:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b903:	83 ca 80             	or     $0xffffff80,%edx
  800420b906:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b90c:	48 b8 84 d8 20 04 80 	movabs $0x800420d884,%rax
  800420b913:	00 00 00 
  800420b916:	48 c1 e8 10          	shr    $0x10,%rax
  800420b91a:	89 c2                	mov    %eax,%edx
  800420b91c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b923:	00 00 00 
  800420b926:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b92d:	48 b8 84 d8 20 04 80 	movabs $0x800420d884,%rax
  800420b934:	00 00 00 
  800420b937:	48 c1 e8 20          	shr    $0x20,%rax
  800420b93b:	89 c2                	mov    %eax,%edx
  800420b93d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b944:	00 00 00 
  800420b947:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b94d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b954:	00 00 00 
  800420b957:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b95e:	00 00 00 
  800420b961:	48 b8 8a d8 20 04 80 	movabs $0x800420d88a,%rax
  800420b968:	00 00 00 
  800420b96b:	89 c2                	mov    %eax,%edx
  800420b96d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b974:	00 00 00 
  800420b977:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b97e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b985:	00 00 00 
  800420b988:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b98f:	08 00 
  800420b991:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b998:	00 00 00 
  800420b99b:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9a2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b9a5:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9ab:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b9b2:	00 00 00 
  800420b9b5:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9bc:	83 e2 07             	and    $0x7,%edx
  800420b9bf:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9c5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b9cc:	00 00 00 
  800420b9cf:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9d6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9d9:	83 ca 0e             	or     $0xe,%edx
  800420b9dc:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9e2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420b9e9:	00 00 00 
  800420b9ec:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9f3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b9f6:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9fc:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba03:	00 00 00 
  800420ba06:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba0d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ba10:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba16:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba1d:	00 00 00 
  800420ba20:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba27:	83 ca 80             	or     $0xffffff80,%edx
  800420ba2a:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba30:	48 b8 8a d8 20 04 80 	movabs $0x800420d88a,%rax
  800420ba37:	00 00 00 
  800420ba3a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba3e:	89 c2                	mov    %eax,%edx
  800420ba40:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba47:	00 00 00 
  800420ba4a:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420ba51:	48 b8 8a d8 20 04 80 	movabs $0x800420d88a,%rax
  800420ba58:	00 00 00 
  800420ba5b:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba5f:	89 c2                	mov    %eax,%edx
  800420ba61:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba68:	00 00 00 
  800420ba6b:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420ba71:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba78:	00 00 00 
  800420ba7b:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420ba82:	00 00 00 
  800420ba85:	48 b8 90 d8 20 04 80 	movabs $0x800420d890,%rax
  800420ba8c:	00 00 00 
  800420ba8f:	89 c2                	mov    %eax,%edx
  800420ba91:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420ba98:	00 00 00 
  800420ba9b:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420baa2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420baa9:	00 00 00 
  800420baac:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420bab3:	08 00 
  800420bab5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420babc:	00 00 00 
  800420babf:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420bac6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bac9:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420bacf:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bad6:	00 00 00 
  800420bad9:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420bae0:	83 e2 07             	and    $0x7,%edx
  800420bae3:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420bae9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420baf0:	00 00 00 
  800420baf3:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bafa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bafd:	83 ca 0e             	or     $0xe,%edx
  800420bb00:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb06:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb0d:	00 00 00 
  800420bb10:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb17:	83 e2 ef             	and    $0xffffffef,%edx
  800420bb1a:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb20:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb27:	00 00 00 
  800420bb2a:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb31:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb34:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb3a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb41:	00 00 00 
  800420bb44:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb4b:	83 ca 80             	or     $0xffffff80,%edx
  800420bb4e:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb54:	48 b8 90 d8 20 04 80 	movabs $0x800420d890,%rax
  800420bb5b:	00 00 00 
  800420bb5e:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb62:	89 c2                	mov    %eax,%edx
  800420bb64:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb6b:	00 00 00 
  800420bb6e:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420bb75:	48 b8 90 d8 20 04 80 	movabs $0x800420d890,%rax
  800420bb7c:	00 00 00 
  800420bb7f:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb83:	89 c2                	mov    %eax,%edx
  800420bb85:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb8c:	00 00 00 
  800420bb8f:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420bb95:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bb9c:	00 00 00 
  800420bb9f:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420bba6:	00 00 00 
  800420bba9:	48 b8 96 d8 20 04 80 	movabs $0x800420d896,%rax
  800420bbb0:	00 00 00 
  800420bbb3:	89 c2                	mov    %eax,%edx
  800420bbb5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bbbc:	00 00 00 
  800420bbbf:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420bbc6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bbcd:	00 00 00 
  800420bbd0:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420bbd7:	08 00 
  800420bbd9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bbe0:	00 00 00 
  800420bbe3:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbea:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bbed:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bbf3:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bbfa:	00 00 00 
  800420bbfd:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bc04:	83 e2 07             	and    $0x7,%edx
  800420bc07:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bc0d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc14:	00 00 00 
  800420bc17:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc1e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc21:	83 ca 0e             	or     $0xe,%edx
  800420bc24:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc2a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc31:	00 00 00 
  800420bc34:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc3b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc3e:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc44:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc4b:	00 00 00 
  800420bc4e:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc55:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc58:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc5e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc65:	00 00 00 
  800420bc68:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc6f:	83 ca 80             	or     $0xffffff80,%edx
  800420bc72:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc78:	48 b8 96 d8 20 04 80 	movabs $0x800420d896,%rax
  800420bc7f:	00 00 00 
  800420bc82:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc86:	89 c2                	mov    %eax,%edx
  800420bc88:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bc8f:	00 00 00 
  800420bc92:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420bc99:	48 b8 96 d8 20 04 80 	movabs $0x800420d896,%rax
  800420bca0:	00 00 00 
  800420bca3:	48 c1 e8 20          	shr    $0x20,%rax
  800420bca7:	89 c2                	mov    %eax,%edx
  800420bca9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bcb0:	00 00 00 
  800420bcb3:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420bcb9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bcc0:	00 00 00 
  800420bcc3:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420bcca:	00 00 00 
  800420bccd:	48 b8 9c d8 20 04 80 	movabs $0x800420d89c,%rax
  800420bcd4:	00 00 00 
  800420bcd7:	89 c2                	mov    %eax,%edx
  800420bcd9:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bce0:	00 00 00 
  800420bce3:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420bcea:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bcf1:	00 00 00 
  800420bcf4:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420bcfb:	08 00 
  800420bcfd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd04:	00 00 00 
  800420bd07:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd0e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bd11:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd17:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd1e:	00 00 00 
  800420bd21:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd28:	83 e2 07             	and    $0x7,%edx
  800420bd2b:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd31:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd38:	00 00 00 
  800420bd3b:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd42:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd45:	83 ca 0e             	or     $0xe,%edx
  800420bd48:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd4e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd55:	00 00 00 
  800420bd58:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd5f:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd62:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd68:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd6f:	00 00 00 
  800420bd72:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd79:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bd7c:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd82:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bd89:	00 00 00 
  800420bd8c:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd93:	83 ca 80             	or     $0xffffff80,%edx
  800420bd96:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd9c:	48 b8 9c d8 20 04 80 	movabs $0x800420d89c,%rax
  800420bda3:	00 00 00 
  800420bda6:	48 c1 e8 10          	shr    $0x10,%rax
  800420bdaa:	89 c2                	mov    %eax,%edx
  800420bdac:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bdb3:	00 00 00 
  800420bdb6:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420bdbd:	48 b8 9c d8 20 04 80 	movabs $0x800420d89c,%rax
  800420bdc4:	00 00 00 
  800420bdc7:	48 c1 e8 20          	shr    $0x20,%rax
  800420bdcb:	89 c2                	mov    %eax,%edx
  800420bdcd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bdd4:	00 00 00 
  800420bdd7:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420bddd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bde4:	00 00 00 
  800420bde7:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420bdee:	00 00 00 
  800420bdf1:	48 b8 a2 d8 20 04 80 	movabs $0x800420d8a2,%rax
  800420bdf8:	00 00 00 
  800420bdfb:	89 c2                	mov    %eax,%edx
  800420bdfd:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be04:	00 00 00 
  800420be07:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420be0e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be15:	00 00 00 
  800420be18:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420be1f:	08 00 
  800420be21:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be28:	00 00 00 
  800420be2b:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be32:	83 e2 f8             	and    $0xfffffff8,%edx
  800420be35:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be3b:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be42:	00 00 00 
  800420be45:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be4c:	83 e2 07             	and    $0x7,%edx
  800420be4f:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be55:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be5c:	00 00 00 
  800420be5f:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be66:	83 e2 f0             	and    $0xfffffff0,%edx
  800420be69:	83 ca 0e             	or     $0xe,%edx
  800420be6c:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be72:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be79:	00 00 00 
  800420be7c:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be83:	83 e2 ef             	and    $0xffffffef,%edx
  800420be86:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be8c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420be93:	00 00 00 
  800420be96:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be9d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bea0:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420bea6:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bead:	00 00 00 
  800420beb0:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420beb7:	83 ca 80             	or     $0xffffff80,%edx
  800420beba:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420bec0:	48 b8 a2 d8 20 04 80 	movabs $0x800420d8a2,%rax
  800420bec7:	00 00 00 
  800420beca:	48 c1 e8 10          	shr    $0x10,%rax
  800420bece:	89 c2                	mov    %eax,%edx
  800420bed0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bed7:	00 00 00 
  800420beda:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420bee1:	48 b8 a2 d8 20 04 80 	movabs $0x800420d8a2,%rax
  800420bee8:	00 00 00 
  800420beeb:	48 c1 e8 20          	shr    $0x20,%rax
  800420beef:	89 c2                	mov    %eax,%edx
  800420bef1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bef8:	00 00 00 
  800420befb:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420bf01:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf08:	00 00 00 
  800420bf0b:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420bf12:	00 00 00 
  800420bf15:	48 b8 a8 d8 20 04 80 	movabs $0x800420d8a8,%rax
  800420bf1c:	00 00 00 
  800420bf1f:	89 c2                	mov    %eax,%edx
  800420bf21:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf28:	00 00 00 
  800420bf2b:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420bf32:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf39:	00 00 00 
  800420bf3c:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420bf43:	08 00 
  800420bf45:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf4c:	00 00 00 
  800420bf4f:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf56:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bf59:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf5f:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf66:	00 00 00 
  800420bf69:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf70:	83 e2 07             	and    $0x7,%edx
  800420bf73:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf79:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf80:	00 00 00 
  800420bf83:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf8a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf8d:	83 ca 0e             	or     $0xe,%edx
  800420bf90:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf96:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bf9d:	00 00 00 
  800420bfa0:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfa7:	83 e2 ef             	and    $0xffffffef,%edx
  800420bfaa:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfb0:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bfb7:	00 00 00 
  800420bfba:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfc1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bfc4:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfca:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bfd1:	00 00 00 
  800420bfd4:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfdb:	83 ca 80             	or     $0xffffff80,%edx
  800420bfde:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfe4:	48 b8 a8 d8 20 04 80 	movabs $0x800420d8a8,%rax
  800420bfeb:	00 00 00 
  800420bfee:	48 c1 e8 10          	shr    $0x10,%rax
  800420bff2:	89 c2                	mov    %eax,%edx
  800420bff4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420bffb:	00 00 00 
  800420bffe:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420c005:	48 b8 a8 d8 20 04 80 	movabs $0x800420d8a8,%rax
  800420c00c:	00 00 00 
  800420c00f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c013:	89 c2                	mov    %eax,%edx
  800420c015:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c01c:	00 00 00 
  800420c01f:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420c025:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c02c:	00 00 00 
  800420c02f:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420c036:	00 00 00 
  800420c039:	48 b8 ae d8 20 04 80 	movabs $0x800420d8ae,%rax
  800420c040:	00 00 00 
  800420c043:	89 c2                	mov    %eax,%edx
  800420c045:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c04c:	00 00 00 
  800420c04f:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420c056:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c05d:	00 00 00 
  800420c060:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420c067:	08 00 
  800420c069:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c070:	00 00 00 
  800420c073:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c07a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c07d:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c083:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c08a:	00 00 00 
  800420c08d:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c094:	83 e2 07             	and    $0x7,%edx
  800420c097:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c09d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c0a4:	00 00 00 
  800420c0a7:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c0b1:	83 ca 0e             	or     $0xe,%edx
  800420c0b4:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0ba:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c0c1:	00 00 00 
  800420c0c4:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0cb:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0ce:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0d4:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c0db:	00 00 00 
  800420c0de:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0e5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c0e8:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0ee:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c0f5:	00 00 00 
  800420c0f8:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0ff:	83 ca 80             	or     $0xffffff80,%edx
  800420c102:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c108:	48 b8 ae d8 20 04 80 	movabs $0x800420d8ae,%rax
  800420c10f:	00 00 00 
  800420c112:	48 c1 e8 10          	shr    $0x10,%rax
  800420c116:	89 c2                	mov    %eax,%edx
  800420c118:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c11f:	00 00 00 
  800420c122:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420c129:	48 b8 ae d8 20 04 80 	movabs $0x800420d8ae,%rax
  800420c130:	00 00 00 
  800420c133:	48 c1 e8 20          	shr    $0x20,%rax
  800420c137:	89 c2                	mov    %eax,%edx
  800420c139:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c140:	00 00 00 
  800420c143:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420c149:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c150:	00 00 00 
  800420c153:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420c15a:	00 00 00 
  800420c15d:	48 b8 b4 d8 20 04 80 	movabs $0x800420d8b4,%rax
  800420c164:	00 00 00 
  800420c167:	89 c2                	mov    %eax,%edx
  800420c169:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c170:	00 00 00 
  800420c173:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420c17a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c181:	00 00 00 
  800420c184:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420c18b:	08 00 
  800420c18d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c194:	00 00 00 
  800420c197:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c19e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c1a1:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1a7:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c1ae:	00 00 00 
  800420c1b1:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c1b8:	83 e2 07             	and    $0x7,%edx
  800420c1bb:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1c1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c1c8:	00 00 00 
  800420c1cb:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1d2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c1d5:	83 ca 0e             	or     $0xe,%edx
  800420c1d8:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1de:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c1e5:	00 00 00 
  800420c1e8:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1ef:	83 e2 ef             	and    $0xffffffef,%edx
  800420c1f2:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1f8:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c1ff:	00 00 00 
  800420c202:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c209:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c20c:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c212:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c219:	00 00 00 
  800420c21c:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c223:	83 ca 80             	or     $0xffffff80,%edx
  800420c226:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c22c:	48 b8 b4 d8 20 04 80 	movabs $0x800420d8b4,%rax
  800420c233:	00 00 00 
  800420c236:	48 c1 e8 10          	shr    $0x10,%rax
  800420c23a:	89 c2                	mov    %eax,%edx
  800420c23c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c243:	00 00 00 
  800420c246:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420c24d:	48 b8 b4 d8 20 04 80 	movabs $0x800420d8b4,%rax
  800420c254:	00 00 00 
  800420c257:	48 c1 e8 20          	shr    $0x20,%rax
  800420c25b:	89 c2                	mov    %eax,%edx
  800420c25d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c264:	00 00 00 
  800420c267:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420c26d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c274:	00 00 00 
  800420c277:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420c27e:	00 00 00 
  800420c281:	48 b8 ba d8 20 04 80 	movabs $0x800420d8ba,%rax
  800420c288:	00 00 00 
  800420c28b:	89 c2                	mov    %eax,%edx
  800420c28d:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c294:	00 00 00 
  800420c297:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420c29e:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c2a5:	00 00 00 
  800420c2a8:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420c2af:	08 00 
  800420c2b1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c2b8:	00 00 00 
  800420c2bb:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2c2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c2c5:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2cb:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c2d2:	00 00 00 
  800420c2d5:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2dc:	83 e2 07             	and    $0x7,%edx
  800420c2df:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2e5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c2ec:	00 00 00 
  800420c2ef:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c2f6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c2f9:	83 ca 0e             	or     $0xe,%edx
  800420c2fc:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c302:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c309:	00 00 00 
  800420c30c:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c313:	83 e2 ef             	and    $0xffffffef,%edx
  800420c316:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c31c:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c323:	00 00 00 
  800420c326:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c32d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c330:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c336:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c33d:	00 00 00 
  800420c340:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c347:	83 ca 80             	or     $0xffffff80,%edx
  800420c34a:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c350:	48 b8 ba d8 20 04 80 	movabs $0x800420d8ba,%rax
  800420c357:	00 00 00 
  800420c35a:	48 c1 e8 10          	shr    $0x10,%rax
  800420c35e:	89 c2                	mov    %eax,%edx
  800420c360:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c367:	00 00 00 
  800420c36a:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420c371:	48 b8 ba d8 20 04 80 	movabs $0x800420d8ba,%rax
  800420c378:	00 00 00 
  800420c37b:	48 c1 e8 20          	shr    $0x20,%rax
  800420c37f:	89 c2                	mov    %eax,%edx
  800420c381:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c388:	00 00 00 
  800420c38b:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420c391:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c398:	00 00 00 
  800420c39b:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420c3a2:	00 00 00 
  800420c3a5:	48 b8 c0 d8 20 04 80 	movabs $0x800420d8c0,%rax
  800420c3ac:	00 00 00 
  800420c3af:	89 c2                	mov    %eax,%edx
  800420c3b1:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c3b8:	00 00 00 
  800420c3bb:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420c3c2:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c3c9:	00 00 00 
  800420c3cc:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420c3d3:	08 00 
  800420c3d5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c3dc:	00 00 00 
  800420c3df:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3e6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c3e9:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3ef:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c3f6:	00 00 00 
  800420c3f9:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c400:	83 e2 07             	and    $0x7,%edx
  800420c403:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c409:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c410:	00 00 00 
  800420c413:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c41a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c41d:	83 ca 0e             	or     $0xe,%edx
  800420c420:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c426:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c42d:	00 00 00 
  800420c430:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c437:	83 e2 ef             	and    $0xffffffef,%edx
  800420c43a:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c440:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c447:	00 00 00 
  800420c44a:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c451:	83 ca 60             	or     $0x60,%edx
  800420c454:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c45a:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c461:	00 00 00 
  800420c464:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c46b:	83 ca 80             	or     $0xffffff80,%edx
  800420c46e:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c474:	48 b8 c0 d8 20 04 80 	movabs $0x800420d8c0,%rax
  800420c47b:	00 00 00 
  800420c47e:	48 c1 e8 10          	shr    $0x10,%rax
  800420c482:	89 c2                	mov    %eax,%edx
  800420c484:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c48b:	00 00 00 
  800420c48e:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420c495:	48 b8 c0 d8 20 04 80 	movabs $0x800420d8c0,%rax
  800420c49c:	00 00 00 
  800420c49f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c4a3:	89 c2                	mov    %eax,%edx
  800420c4a5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c4ac:	00 00 00 
  800420c4af:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420c4b5:	48 b8 80 c2 4d 04 80 	movabs $0x80044dc280,%rax
  800420c4bc:	00 00 00 
  800420c4bf:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420c4c6:	00 00 00 
  800420c4c9:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c4d0:	00 00 00 
  800420c4d3:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420c4d8:	48 ba 80 c2 4d 04 80 	movabs $0x80044dc280,%rdx
  800420c4df:	00 00 00 
  800420c4e2:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c4e9:	00 00 00 
  800420c4ec:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420c4f0:	48 b8 fe c4 20 04 80 	movabs $0x800420c4fe,%rax
  800420c4f7:	00 00 00 
  800420c4fa:	ff d0                	callq  *%rax
  800420c4fc:	c9                   	leaveq 
  800420c4fd:	c3                   	retq   

000000800420c4fe <trap_init_percpu>:
  800420c4fe:	55                   	push   %rbp
  800420c4ff:	48 89 e5             	mov    %rsp,%rbp
  800420c502:	53                   	push   %rbx
  800420c503:	48 83 ec 18          	sub    $0x18,%rsp
  800420c507:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c50e:	00 00 00 
  800420c511:	ff d0                	callq  *%rax
  800420c513:	01 c0                	add    %eax,%eax
  800420c515:	83 c0 05             	add    $0x5,%eax
  800420c518:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420c51b:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c522:	00 00 00 
  800420c525:	ff d0                	callq  *%rax
  800420c527:	89 c3                	mov    %eax,%ebx
  800420c529:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c530:	00 00 00 
  800420c533:	ff d0                	callq  *%rax
  800420c535:	89 c2                	mov    %eax,%edx
  800420c537:	89 d0                	mov    %edx,%eax
  800420c539:	01 c0                	add    %eax,%eax
  800420c53b:	01 d0                	add    %edx,%eax
  800420c53d:	c1 e0 0f             	shl    $0xf,%eax
  800420c540:	48 98                	cltq   
  800420c542:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420c549:	00 00 00 
  800420c54c:	48 29 c2             	sub    %rax,%rdx
  800420c54f:	48 89 d0             	mov    %rdx,%rax
  800420c552:	48 89 c2             	mov    %rax,%rdx
  800420c555:	48 b9 20 d0 6d 04 80 	movabs $0x80046dd020,%rcx
  800420c55c:	00 00 00 
  800420c55f:	48 63 c3             	movslq %ebx,%rax
  800420c562:	48 c1 e0 03          	shl    $0x3,%rax
  800420c566:	48 89 c6             	mov    %rax,%rsi
  800420c569:	48 c1 e6 04          	shl    $0x4,%rsi
  800420c56d:	48 01 f0             	add    %rsi,%rax
  800420c570:	48 01 c8             	add    %rcx,%rax
  800420c573:	48 83 c0 10          	add    $0x10,%rax
  800420c577:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420c57b:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c582:	00 00 00 
  800420c585:	48 8b 00             	mov    (%rax),%rax
  800420c588:	48 c1 f8 10          	sar    $0x10,%rax
  800420c58c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c590:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c597:	00 00 00 
  800420c59a:	ff d0                	callq  *%rax
  800420c59c:	c1 e0 04             	shl    $0x4,%eax
  800420c59f:	48 98                	cltq   
  800420c5a1:	48 01 d8             	add    %rbx,%rax
  800420c5a4:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420c5a9:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c5b0:	00 00 00 
  800420c5b3:	48 8b 00             	mov    (%rax),%rax
  800420c5b6:	48 c1 f8 10          	sar    $0x10,%rax
  800420c5ba:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c5be:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c5c5:	00 00 00 
  800420c5c8:	ff d0                	callq  *%rax
  800420c5ca:	c1 e0 04             	shl    $0x4,%eax
  800420c5cd:	48 98                	cltq   
  800420c5cf:	48 01 d8             	add    %rbx,%rax
  800420c5d2:	48 89 c3             	mov    %rax,%rbx
  800420c5d5:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c5dc:	00 00 00 
  800420c5df:	ff d0                	callq  *%rax
  800420c5e1:	48 98                	cltq   
  800420c5e3:	48 c1 e0 03          	shl    $0x3,%rax
  800420c5e7:	48 89 c2             	mov    %rax,%rdx
  800420c5ea:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c5ee:	48 01 d0             	add    %rdx,%rax
  800420c5f1:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c5f5:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800420c5fc:	00 00 00 
  800420c5ff:	48 01 d0             	add    %rdx,%rax
  800420c602:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420c606:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c60d:	00 00 00 
  800420c610:	48 8b 00             	mov    (%rax),%rax
  800420c613:	48 c1 f8 10          	sar    $0x10,%rax
  800420c617:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c61b:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c622:	00 00 00 
  800420c625:	ff d0                	callq  *%rax
  800420c627:	c1 e0 04             	shl    $0x4,%eax
  800420c62a:	48 98                	cltq   
  800420c62c:	48 01 d8             	add    %rbx,%rax
  800420c62f:	48 89 c3             	mov    %rax,%rbx
  800420c632:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c639:	00 00 00 
  800420c63c:	ff d0                	callq  *%rax
  800420c63e:	48 98                	cltq   
  800420c640:	48 c1 e0 03          	shl    $0x3,%rax
  800420c644:	48 89 c2             	mov    %rax,%rdx
  800420c647:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c64b:	48 01 d0             	add    %rdx,%rax
  800420c64e:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c652:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800420c659:	00 00 00 
  800420c65c:	48 01 d0             	add    %rdx,%rax
  800420c65f:	48 c1 e8 10          	shr    $0x10,%rax
  800420c663:	88 43 04             	mov    %al,0x4(%rbx)
  800420c666:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c66d:	00 00 00 
  800420c670:	48 8b 00             	mov    (%rax),%rax
  800420c673:	48 c1 f8 10          	sar    $0x10,%rax
  800420c677:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c67b:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c682:	00 00 00 
  800420c685:	ff d0                	callq  *%rax
  800420c687:	c1 e0 04             	shl    $0x4,%eax
  800420c68a:	48 98                	cltq   
  800420c68c:	48 01 d8             	add    %rbx,%rax
  800420c68f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c693:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c696:	83 ca 09             	or     $0x9,%edx
  800420c699:	88 50 05             	mov    %dl,0x5(%rax)
  800420c69c:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c6a3:	00 00 00 
  800420c6a6:	48 8b 00             	mov    (%rax),%rax
  800420c6a9:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6ad:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6b1:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c6b8:	00 00 00 
  800420c6bb:	ff d0                	callq  *%rax
  800420c6bd:	c1 e0 04             	shl    $0x4,%eax
  800420c6c0:	48 98                	cltq   
  800420c6c2:	48 01 d8             	add    %rbx,%rax
  800420c6c5:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6c9:	83 e2 ef             	and    $0xffffffef,%edx
  800420c6cc:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6cf:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c6d6:	00 00 00 
  800420c6d9:	48 8b 00             	mov    (%rax),%rax
  800420c6dc:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6e0:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6e4:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c6eb:	00 00 00 
  800420c6ee:	ff d0                	callq  *%rax
  800420c6f0:	c1 e0 04             	shl    $0x4,%eax
  800420c6f3:	48 98                	cltq   
  800420c6f5:	48 01 d8             	add    %rbx,%rax
  800420c6f8:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6fc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c6ff:	88 50 05             	mov    %dl,0x5(%rax)
  800420c702:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c709:	00 00 00 
  800420c70c:	48 8b 00             	mov    (%rax),%rax
  800420c70f:	48 c1 f8 10          	sar    $0x10,%rax
  800420c713:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c717:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c71e:	00 00 00 
  800420c721:	ff d0                	callq  *%rax
  800420c723:	c1 e0 04             	shl    $0x4,%eax
  800420c726:	48 98                	cltq   
  800420c728:	48 01 d8             	add    %rbx,%rax
  800420c72b:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c72f:	83 ca 80             	or     $0xffffff80,%edx
  800420c732:	88 50 05             	mov    %dl,0x5(%rax)
  800420c735:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c73c:	00 00 00 
  800420c73f:	48 8b 00             	mov    (%rax),%rax
  800420c742:	48 c1 f8 10          	sar    $0x10,%rax
  800420c746:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c74a:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c751:	00 00 00 
  800420c754:	ff d0                	callq  *%rax
  800420c756:	c1 e0 04             	shl    $0x4,%eax
  800420c759:	48 98                	cltq   
  800420c75b:	48 01 d8             	add    %rbx,%rax
  800420c75e:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c762:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c765:	88 50 06             	mov    %dl,0x6(%rax)
  800420c768:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c76f:	00 00 00 
  800420c772:	48 8b 00             	mov    (%rax),%rax
  800420c775:	48 c1 f8 10          	sar    $0x10,%rax
  800420c779:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c77d:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c784:	00 00 00 
  800420c787:	ff d0                	callq  *%rax
  800420c789:	c1 e0 04             	shl    $0x4,%eax
  800420c78c:	48 98                	cltq   
  800420c78e:	48 01 d8             	add    %rbx,%rax
  800420c791:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c795:	83 e2 ef             	and    $0xffffffef,%edx
  800420c798:	88 50 06             	mov    %dl,0x6(%rax)
  800420c79b:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c7a2:	00 00 00 
  800420c7a5:	48 8b 00             	mov    (%rax),%rax
  800420c7a8:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7ac:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7b0:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c7b7:	00 00 00 
  800420c7ba:	ff d0                	callq  *%rax
  800420c7bc:	c1 e0 04             	shl    $0x4,%eax
  800420c7bf:	48 98                	cltq   
  800420c7c1:	48 01 d8             	add    %rbx,%rax
  800420c7c4:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7c8:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c7cb:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7ce:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c7d5:	00 00 00 
  800420c7d8:	48 8b 00             	mov    (%rax),%rax
  800420c7db:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7df:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7e3:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c7ea:	00 00 00 
  800420c7ed:	ff d0                	callq  *%rax
  800420c7ef:	c1 e0 04             	shl    $0x4,%eax
  800420c7f2:	48 98                	cltq   
  800420c7f4:	48 01 d8             	add    %rbx,%rax
  800420c7f7:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7fb:	83 e2 7f             	and    $0x7f,%edx
  800420c7fe:	88 50 06             	mov    %dl,0x6(%rax)
  800420c801:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c808:	00 00 00 
  800420c80b:	48 8b 00             	mov    (%rax),%rax
  800420c80e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c812:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c816:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c81d:	00 00 00 
  800420c820:	ff d0                	callq  *%rax
  800420c822:	c1 e0 04             	shl    $0x4,%eax
  800420c825:	48 98                	cltq   
  800420c827:	48 01 d8             	add    %rbx,%rax
  800420c82a:	48 89 c3             	mov    %rax,%rbx
  800420c82d:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c834:	00 00 00 
  800420c837:	ff d0                	callq  *%rax
  800420c839:	48 98                	cltq   
  800420c83b:	48 c1 e0 03          	shl    $0x3,%rax
  800420c83f:	48 89 c2             	mov    %rax,%rdx
  800420c842:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c846:	48 01 d0             	add    %rdx,%rax
  800420c849:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c84d:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800420c854:	00 00 00 
  800420c857:	48 01 d0             	add    %rdx,%rax
  800420c85a:	48 c1 e8 18          	shr    $0x18,%rax
  800420c85e:	88 43 07             	mov    %al,0x7(%rbx)
  800420c861:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c868:	00 00 00 
  800420c86b:	48 8b 00             	mov    (%rax),%rax
  800420c86e:	48 c1 f8 10          	sar    $0x10,%rax
  800420c872:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c876:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c87d:	00 00 00 
  800420c880:	ff d0                	callq  *%rax
  800420c882:	c1 e0 04             	shl    $0x4,%eax
  800420c885:	48 98                	cltq   
  800420c887:	48 01 d8             	add    %rbx,%rax
  800420c88a:	48 89 c3             	mov    %rax,%rbx
  800420c88d:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c894:	00 00 00 
  800420c897:	ff d0                	callq  *%rax
  800420c899:	48 98                	cltq   
  800420c89b:	48 c1 e0 03          	shl    $0x3,%rax
  800420c89f:	48 89 c2             	mov    %rax,%rdx
  800420c8a2:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c8a6:	48 01 d0             	add    %rdx,%rax
  800420c8a9:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c8ad:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800420c8b4:	00 00 00 
  800420c8b7:	48 01 d0             	add    %rdx,%rax
  800420c8ba:	48 c1 e8 20          	shr    $0x20,%rax
  800420c8be:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c8c1:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c8c8:	00 00 00 
  800420c8cb:	48 8b 00             	mov    (%rax),%rax
  800420c8ce:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8d2:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8d6:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c8dd:	00 00 00 
  800420c8e0:	ff d0                	callq  *%rax
  800420c8e2:	c1 e0 04             	shl    $0x4,%eax
  800420c8e5:	48 98                	cltq   
  800420c8e7:	48 01 d8             	add    %rbx,%rax
  800420c8ea:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c8ee:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c8f5:	00 00 00 
  800420c8f8:	48 8b 00             	mov    (%rax),%rax
  800420c8fb:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8ff:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c903:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c90a:	00 00 00 
  800420c90d:	ff d0                	callq  *%rax
  800420c90f:	c1 e0 04             	shl    $0x4,%eax
  800420c912:	48 98                	cltq   
  800420c914:	48 01 d8             	add    %rbx,%rax
  800420c917:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c91b:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c922:	00 00 00 
  800420c925:	48 8b 00             	mov    (%rax),%rax
  800420c928:	48 c1 f8 10          	sar    $0x10,%rax
  800420c92c:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c930:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c937:	00 00 00 
  800420c93a:	ff d0                	callq  *%rax
  800420c93c:	c1 e0 04             	shl    $0x4,%eax
  800420c93f:	48 98                	cltq   
  800420c941:	48 01 d8             	add    %rbx,%rax
  800420c944:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c94a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c94d:	c1 e0 03             	shl    $0x3,%eax
  800420c950:	0f b7 c0             	movzwl %ax,%eax
  800420c953:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c957:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c95b:	0f 00 d8             	ltr    %ax
  800420c95e:	48 b8 80 d2 4d 04 80 	movabs $0x80044dd280,%rax
  800420c965:	00 00 00 
  800420c968:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c96c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c970:	0f 01 18             	lidt   (%rax)
  800420c973:	48 83 c4 18          	add    $0x18,%rsp
  800420c977:	5b                   	pop    %rbx
  800420c978:	5d                   	pop    %rbp
  800420c979:	c3                   	retq   

000000800420c97a <print_trapframe>:
  800420c97a:	55                   	push   %rbp
  800420c97b:	48 89 e5             	mov    %rsp,%rbp
  800420c97e:	48 83 ec 20          	sub    $0x20,%rsp
  800420c982:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c986:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420c98d:	00 00 00 
  800420c990:	ff d0                	callq  *%rax
  800420c992:	89 c2                	mov    %eax,%edx
  800420c994:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c998:	48 89 c6             	mov    %rax,%rsi
  800420c99b:	48 bf 6e f2 21 04 80 	movabs $0x800421f26e,%rdi
  800420c9a2:	00 00 00 
  800420c9a5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9aa:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420c9b1:	00 00 00 
  800420c9b4:	ff d1                	callq  *%rcx
  800420c9b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9ba:	48 89 c7             	mov    %rax,%rdi
  800420c9bd:	48 b8 8b cc 20 04 80 	movabs $0x800420cc8b,%rax
  800420c9c4:	00 00 00 
  800420c9c7:	ff d0                	callq  *%rax
  800420c9c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9cd:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c9d1:	0f b7 c0             	movzwl %ax,%eax
  800420c9d4:	89 c6                	mov    %eax,%esi
  800420c9d6:	48 bf 8c f2 21 04 80 	movabs $0x800421f28c,%rdi
  800420c9dd:	00 00 00 
  800420c9e0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9e5:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420c9ec:	00 00 00 
  800420c9ef:	ff d2                	callq  *%rdx
  800420c9f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9f5:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c9fc:	0f b7 c0             	movzwl %ax,%eax
  800420c9ff:	89 c6                	mov    %eax,%esi
  800420ca01:	48 bf 9f f2 21 04 80 	movabs $0x800421f29f,%rdi
  800420ca08:	00 00 00 
  800420ca0b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca10:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ca17:	00 00 00 
  800420ca1a:	ff d2                	callq  *%rdx
  800420ca1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca20:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca27:	89 c7                	mov    %eax,%edi
  800420ca29:	48 b8 9c 9d 20 04 80 	movabs $0x8004209d9c,%rax
  800420ca30:	00 00 00 
  800420ca33:	ff d0                	callq  *%rax
  800420ca35:	48 89 c2             	mov    %rax,%rdx
  800420ca38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca3c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca43:	48 89 c6             	mov    %rax,%rsi
  800420ca46:	48 bf b2 f2 21 04 80 	movabs $0x800421f2b2,%rdi
  800420ca4d:	00 00 00 
  800420ca50:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca55:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420ca5c:	00 00 00 
  800420ca5f:	ff d1                	callq  *%rcx
  800420ca61:	48 b8 90 d2 4d 04 80 	movabs $0x80044dd290,%rax
  800420ca68:	00 00 00 
  800420ca6b:	48 8b 00             	mov    (%rax),%rax
  800420ca6e:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420ca72:	75 3a                	jne    800420caae <print_trapframe+0x134>
  800420ca74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca78:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca7f:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ca83:	75 29                	jne    800420caae <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420ca85:	0f 20 d0             	mov    %cr2,%rax
  800420ca88:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420ca8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca90:	48 89 c6             	mov    %rax,%rsi
  800420ca93:	48 bf c4 f2 21 04 80 	movabs $0x800421f2c4,%rdi
  800420ca9a:	00 00 00 
  800420ca9d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420caa2:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420caa9:	00 00 00 
  800420caac:	ff d2                	callq  *%rdx
  800420caae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cab2:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cab9:	48 89 c6             	mov    %rax,%rsi
  800420cabc:	48 bf d3 f2 21 04 80 	movabs $0x800421f2d3,%rdi
  800420cac3:	00 00 00 
  800420cac6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cacb:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cad2:	00 00 00 
  800420cad5:	ff d2                	callq  *%rdx
  800420cad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cadb:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cae2:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cae6:	0f 85 9c 00 00 00    	jne    800420cb88 <print_trapframe+0x20e>
  800420caec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420caf0:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caf7:	83 e0 01             	and    $0x1,%eax
  800420cafa:	48 85 c0             	test   %rax,%rax
  800420cafd:	74 0c                	je     800420cb0b <print_trapframe+0x191>
  800420caff:	48 b9 e1 f2 21 04 80 	movabs $0x800421f2e1,%rcx
  800420cb06:	00 00 00 
  800420cb09:	eb 0a                	jmp    800420cb15 <print_trapframe+0x19b>
  800420cb0b:	48 b9 ec f2 21 04 80 	movabs $0x800421f2ec,%rcx
  800420cb12:	00 00 00 
  800420cb15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb19:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb20:	83 e0 02             	and    $0x2,%eax
  800420cb23:	48 85 c0             	test   %rax,%rax
  800420cb26:	74 0c                	je     800420cb34 <print_trapframe+0x1ba>
  800420cb28:	48 ba f8 f2 21 04 80 	movabs $0x800421f2f8,%rdx
  800420cb2f:	00 00 00 
  800420cb32:	eb 0a                	jmp    800420cb3e <print_trapframe+0x1c4>
  800420cb34:	48 ba fe f2 21 04 80 	movabs $0x800421f2fe,%rdx
  800420cb3b:	00 00 00 
  800420cb3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb42:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb49:	83 e0 04             	and    $0x4,%eax
  800420cb4c:	48 85 c0             	test   %rax,%rax
  800420cb4f:	74 0c                	je     800420cb5d <print_trapframe+0x1e3>
  800420cb51:	48 b8 03 f3 21 04 80 	movabs $0x800421f303,%rax
  800420cb58:	00 00 00 
  800420cb5b:	eb 0a                	jmp    800420cb67 <print_trapframe+0x1ed>
  800420cb5d:	48 b8 08 f3 21 04 80 	movabs $0x800421f308,%rax
  800420cb64:	00 00 00 
  800420cb67:	48 89 c6             	mov    %rax,%rsi
  800420cb6a:	48 bf 0f f3 21 04 80 	movabs $0x800421f30f,%rdi
  800420cb71:	00 00 00 
  800420cb74:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb79:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800420cb80:	00 00 00 
  800420cb83:	41 ff d0             	callq  *%r8
  800420cb86:	eb 1b                	jmp    800420cba3 <print_trapframe+0x229>
  800420cb88:	48 bf 1e f3 21 04 80 	movabs $0x800421f31e,%rdi
  800420cb8f:	00 00 00 
  800420cb92:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb97:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cb9e:	00 00 00 
  800420cba1:	ff d2                	callq  *%rdx
  800420cba3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cba7:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420cbae:	48 89 c6             	mov    %rax,%rsi
  800420cbb1:	48 bf 20 f3 21 04 80 	movabs $0x800421f320,%rdi
  800420cbb8:	00 00 00 
  800420cbbb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbc0:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cbc7:	00 00 00 
  800420cbca:	ff d2                	callq  *%rdx
  800420cbcc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbd0:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cbd7:	0f b7 c0             	movzwl %ax,%eax
  800420cbda:	89 c6                	mov    %eax,%esi
  800420cbdc:	48 bf 2f f3 21 04 80 	movabs $0x800421f32f,%rdi
  800420cbe3:	00 00 00 
  800420cbe6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbeb:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cbf2:	00 00 00 
  800420cbf5:	ff d2                	callq  *%rdx
  800420cbf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbfb:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420cc02:	48 89 c6             	mov    %rax,%rsi
  800420cc05:	48 bf 42 f3 21 04 80 	movabs $0x800421f342,%rdi
  800420cc0c:	00 00 00 
  800420cc0f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc14:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cc1b:	00 00 00 
  800420cc1e:	ff d2                	callq  *%rdx
  800420cc20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc24:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cc2b:	0f b7 c0             	movzwl %ax,%eax
  800420cc2e:	83 e0 03             	and    $0x3,%eax
  800420cc31:	85 c0                	test   %eax,%eax
  800420cc33:	74 54                	je     800420cc89 <print_trapframe+0x30f>
  800420cc35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc39:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cc40:	48 89 c6             	mov    %rax,%rsi
  800420cc43:	48 bf 51 f3 21 04 80 	movabs $0x800421f351,%rdi
  800420cc4a:	00 00 00 
  800420cc4d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc52:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cc59:	00 00 00 
  800420cc5c:	ff d2                	callq  *%rdx
  800420cc5e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc62:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420cc69:	0f b7 c0             	movzwl %ax,%eax
  800420cc6c:	89 c6                	mov    %eax,%esi
  800420cc6e:	48 bf 60 f3 21 04 80 	movabs $0x800421f360,%rdi
  800420cc75:	00 00 00 
  800420cc78:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc7d:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cc84:	00 00 00 
  800420cc87:	ff d2                	callq  *%rdx
  800420cc89:	c9                   	leaveq 
  800420cc8a:	c3                   	retq   

000000800420cc8b <print_regs>:
  800420cc8b:	55                   	push   %rbp
  800420cc8c:	48 89 e5             	mov    %rsp,%rbp
  800420cc8f:	48 83 ec 10          	sub    $0x10,%rsp
  800420cc93:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cc97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc9b:	48 8b 00             	mov    (%rax),%rax
  800420cc9e:	48 89 c6             	mov    %rax,%rsi
  800420cca1:	48 bf 73 f3 21 04 80 	movabs $0x800421f373,%rdi
  800420cca8:	00 00 00 
  800420ccab:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccb0:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ccb7:	00 00 00 
  800420ccba:	ff d2                	callq  *%rdx
  800420ccbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccc0:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420ccc4:	48 89 c6             	mov    %rax,%rsi
  800420ccc7:	48 bf 82 f3 21 04 80 	movabs $0x800421f382,%rdi
  800420ccce:	00 00 00 
  800420ccd1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccd6:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ccdd:	00 00 00 
  800420cce0:	ff d2                	callq  *%rdx
  800420cce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cce6:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420ccea:	48 89 c6             	mov    %rax,%rsi
  800420cced:	48 bf 91 f3 21 04 80 	movabs $0x800421f391,%rdi
  800420ccf4:	00 00 00 
  800420ccf7:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccfc:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd03:	00 00 00 
  800420cd06:	ff d2                	callq  *%rdx
  800420cd08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd0c:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cd10:	48 89 c6             	mov    %rax,%rsi
  800420cd13:	48 bf a0 f3 21 04 80 	movabs $0x800421f3a0,%rdi
  800420cd1a:	00 00 00 
  800420cd1d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd22:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd29:	00 00 00 
  800420cd2c:	ff d2                	callq  *%rdx
  800420cd2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd32:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420cd36:	48 89 c6             	mov    %rax,%rsi
  800420cd39:	48 bf af f3 21 04 80 	movabs $0x800421f3af,%rdi
  800420cd40:	00 00 00 
  800420cd43:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd48:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd4f:	00 00 00 
  800420cd52:	ff d2                	callq  *%rdx
  800420cd54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd58:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420cd5c:	48 89 c6             	mov    %rax,%rsi
  800420cd5f:	48 bf be f3 21 04 80 	movabs $0x800421f3be,%rdi
  800420cd66:	00 00 00 
  800420cd69:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd6e:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd75:	00 00 00 
  800420cd78:	ff d2                	callq  *%rdx
  800420cd7a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd7e:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420cd82:	48 89 c6             	mov    %rax,%rsi
  800420cd85:	48 bf cd f3 21 04 80 	movabs $0x800421f3cd,%rdi
  800420cd8c:	00 00 00 
  800420cd8f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd94:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cd9b:	00 00 00 
  800420cd9e:	ff d2                	callq  *%rdx
  800420cda0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cda4:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420cda8:	48 89 c6             	mov    %rax,%rsi
  800420cdab:	48 bf db f3 21 04 80 	movabs $0x800421f3db,%rdi
  800420cdb2:	00 00 00 
  800420cdb5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdba:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cdc1:	00 00 00 
  800420cdc4:	ff d2                	callq  *%rdx
  800420cdc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdca:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420cdce:	48 89 c6             	mov    %rax,%rsi
  800420cdd1:	48 bf e9 f3 21 04 80 	movabs $0x800421f3e9,%rdi
  800420cdd8:	00 00 00 
  800420cddb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cde0:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cde7:	00 00 00 
  800420cdea:	ff d2                	callq  *%rdx
  800420cdec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdf0:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420cdf4:	48 89 c6             	mov    %rax,%rsi
  800420cdf7:	48 bf f8 f3 21 04 80 	movabs $0x800421f3f8,%rdi
  800420cdfe:	00 00 00 
  800420ce01:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce06:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ce0d:	00 00 00 
  800420ce10:	ff d2                	callq  *%rdx
  800420ce12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce16:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420ce1a:	48 89 c6             	mov    %rax,%rsi
  800420ce1d:	48 bf 07 f4 21 04 80 	movabs $0x800421f407,%rdi
  800420ce24:	00 00 00 
  800420ce27:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce2c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ce33:	00 00 00 
  800420ce36:	ff d2                	callq  *%rdx
  800420ce38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce3c:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420ce40:	48 89 c6             	mov    %rax,%rsi
  800420ce43:	48 bf 16 f4 21 04 80 	movabs $0x800421f416,%rdi
  800420ce4a:	00 00 00 
  800420ce4d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce52:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ce59:	00 00 00 
  800420ce5c:	ff d2                	callq  *%rdx
  800420ce5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce62:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420ce66:	48 89 c6             	mov    %rax,%rsi
  800420ce69:	48 bf 25 f4 21 04 80 	movabs $0x800421f425,%rdi
  800420ce70:	00 00 00 
  800420ce73:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce78:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420ce7f:	00 00 00 
  800420ce82:	ff d2                	callq  *%rdx
  800420ce84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce88:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420ce8c:	48 89 c6             	mov    %rax,%rsi
  800420ce8f:	48 bf 34 f4 21 04 80 	movabs $0x800421f434,%rdi
  800420ce96:	00 00 00 
  800420ce99:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce9e:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cea5:	00 00 00 
  800420cea8:	ff d2                	callq  *%rdx
  800420ceaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ceae:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420ceb2:	48 89 c6             	mov    %rax,%rsi
  800420ceb5:	48 bf 43 f4 21 04 80 	movabs $0x800421f443,%rdi
  800420cebc:	00 00 00 
  800420cebf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cec4:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cecb:	00 00 00 
  800420cece:	ff d2                	callq  *%rdx
  800420ced0:	c9                   	leaveq 
  800420ced1:	c3                   	retq   

000000800420ced2 <trap_dispatch>:
  800420ced2:	55                   	push   %rbp
  800420ced3:	48 89 e5             	mov    %rsp,%rbp
  800420ced6:	48 83 ec 10          	sub    $0x10,%rsp
  800420ceda:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cede:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cee2:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cee9:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ceed:	75 18                	jne    800420cf07 <trap_dispatch+0x35>
  800420ceef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cef3:	48 89 c7             	mov    %rax,%rdi
  800420cef6:	48 b8 50 d4 20 04 80 	movabs $0x800420d450,%rax
  800420cefd:	00 00 00 
  800420cf00:	ff d0                	callq  *%rax
  800420cf02:	e9 ea 01 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420cf07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf0b:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf12:	48 83 f8 30          	cmp    $0x30,%rax
  800420cf16:	75 55                	jne    800420cf6d <trap_dispatch+0x9b>
  800420cf18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf1c:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420cf20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf24:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420cf28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf2c:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420cf30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf34:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420cf38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf3c:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420cf40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf44:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cf48:	4d 89 c1             	mov    %r8,%r9
  800420cf4b:	49 89 f8             	mov    %rdi,%r8
  800420cf4e:	48 89 c7             	mov    %rax,%rdi
  800420cf51:	48 b8 39 ed 20 04 80 	movabs $0x800420ed39,%rax
  800420cf58:	00 00 00 
  800420cf5b:	ff d0                	callq  *%rax
  800420cf5d:	48 89 c2             	mov    %rax,%rdx
  800420cf60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf64:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420cf68:	e9 84 01 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420cf6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf71:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf78:	48 83 f8 03          	cmp    $0x3,%rax
  800420cf7c:	75 18                	jne    800420cf96 <trap_dispatch+0xc4>
  800420cf7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf82:	48 89 c7             	mov    %rax,%rdi
  800420cf85:	48 b8 5d 1a 20 04 80 	movabs $0x8004201a5d,%rax
  800420cf8c:	00 00 00 
  800420cf8f:	ff d0                	callq  *%rax
  800420cf91:	e9 5b 01 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420cf96:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf9a:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfa1:	48 83 f8 27          	cmp    $0x27,%rax
  800420cfa5:	75 33                	jne    800420cfda <trap_dispatch+0x108>
  800420cfa7:	48 bf 52 f4 21 04 80 	movabs $0x800421f452,%rdi
  800420cfae:	00 00 00 
  800420cfb1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cfb6:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420cfbd:	00 00 00 
  800420cfc0:	ff d2                	callq  *%rdx
  800420cfc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfc6:	48 89 c7             	mov    %rax,%rdi
  800420cfc9:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  800420cfd0:	00 00 00 
  800420cfd3:	ff d0                	callq  *%rax
  800420cfd5:	e9 17 01 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420cfda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfde:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfe5:	48 83 f8 20          	cmp    $0x20,%rax
  800420cfe9:	75 34                	jne    800420d01f <trap_dispatch+0x14d>
  800420cfeb:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420cff2:	00 00 00 
  800420cff5:	ff d0                	callq  *%rax
  800420cff7:	85 c0                	test   %eax,%eax
  800420cff9:	75 0c                	jne    800420d007 <trap_dispatch+0x135>
  800420cffb:	48 b8 a6 93 21 04 80 	movabs $0x80042193a6,%rax
  800420d002:	00 00 00 
  800420d005:	ff d0                	callq  *%rax
  800420d007:	48 b8 9f 7b 21 04 80 	movabs $0x8004217b9f,%rax
  800420d00e:	00 00 00 
  800420d011:	ff d0                	callq  *%rax
  800420d013:	48 b8 26 da 20 04 80 	movabs $0x800420da26,%rax
  800420d01a:	00 00 00 
  800420d01d:	ff d0                	callq  *%rax
  800420d01f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d023:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d02a:	48 83 f8 21          	cmp    $0x21,%rax
  800420d02e:	75 11                	jne    800420d041 <trap_dispatch+0x16f>
  800420d030:	48 b8 d8 0f 20 04 80 	movabs $0x8004200fd8,%rax
  800420d037:	00 00 00 
  800420d03a:	ff d0                	callq  *%rax
  800420d03c:	e9 b0 00 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420d041:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d045:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d04c:	48 83 f8 24          	cmp    $0x24,%rax
  800420d050:	75 11                	jne    800420d063 <trap_dispatch+0x191>
  800420d052:	48 b8 89 07 20 04 80 	movabs $0x8004200789,%rax
  800420d059:	00 00 00 
  800420d05c:	ff d0                	callq  *%rax
  800420d05e:	e9 8e 00 00 00       	jmpq   800420d0f1 <trap_dispatch+0x21f>
  800420d063:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d067:	48 89 c7             	mov    %rax,%rdi
  800420d06a:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  800420d071:	00 00 00 
  800420d074:	ff d0                	callq  *%rax
  800420d076:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d07a:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d081:	66 83 f8 08          	cmp    $0x8,%ax
  800420d085:	75 2a                	jne    800420d0b1 <trap_dispatch+0x1df>
  800420d087:	48 ba 6f f4 21 04 80 	movabs $0x800421f46f,%rdx
  800420d08e:	00 00 00 
  800420d091:	be 77 01 00 00       	mov    $0x177,%esi
  800420d096:	48 bf 88 f4 21 04 80 	movabs $0x800421f488,%rdi
  800420d09d:	00 00 00 
  800420d0a0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d0a5:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800420d0ac:	00 00 00 
  800420d0af:	ff d1                	callq  *%rcx
  800420d0b1:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d0b8:	00 00 00 
  800420d0bb:	ff d0                	callq  *%rax
  800420d0bd:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d0c4:	00 00 00 
  800420d0c7:	48 98                	cltq   
  800420d0c9:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0cd:	48 89 c1             	mov    %rax,%rcx
  800420d0d0:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0d4:	48 01 c8             	add    %rcx,%rax
  800420d0d7:	48 01 d0             	add    %rdx,%rax
  800420d0da:	48 83 c0 08          	add    $0x8,%rax
  800420d0de:	48 8b 00             	mov    (%rax),%rax
  800420d0e1:	48 89 c7             	mov    %rax,%rdi
  800420d0e4:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420d0eb:	00 00 00 
  800420d0ee:	ff d0                	callq  *%rax
  800420d0f0:	90                   	nop
  800420d0f1:	c9                   	leaveq 
  800420d0f2:	c3                   	retq   

000000800420d0f3 <trap>:
  800420d0f3:	55                   	push   %rbp
  800420d0f4:	48 89 e5             	mov    %rsp,%rbp
  800420d0f7:	48 83 ec 20          	sub    $0x20,%rsp
  800420d0fb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d0ff:	fc                   	cld    
  800420d100:	48 b8 d8 b5 6d 04 80 	movabs $0x80046db5d8,%rax
  800420d107:	00 00 00 
  800420d10a:	48 8b 00             	mov    (%rax),%rax
  800420d10d:	48 85 c0             	test   %rax,%rax
  800420d110:	74 01                	je     800420d113 <trap+0x20>
  800420d112:	f4                   	hlt    
  800420d113:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d11a:	00 00 00 
  800420d11d:	ff d0                	callq  *%rax
  800420d11f:	48 98                	cltq   
  800420d121:	48 c1 e0 03          	shl    $0x3,%rax
  800420d125:	48 89 c2             	mov    %rax,%rdx
  800420d128:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d12c:	48 01 d0             	add    %rdx,%rax
  800420d12f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d136:	00 00 00 
  800420d139:	48 01 d0             	add    %rdx,%rax
  800420d13c:	48 83 c0 04          	add    $0x4,%rax
  800420d140:	be 01 00 00 00       	mov    $0x1,%esi
  800420d145:	48 89 c7             	mov    %rax,%rdi
  800420d148:	48 b8 5b 9d 20 04 80 	movabs $0x8004209d5b,%rax
  800420d14f:	00 00 00 
  800420d152:	ff d0                	callq  *%rax
  800420d154:	83 f8 02             	cmp    $0x2,%eax
  800420d157:	75 0c                	jne    800420d165 <trap+0x72>
  800420d159:	48 b8 80 9d 20 04 80 	movabs $0x8004209d80,%rax
  800420d160:	00 00 00 
  800420d163:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420d165:	9c                   	pushfq 
  800420d166:	58                   	pop    %rax
  800420d167:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420d16b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d16f:	25 00 02 00 00       	and    $0x200,%eax
  800420d174:	48 85 c0             	test   %rax,%rax
  800420d177:	74 35                	je     800420d1ae <trap+0xbb>
  800420d179:	48 b9 97 f4 21 04 80 	movabs $0x800421f497,%rcx
  800420d180:	00 00 00 
  800420d183:	48 ba b0 f4 21 04 80 	movabs $0x800421f4b0,%rdx
  800420d18a:	00 00 00 
  800420d18d:	be 94 01 00 00       	mov    $0x194,%esi
  800420d192:	48 bf 88 f4 21 04 80 	movabs $0x800421f488,%rdi
  800420d199:	00 00 00 
  800420d19c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d1a1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420d1a8:	00 00 00 
  800420d1ab:	41 ff d0             	callq  *%r8
  800420d1ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d1b2:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d1b9:	0f b7 c0             	movzwl %ax,%eax
  800420d1bc:	83 e0 03             	and    $0x3,%eax
  800420d1bf:	83 f8 03             	cmp    $0x3,%eax
  800420d1c2:	0f 85 a9 01 00 00    	jne    800420d371 <trap+0x27e>
  800420d1c8:	48 b8 80 9d 20 04 80 	movabs $0x8004209d80,%rax
  800420d1cf:	00 00 00 
  800420d1d2:	ff d0                	callq  *%rax
  800420d1d4:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d1db:	00 00 00 
  800420d1de:	ff d0                	callq  *%rax
  800420d1e0:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d1e7:	00 00 00 
  800420d1ea:	48 98                	cltq   
  800420d1ec:	48 c1 e0 03          	shl    $0x3,%rax
  800420d1f0:	48 89 c1             	mov    %rax,%rcx
  800420d1f3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d1f7:	48 01 c8             	add    %rcx,%rax
  800420d1fa:	48 01 d0             	add    %rdx,%rax
  800420d1fd:	48 83 c0 08          	add    $0x8,%rax
  800420d201:	48 8b 00             	mov    (%rax),%rax
  800420d204:	48 85 c0             	test   %rax,%rax
  800420d207:	75 35                	jne    800420d23e <trap+0x14b>
  800420d209:	48 b9 c5 f4 21 04 80 	movabs $0x800421f4c5,%rcx
  800420d210:	00 00 00 
  800420d213:	48 ba b0 f4 21 04 80 	movabs $0x800421f4b0,%rdx
  800420d21a:	00 00 00 
  800420d21d:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420d222:	48 bf 88 f4 21 04 80 	movabs $0x800421f488,%rdi
  800420d229:	00 00 00 
  800420d22c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d231:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420d238:	00 00 00 
  800420d23b:	41 ff d0             	callq  *%r8
  800420d23e:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d245:	00 00 00 
  800420d248:	ff d0                	callq  *%rax
  800420d24a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d251:	00 00 00 
  800420d254:	48 98                	cltq   
  800420d256:	48 c1 e0 03          	shl    $0x3,%rax
  800420d25a:	48 89 c1             	mov    %rax,%rcx
  800420d25d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d261:	48 01 c8             	add    %rcx,%rax
  800420d264:	48 01 d0             	add    %rdx,%rax
  800420d267:	48 83 c0 08          	add    $0x8,%rax
  800420d26b:	48 8b 00             	mov    (%rax),%rax
  800420d26e:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d274:	83 f8 01             	cmp    $0x1,%eax
  800420d277:	75 7f                	jne    800420d2f8 <trap+0x205>
  800420d279:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d280:	00 00 00 
  800420d283:	ff d0                	callq  *%rax
  800420d285:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d28c:	00 00 00 
  800420d28f:	48 98                	cltq   
  800420d291:	48 c1 e0 03          	shl    $0x3,%rax
  800420d295:	48 89 c1             	mov    %rax,%rcx
  800420d298:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d29c:	48 01 c8             	add    %rcx,%rax
  800420d29f:	48 01 d0             	add    %rdx,%rax
  800420d2a2:	48 83 c0 08          	add    $0x8,%rax
  800420d2a6:	48 8b 00             	mov    (%rax),%rax
  800420d2a9:	48 89 c7             	mov    %rax,%rdi
  800420d2ac:	48 b8 66 90 20 04 80 	movabs $0x8004209066,%rax
  800420d2b3:	00 00 00 
  800420d2b6:	ff d0                	callq  *%rax
  800420d2b8:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d2bf:	00 00 00 
  800420d2c2:	ff d0                	callq  *%rax
  800420d2c4:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d2cb:	00 00 00 
  800420d2ce:	48 98                	cltq   
  800420d2d0:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2d4:	48 89 c1             	mov    %rax,%rcx
  800420d2d7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2db:	48 01 c8             	add    %rcx,%rax
  800420d2de:	48 01 d0             	add    %rdx,%rax
  800420d2e1:	48 83 c0 08          	add    $0x8,%rax
  800420d2e5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d2ec:	48 b8 26 da 20 04 80 	movabs $0x800420da26,%rax
  800420d2f3:	00 00 00 
  800420d2f6:	ff d0                	callq  *%rax
  800420d2f8:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d2ff:	00 00 00 
  800420d302:	ff d0                	callq  *%rax
  800420d304:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d30b:	00 00 00 
  800420d30e:	48 98                	cltq   
  800420d310:	48 c1 e0 03          	shl    $0x3,%rax
  800420d314:	48 89 c1             	mov    %rax,%rcx
  800420d317:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d31b:	48 01 c8             	add    %rcx,%rax
  800420d31e:	48 01 d0             	add    %rdx,%rax
  800420d321:	48 83 c0 08          	add    $0x8,%rax
  800420d325:	48 8b 10             	mov    (%rax),%rdx
  800420d328:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d32c:	48 89 c6             	mov    %rax,%rsi
  800420d32f:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d334:	48 89 d7             	mov    %rdx,%rdi
  800420d337:	48 89 c1             	mov    %rax,%rcx
  800420d33a:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d33d:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d344:	00 00 00 
  800420d347:	ff d0                	callq  *%rax
  800420d349:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d350:	00 00 00 
  800420d353:	48 98                	cltq   
  800420d355:	48 c1 e0 03          	shl    $0x3,%rax
  800420d359:	48 89 c1             	mov    %rax,%rcx
  800420d35c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d360:	48 01 c8             	add    %rcx,%rax
  800420d363:	48 01 d0             	add    %rdx,%rax
  800420d366:	48 83 c0 08          	add    $0x8,%rax
  800420d36a:	48 8b 00             	mov    (%rax),%rax
  800420d36d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d371:	48 b8 90 d2 4d 04 80 	movabs $0x80044dd290,%rax
  800420d378:	00 00 00 
  800420d37b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d37f:	48 89 10             	mov    %rdx,(%rax)
  800420d382:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d386:	48 89 c7             	mov    %rax,%rdi
  800420d389:	48 b8 d2 ce 20 04 80 	movabs $0x800420ced2,%rax
  800420d390:	00 00 00 
  800420d393:	ff d0                	callq  *%rax
  800420d395:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d39c:	00 00 00 
  800420d39f:	ff d0                	callq  *%rax
  800420d3a1:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d3a8:	00 00 00 
  800420d3ab:	48 98                	cltq   
  800420d3ad:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3b1:	48 89 c1             	mov    %rax,%rcx
  800420d3b4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3b8:	48 01 c8             	add    %rcx,%rax
  800420d3bb:	48 01 d0             	add    %rdx,%rax
  800420d3be:	48 83 c0 08          	add    $0x8,%rax
  800420d3c2:	48 8b 00             	mov    (%rax),%rax
  800420d3c5:	48 85 c0             	test   %rax,%rax
  800420d3c8:	74 7a                	je     800420d444 <trap+0x351>
  800420d3ca:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d3d1:	00 00 00 
  800420d3d4:	ff d0                	callq  *%rax
  800420d3d6:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d3dd:	00 00 00 
  800420d3e0:	48 98                	cltq   
  800420d3e2:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3e6:	48 89 c1             	mov    %rax,%rcx
  800420d3e9:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3ed:	48 01 c8             	add    %rcx,%rax
  800420d3f0:	48 01 d0             	add    %rdx,%rax
  800420d3f3:	48 83 c0 08          	add    $0x8,%rax
  800420d3f7:	48 8b 00             	mov    (%rax),%rax
  800420d3fa:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d400:	83 f8 03             	cmp    $0x3,%eax
  800420d403:	75 3f                	jne    800420d444 <trap+0x351>
  800420d405:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d40c:	00 00 00 
  800420d40f:	ff d0                	callq  *%rax
  800420d411:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d418:	00 00 00 
  800420d41b:	48 98                	cltq   
  800420d41d:	48 c1 e0 03          	shl    $0x3,%rax
  800420d421:	48 89 c1             	mov    %rax,%rcx
  800420d424:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d428:	48 01 c8             	add    %rcx,%rax
  800420d42b:	48 01 d0             	add    %rdx,%rax
  800420d42e:	48 83 c0 08          	add    $0x8,%rax
  800420d432:	48 8b 00             	mov    (%rax),%rax
  800420d435:	48 89 c7             	mov    %rax,%rdi
  800420d438:	48 b8 ea 96 20 04 80 	movabs $0x80042096ea,%rax
  800420d43f:	00 00 00 
  800420d442:	ff d0                	callq  *%rax
  800420d444:	48 b8 26 da 20 04 80 	movabs $0x800420da26,%rax
  800420d44b:	00 00 00 
  800420d44e:	ff d0                	callq  *%rax

000000800420d450 <page_fault_handler>:
  800420d450:	55                   	push   %rbp
  800420d451:	48 89 e5             	mov    %rsp,%rbp
  800420d454:	53                   	push   %rbx
  800420d455:	48 83 ec 38          	sub    $0x38,%rsp
  800420d459:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420d45d:	0f 20 d0             	mov    %cr2,%rax
  800420d460:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420d464:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d468:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420d46c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d470:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d477:	0f b7 c0             	movzwl %ax,%eax
  800420d47a:	83 e0 03             	and    $0x3,%eax
  800420d47d:	85 c0                	test   %eax,%eax
  800420d47f:	75 3d                	jne    800420d4be <page_fault_handler+0x6e>
  800420d481:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d485:	48 89 c7             	mov    %rax,%rdi
  800420d488:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  800420d48f:	00 00 00 
  800420d492:	ff d0                	callq  *%rax
  800420d494:	48 ba cc f4 21 04 80 	movabs $0x800421f4cc,%rdx
  800420d49b:	00 00 00 
  800420d49e:	be de 01 00 00       	mov    $0x1de,%esi
  800420d4a3:	48 bf 88 f4 21 04 80 	movabs $0x800421f488,%rdi
  800420d4aa:	00 00 00 
  800420d4ad:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4b2:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800420d4b9:	00 00 00 
  800420d4bc:	ff d1                	callq  *%rcx
  800420d4be:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d4c5:	00 00 00 
  800420d4c8:	ff d0                	callq  *%rax
  800420d4ca:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d4d1:	00 00 00 
  800420d4d4:	48 98                	cltq   
  800420d4d6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d4da:	48 89 c1             	mov    %rax,%rcx
  800420d4dd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4e1:	48 01 c8             	add    %rcx,%rax
  800420d4e4:	48 01 d0             	add    %rdx,%rax
  800420d4e7:	48 83 c0 08          	add    $0x8,%rax
  800420d4eb:	48 8b 00             	mov    (%rax),%rax
  800420d4ee:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d4f5:	48 85 c0             	test   %rax,%rax
  800420d4f8:	0f 85 b8 00 00 00    	jne    800420d5b6 <page_fault_handler+0x166>
  800420d4fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d502:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420d509:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d510:	00 00 00 
  800420d513:	ff d0                	callq  *%rax
  800420d515:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d51c:	00 00 00 
  800420d51f:	48 98                	cltq   
  800420d521:	48 c1 e0 03          	shl    $0x3,%rax
  800420d525:	48 89 c1             	mov    %rax,%rcx
  800420d528:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d52c:	48 01 c8             	add    %rcx,%rax
  800420d52f:	48 01 d0             	add    %rdx,%rax
  800420d532:	48 83 c0 08          	add    $0x8,%rax
  800420d536:	48 8b 00             	mov    (%rax),%rax
  800420d539:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d53f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d543:	48 89 d9             	mov    %rbx,%rcx
  800420d546:	89 c6                	mov    %eax,%esi
  800420d548:	48 bf d8 f4 21 04 80 	movabs $0x800421f4d8,%rdi
  800420d54f:	00 00 00 
  800420d552:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d557:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800420d55e:	00 00 00 
  800420d561:	41 ff d0             	callq  *%r8
  800420d564:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d568:	48 89 c7             	mov    %rax,%rdi
  800420d56b:	48 b8 7a c9 20 04 80 	movabs $0x800420c97a,%rax
  800420d572:	00 00 00 
  800420d575:	ff d0                	callq  *%rax
  800420d577:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d57e:	00 00 00 
  800420d581:	ff d0                	callq  *%rax
  800420d583:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d58a:	00 00 00 
  800420d58d:	48 98                	cltq   
  800420d58f:	48 c1 e0 03          	shl    $0x3,%rax
  800420d593:	48 89 c1             	mov    %rax,%rcx
  800420d596:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d59a:	48 01 c8             	add    %rcx,%rax
  800420d59d:	48 01 d0             	add    %rdx,%rax
  800420d5a0:	48 83 c0 08          	add    $0x8,%rax
  800420d5a4:	48 8b 00             	mov    (%rax),%rax
  800420d5a7:	48 89 c7             	mov    %rax,%rdi
  800420d5aa:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420d5b1:	00 00 00 
  800420d5b4:	ff d0                	callq  *%rax
  800420d5b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5ba:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5c1:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420d5c6:	48 39 c2             	cmp    %rax,%rdx
  800420d5c9:	76 2c                	jbe    800420d5f7 <page_fault_handler+0x1a7>
  800420d5cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5cf:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5d6:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420d5db:	48 39 c2             	cmp    %rax,%rdx
  800420d5de:	77 17                	ja     800420d5f7 <page_fault_handler+0x1a7>
  800420d5e0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5e4:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420d5eb:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420d5f1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5f5:	eb 09                	jmp    800420d600 <page_fault_handler+0x1b0>
  800420d5f7:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420d5fc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d600:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d607:	00 00 00 
  800420d60a:	ff d0                	callq  *%rax
  800420d60c:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d613:	00 00 00 
  800420d616:	48 98                	cltq   
  800420d618:	48 c1 e0 03          	shl    $0x3,%rax
  800420d61c:	48 89 c1             	mov    %rax,%rcx
  800420d61f:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d623:	48 01 c8             	add    %rcx,%rax
  800420d626:	48 01 d0             	add    %rdx,%rax
  800420d629:	48 83 c0 08          	add    $0x8,%rax
  800420d62d:	48 8b 00             	mov    (%rax),%rax
  800420d630:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420d634:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420d639:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420d63e:	48 89 c7             	mov    %rax,%rdi
  800420d641:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420d648:	00 00 00 
  800420d64b:	ff d0                	callq  *%rax
  800420d64d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d651:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d655:	48 89 10             	mov    %rdx,(%rax)
  800420d658:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d65c:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420d663:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d667:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420d66b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d66f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d673:	48 8b 0a             	mov    (%rdx),%rcx
  800420d676:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420d67a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420d67e:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420d682:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420d686:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420d68a:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420d68e:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420d692:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420d696:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420d69a:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420d69e:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420d6a2:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420d6a6:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420d6aa:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420d6ae:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420d6b2:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420d6b6:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420d6ba:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420d6be:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d6c2:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d6c6:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d6ca:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d6ce:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d6d2:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d6d6:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d6da:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d6de:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d6e2:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d6e6:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d6ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6f1:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d6f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d6fc:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d703:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d707:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d70e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d712:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d719:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d71d:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d724:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d728:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d72f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d733:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d737:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d73e:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d745:	00 00 00 
  800420d748:	ff d0                	callq  *%rax
  800420d74a:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d751:	00 00 00 
  800420d754:	48 98                	cltq   
  800420d756:	48 c1 e0 03          	shl    $0x3,%rax
  800420d75a:	48 89 c1             	mov    %rax,%rcx
  800420d75d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d761:	48 01 c8             	add    %rcx,%rax
  800420d764:	48 01 d0             	add    %rdx,%rax
  800420d767:	48 83 c0 08          	add    $0x8,%rax
  800420d76b:	48 8b 00             	mov    (%rax),%rax
  800420d76e:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d775:	48 89 c2             	mov    %rax,%rdx
  800420d778:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d77c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d783:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d78a:	00 00 00 
  800420d78d:	ff d0                	callq  *%rax
  800420d78f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d796:	00 00 00 
  800420d799:	48 98                	cltq   
  800420d79b:	48 c1 e0 03          	shl    $0x3,%rax
  800420d79f:	48 89 c1             	mov    %rax,%rcx
  800420d7a2:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d7a6:	48 01 c8             	add    %rcx,%rax
  800420d7a9:	48 01 d0             	add    %rdx,%rax
  800420d7ac:	48 83 c0 08          	add    $0x8,%rax
  800420d7b0:	48 8b 00             	mov    (%rax),%rax
  800420d7b3:	48 89 c7             	mov    %rax,%rdi
  800420d7b6:	48 b8 ea 96 20 04 80 	movabs $0x80042096ea,%rax
  800420d7bd:	00 00 00 
  800420d7c0:	ff d0                	callq  *%rax
  800420d7c2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  800420d7c9:	00 00 00 
  800420d7cc:	0f 1f 40 00          	nopl   0x0(%rax)

000000800420d7d0 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d7d0:	6a 00                	pushq  $0x0
  800420d7d2:	6a 00                	pushq  $0x0
  800420d7d4:	e9 f7 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d7d9:	90                   	nop

000000800420d7da <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d7da:	6a 00                	pushq  $0x0
  800420d7dc:	6a 01                	pushq  $0x1
  800420d7de:	e9 ed 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d7e3:	90                   	nop

000000800420d7e4 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d7e4:	6a 00                	pushq  $0x0
  800420d7e6:	6a 02                	pushq  $0x2
  800420d7e8:	e9 e3 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d7ed:	90                   	nop

000000800420d7ee <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d7ee:	6a 00                	pushq  $0x0
  800420d7f0:	6a 03                	pushq  $0x3
  800420d7f2:	e9 d9 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d7f7:	90                   	nop

000000800420d7f8 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d7f8:	6a 00                	pushq  $0x0
  800420d7fa:	6a 04                	pushq  $0x4
  800420d7fc:	e9 cf 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d801:	90                   	nop

000000800420d802 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d802:	6a 00                	pushq  $0x0
  800420d804:	6a 05                	pushq  $0x5
  800420d806:	e9 c5 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d80b:	90                   	nop

000000800420d80c <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d80c:	6a 00                	pushq  $0x0
  800420d80e:	6a 06                	pushq  $0x6
  800420d810:	e9 bb 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d815:	90                   	nop

000000800420d816 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d816:	6a 00                	pushq  $0x0
  800420d818:	6a 07                	pushq  $0x7
  800420d81a:	e9 b1 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d81f:	90                   	nop

000000800420d820 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d820:	6a 08                	pushq  $0x8
  800420d822:	e9 a9 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d827:	90                   	nop

000000800420d828 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d828:	6a 0a                	pushq  $0xa
  800420d82a:	e9 a1 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d82f:	90                   	nop

000000800420d830 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d830:	6a 0b                	pushq  $0xb
  800420d832:	e9 99 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d837:	90                   	nop

000000800420d838 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d838:	6a 0c                	pushq  $0xc
  800420d83a:	e9 91 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d83f:	90                   	nop

000000800420d840 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d840:	6a 0d                	pushq  $0xd
  800420d842:	e9 89 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d847:	90                   	nop

000000800420d848 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d848:	6a 0e                	pushq  $0xe
  800420d84a:	e9 81 00 00 00       	jmpq   800420d8d0 <_alltraps>
  800420d84f:	90                   	nop

000000800420d850 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d850:	6a 00                	pushq  $0x0
  800420d852:	6a 10                	pushq  $0x10
  800420d854:	eb 7a                	jmp    800420d8d0 <_alltraps>

000000800420d856 <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d856:	6a 11                	pushq  $0x11
  800420d858:	eb 76                	jmp    800420d8d0 <_alltraps>

000000800420d85a <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d85a:	6a 00                	pushq  $0x0
  800420d85c:	6a 12                	pushq  $0x12
  800420d85e:	eb 70                	jmp    800420d8d0 <_alltraps>

000000800420d860 <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d860:	6a 00                	pushq  $0x0
  800420d862:	6a 20                	pushq  $0x20
  800420d864:	eb 6a                	jmp    800420d8d0 <_alltraps>

000000800420d866 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d866:	6a 00                	pushq  $0x0
  800420d868:	6a 21                	pushq  $0x21
  800420d86a:	eb 64                	jmp    800420d8d0 <_alltraps>

000000800420d86c <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d86c:	6a 00                	pushq  $0x0
  800420d86e:	6a 22                	pushq  $0x22
  800420d870:	eb 5e                	jmp    800420d8d0 <_alltraps>

000000800420d872 <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d872:	6a 00                	pushq  $0x0
  800420d874:	6a 23                	pushq  $0x23
  800420d876:	eb 58                	jmp    800420d8d0 <_alltraps>

000000800420d878 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d878:	6a 00                	pushq  $0x0
  800420d87a:	6a 24                	pushq  $0x24
  800420d87c:	eb 52                	jmp    800420d8d0 <_alltraps>

000000800420d87e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d87e:	6a 00                	pushq  $0x0
  800420d880:	6a 25                	pushq  $0x25
  800420d882:	eb 4c                	jmp    800420d8d0 <_alltraps>

000000800420d884 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d884:	6a 00                	pushq  $0x0
  800420d886:	6a 26                	pushq  $0x26
  800420d888:	eb 46                	jmp    800420d8d0 <_alltraps>

000000800420d88a <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d88a:	6a 00                	pushq  $0x0
  800420d88c:	6a 27                	pushq  $0x27
  800420d88e:	eb 40                	jmp    800420d8d0 <_alltraps>

000000800420d890 <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d890:	6a 00                	pushq  $0x0
  800420d892:	6a 28                	pushq  $0x28
  800420d894:	eb 3a                	jmp    800420d8d0 <_alltraps>

000000800420d896 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d896:	6a 00                	pushq  $0x0
  800420d898:	6a 29                	pushq  $0x29
  800420d89a:	eb 34                	jmp    800420d8d0 <_alltraps>

000000800420d89c <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d89c:	6a 00                	pushq  $0x0
  800420d89e:	6a 2a                	pushq  $0x2a
  800420d8a0:	eb 2e                	jmp    800420d8d0 <_alltraps>

000000800420d8a2 <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d8a2:	6a 00                	pushq  $0x0
  800420d8a4:	6a 2b                	pushq  $0x2b
  800420d8a6:	eb 28                	jmp    800420d8d0 <_alltraps>

000000800420d8a8 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d8a8:	6a 00                	pushq  $0x0
  800420d8aa:	6a 2c                	pushq  $0x2c
  800420d8ac:	eb 22                	jmp    800420d8d0 <_alltraps>

000000800420d8ae <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d8ae:	6a 00                	pushq  $0x0
  800420d8b0:	6a 2d                	pushq  $0x2d
  800420d8b2:	eb 1c                	jmp    800420d8d0 <_alltraps>

000000800420d8b4 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d8b4:	6a 00                	pushq  $0x0
  800420d8b6:	6a 2e                	pushq  $0x2e
  800420d8b8:	eb 16                	jmp    800420d8d0 <_alltraps>

000000800420d8ba <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d8ba:	6a 00                	pushq  $0x0
  800420d8bc:	6a 2f                	pushq  $0x2f
  800420d8be:	eb 10                	jmp    800420d8d0 <_alltraps>

000000800420d8c0 <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d8c0:	6a 00                	pushq  $0x0
  800420d8c2:	6a 30                	pushq  $0x30
  800420d8c4:	eb 0a                	jmp    800420d8d0 <_alltraps>

000000800420d8c6 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d8c6:	68 f4 01 00 00       	pushq  $0x1f4
  800420d8cb:	eb 03                	jmp    800420d8d0 <_alltraps>
  800420d8cd:	0f 1f 00             	nopl   (%rax)

000000800420d8d0 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d8d0:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d8d4:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d8d8:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d8db:	48 83 ec 78          	sub    $0x78,%rsp
  800420d8df:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d8e4:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d8e9:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d8ee:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d8f3:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d8f8:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d8fd:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d902:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d907:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d90c:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d911:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d916:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d91b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d920:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d925:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d929:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d92e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d930:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d932:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d934:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d936:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d938:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d93b:	e8 b3 f7 ff ff       	callq  800420d0f3 <trap>

000000800420d940 <spin>:
spin:	jmp spin
  800420d940:	eb fe                	jmp    800420d940 <spin>

000000800420d942 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d942:	55                   	push   %rbp
  800420d943:	48 89 e5             	mov    %rsp,%rbp
  800420d946:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d94a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d94e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d951:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d955:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d958:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d95c:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d95f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d962:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d965:	c9                   	leaveq 
  800420d966:	c3                   	retq   

000000800420d967 <unlock_kernel>:
  800420d967:	55                   	push   %rbp
  800420d968:	48 89 e5             	mov    %rsp,%rbp
  800420d96b:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800420d972:	00 00 00 
  800420d975:	48 b8 cc 7f 21 04 80 	movabs $0x8004217fcc,%rax
  800420d97c:	00 00 00 
  800420d97f:	ff d0                	callq  *%rax
  800420d981:	f3 90                	pause  
  800420d983:	5d                   	pop    %rbp
  800420d984:	c3                   	retq   

000000800420d985 <vmxon>:
  800420d985:	55                   	push   %rbp
  800420d986:	48 89 e5             	mov    %rsp,%rbp
  800420d989:	48 83 ec 10          	sub    $0x10,%rsp
  800420d98d:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420d994:	00 00 00 
  800420d997:	ff d0                	callq  *%rax
  800420d999:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420d9a0:	00 00 00 
  800420d9a3:	48 98                	cltq   
  800420d9a5:	48 c1 e0 03          	shl    $0x3,%rax
  800420d9a9:	48 89 c1             	mov    %rax,%rcx
  800420d9ac:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d9b0:	48 01 c8             	add    %rcx,%rax
  800420d9b3:	48 01 d0             	add    %rdx,%rax
  800420d9b6:	48 83 c0 70          	add    $0x70,%rax
  800420d9ba:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  800420d9be:	83 f0 01             	xor    $0x1,%eax
  800420d9c1:	84 c0                	test   %al,%al
  800420d9c3:	74 5a                	je     800420da1f <vmxon+0x9a>
  800420d9c5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9ca:	48 ba a8 ad 21 04 80 	movabs $0x800421ada8,%rdx
  800420d9d1:	00 00 00 
  800420d9d4:	ff d2                	callq  *%rdx
  800420d9d6:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420d9d9:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420d9dd:	79 25                	jns    800420da04 <vmxon+0x7f>
  800420d9df:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420d9e2:	89 c6                	mov    %eax,%esi
  800420d9e4:	48 bf e0 f6 21 04 80 	movabs $0x800421f6e0,%rdi
  800420d9eb:	00 00 00 
  800420d9ee:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d9f3:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420d9fa:	00 00 00 
  800420d9fd:	ff d2                	callq  *%rdx
  800420d9ff:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da02:	eb 20                	jmp    800420da24 <vmxon+0x9f>
  800420da04:	48 bf fb f6 21 04 80 	movabs $0x800421f6fb,%rdi
  800420da0b:	00 00 00 
  800420da0e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da13:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420da1a:	00 00 00 
  800420da1d:	ff d2                	callq  *%rdx
  800420da1f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da24:	c9                   	leaveq 
  800420da25:	c3                   	retq   

000000800420da26 <sched_yield>:
  800420da26:	55                   	push   %rbp
  800420da27:	48 89 e5             	mov    %rsp,%rbp
  800420da2a:	53                   	push   %rbx
  800420da2b:	48 83 ec 18          	sub    $0x18,%rsp
  800420da2f:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420da36:	00 00 00 
  800420da39:	ff d0                	callq  *%rax
  800420da3b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420da42:	00 00 00 
  800420da45:	48 98                	cltq   
  800420da47:	48 c1 e0 03          	shl    $0x3,%rax
  800420da4b:	48 89 c1             	mov    %rax,%rcx
  800420da4e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da52:	48 01 c8             	add    %rcx,%rax
  800420da55:	48 01 d0             	add    %rdx,%rax
  800420da58:	48 83 c0 08          	add    $0x8,%rax
  800420da5c:	48 8b 00             	mov    (%rax),%rax
  800420da5f:	48 85 c0             	test   %rax,%rax
  800420da62:	74 60                	je     800420dac4 <sched_yield+0x9e>
  800420da64:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420da6b:	00 00 00 
  800420da6e:	ff d0                	callq  *%rax
  800420da70:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420da77:	00 00 00 
  800420da7a:	48 98                	cltq   
  800420da7c:	48 c1 e0 03          	shl    $0x3,%rax
  800420da80:	48 89 c1             	mov    %rax,%rcx
  800420da83:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da87:	48 01 c8             	add    %rcx,%rax
  800420da8a:	48 01 d0             	add    %rdx,%rax
  800420da8d:	48 83 c0 08          	add    $0x8,%rax
  800420da91:	48 8b 00             	mov    (%rax),%rax
  800420da94:	48 89 c2             	mov    %rax,%rdx
  800420da97:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420da9e:	00 00 00 
  800420daa1:	48 8b 00             	mov    (%rax),%rax
  800420daa4:	48 29 c2             	sub    %rax,%rdx
  800420daa7:	48 89 d0             	mov    %rdx,%rax
  800420daaa:	48 c1 f8 03          	sar    $0x3,%rax
  800420daae:	48 89 c2             	mov    %rax,%rdx
  800420dab1:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420dab8:	fa a4 4f 
  800420dabb:	48 0f af c2          	imul   %rdx,%rax
  800420dabf:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420dac2:	eb 07                	jmp    800420dacb <sched_yield+0xa5>
  800420dac4:	c7 45 ec ff 03 00 00 	movl   $0x3ff,-0x14(%rbp)
  800420dacb:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  800420dad2:	e9 1b 01 00 00       	jmpq   800420dbf2 <sched_yield+0x1cc>
  800420dad7:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420dada:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420dadd:	01 c2                	add    %eax,%edx
  800420dadf:	89 d0                	mov    %edx,%eax
  800420dae1:	c1 f8 1f             	sar    $0x1f,%eax
  800420dae4:	c1 e8 16             	shr    $0x16,%eax
  800420dae7:	01 c2                	add    %eax,%edx
  800420dae9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420daef:	29 c2                	sub    %eax,%edx
  800420daf1:	89 d0                	mov    %edx,%eax
  800420daf3:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420daf6:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420dafd:	00 00 00 
  800420db00:	48 8b 10             	mov    (%rax),%rdx
  800420db03:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db06:	48 98                	cltq   
  800420db08:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db0f:	48 01 d0             	add    %rdx,%rax
  800420db12:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420db18:	83 f8 02             	cmp    $0x2,%eax
  800420db1b:	0f 85 cd 00 00 00    	jne    800420dbee <sched_yield+0x1c8>
  800420db21:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420db28:	00 00 00 
  800420db2b:	48 8b 10             	mov    (%rax),%rdx
  800420db2e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db31:	48 98                	cltq   
  800420db33:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db3a:	48 01 d0             	add    %rdx,%rax
  800420db3d:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420db43:	83 f8 03             	cmp    $0x3,%eax
  800420db46:	75 7b                	jne    800420dbc3 <sched_yield+0x19d>
  800420db48:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420db4f:	00 00 00 
  800420db52:	48 8b 10             	mov    (%rax),%rdx
  800420db55:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db58:	48 98                	cltq   
  800420db5a:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db61:	48 01 d0             	add    %rdx,%rax
  800420db64:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420db6a:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420db71:	00 00 00 
  800420db74:	ff d0                	callq  *%rax
  800420db76:	39 c3                	cmp    %eax,%ebx
  800420db78:	74 02                	je     800420db7c <sched_yield+0x156>
  800420db7a:	eb 72                	jmp    800420dbee <sched_yield+0x1c8>
  800420db7c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420db81:	48 ba 85 d9 20 04 80 	movabs $0x800420d985,%rdx
  800420db88:	00 00 00 
  800420db8b:	ff d2                	callq  *%rdx
  800420db8d:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420db90:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420db94:	79 2d                	jns    800420dbc3 <sched_yield+0x19d>
  800420db96:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420db9d:	00 00 00 
  800420dba0:	48 8b 10             	mov    (%rax),%rdx
  800420dba3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dba6:	48 98                	cltq   
  800420dba8:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbaf:	48 01 d0             	add    %rdx,%rax
  800420dbb2:	48 89 c7             	mov    %rax,%rdi
  800420dbb5:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420dbbc:	00 00 00 
  800420dbbf:	ff d0                	callq  *%rax
  800420dbc1:	eb 2b                	jmp    800420dbee <sched_yield+0x1c8>
  800420dbc3:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420dbca:	00 00 00 
  800420dbcd:	48 8b 10             	mov    (%rax),%rdx
  800420dbd0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dbd3:	48 98                	cltq   
  800420dbd5:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbdc:	48 01 d0             	add    %rdx,%rax
  800420dbdf:	48 89 c7             	mov    %rax,%rdi
  800420dbe2:	48 b8 ea 96 20 04 80 	movabs $0x80042096ea,%rax
  800420dbe9:	00 00 00 
  800420dbec:	ff d0                	callq  *%rax
  800420dbee:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420dbf2:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%rbp)
  800420dbf9:	0f 8e d8 fe ff ff    	jle    800420dad7 <sched_yield+0xb1>
  800420dbff:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420dc06:	00 00 00 
  800420dc09:	ff d0                	callq  *%rax
  800420dc0b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dc12:	00 00 00 
  800420dc15:	48 98                	cltq   
  800420dc17:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc1b:	48 89 c1             	mov    %rax,%rcx
  800420dc1e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc22:	48 01 c8             	add    %rcx,%rax
  800420dc25:	48 01 d0             	add    %rdx,%rax
  800420dc28:	48 83 c0 08          	add    $0x8,%rax
  800420dc2c:	48 8b 00             	mov    (%rax),%rax
  800420dc2f:	48 85 c0             	test   %rax,%rax
  800420dc32:	0f 84 4d 01 00 00    	je     800420dd85 <sched_yield+0x35f>
  800420dc38:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420dc3f:	00 00 00 
  800420dc42:	ff d0                	callq  *%rax
  800420dc44:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dc4b:	00 00 00 
  800420dc4e:	48 98                	cltq   
  800420dc50:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc54:	48 89 c1             	mov    %rax,%rcx
  800420dc57:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc5b:	48 01 c8             	add    %rcx,%rax
  800420dc5e:	48 01 d0             	add    %rdx,%rax
  800420dc61:	48 83 c0 08          	add    $0x8,%rax
  800420dc65:	48 8b 00             	mov    (%rax),%rax
  800420dc68:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dc6e:	83 f8 03             	cmp    $0x3,%eax
  800420dc71:	0f 85 0e 01 00 00    	jne    800420dd85 <sched_yield+0x35f>
  800420dc77:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420dc7e:	00 00 00 
  800420dc81:	48 8b 10             	mov    (%rax),%rdx
  800420dc84:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dc87:	48 98                	cltq   
  800420dc89:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dc90:	48 01 d0             	add    %rdx,%rax
  800420dc93:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420dc99:	83 f8 03             	cmp    $0x3,%eax
  800420dc9c:	0f 85 a4 00 00 00    	jne    800420dd46 <sched_yield+0x320>
  800420dca2:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420dca9:	00 00 00 
  800420dcac:	ff d0                	callq  *%rax
  800420dcae:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dcb5:	00 00 00 
  800420dcb8:	48 98                	cltq   
  800420dcba:	48 c1 e0 03          	shl    $0x3,%rax
  800420dcbe:	48 89 c1             	mov    %rax,%rcx
  800420dcc1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dcc5:	48 01 c8             	add    %rcx,%rax
  800420dcc8:	48 01 d0             	add    %rdx,%rax
  800420dccb:	48 83 c0 08          	add    $0x8,%rax
  800420dccf:	48 8b 00             	mov    (%rax),%rax
  800420dcd2:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420dcd8:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420dcdf:	00 00 00 
  800420dce2:	ff d0                	callq  *%rax
  800420dce4:	39 c3                	cmp    %eax,%ebx
  800420dce6:	74 05                	je     800420dced <sched_yield+0x2c7>
  800420dce8:	e9 a4 00 00 00       	jmpq   800420dd91 <sched_yield+0x36b>
  800420dced:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dcf2:	48 ba 85 d9 20 04 80 	movabs $0x800420d985,%rdx
  800420dcf9:	00 00 00 
  800420dcfc:	ff d2                	callq  *%rdx
  800420dcfe:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420dd01:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420dd05:	79 3f                	jns    800420dd46 <sched_yield+0x320>
  800420dd07:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420dd0e:	00 00 00 
  800420dd11:	ff d0                	callq  *%rax
  800420dd13:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dd1a:	00 00 00 
  800420dd1d:	48 98                	cltq   
  800420dd1f:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd23:	48 89 c1             	mov    %rax,%rcx
  800420dd26:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd2a:	48 01 c8             	add    %rcx,%rax
  800420dd2d:	48 01 d0             	add    %rdx,%rax
  800420dd30:	48 83 c0 08          	add    $0x8,%rax
  800420dd34:	48 8b 00             	mov    (%rax),%rax
  800420dd37:	48 89 c7             	mov    %rax,%rdi
  800420dd3a:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420dd41:	00 00 00 
  800420dd44:	ff d0                	callq  *%rax
  800420dd46:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420dd4d:	00 00 00 
  800420dd50:	ff d0                	callq  *%rax
  800420dd52:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dd59:	00 00 00 
  800420dd5c:	48 98                	cltq   
  800420dd5e:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd62:	48 89 c1             	mov    %rax,%rcx
  800420dd65:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd69:	48 01 c8             	add    %rcx,%rax
  800420dd6c:	48 01 d0             	add    %rdx,%rax
  800420dd6f:	48 83 c0 08          	add    $0x8,%rax
  800420dd73:	48 8b 00             	mov    (%rax),%rax
  800420dd76:	48 89 c7             	mov    %rax,%rdi
  800420dd79:	48 b8 ea 96 20 04 80 	movabs $0x80042096ea,%rax
  800420dd80:	00 00 00 
  800420dd83:	ff d0                	callq  *%rax
  800420dd85:	48 b8 98 dd 20 04 80 	movabs $0x800420dd98,%rax
  800420dd8c:	00 00 00 
  800420dd8f:	ff d0                	callq  *%rax
  800420dd91:	48 83 c4 18          	add    $0x18,%rsp
  800420dd95:	5b                   	pop    %rbx
  800420dd96:	5d                   	pop    %rbp
  800420dd97:	c3                   	retq   

000000800420dd98 <sched_halt>:
  800420dd98:	55                   	push   %rbp
  800420dd99:	48 89 e5             	mov    %rsp,%rbp
  800420dd9c:	48 83 ec 20          	sub    $0x20,%rsp
  800420dda0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420dda7:	eb 79                	jmp    800420de22 <sched_halt+0x8a>
  800420dda9:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420ddb0:	00 00 00 
  800420ddb3:	48 8b 10             	mov    (%rax),%rdx
  800420ddb6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ddb9:	48 98                	cltq   
  800420ddbb:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420ddc2:	48 01 d0             	add    %rdx,%rax
  800420ddc5:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420ddcb:	83 f8 02             	cmp    $0x2,%eax
  800420ddce:	74 5f                	je     800420de2f <sched_halt+0x97>
  800420ddd0:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420ddd7:	00 00 00 
  800420ddda:	48 8b 10             	mov    (%rax),%rdx
  800420dddd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420dde0:	48 98                	cltq   
  800420dde2:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dde9:	48 01 d0             	add    %rdx,%rax
  800420ddec:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420ddf2:	83 f8 03             	cmp    $0x3,%eax
  800420ddf5:	74 38                	je     800420de2f <sched_halt+0x97>
  800420ddf7:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800420ddfe:	00 00 00 
  800420de01:	48 8b 10             	mov    (%rax),%rdx
  800420de04:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420de07:	48 98                	cltq   
  800420de09:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de10:	48 01 d0             	add    %rdx,%rax
  800420de13:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de19:	83 f8 01             	cmp    $0x1,%eax
  800420de1c:	74 11                	je     800420de2f <sched_halt+0x97>
  800420de1e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420de22:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420de29:	0f 8e 7a ff ff ff    	jle    800420dda9 <sched_halt+0x11>
  800420de2f:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420de36:	75 2e                	jne    800420de66 <sched_halt+0xce>
  800420de38:	48 bf 08 f7 21 04 80 	movabs $0x800421f708,%rdi
  800420de3f:	00 00 00 
  800420de42:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de47:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420de4e:	00 00 00 
  800420de51:	ff d2                	callq  *%rdx
  800420de53:	bf 00 00 00 00       	mov    $0x0,%edi
  800420de58:	48 b8 5d 1a 20 04 80 	movabs $0x8004201a5d,%rax
  800420de5f:	00 00 00 
  800420de62:	ff d0                	callq  *%rax
  800420de64:	eb ed                	jmp    800420de53 <sched_halt+0xbb>
  800420de66:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420de6d:	00 00 00 
  800420de70:	ff d0                	callq  *%rax
  800420de72:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420de79:	00 00 00 
  800420de7c:	48 98                	cltq   
  800420de7e:	48 c1 e0 03          	shl    $0x3,%rax
  800420de82:	48 89 c1             	mov    %rax,%rcx
  800420de85:	48 c1 e1 04          	shl    $0x4,%rcx
  800420de89:	48 01 c8             	add    %rcx,%rax
  800420de8c:	48 01 d0             	add    %rdx,%rax
  800420de8f:	48 83 c0 08          	add    $0x8,%rax
  800420de93:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420de9a:	48 b8 f0 b5 6d 04 80 	movabs $0x80046db5f0,%rax
  800420dea1:	00 00 00 
  800420dea4:	48 8b 00             	mov    (%rax),%rax
  800420dea7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420deab:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420deb2:	00 00 00 
  800420deb5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420deb9:	77 32                	ja     800420deed <sched_halt+0x155>
  800420debb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420debf:	48 89 c1             	mov    %rax,%rcx
  800420dec2:	48 ba 38 f7 21 04 80 	movabs $0x800421f738,%rdx
  800420dec9:	00 00 00 
  800420decc:	be 76 00 00 00       	mov    $0x76,%esi
  800420ded1:	48 bf 5c f7 21 04 80 	movabs $0x800421f75c,%rdi
  800420ded8:	00 00 00 
  800420dedb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dee0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420dee7:	00 00 00 
  800420deea:	41 ff d0             	callq  *%r8
  800420deed:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420def4:	ff ff ff 
  800420def7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420defb:	48 01 d0             	add    %rdx,%rax
  800420defe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420df02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420df06:	0f 22 d8             	mov    %rax,%cr3
  800420df09:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420df10:	00 00 00 
  800420df13:	ff d0                	callq  *%rax
  800420df15:	48 98                	cltq   
  800420df17:	48 c1 e0 03          	shl    $0x3,%rax
  800420df1b:	48 89 c2             	mov    %rax,%rdx
  800420df1e:	48 c1 e2 04          	shl    $0x4,%rdx
  800420df22:	48 01 d0             	add    %rdx,%rax
  800420df25:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420df2c:	00 00 00 
  800420df2f:	48 01 d0             	add    %rdx,%rax
  800420df32:	48 83 c0 04          	add    $0x4,%rax
  800420df36:	be 02 00 00 00       	mov    $0x2,%esi
  800420df3b:	48 89 c7             	mov    %rax,%rdi
  800420df3e:	48 b8 42 d9 20 04 80 	movabs $0x800420d942,%rax
  800420df45:	00 00 00 
  800420df48:	ff d0                	callq  *%rax
  800420df4a:	48 b8 67 d9 20 04 80 	movabs $0x800420d967,%rax
  800420df51:	00 00 00 
  800420df54:	ff d0                	callq  *%rax
  800420df56:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420df5d:	00 00 00 
  800420df60:	ff d0                	callq  *%rax
  800420df62:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420df69:	00 00 00 
  800420df6c:	48 98                	cltq   
  800420df6e:	48 c1 e0 03          	shl    $0x3,%rax
  800420df72:	48 89 c1             	mov    %rax,%rcx
  800420df75:	48 c1 e1 04          	shl    $0x4,%rcx
  800420df79:	48 01 c8             	add    %rcx,%rax
  800420df7c:	48 01 d0             	add    %rdx,%rax
  800420df7f:	48 83 c0 10          	add    $0x10,%rax
  800420df83:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420df87:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420df8e:	48 89 c4             	mov    %rax,%rsp
  800420df91:	6a 00                	pushq  $0x0
  800420df93:	6a 00                	pushq  $0x0
  800420df95:	fb                   	sti    
  800420df96:	f4                   	hlt    
  800420df97:	c9                   	leaveq 
  800420df98:	c3                   	retq   

000000800420df99 <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420df99:	55                   	push   %rbp
  800420df9a:	48 89 e5             	mov    %rsp,%rbp
  800420df9d:	48 83 ec 10          	sub    $0x10,%rsp
  800420dfa1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420dfa5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len, PTE_U);
  800420dfa9:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420dfb0:	00 00 00 
  800420dfb3:	ff d0                	callq  *%rax
  800420dfb5:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420dfbc:	00 00 00 
  800420dfbf:	48 98                	cltq   
  800420dfc1:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfc5:	48 89 c1             	mov    %rax,%rcx
  800420dfc8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dfcc:	48 01 c8             	add    %rcx,%rax
  800420dfcf:	48 01 d0             	add    %rdx,%rax
  800420dfd2:	48 83 c0 08          	add    $0x8,%rax
  800420dfd6:	48 8b 00             	mov    (%rax),%rax
  800420dfd9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420dfdd:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420dfe1:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420dfe6:	48 89 c7             	mov    %rax,%rdi
  800420dfe9:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420dff0:	00 00 00 
  800420dff3:	ff d0                	callq  *%rax

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420dff5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420dff9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420dffd:	48 89 c6             	mov    %rax,%rsi
  800420e000:	48 bf 70 f7 21 04 80 	movabs $0x800421f770,%rdi
  800420e007:	00 00 00 
  800420e00a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e00f:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420e016:	00 00 00 
  800420e019:	ff d1                	callq  *%rcx
}
  800420e01b:	c9                   	leaveq 
  800420e01c:	c3                   	retq   

000000800420e01d <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420e01d:	55                   	push   %rbp
  800420e01e:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  800420e021:	48 b8 b2 10 20 04 80 	movabs $0x80042010b2,%rax
  800420e028:	00 00 00 
  800420e02b:	ff d0                	callq  *%rax
}
  800420e02d:	5d                   	pop    %rbp
  800420e02e:	c3                   	retq   

000000800420e02f <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420e02f:	55                   	push   %rbp
  800420e030:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  800420e033:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e03a:	00 00 00 
  800420e03d:	ff d0                	callq  *%rax
  800420e03f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e046:	00 00 00 
  800420e049:	48 98                	cltq   
  800420e04b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e04f:	48 89 c1             	mov    %rax,%rcx
  800420e052:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e056:	48 01 c8             	add    %rcx,%rax
  800420e059:	48 01 d0             	add    %rdx,%rax
  800420e05c:	48 83 c0 08          	add    $0x8,%rax
  800420e060:	48 8b 00             	mov    (%rax),%rax
  800420e063:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e069:	5d                   	pop    %rbp
  800420e06a:	c3                   	retq   

000000800420e06b <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420e06b:	55                   	push   %rbp
  800420e06c:	48 89 e5             	mov    %rsp,%rbp
  800420e06f:	48 83 ec 20          	sub    $0x20,%rsp
  800420e073:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e076:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e07a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e07d:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e082:	48 89 ce             	mov    %rcx,%rsi
  800420e085:	89 c7                	mov    %eax,%edi
  800420e087:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e08e:	00 00 00 
  800420e091:	ff d0                	callq  *%rax
  800420e093:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e096:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e09a:	79 05                	jns    800420e0a1 <sys_env_destroy+0x36>
		return r;
  800420e09c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e09f:	eb 18                	jmp    800420e0b9 <sys_env_destroy+0x4e>
	env_destroy(e);
  800420e0a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e0a5:	48 89 c7             	mov    %rax,%rdi
  800420e0a8:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800420e0af:	00 00 00 
  800420e0b2:	ff d0                	callq  *%rax
	return 0;
  800420e0b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e0b9:	c9                   	leaveq 
  800420e0ba:	c3                   	retq   

000000800420e0bb <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420e0bb:	55                   	push   %rbp
  800420e0bc:	48 89 e5             	mov    %rsp,%rbp
	sched_yield();
  800420e0bf:	48 b8 26 da 20 04 80 	movabs $0x800420da26,%rax
  800420e0c6:	00 00 00 
  800420e0c9:	ff d0                	callq  *%rax

000000800420e0cb <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420e0cb:	55                   	push   %rbp
  800420e0cc:	48 89 e5             	mov    %rsp,%rbp
  800420e0cf:	53                   	push   %rbx
  800420e0d0:	48 83 ec 18          	sub    $0x18,%rsp
	int r;
	struct Env *e;

	if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420e0d4:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e0db:	00 00 00 
  800420e0de:	ff d0                	callq  *%rax
  800420e0e0:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e0e7:	00 00 00 
  800420e0ea:	48 98                	cltq   
  800420e0ec:	48 c1 e0 03          	shl    $0x3,%rax
  800420e0f0:	48 89 c1             	mov    %rax,%rcx
  800420e0f3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e0f7:	48 01 c8             	add    %rcx,%rax
  800420e0fa:	48 01 d0             	add    %rdx,%rax
  800420e0fd:	48 83 c0 08          	add    $0x8,%rax
  800420e101:	48 8b 00             	mov    (%rax),%rax
  800420e104:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420e10a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420e10e:	89 d6                	mov    %edx,%esi
  800420e110:	48 89 c7             	mov    %rax,%rdi
  800420e113:	48 b8 5d 89 20 04 80 	movabs $0x800420895d,%rax
  800420e11a:	00 00 00 
  800420e11d:	ff d0                	callq  *%rax
  800420e11f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e122:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e126:	79 05                	jns    800420e12d <sys_exofork+0x62>
		return r;
  800420e128:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e12b:	eb 6c                	jmp    800420e199 <sys_exofork+0xce>
	e->env_status = ENV_NOT_RUNNABLE;
  800420e12d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e131:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e138:	00 00 00 
	e->env_tf = curenv->env_tf;
  800420e13b:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420e13f:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e146:	00 00 00 
  800420e149:	ff d0                	callq  *%rax
  800420e14b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e152:	00 00 00 
  800420e155:	48 98                	cltq   
  800420e157:	48 c1 e0 03          	shl    $0x3,%rax
  800420e15b:	48 89 c1             	mov    %rax,%rcx
  800420e15e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e162:	48 01 c8             	add    %rcx,%rax
  800420e165:	48 01 d0             	add    %rdx,%rax
  800420e168:	48 83 c0 08          	add    $0x8,%rax
  800420e16c:	48 8b 00             	mov    (%rax),%rax
  800420e16f:	48 89 da             	mov    %rbx,%rdx
  800420e172:	48 89 c6             	mov    %rax,%rsi
  800420e175:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e17a:	48 89 d7             	mov    %rdx,%rdi
  800420e17d:	48 89 c1             	mov    %rax,%rcx
  800420e180:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	e->env_tf.tf_regs.reg_rax = 0;
  800420e183:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e187:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e18e:	00 
	return e->env_id;
  800420e18f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e193:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e199:	48 83 c4 18          	add    $0x18,%rsp
  800420e19d:	5b                   	pop    %rbx
  800420e19e:	5d                   	pop    %rbp
  800420e19f:	c3                   	retq   

000000800420e1a0 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420e1a0:	55                   	push   %rbp
  800420e1a1:	48 89 e5             	mov    %rsp,%rbp
  800420e1a4:	48 83 ec 20          	sub    $0x20,%rsp
  800420e1a8:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e1ab:	89 75 e8             	mov    %esi,-0x18(%rbp)
	struct Env *e;
	int r;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e1ae:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e1b2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e1b5:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e1ba:	48 89 ce             	mov    %rcx,%rsi
  800420e1bd:	89 c7                	mov    %eax,%edi
  800420e1bf:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e1c6:	00 00 00 
  800420e1c9:	ff d0                	callq  *%rax
  800420e1cb:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e1ce:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e1d2:	79 05                	jns    800420e1d9 <sys_env_set_status+0x39>
		return r;
  800420e1d4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e1d7:	eb 25                	jmp    800420e1fe <sys_env_set_status+0x5e>
	if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420e1d9:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420e1dd:	74 0d                	je     800420e1ec <sys_env_set_status+0x4c>
  800420e1df:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420e1e3:	74 07                	je     800420e1ec <sys_env_set_status+0x4c>
		return -E_INVAL;
  800420e1e5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e1ea:	eb 12                	jmp    800420e1fe <sys_env_set_status+0x5e>
	e->env_status = status;
  800420e1ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e1f0:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420e1f3:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
	return 0;
  800420e1f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e1fe:	c9                   	leaveq 
  800420e1ff:	c3                   	retq   

000000800420e200 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420e200:	55                   	push   %rbp
  800420e201:	48 89 e5             	mov    %rsp,%rbp
  800420e204:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420e20b:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420e211:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
	int r;
	struct Env *e;
	struct Trapframe ltf;

	user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420e218:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e21f:	00 00 00 
  800420e222:	ff d0                	callq  *%rax
  800420e224:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e22b:	00 00 00 
  800420e22e:	48 98                	cltq   
  800420e230:	48 c1 e0 03          	shl    $0x3,%rax
  800420e234:	48 89 c1             	mov    %rax,%rcx
  800420e237:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e23b:	48 01 c8             	add    %rcx,%rax
  800420e23e:	48 01 d0             	add    %rdx,%rax
  800420e241:	48 83 c0 08          	add    $0x8,%rax
  800420e245:	48 8b 00             	mov    (%rax),%rax
  800420e248:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420e24f:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e254:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420e259:	48 89 c7             	mov    %rax,%rdi
  800420e25c:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420e263:	00 00 00 
  800420e266:	ff d0                	callq  *%rax
	ltf = *tf;
  800420e268:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420e26f:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420e276:	48 89 c6             	mov    %rax,%rsi
  800420e279:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e27e:	48 89 d7             	mov    %rdx,%rdi
  800420e281:	48 89 c1             	mov    %rax,%rcx
  800420e284:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	ltf.tf_eflags |= FL_IF;
  800420e287:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e28b:	80 cc 02             	or     $0x2,%ah
  800420e28e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ltf.tf_cs |= 3;
  800420e292:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420e296:	83 c8 03             	or     $0x3,%eax
  800420e299:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e29d:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e2a1:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420e2a7:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e2ac:	48 89 ce             	mov    %rcx,%rsi
  800420e2af:	89 c7                	mov    %eax,%edi
  800420e2b1:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e2b8:	00 00 00 
  800420e2bb:	ff d0                	callq  *%rax
  800420e2bd:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e2c0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e2c4:	79 05                	jns    800420e2cb <sys_env_set_trapframe+0xcb>
		return r;
  800420e2c6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e2c9:	eb 21                	jmp    800420e2ec <sys_env_set_trapframe+0xec>
	e->env_tf = ltf;
  800420e2cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e2cf:	48 89 c2             	mov    %rax,%rdx
  800420e2d2:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420e2d9:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e2de:	48 89 d7             	mov    %rdx,%rdi
  800420e2e1:	48 89 c1             	mov    %rax,%rcx
  800420e2e4:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	return 0;
  800420e2e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e2ec:	c9                   	leaveq 
  800420e2ed:	c3                   	retq   

000000800420e2ee <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420e2ee:	55                   	push   %rbp
  800420e2ef:	48 89 e5             	mov    %rsp,%rbp
  800420e2f2:	48 83 ec 20          	sub    $0x20,%rsp
  800420e2f6:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e2f9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e2fd:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e301:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e304:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e309:	48 89 ce             	mov    %rcx,%rsi
  800420e30c:	89 c7                	mov    %eax,%edi
  800420e30e:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e315:	00 00 00 
  800420e318:	ff d0                	callq  *%rax
  800420e31a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e31d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e321:	79 05                	jns    800420e328 <sys_env_set_pgfault_upcall+0x3a>
		return r;
  800420e323:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e326:	eb 14                	jmp    800420e33c <sys_env_set_pgfault_upcall+0x4e>
	e->env_pgfault_upcall = func;
  800420e328:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e32c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e330:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
	return 0;
  800420e337:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e33c:	c9                   	leaveq 
  800420e33d:	c3                   	retq   

000000800420e33e <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420e33e:	55                   	push   %rbp
  800420e33f:	48 89 e5             	mov    %rsp,%rbp
  800420e342:	48 83 ec 30          	sub    $0x30,%rsp
  800420e346:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420e349:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420e34d:	89 55 d8             	mov    %edx,-0x28(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e350:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420e354:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420e357:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e35c:	48 89 ce             	mov    %rcx,%rsi
  800420e35f:	89 c7                	mov    %eax,%edi
  800420e361:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e368:	00 00 00 
  800420e36b:	ff d0                	callq  *%rax
  800420e36d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e370:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e374:	79 08                	jns    800420e37e <sys_page_alloc+0x40>
		return r;
  800420e376:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e379:	e9 a7 00 00 00       	jmpq   800420e425 <sys_page_alloc+0xe7>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e37e:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e381:	f7 d0                	not    %eax
  800420e383:	83 e0 05             	and    $0x5,%eax
  800420e386:	85 c0                	test   %eax,%eax
  800420e388:	75 0c                	jne    800420e396 <sys_page_alloc+0x58>
  800420e38a:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e38d:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e392:	85 c0                	test   %eax,%eax
  800420e394:	74 0a                	je     800420e3a0 <sys_page_alloc+0x62>
		return -E_INVAL;
  800420e396:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e39b:	e9 85 00 00 00       	jmpq   800420e425 <sys_page_alloc+0xe7>
	if (va >= (void*) UTOP)
  800420e3a0:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e3a7:	00 00 00 
  800420e3aa:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420e3ae:	76 07                	jbe    800420e3b7 <sys_page_alloc+0x79>
		return -E_INVAL;
  800420e3b0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e3b5:	eb 6e                	jmp    800420e425 <sys_page_alloc+0xe7>
	if (!(pp = page_alloc(ALLOC_ZERO)))
  800420e3b7:	bf 01 00 00 00       	mov    $0x1,%edi
  800420e3bc:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800420e3c3:	00 00 00 
  800420e3c6:	ff d0                	callq  *%rax
  800420e3c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e3cc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420e3d1:	75 07                	jne    800420e3da <sys_page_alloc+0x9c>
		return -E_NO_MEM;
  800420e3d3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420e3d8:	eb 4b                	jmp    800420e425 <sys_page_alloc+0xe7>
	if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0) {
  800420e3da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e3de:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e3e5:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420e3e8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e3ec:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420e3f0:	48 89 c7             	mov    %rax,%rdi
  800420e3f3:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420e3fa:	00 00 00 
  800420e3fd:	ff d0                	callq  *%rax
  800420e3ff:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e402:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e406:	79 18                	jns    800420e420 <sys_page_alloc+0xe2>
		page_free(pp);
  800420e408:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e40c:	48 89 c7             	mov    %rax,%rdi
  800420e40f:	48 b8 59 2f 20 04 80 	movabs $0x8004202f59,%rax
  800420e416:	00 00 00 
  800420e419:	ff d0                	callq  *%rax
		return r;
  800420e41b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e41e:	eb 05                	jmp    800420e425 <sys_page_alloc+0xe7>
	}
	return 0;
  800420e420:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e425:	c9                   	leaveq 
  800420e426:	c3                   	retq   

000000800420e427 <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
  800420e427:	55                   	push   %rbp
  800420e428:	48 89 e5             	mov    %rsp,%rbp
  800420e42b:	48 83 ec 60          	sub    $0x60,%rsp
  800420e42f:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420e432:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420e436:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420e439:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420e43d:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	int r;
	struct Env *es, *ed;
	struct PageInfo *pp;
	pte_t *ppte;

	if (srcva >= (void*) UTOP || dstva >= (void*) UTOP)
  800420e441:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e448:	00 00 00 
  800420e44b:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e44f:	77 10                	ja     800420e461 <sys_page_map+0x3a>
  800420e451:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e458:	00 00 00 
  800420e45b:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420e45f:	76 0a                	jbe    800420e46b <sys_page_map+0x44>
		return -E_INVAL;
  800420e461:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e466:	e9 3f 01 00 00       	jmpq   800420e5aa <sys_page_map+0x183>
	if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420e46b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e46f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e473:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e477:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e47d:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420e481:	75 18                	jne    800420e49b <sys_page_map+0x74>
  800420e483:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420e487:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e48b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e48f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e495:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420e499:	74 0a                	je     800420e4a5 <sys_page_map+0x7e>
		return -E_INVAL;
  800420e49b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e4a0:	e9 05 01 00 00       	jmpq   800420e5aa <sys_page_map+0x183>

	if ((r = envid2env(srcenvid, &es, 1)) < 0
  800420e4a5:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e4a9:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e4ac:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e4b1:	48 89 ce             	mov    %rcx,%rsi
  800420e4b4:	89 c7                	mov    %eax,%edi
  800420e4b6:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e4bd:	00 00 00 
  800420e4c0:	ff d0                	callq  *%rax
  800420e4c2:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e4c5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e4c9:	78 26                	js     800420e4f1 <sys_page_map+0xca>
            || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420e4cb:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420e4cf:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420e4d2:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e4d7:	48 89 ce             	mov    %rcx,%rsi
  800420e4da:	89 c7                	mov    %eax,%edi
  800420e4dc:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e4e3:	00 00 00 
  800420e4e6:	ff d0                	callq  *%rax
  800420e4e8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e4eb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e4ef:	79 08                	jns    800420e4f9 <sys_page_map+0xd2>
		return r;
  800420e4f1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e4f4:	e9 b1 00 00 00       	jmpq   800420e5aa <sys_page_map+0x183>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e4f9:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e4fc:	f7 d0                	not    %eax
  800420e4fe:	83 e0 05             	and    $0x5,%eax
  800420e501:	85 c0                	test   %eax,%eax
  800420e503:	75 0c                	jne    800420e511 <sys_page_map+0xea>
  800420e505:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e508:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e50d:	85 c0                	test   %eax,%eax
  800420e50f:	74 0a                	je     800420e51b <sys_page_map+0xf4>
		return -E_INVAL;
  800420e511:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e516:	e9 8f 00 00 00       	jmpq   800420e5aa <sys_page_map+0x183>
	if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420e51b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e51f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e526:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420e52a:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420e52e:	48 89 ce             	mov    %rcx,%rsi
  800420e531:	48 89 c7             	mov    %rax,%rdi
  800420e534:	48 b8 89 3d 20 04 80 	movabs $0x8004203d89,%rax
  800420e53b:	00 00 00 
  800420e53e:	ff d0                	callq  *%rax
  800420e540:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e544:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e549:	75 07                	jne    800420e552 <sys_page_map+0x12b>
		return -E_INVAL;
  800420e54b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e550:	eb 58                	jmp    800420e5aa <sys_page_map+0x183>
	if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420e552:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e555:	83 e0 02             	and    $0x2,%eax
  800420e558:	85 c0                	test   %eax,%eax
  800420e55a:	74 16                	je     800420e572 <sys_page_map+0x14b>
  800420e55c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e560:	48 8b 00             	mov    (%rax),%rax
  800420e563:	83 e0 02             	and    $0x2,%eax
  800420e566:	48 85 c0             	test   %rax,%rax
  800420e569:	75 07                	jne    800420e572 <sys_page_map+0x14b>
		return -E_INVAL;
  800420e56b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e570:	eb 38                	jmp    800420e5aa <sys_page_map+0x183>
	if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420e572:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e576:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e57d:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420e580:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420e584:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e588:	48 89 c7             	mov    %rax,%rdi
  800420e58b:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420e592:	00 00 00 
  800420e595:	ff d0                	callq  *%rax
  800420e597:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e59a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e59e:	79 05                	jns    800420e5a5 <sys_page_map+0x17e>
		return r;
  800420e5a0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e5a3:	eb 05                	jmp    800420e5aa <sys_page_map+0x183>
	return 0;
  800420e5a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e5aa:	c9                   	leaveq 
  800420e5ab:	c3                   	retq   

000000800420e5ac <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420e5ac:	55                   	push   %rbp
  800420e5ad:	48 89 e5             	mov    %rsp,%rbp
  800420e5b0:	48 83 ec 20          	sub    $0x20,%rsp
  800420e5b4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e5b7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e5bb:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e5bf:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e5c2:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e5c7:	48 89 ce             	mov    %rcx,%rsi
  800420e5ca:	89 c7                	mov    %eax,%edi
  800420e5cc:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e5d3:	00 00 00 
  800420e5d6:	ff d0                	callq  *%rax
  800420e5d8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e5db:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e5df:	79 05                	jns    800420e5e6 <sys_page_unmap+0x3a>
		return r;
  800420e5e1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e5e4:	eb 4b                	jmp    800420e631 <sys_page_unmap+0x85>
	if (va >= (void*) UTOP || PGOFF(va))
  800420e5e6:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e5ed:	00 00 00 
  800420e5f0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420e5f4:	77 0e                	ja     800420e604 <sys_page_unmap+0x58>
  800420e5f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e5fa:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420e5ff:	48 85 c0             	test   %rax,%rax
  800420e602:	74 07                	je     800420e60b <sys_page_unmap+0x5f>
		return -E_INVAL;
  800420e604:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e609:	eb 26                	jmp    800420e631 <sys_page_unmap+0x85>
	page_remove(e->env_pml4e, va);
  800420e60b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e60f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e616:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e61a:	48 89 d6             	mov    %rdx,%rsi
  800420e61d:	48 89 c7             	mov    %rax,%rdi
  800420e620:	48 b8 14 3e 20 04 80 	movabs $0x8004203e14,%rax
  800420e627:	00 00 00 
  800420e62a:	ff d0                	callq  *%rax
	return 0;
  800420e62c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e631:	c9                   	leaveq 
  800420e632:	c3                   	retq   

000000800420e633 <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420e633:	55                   	push   %rbp
  800420e634:	48 89 e5             	mov    %rsp,%rbp
  800420e637:	53                   	push   %rbx
  800420e638:	48 83 ec 48          	sub    $0x48,%rsp
  800420e63c:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420e63f:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420e642:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420e646:	89 4d bc             	mov    %ecx,-0x44(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;
    pte_t *ppte;
    if ((r = envid2env(envid, &e, 0)) < 0)
  800420e649:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e64d:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420e650:	ba 00 00 00 00       	mov    $0x0,%edx
  800420e655:	48 89 ce             	mov    %rcx,%rsi
  800420e658:	89 c7                	mov    %eax,%edi
  800420e65a:	48 b8 0d 7e 20 04 80 	movabs $0x8004207e0d,%rax
  800420e661:	00 00 00 
  800420e664:	ff d0                	callq  *%rax
  800420e666:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e669:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e66d:	79 08                	jns    800420e677 <sys_ipc_try_send+0x44>
        return r;
  800420e66f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e672:	e9 25 03 00 00       	jmpq   800420e99c <sys_ipc_try_send+0x369>
    if (!e->env_ipc_recving) {
  800420e677:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e67b:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e682:	83 f0 01             	xor    $0x1,%eax
  800420e685:	84 c0                	test   %al,%al
  800420e687:	74 0a                	je     800420e693 <sys_ipc_try_send+0x60>
        /* cprintf("[%08x] not recieving!\n", e->env_id); */
        return -E_IPC_NOT_RECV;
  800420e689:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420e68e:	e9 09 03 00 00       	jmpq   800420e99c <sys_ipc_try_send+0x369>

    /*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination 
     *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
    /* Your code here */

    if (srcva < (void*) UTOP && e->env_ipc_dstva < (void*) UTOP) {
  800420e693:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e69a:	00 00 00 
  800420e69d:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420e6a1:	0f 87 70 02 00 00    	ja     800420e917 <sys_ipc_try_send+0x2e4>
  800420e6a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e6ab:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e6b2:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e6b9:	00 00 00 
  800420e6bc:	48 39 c2             	cmp    %rax,%rdx
  800420e6bf:	0f 87 52 02 00 00    	ja     800420e917 <sys_ipc_try_send+0x2e4>
        if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) {
  800420e6c5:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e6c8:	f7 d0                	not    %eax
  800420e6ca:	83 e0 05             	and    $0x5,%eax
  800420e6cd:	85 c0                	test   %eax,%eax
  800420e6cf:	75 0c                	jne    800420e6dd <sys_ipc_try_send+0xaa>
  800420e6d1:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e6d4:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e6d9:	85 c0                	test   %eax,%eax
  800420e6db:	74 60                	je     800420e73d <sys_ipc_try_send+0x10a>
            cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420e6dd:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e6e4:	00 00 00 
  800420e6e7:	ff d0                	callq  *%rax
  800420e6e9:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e6f0:	00 00 00 
  800420e6f3:	48 98                	cltq   
  800420e6f5:	48 c1 e0 03          	shl    $0x3,%rax
  800420e6f9:	48 89 c1             	mov    %rax,%rcx
  800420e6fc:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e700:	48 01 c8             	add    %rcx,%rax
  800420e703:	48 01 d0             	add    %rdx,%rax
  800420e706:	48 83 c0 08          	add    $0x8,%rax
  800420e70a:	48 8b 00             	mov    (%rax),%rax
  800420e70d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e713:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e716:	89 c6                	mov    %eax,%esi
  800420e718:	48 bf 78 f7 21 04 80 	movabs $0x800421f778,%rdi
  800420e71f:	00 00 00 
  800420e722:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e727:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420e72e:	00 00 00 
  800420e731:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e733:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e738:	e9 5f 02 00 00       	jmpq   800420e99c <sys_ipc_try_send+0x369>
        }

        pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420e73d:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e744:	00 00 00 
  800420e747:	ff d0                	callq  *%rax
  800420e749:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e750:	00 00 00 
  800420e753:	48 98                	cltq   
  800420e755:	48 c1 e0 03          	shl    $0x3,%rax
  800420e759:	48 89 c1             	mov    %rax,%rcx
  800420e75c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e760:	48 01 c8             	add    %rcx,%rax
  800420e763:	48 01 d0             	add    %rdx,%rax
  800420e766:	48 83 c0 08          	add    $0x8,%rax
  800420e76a:	48 8b 00             	mov    (%rax),%rax
  800420e76d:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e774:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420e778:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420e77c:	48 89 ce             	mov    %rcx,%rsi
  800420e77f:	48 89 c7             	mov    %rax,%rdi
  800420e782:	48 b8 89 3d 20 04 80 	movabs $0x8004203d89,%rax
  800420e789:	00 00 00 
  800420e78c:	ff d0                	callq  *%rax
  800420e78e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (pp == 0) {
  800420e792:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e797:	75 61                	jne    800420e7fa <sys_ipc_try_send+0x1c7>
            cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420e799:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e7a0:	00 00 00 
  800420e7a3:	ff d0                	callq  *%rax
  800420e7a5:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e7ac:	00 00 00 
  800420e7af:	48 98                	cltq   
  800420e7b1:	48 c1 e0 03          	shl    $0x3,%rax
  800420e7b5:	48 89 c1             	mov    %rax,%rcx
  800420e7b8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e7bc:	48 01 c8             	add    %rcx,%rax
  800420e7bf:	48 01 d0             	add    %rdx,%rax
  800420e7c2:	48 83 c0 08          	add    $0x8,%rax
  800420e7c6:	48 8b 00             	mov    (%rax),%rax
  800420e7c9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e7cf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e7d3:	89 c6                	mov    %eax,%esi
  800420e7d5:	48 bf a0 f7 21 04 80 	movabs $0x800421f7a0,%rdi
  800420e7dc:	00 00 00 
  800420e7df:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e7e4:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800420e7eb:	00 00 00 
  800420e7ee:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e7f0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e7f5:	e9 a2 01 00 00       	jmpq   800420e99c <sys_ipc_try_send+0x369>
        }

        if ((perm & PTE_W) && !(*ppte & PTE_W)) {
  800420e7fa:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e7fd:	83 e0 02             	and    $0x2,%eax
  800420e800:	85 c0                	test   %eax,%eax
  800420e802:	74 6c                	je     800420e870 <sys_ipc_try_send+0x23d>
  800420e804:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e808:	48 8b 00             	mov    (%rax),%rax
  800420e80b:	83 e0 02             	and    $0x2,%eax
  800420e80e:	48 85 c0             	test   %rax,%rax
  800420e811:	75 5d                	jne    800420e870 <sys_ipc_try_send+0x23d>
            cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420e813:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e81a:	00 00 00 
  800420e81d:	ff d0                	callq  *%rax
  800420e81f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e826:	00 00 00 
  800420e829:	48 98                	cltq   
  800420e82b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e82f:	48 89 c1             	mov    %rax,%rcx
  800420e832:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e836:	48 01 c8             	add    %rcx,%rax
  800420e839:	48 01 d0             	add    %rdx,%rax
  800420e83c:	48 83 c0 08          	add    $0x8,%rax
  800420e840:	48 8b 00             	mov    (%rax),%rax
  800420e843:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e849:	89 c6                	mov    %eax,%esi
  800420e84b:	48 bf d8 f7 21 04 80 	movabs $0x800421f7d8,%rdi
  800420e852:	00 00 00 
  800420e855:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e85a:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800420e861:	00 00 00 
  800420e864:	ff d2                	callq  *%rdx
            return -E_INVAL;
  800420e866:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e86b:	e9 2c 01 00 00       	jmpq   800420e99c <sys_ipc_try_send+0x369>
        }

        r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420e870:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420e873:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e877:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e87e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e882:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e889:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e88d:	48 89 c7             	mov    %rax,%rdi
  800420e890:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  800420e897:	00 00 00 
  800420e89a:	ff d0                	callq  *%rax
  800420e89c:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (r < 0) {
  800420e89f:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e8a3:	79 63                	jns    800420e908 <sys_ipc_try_send+0x2d5>
            cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420e8a5:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e8ac:	00 00 00 
  800420e8af:	ff d0                	callq  *%rax
  800420e8b1:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e8b8:	00 00 00 
  800420e8bb:	48 98                	cltq   
  800420e8bd:	48 c1 e0 03          	shl    $0x3,%rax
  800420e8c1:	48 89 c1             	mov    %rax,%rcx
  800420e8c4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e8c8:	48 01 c8             	add    %rcx,%rax
  800420e8cb:	48 01 d0             	add    %rdx,%rax
  800420e8ce:	48 83 c0 08          	add    $0x8,%rax
  800420e8d2:	48 8b 00             	mov    (%rax),%rax
  800420e8d5:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e8db:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420e8de:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e8e2:	89 c6                	mov    %eax,%esi
  800420e8e4:	48 bf 20 f8 21 04 80 	movabs $0x800421f820,%rdi
  800420e8eb:	00 00 00 
  800420e8ee:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e8f3:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800420e8fa:	00 00 00 
  800420e8fd:	41 ff d0             	callq  *%r8
            return r;
  800420e900:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e903:	e9 94 00 00 00       	jmpq   800420e99c <sys_ipc_try_send+0x369>
        }

        e->env_ipc_perm = perm;
  800420e908:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e90c:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e90f:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420e915:	eb 0e                	jmp    800420e925 <sys_ipc_try_send+0x2f2>
    } else {
        e->env_ipc_perm = 0;
  800420e917:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e91b:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420e922:	00 00 00 
    }

    e->env_ipc_recving = 0;
  800420e925:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e929:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
    e->env_ipc_from = curenv->env_id;
  800420e930:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420e934:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e93b:	00 00 00 
  800420e93e:	ff d0                	callq  *%rax
  800420e940:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e947:	00 00 00 
  800420e94a:	48 98                	cltq   
  800420e94c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e950:	48 89 c1             	mov    %rax,%rcx
  800420e953:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e957:	48 01 c8             	add    %rcx,%rax
  800420e95a:	48 01 d0             	add    %rdx,%rax
  800420e95d:	48 83 c0 08          	add    $0x8,%rax
  800420e961:	48 8b 00             	mov    (%rax),%rax
  800420e964:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e96a:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
    e->env_ipc_value = value;
  800420e970:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e974:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420e977:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
    e->env_tf.tf_regs.reg_rax = 0;
  800420e97d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e981:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e988:	00 
    e->env_status = ENV_RUNNABLE;
  800420e989:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e98d:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420e994:	00 00 00 
    return 0;
  800420e997:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e99c:	48 83 c4 48          	add    $0x48,%rsp
  800420e9a0:	5b                   	pop    %rbx
  800420e9a1:	5d                   	pop    %rbp
  800420e9a2:	c3                   	retq   

000000800420e9a3 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420e9a3:	55                   	push   %rbp
  800420e9a4:	48 89 e5             	mov    %rsp,%rbp
  800420e9a7:	48 83 ec 10          	sub    $0x10,%rsp
  800420e9ab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (curenv->env_ipc_recving)
  800420e9af:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420e9b6:	00 00 00 
  800420e9b9:	ff d0                	callq  *%rax
  800420e9bb:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420e9c2:	00 00 00 
  800420e9c5:	48 98                	cltq   
  800420e9c7:	48 c1 e0 03          	shl    $0x3,%rax
  800420e9cb:	48 89 c1             	mov    %rax,%rcx
  800420e9ce:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e9d2:	48 01 c8             	add    %rcx,%rax
  800420e9d5:	48 01 d0             	add    %rdx,%rax
  800420e9d8:	48 83 c0 08          	add    $0x8,%rax
  800420e9dc:	48 8b 00             	mov    (%rax),%rax
  800420e9df:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e9e6:	84 c0                	test   %al,%al
  800420e9e8:	74 2a                	je     800420ea14 <sys_ipc_recv+0x71>
		panic("already recving!");
  800420e9ea:	48 ba 59 f8 21 04 80 	movabs $0x800421f859,%rdx
  800420e9f1:	00 00 00 
  800420e9f4:	be 7b 01 00 00       	mov    $0x17b,%esi
  800420e9f9:	48 bf 6a f8 21 04 80 	movabs $0x800421f86a,%rdi
  800420ea00:	00 00 00 
  800420ea03:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea08:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800420ea0f:	00 00 00 
  800420ea12:	ff d1                	callq  *%rcx

	curenv->env_ipc_recving = 1;
  800420ea14:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420ea1b:	00 00 00 
  800420ea1e:	ff d0                	callq  *%rax
  800420ea20:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ea27:	00 00 00 
  800420ea2a:	48 98                	cltq   
  800420ea2c:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea30:	48 89 c1             	mov    %rax,%rcx
  800420ea33:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea37:	48 01 c8             	add    %rcx,%rax
  800420ea3a:	48 01 d0             	add    %rdx,%rax
  800420ea3d:	48 83 c0 08          	add    $0x8,%rax
  800420ea41:	48 8b 00             	mov    (%rax),%rax
  800420ea44:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
	curenv->env_ipc_dstva = dstva;
  800420ea4b:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420ea52:	00 00 00 
  800420ea55:	ff d0                	callq  *%rax
  800420ea57:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ea5e:	00 00 00 
  800420ea61:	48 98                	cltq   
  800420ea63:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea67:	48 89 c1             	mov    %rax,%rcx
  800420ea6a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea6e:	48 01 c8             	add    %rcx,%rax
  800420ea71:	48 01 d0             	add    %rdx,%rax
  800420ea74:	48 83 c0 08          	add    $0x8,%rax
  800420ea78:	48 8b 00             	mov    (%rax),%rax
  800420ea7b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420ea7f:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
	curenv->env_status = ENV_NOT_RUNNABLE;
  800420ea86:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420ea8d:	00 00 00 
  800420ea90:	ff d0                	callq  *%rax
  800420ea92:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ea99:	00 00 00 
  800420ea9c:	48 98                	cltq   
  800420ea9e:	48 c1 e0 03          	shl    $0x3,%rax
  800420eaa2:	48 89 c1             	mov    %rax,%rcx
  800420eaa5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eaa9:	48 01 c8             	add    %rcx,%rax
  800420eaac:	48 01 d0             	add    %rdx,%rax
  800420eaaf:	48 83 c0 08          	add    $0x8,%rax
  800420eab3:	48 8b 00             	mov    (%rax),%rax
  800420eab6:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420eabd:	00 00 00 
	sched_yield();
  800420eac0:	48 b8 26 da 20 04 80 	movabs $0x800420da26,%rax
  800420eac7:	00 00 00 
  800420eaca:	ff d0                	callq  *%rax

000000800420eacc <sys_time_msec>:


// Return the current time.
static int
sys_time_msec(void)
{
  800420eacc:	55                   	push   %rbp
  800420eacd:	48 89 e5             	mov    %rsp,%rbp
	return (int) time_msec();
  800420ead0:	48 b8 18 94 21 04 80 	movabs $0x8004219418,%rax
  800420ead7:	00 00 00 
  800420eada:	ff d0                	callq  *%rax
}
  800420eadc:	5d                   	pop    %rbp
  800420eadd:	c3                   	retq   

000000800420eade <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420eade:	55                   	push   %rbp
  800420eadf:	48 89 e5             	mov    %rsp,%rbp
  800420eae2:	48 83 ec 10          	sub    $0x10,%rsp
  800420eae6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420eaea:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, data, len, 0);
  800420eaee:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420eaf5:	00 00 00 
  800420eaf8:	ff d0                	callq  *%rax
  800420eafa:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420eb01:	00 00 00 
  800420eb04:	48 98                	cltq   
  800420eb06:	48 c1 e0 03          	shl    $0x3,%rax
  800420eb0a:	48 89 c1             	mov    %rax,%rcx
  800420eb0d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eb11:	48 01 c8             	add    %rcx,%rax
  800420eb14:	48 01 d0             	add    %rdx,%rax
  800420eb17:	48 83 c0 08          	add    $0x8,%rax
  800420eb1b:	48 8b 00             	mov    (%rax),%rax
  800420eb1e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420eb22:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420eb26:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420eb2b:	48 89 c7             	mov    %rax,%rdi
  800420eb2e:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420eb35:	00 00 00 
  800420eb38:	ff d0                	callq  *%rax
	return e1000_transmit(data, len);
  800420eb3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb3e:	89 c2                	mov    %eax,%edx
  800420eb40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420eb44:	89 d6                	mov    %edx,%esi
  800420eb46:	48 89 c7             	mov    %rax,%rdi
  800420eb49:	48 b8 a1 85 21 04 80 	movabs $0x80042185a1,%rax
  800420eb50:	00 00 00 
  800420eb53:	ff d0                	callq  *%rax
}
  800420eb55:	c9                   	leaveq 
  800420eb56:	c3                   	retq   

000000800420eb57 <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420eb57:	55                   	push   %rbp
  800420eb58:	48 89 e5             	mov    %rsp,%rbp
  800420eb5b:	48 83 ec 10          	sub    $0x10,%rsp
  800420eb5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420eb63:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, buf, len, PTE_W);
  800420eb67:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420eb6e:	00 00 00 
  800420eb71:	ff d0                	callq  *%rax
  800420eb73:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420eb7a:	00 00 00 
  800420eb7d:	48 98                	cltq   
  800420eb7f:	48 c1 e0 03          	shl    $0x3,%rax
  800420eb83:	48 89 c1             	mov    %rax,%rcx
  800420eb86:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eb8a:	48 01 c8             	add    %rcx,%rax
  800420eb8d:	48 01 d0             	add    %rdx,%rax
  800420eb90:	48 83 c0 08          	add    $0x8,%rax
  800420eb94:	48 8b 00             	mov    (%rax),%rax
  800420eb97:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420eb9b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420eb9f:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420eba4:	48 89 c7             	mov    %rax,%rdi
  800420eba7:	48 b8 6b 41 20 04 80 	movabs $0x800420416b,%rax
  800420ebae:	00 00 00 
  800420ebb1:	ff d0                	callq  *%rax
	return e1000_receive(buf, len);
  800420ebb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ebb7:	89 c2                	mov    %eax,%edx
  800420ebb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ebbd:	89 d6                	mov    %edx,%esi
  800420ebbf:	48 89 c7             	mov    %rax,%rdi
  800420ebc2:	48 b8 10 87 21 04 80 	movabs $0x8004218710,%rax
  800420ebc9:	00 00 00 
  800420ebcc:	ff d0                	callq  *%rax
}
  800420ebce:	c9                   	leaveq 
  800420ebcf:	c3                   	retq   

000000800420ebd0 <sys_vmx_list_vms>:

#ifndef VMM_GUEST
static void
sys_vmx_list_vms() {
  800420ebd0:	55                   	push   %rbp
  800420ebd1:	48 89 e5             	mov    %rsp,%rbp
	vmx_list_vms();
  800420ebd4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ebd9:	48 ba f5 a8 21 04 80 	movabs $0x800421a8f5,%rdx
  800420ebe0:	00 00 00 
  800420ebe3:	ff d2                	callq  *%rdx
}
  800420ebe5:	5d                   	pop    %rbp
  800420ebe6:	c3                   	retq   

000000800420ebe7 <sys_vmx_sel_resume>:

static bool
sys_vmx_sel_resume(int i) {
  800420ebe7:	55                   	push   %rbp
  800420ebe8:	48 89 e5             	mov    %rsp,%rbp
  800420ebeb:	48 83 ec 10          	sub    $0x10,%rsp
  800420ebef:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return vmx_sel_resume(i);
  800420ebf2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ebf5:	89 c7                	mov    %eax,%edi
  800420ebf7:	48 b8 b5 a9 21 04 80 	movabs $0x800421a9b5,%rax
  800420ebfe:	00 00 00 
  800420ec01:	ff d0                	callq  *%rax
}
  800420ec03:	c9                   	leaveq 
  800420ec04:	c3                   	retq   

000000800420ec05 <sys_vmx_get_vmdisk_number>:

static int
sys_vmx_get_vmdisk_number() {
  800420ec05:	55                   	push   %rbp
  800420ec06:	48 89 e5             	mov    %rsp,%rbp
	return vmx_get_vmdisk_number();
  800420ec09:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec0e:	48 ba f0 d3 21 04 80 	movabs $0x800421d3f0,%rdx
  800420ec15:	00 00 00 
  800420ec18:	ff d2                	callq  *%rdx
}
  800420ec1a:	5d                   	pop    %rbp
  800420ec1b:	c3                   	retq   

000000800420ec1c <sys_vmx_incr_vmdisk_number>:

static void
sys_vmx_incr_vmdisk_number() {
  800420ec1c:	55                   	push   %rbp
  800420ec1d:	48 89 e5             	mov    %rsp,%rbp
	vmx_incr_vmdisk_number();
  800420ec20:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec25:	48 ba 02 d4 21 04 80 	movabs $0x800421d402,%rdx
  800420ec2c:	00 00 00 
  800420ec2f:	ff d2                	callq  *%rdx
}
  800420ec31:	5d                   	pop    %rbp
  800420ec32:	c3                   	retq   

000000800420ec33 <sys_ept_map>:
//       instead of the normal page table. 
// 
static int
sys_ept_map(envid_t srcenvid, void *srcva,
	    envid_t guest, void* guest_pa, int perm)
{
  800420ec33:	55                   	push   %rbp
  800420ec34:	48 89 e5             	mov    %rsp,%rbp
  800420ec37:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420ec3b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420ec3e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420ec42:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800420ec45:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  800420ec49:	44 89 45 e4          	mov    %r8d,-0x1c(%rbp)
    /* Your code here */
    return 0;
  800420ec4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420ec52:	c9                   	leaveq 
  800420ec53:	c3                   	retq   

000000800420ec54 <sys_env_mkguest>:

static envid_t
	sys_env_mkguest(uint64_t gphysz, uint64_t gRIP) {
  800420ec54:	55                   	push   %rbp
  800420ec55:	48 89 e5             	mov    %rsp,%rbp
  800420ec58:	48 83 ec 20          	sub    $0x20,%rsp
  800420ec5c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420ec60:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	// Check if the processor has VMX support.
	if ( !vmx_check_support() ) {
  800420ec64:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec69:	48 ba 8b aa 21 04 80 	movabs $0x800421aa8b,%rdx
  800420ec70:	00 00 00 
  800420ec73:	ff d2                	callq  *%rdx
  800420ec75:	83 f0 01             	xor    $0x1,%eax
  800420ec78:	84 c0                	test   %al,%al
  800420ec7a:	74 0a                	je     800420ec86 <sys_env_mkguest+0x32>
		return -E_NO_VMX;
  800420ec7c:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800420ec81:	e9 b1 00 00 00       	jmpq   800420ed37 <sys_env_mkguest+0xe3>
	} else if ( !vmx_check_ept() ) {
  800420ec86:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec8b:	48 ba 0c ab 21 04 80 	movabs $0x800421ab0c,%rdx
  800420ec92:	00 00 00 
  800420ec95:	ff d2                	callq  *%rdx
  800420ec97:	83 f0 01             	xor    $0x1,%eax
  800420ec9a:	84 c0                	test   %al,%al
  800420ec9c:	74 0a                	je     800420eca8 <sys_env_mkguest+0x54>
		return -E_NO_EPT;
  800420ec9e:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
  800420eca3:	e9 8f 00 00 00       	jmpq   800420ed37 <sys_env_mkguest+0xe3>
	} 
	if ((r = env_guest_alloc(&e, curenv->env_id)) < 0)
  800420eca8:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420ecaf:	00 00 00 
  800420ecb2:	ff d0                	callq  *%rax
  800420ecb4:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420ecbb:	00 00 00 
  800420ecbe:	48 98                	cltq   
  800420ecc0:	48 c1 e0 03          	shl    $0x3,%rax
  800420ecc4:	48 89 c1             	mov    %rax,%rcx
  800420ecc7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eccb:	48 01 c8             	add    %rcx,%rax
  800420ecce:	48 01 d0             	add    %rdx,%rax
  800420ecd1:	48 83 c0 08          	add    $0x8,%rax
  800420ecd5:	48 8b 00             	mov    (%rax),%rax
  800420ecd8:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420ecde:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420ece2:	89 d6                	mov    %edx,%esi
  800420ece4:	48 89 c7             	mov    %rax,%rdi
  800420ece7:	48 b8 9c 81 20 04 80 	movabs $0x800420819c,%rax
  800420ecee:	00 00 00 
  800420ecf1:	ff d0                	callq  *%rax
  800420ecf3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420ecf6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420ecfa:	79 05                	jns    800420ed01 <sys_env_mkguest+0xad>
		return r;
  800420ecfc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ecff:	eb 36                	jmp    800420ed37 <sys_env_mkguest+0xe3>
	e->env_status = ENV_NOT_RUNNABLE;
  800420ed01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed05:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420ed0c:	00 00 00 
	e->env_vmxinfo.phys_sz = gphysz;
  800420ed0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed13:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ed17:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
	e->env_tf.tf_rip = gRIP;
  800420ed1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed22:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ed26:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	return e->env_id;
  800420ed2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed31:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420ed37:	c9                   	leaveq 
  800420ed38:	c3                   	retq   

000000800420ed39 <syscall>:
#endif //!VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420ed39:	55                   	push   %rbp
  800420ed3a:	48 89 e5             	mov    %rsp,%rbp
  800420ed3d:	48 83 ec 30          	sub    $0x30,%rsp
  800420ed41:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ed45:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420ed49:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420ed4d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420ed51:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420ed55:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
	switch (syscallno) {
  800420ed59:	48 83 7d f8 16       	cmpq   $0x16,-0x8(%rbp)
  800420ed5e:	0f 87 c6 02 00 00    	ja     800420f02a <syscall+0x2f1>
  800420ed64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ed68:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420ed6f:	00 
  800420ed70:	48 b8 80 f8 21 04 80 	movabs $0x800421f880,%rax
  800420ed77:	00 00 00 
  800420ed7a:	48 01 d0             	add    %rdx,%rax
  800420ed7d:	48 8b 00             	mov    (%rax),%rax
  800420ed80:	ff e0                	jmpq   *%rax
	case SYS_cputs:
		sys_cputs((const char*) a1, a2);
  800420ed82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ed8a:	48 89 d6             	mov    %rdx,%rsi
  800420ed8d:	48 89 c7             	mov    %rax,%rdi
  800420ed90:	48 b8 99 df 20 04 80 	movabs $0x800420df99,%rax
  800420ed97:	00 00 00 
  800420ed9a:	ff d0                	callq  *%rax
		return 0;
  800420ed9c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eda1:	e9 8b 02 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_cgetc:
		return sys_cgetc();
  800420eda6:	48 b8 1d e0 20 04 80 	movabs $0x800420e01d,%rax
  800420edad:	00 00 00 
  800420edb0:	ff d0                	callq  *%rax
  800420edb2:	48 98                	cltq   
  800420edb4:	e9 78 02 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_getenvid:
		return sys_getenvid();
  800420edb9:	48 b8 2f e0 20 04 80 	movabs $0x800420e02f,%rax
  800420edc0:	00 00 00 
  800420edc3:	ff d0                	callq  *%rax
  800420edc5:	48 98                	cltq   
  800420edc7:	e9 65 02 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_env_destroy:
		return sys_env_destroy(a1);
  800420edcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420edd0:	89 c7                	mov    %eax,%edi
  800420edd2:	48 b8 6b e0 20 04 80 	movabs $0x800420e06b,%rax
  800420edd9:	00 00 00 
  800420eddc:	ff d0                	callq  *%rax
  800420edde:	48 98                	cltq   
  800420ede0:	e9 4c 02 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_page_alloc:
		return sys_page_alloc(a1, (void*) a2, a3);
  800420ede5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ede9:	89 c2                	mov    %eax,%edx
  800420edeb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420edef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420edf3:	48 89 ce             	mov    %rcx,%rsi
  800420edf6:	89 c7                	mov    %eax,%edi
  800420edf8:	48 b8 3e e3 20 04 80 	movabs $0x800420e33e,%rax
  800420edff:	00 00 00 
  800420ee02:	ff d0                	callq  *%rax
  800420ee04:	48 98                	cltq   
  800420ee06:	e9 26 02 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_page_map:
		return sys_page_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420ee0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ee0f:	89 c7                	mov    %eax,%edi
  800420ee11:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420ee15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ee19:	89 c2                	mov    %eax,%edx
  800420ee1b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420ee1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee23:	41 89 f8             	mov    %edi,%r8d
  800420ee26:	89 c7                	mov    %eax,%edi
  800420ee28:	48 b8 27 e4 20 04 80 	movabs $0x800420e427,%rax
  800420ee2f:	00 00 00 
  800420ee32:	ff d0                	callq  *%rax
  800420ee34:	48 98                	cltq   
  800420ee36:	e9 f6 01 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_page_unmap:
		return sys_page_unmap(a1, (void*) a2);
  800420ee3b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ee3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee43:	48 89 d6             	mov    %rdx,%rsi
  800420ee46:	89 c7                	mov    %eax,%edi
  800420ee48:	48 b8 ac e5 20 04 80 	movabs $0x800420e5ac,%rax
  800420ee4f:	00 00 00 
  800420ee52:	ff d0                	callq  *%rax
  800420ee54:	48 98                	cltq   
  800420ee56:	e9 d6 01 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_exofork:
		return sys_exofork();
  800420ee5b:	48 b8 cb e0 20 04 80 	movabs $0x800420e0cb,%rax
  800420ee62:	00 00 00 
  800420ee65:	ff d0                	callq  *%rax
  800420ee67:	48 98                	cltq   
  800420ee69:	e9 c3 01 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_env_set_status:
		return sys_env_set_status(a1, a2);
  800420ee6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ee72:	89 c2                	mov    %eax,%edx
  800420ee74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee78:	89 d6                	mov    %edx,%esi
  800420ee7a:	89 c7                	mov    %eax,%edi
  800420ee7c:	48 b8 a0 e1 20 04 80 	movabs $0x800420e1a0,%rax
  800420ee83:	00 00 00 
  800420ee86:	ff d0                	callq  *%rax
  800420ee88:	48 98                	cltq   
  800420ee8a:	e9 a2 01 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe(a1, (struct Trapframe*) a2);
  800420ee8f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ee93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee97:	48 89 d6             	mov    %rdx,%rsi
  800420ee9a:	89 c7                	mov    %eax,%edi
  800420ee9c:	48 b8 00 e2 20 04 80 	movabs $0x800420e200,%rax
  800420eea3:	00 00 00 
  800420eea6:	ff d0                	callq  *%rax
  800420eea8:	48 98                	cltq   
  800420eeaa:	e9 82 01 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall(a1, (void*) a2);
  800420eeaf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420eeb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eeb7:	48 89 d6             	mov    %rdx,%rsi
  800420eeba:	89 c7                	mov    %eax,%edi
  800420eebc:	48 b8 ee e2 20 04 80 	movabs $0x800420e2ee,%rax
  800420eec3:	00 00 00 
  800420eec6:	ff d0                	callq  *%rax
  800420eec8:	48 98                	cltq   
  800420eeca:	e9 62 01 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_yield:
		sys_yield();
  800420eecf:	48 b8 bb e0 20 04 80 	movabs $0x800420e0bb,%rax
  800420eed6:	00 00 00 
  800420eed9:	ff d0                	callq  *%rax
		return 0;
  800420eedb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eee0:	e9 4c 01 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_ipc_try_send:
		return sys_ipc_try_send(a1, a2, (void*) a3, a4);
  800420eee5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420eee9:	89 c1                	mov    %eax,%ecx
  800420eeeb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420eeef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eef3:	89 c6                	mov    %eax,%esi
  800420eef5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eef9:	89 c7                	mov    %eax,%edi
  800420eefb:	48 b8 33 e6 20 04 80 	movabs $0x800420e633,%rax
  800420ef02:	00 00 00 
  800420ef05:	ff d0                	callq  *%rax
  800420ef07:	48 98                	cltq   
  800420ef09:	e9 23 01 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_ipc_recv:
		sys_ipc_recv((void*) a1);
  800420ef0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef12:	48 89 c7             	mov    %rax,%rdi
  800420ef15:	48 b8 a3 e9 20 04 80 	movabs $0x800420e9a3,%rax
  800420ef1c:	00 00 00 
  800420ef1f:	ff d0                	callq  *%rax
		return 0;
  800420ef21:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ef26:	e9 06 01 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_time_msec:
		return sys_time_msec();
  800420ef2b:	48 b8 cc ea 20 04 80 	movabs $0x800420eacc,%rax
  800420ef32:	00 00 00 
  800420ef35:	ff d0                	callq  *%rax
  800420ef37:	48 98                	cltq   
  800420ef39:	e9 f3 00 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_net_transmit:
		return sys_net_transmit((const void*)a1, a2);
  800420ef3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef42:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ef46:	48 89 d6             	mov    %rdx,%rsi
  800420ef49:	48 89 c7             	mov    %rax,%rdi
  800420ef4c:	48 b8 de ea 20 04 80 	movabs $0x800420eade,%rax
  800420ef53:	00 00 00 
  800420ef56:	ff d0                	callq  *%rax
  800420ef58:	48 98                	cltq   
  800420ef5a:	e9 d2 00 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_net_receive:
		return sys_net_receive((void*)a1, a2);
  800420ef5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef63:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ef67:	48 89 d6             	mov    %rdx,%rsi
  800420ef6a:	48 89 c7             	mov    %rax,%rdi
  800420ef6d:	48 b8 57 eb 20 04 80 	movabs $0x800420eb57,%rax
  800420ef74:	00 00 00 
  800420ef77:	ff d0                	callq  *%rax
  800420ef79:	48 98                	cltq   
  800420ef7b:	e9 b1 00 00 00       	jmpq   800420f031 <syscall+0x2f8>
#ifndef VMM_GUEST
	case SYS_ept_map:
		return sys_ept_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420ef80:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ef84:	89 c7                	mov    %eax,%edi
  800420ef86:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420ef8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ef8e:	89 c2                	mov    %eax,%edx
  800420ef90:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420ef94:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef98:	41 89 f8             	mov    %edi,%r8d
  800420ef9b:	89 c7                	mov    %eax,%edi
  800420ef9d:	48 b8 33 ec 20 04 80 	movabs $0x800420ec33,%rax
  800420efa4:	00 00 00 
  800420efa7:	ff d0                	callq  *%rax
  800420efa9:	48 98                	cltq   
  800420efab:	e9 81 00 00 00       	jmpq   800420f031 <syscall+0x2f8>
	case SYS_env_mkguest:
		return sys_env_mkguest(a1, a2);
  800420efb0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420efb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420efb8:	48 89 d6             	mov    %rdx,%rsi
  800420efbb:	48 89 c7             	mov    %rax,%rdi
  800420efbe:	48 b8 54 ec 20 04 80 	movabs $0x800420ec54,%rax
  800420efc5:	00 00 00 
  800420efc8:	ff d0                	callq  *%rax
  800420efca:	48 98                	cltq   
  800420efcc:	eb 63                	jmp    800420f031 <syscall+0x2f8>
	case SYS_vmx_list_vms:
		sys_vmx_list_vms();
  800420efce:	b8 00 00 00 00       	mov    $0x0,%eax
  800420efd3:	48 ba d0 eb 20 04 80 	movabs $0x800420ebd0,%rdx
  800420efda:	00 00 00 
  800420efdd:	ff d2                	callq  *%rdx
		return 0;
  800420efdf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420efe4:	eb 4b                	jmp    800420f031 <syscall+0x2f8>
	case SYS_vmx_sel_resume:
		return sys_vmx_sel_resume(a1);
  800420efe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420efea:	89 c7                	mov    %eax,%edi
  800420efec:	48 b8 e7 eb 20 04 80 	movabs $0x800420ebe7,%rax
  800420eff3:	00 00 00 
  800420eff6:	ff d0                	callq  *%rax
  800420eff8:	0f b6 c0             	movzbl %al,%eax
  800420effb:	eb 34                	jmp    800420f031 <syscall+0x2f8>
	case SYS_vmx_get_vmdisk_number:
		return sys_vmx_get_vmdisk_number();
  800420effd:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f002:	48 ba 05 ec 20 04 80 	movabs $0x800420ec05,%rdx
  800420f009:	00 00 00 
  800420f00c:	ff d2                	callq  *%rdx
  800420f00e:	48 98                	cltq   
  800420f010:	eb 1f                	jmp    800420f031 <syscall+0x2f8>
	case SYS_vmx_incr_vmdisk_number:
		sys_vmx_incr_vmdisk_number();
  800420f012:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f017:	48 ba 1c ec 20 04 80 	movabs $0x800420ec1c,%rdx
  800420f01e:	00 00 00 
  800420f021:	ff d2                	callq  *%rdx
		return 0;
  800420f023:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f028:	eb 07                	jmp    800420f031 <syscall+0x2f8>
#endif

	default:
		return -E_NO_SYS;
  800420f02a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
	}
}
  800420f031:	c9                   	leaveq 
  800420f032:	c3                   	retq   

000000800420f033 <_export_sys_ept_map>:

#ifdef TEST_EPT_MAP
int
_export_sys_ept_map(envid_t srcenvid, void *srcva,
		    envid_t guest, void* guest_pa, int perm)
{
  800420f033:	55                   	push   %rbp
  800420f034:	48 89 e5             	mov    %rsp,%rbp
  800420f037:	48 83 ec 20          	sub    $0x20,%rsp
  800420f03b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420f03e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f042:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800420f045:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  800420f049:	44 89 45 e4          	mov    %r8d,-0x1c(%rbp)
	return sys_ept_map(srcenvid, srcva, guest, guest_pa, perm);
  800420f04d:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  800420f050:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f054:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420f057:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420f05b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f05e:	41 89 f8             	mov    %edi,%r8d
  800420f061:	89 c7                	mov    %eax,%edi
  800420f063:	48 b8 33 ec 20 04 80 	movabs $0x800420ec33,%rax
  800420f06a:	00 00 00 
  800420f06d:	ff d0                	callq  *%rax
}
  800420f06f:	c9                   	leaveq 
  800420f070:	c3                   	retq   

000000800420f071 <list_func_die>:
  800420f071:	55                   	push   %rbp
  800420f072:	48 89 e5             	mov    %rsp,%rbp
  800420f075:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420f07c:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420f083:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420f08a:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420f091:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f098:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420f09f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420f0a3:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f0aa:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f0b1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f0b5:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420f0bc:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f0c3:	48 89 d1             	mov    %rdx,%rcx
  800420f0c6:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f0cb:	48 89 ce             	mov    %rcx,%rsi
  800420f0ce:	48 89 c7             	mov    %rax,%rdi
  800420f0d1:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  800420f0d8:	00 00 00 
  800420f0db:	ff d0                	callq  *%rax
  800420f0dd:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420f0e4:	00 
  800420f0e5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f0ec:	00 
  800420f0ed:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f0f4:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f0f8:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420f0fc:	74 0a                	je     800420f108 <list_func_die+0x97>
  800420f0fe:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f103:	e9 cd 06 00 00       	jmpq   800420f7d5 <list_func_die+0x764>
  800420f108:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420f10f:	ba 38 00 00 00       	mov    $0x38,%edx
  800420f114:	be 00 00 00 00       	mov    $0x0,%esi
  800420f119:	48 89 c7             	mov    %rax,%rdi
  800420f11c:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  800420f123:	00 00 00 
  800420f126:	ff d0                	callq  *%rax
  800420f128:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f12f:	be 11 00 00 00       	mov    $0x11,%esi
  800420f134:	48 89 c7             	mov    %rax,%rdi
  800420f137:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  800420f13e:	00 00 00 
  800420f141:	ff d0                	callq  *%rax
  800420f143:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f147:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f14e:	be 12 00 00 00       	mov    $0x12,%esi
  800420f153:	48 89 c7             	mov    %rax,%rdi
  800420f156:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  800420f15d:	00 00 00 
  800420f160:	ff d0                	callq  *%rax
  800420f162:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420f166:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420f16b:	0f 84 5f 06 00 00    	je     800420f7d0 <list_func_die+0x75f>
  800420f171:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f175:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f179:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f180:	0f 83 4a 06 00 00    	jae    800420f7d0 <list_func_die+0x75f>
  800420f186:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420f18b:	0f 84 3f 06 00 00    	je     800420f7d0 <list_func_die+0x75f>
  800420f191:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f195:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f199:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f1a0:	0f 86 2a 06 00 00    	jbe    800420f7d0 <list_func_die+0x75f>
  800420f1a6:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f1ad:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f1b4:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f1bb:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f1c2:	48 89 10             	mov    %rdx,(%rax)
  800420f1c5:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f1cc:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f1d3:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f1da:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f1de:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f1e5:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420f1ec:	48 89 c7             	mov    %rax,%rdi
  800420f1ef:	48 b8 66 08 21 04 80 	movabs $0x8004210866,%rax
  800420f1f6:	00 00 00 
  800420f1f9:	ff d0                	callq  *%rax
  800420f1fb:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420f202:	89 42 18             	mov    %eax,0x18(%rdx)
  800420f205:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f209:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420f20d:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f214:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f218:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f21f:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f226:	48 85 c0             	test   %rax,%rax
  800420f229:	75 35                	jne    800420f260 <list_func_die+0x1ef>
  800420f22b:	48 b9 60 fc 21 04 80 	movabs $0x800421fc60,%rcx
  800420f232:	00 00 00 
  800420f235:	48 ba 6c fc 21 04 80 	movabs $0x800421fc6c,%rdx
  800420f23c:	00 00 00 
  800420f23f:	be 95 00 00 00       	mov    $0x95,%esi
  800420f244:	48 bf 81 fc 21 04 80 	movabs $0x800421fc81,%rdi
  800420f24b:	00 00 00 
  800420f24e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f253:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420f25a:	00 00 00 
  800420f25d:	41 ff d0             	callq  *%r8
  800420f260:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f267:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f26e:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420f275:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420f27c:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420f281:	48 89 c7             	mov    %rax,%rdi
  800420f284:	48 b8 c7 60 21 04 80 	movabs $0x80042160c7,%rax
  800420f28b:	00 00 00 
  800420f28e:	ff d0                	callq  *%rax
  800420f290:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420f297:	89 c2                	mov    %eax,%edx
  800420f299:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2a0:	89 50 08             	mov    %edx,0x8(%rax)
  800420f2a3:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2aa:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f2b1:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f2b8:	00 00 00 
  800420f2bb:	48 8b 00             	mov    (%rax),%rax
  800420f2be:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f2c5:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f2cc:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f2d0:	48 89 c7             	mov    %rax,%rdi
  800420f2d3:	48 b8 77 2d 21 04 80 	movabs $0x8004212d77,%rax
  800420f2da:	00 00 00 
  800420f2dd:	ff d0                	callq  *%rax
  800420f2df:	83 f8 04             	cmp    $0x4,%eax
  800420f2e2:	0f 84 e1 04 00 00    	je     800420f7c9 <list_func_die+0x758>
  800420f2e8:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f2ef:	48 83 f8 05          	cmp    $0x5,%rax
  800420f2f3:	74 05                	je     800420f2fa <list_func_die+0x289>
  800420f2f5:	e9 cf 04 00 00       	jmpq   800420f7c9 <list_func_die+0x758>
  800420f2fa:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f301:	be 49 00 00 00       	mov    $0x49,%esi
  800420f306:	48 89 c7             	mov    %rax,%rdi
  800420f309:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  800420f310:	00 00 00 
  800420f313:	ff d0                	callq  *%rax
  800420f315:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f319:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f31e:	0f 84 d7 00 00 00    	je     800420f3fb <list_func_die+0x38a>
  800420f324:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f328:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f32c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f330:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f334:	48 01 d0             	add    %rdx,%rax
  800420f337:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f33b:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f342:	00 00 00 
  800420f345:	48 8b 08             	mov    (%rax),%rcx
  800420f348:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f34f:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f353:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f357:	48 8b 38             	mov    (%rax),%rdi
  800420f35a:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f35e:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f362:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f367:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f36b:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f370:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f374:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f379:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f37d:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f382:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f386:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f38b:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f38f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f394:	48 89 cf             	mov    %rcx,%rdi
  800420f397:	48 b8 9d 29 21 04 80 	movabs $0x800421299d,%rax
  800420f39e:	00 00 00 
  800420f3a1:	ff d0                	callq  *%rax
  800420f3a3:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f3aa:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f3af:	48 89 c7             	mov    %rax,%rdi
  800420f3b2:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  800420f3b9:	00 00 00 
  800420f3bc:	ff d0                	callq  *%rax
  800420f3be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f3c2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f3c7:	74 0e                	je     800420f3d7 <list_func_die+0x366>
  800420f3c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f3cd:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f3d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f3d5:	eb 24                	jmp    800420f3fb <list_func_die+0x38a>
  800420f3d7:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f3de:	be 49 00 00 00       	mov    $0x49,%esi
  800420f3e3:	48 89 c7             	mov    %rax,%rdi
  800420f3e6:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  800420f3ed:	00 00 00 
  800420f3f0:	ff d0                	callq  *%rax
  800420f3f2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f3f6:	e9 1e ff ff ff       	jmpq   800420f319 <list_func_die+0x2a8>
  800420f3fb:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f402:	00 
  800420f403:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f40a:	be 02 00 00 00       	mov    $0x2,%esi
  800420f40f:	48 89 c7             	mov    %rax,%rdi
  800420f412:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  800420f419:	00 00 00 
  800420f41c:	ff d0                	callq  *%rax
  800420f41e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f422:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f427:	0f 84 a2 00 00 00    	je     800420f4cf <list_func_die+0x45e>
  800420f42d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f431:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f435:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420f439:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f43d:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f441:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f445:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f449:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f44d:	48 83 f8 03          	cmp    $0x3,%rax
  800420f451:	72 7c                	jb     800420f4cf <list_func_die+0x45e>
  800420f453:	48 83 f8 04          	cmp    $0x4,%rax
  800420f457:	76 06                	jbe    800420f45f <list_func_die+0x3ee>
  800420f459:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f45d:	75 70                	jne    800420f4cf <list_func_die+0x45e>
  800420f45f:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f466:	00 
  800420f467:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f46b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f46f:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420f473:	0f b6 00             	movzbl (%rax),%eax
  800420f476:	88 45 af             	mov    %al,-0x51(%rbp)
  800420f479:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f47e:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420f482:	75 4a                	jne    800420f4ce <list_func_die+0x45d>
  800420f484:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f488:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420f48f:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420f496:	48 89 c7             	mov    %rax,%rdi
  800420f499:	48 b8 fc 16 21 04 80 	movabs $0x80042116fc,%rax
  800420f4a0:	00 00 00 
  800420f4a3:	ff d0                	callq  *%rax
  800420f4a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f4a9:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f4b0:	48 89 c2             	mov    %rax,%rdx
  800420f4b3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f4b7:	48 29 c2             	sub    %rax,%rdx
  800420f4ba:	48 89 d0             	mov    %rdx,%rax
  800420f4bd:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f4c1:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f4c8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f4cc:	eb 00                	jmp    800420f4ce <list_func_die+0x45d>
  800420f4ce:	90                   	nop
  800420f4cf:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f4d6:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f4d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f4dd:	89 c2                	mov    %eax,%edx
  800420f4df:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f4e6:	48 63 c9             	movslq %ecx,%rcx
  800420f4e9:	48 83 c1 08          	add    $0x8,%rcx
  800420f4ed:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f4f1:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f4f8:	8b 50 28             	mov    0x28(%rax),%edx
  800420f4fb:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f502:	48 63 d2             	movslq %edx,%rdx
  800420f505:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f509:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f50d:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f512:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f519:	8b 40 28             	mov    0x28(%rax),%eax
  800420f51c:	8d 50 01             	lea    0x1(%rax),%edx
  800420f51f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f526:	89 50 28             	mov    %edx,0x28(%rax)
  800420f529:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f530:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f537:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f53c:	48 89 ce             	mov    %rcx,%rsi
  800420f53f:	48 89 c7             	mov    %rax,%rdi
  800420f542:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  800420f549:	00 00 00 
  800420f54c:	ff d0                	callq  *%rax
  800420f54e:	e9 40 02 00 00       	jmpq   800420f793 <list_func_die+0x722>
  800420f553:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f55a:	48 83 f8 05          	cmp    $0x5,%rax
  800420f55e:	74 05                	je     800420f565 <list_func_die+0x4f4>
  800420f560:	e9 64 02 00 00       	jmpq   800420f7c9 <list_func_die+0x758>
  800420f565:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f56c:	be 49 00 00 00       	mov    $0x49,%esi
  800420f571:	48 89 c7             	mov    %rax,%rdi
  800420f574:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  800420f57b:	00 00 00 
  800420f57e:	ff d0                	callq  *%rax
  800420f580:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f584:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f589:	0f 84 b1 00 00 00    	je     800420f640 <list_func_die+0x5cf>
  800420f58f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f593:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f597:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f59b:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f59f:	48 01 d0             	add    %rdx,%rax
  800420f5a2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f5a6:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f5ad:	00 00 00 
  800420f5b0:	48 8b 08             	mov    (%rax),%rcx
  800420f5b3:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f5ba:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f5be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f5c2:	48 8b 38             	mov    (%rax),%rdi
  800420f5c5:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f5c9:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f5cd:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f5d2:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f5d6:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f5db:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f5df:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f5e4:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f5e8:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f5ed:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f5f1:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f5f6:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f5fa:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f5ff:	48 89 cf             	mov    %rcx,%rdi
  800420f602:	48 b8 9d 29 21 04 80 	movabs $0x800421299d,%rax
  800420f609:	00 00 00 
  800420f60c:	ff d0                	callq  *%rax
  800420f60e:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f615:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f61a:	48 89 c7             	mov    %rax,%rdi
  800420f61d:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  800420f624:	00 00 00 
  800420f627:	ff d0                	callq  *%rax
  800420f629:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f62d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f632:	74 0c                	je     800420f640 <list_func_die+0x5cf>
  800420f634:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f638:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f63c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f640:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f647:	00 
  800420f648:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f64f:	be 02 00 00 00       	mov    $0x2,%esi
  800420f654:	48 89 c7             	mov    %rax,%rdi
  800420f657:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  800420f65e:	00 00 00 
  800420f661:	ff d0                	callq  *%rax
  800420f663:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f667:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f66c:	0f 84 a2 00 00 00    	je     800420f714 <list_func_die+0x6a3>
  800420f672:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f676:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f67a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420f67e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f682:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f686:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f68a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f68e:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f692:	48 83 f8 03          	cmp    $0x3,%rax
  800420f696:	72 7c                	jb     800420f714 <list_func_die+0x6a3>
  800420f698:	48 83 f8 04          	cmp    $0x4,%rax
  800420f69c:	76 06                	jbe    800420f6a4 <list_func_die+0x633>
  800420f69e:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f6a2:	75 70                	jne    800420f714 <list_func_die+0x6a3>
  800420f6a4:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f6ab:	00 
  800420f6ac:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f6b0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f6b4:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f6b8:	0f b6 00             	movzbl (%rax),%eax
  800420f6bb:	88 45 97             	mov    %al,-0x69(%rbp)
  800420f6be:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f6c3:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420f6c7:	75 4a                	jne    800420f713 <list_func_die+0x6a2>
  800420f6c9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f6cd:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420f6d4:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420f6db:	48 89 c7             	mov    %rax,%rdi
  800420f6de:	48 b8 fc 16 21 04 80 	movabs $0x80042116fc,%rax
  800420f6e5:	00 00 00 
  800420f6e8:	ff d0                	callq  *%rax
  800420f6ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f6ee:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f6f5:	48 89 c2             	mov    %rax,%rdx
  800420f6f8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f6fc:	48 29 c2             	sub    %rax,%rdx
  800420f6ff:	48 89 d0             	mov    %rdx,%rax
  800420f702:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f706:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f70d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f711:	eb 00                	jmp    800420f713 <list_func_die+0x6a2>
  800420f713:	90                   	nop
  800420f714:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f71b:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f71e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f722:	89 c2                	mov    %eax,%edx
  800420f724:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f72b:	48 63 c9             	movslq %ecx,%rcx
  800420f72e:	48 83 c1 08          	add    $0x8,%rcx
  800420f732:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f736:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f73d:	8b 50 28             	mov    0x28(%rax),%edx
  800420f740:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f747:	48 63 d2             	movslq %edx,%rdx
  800420f74a:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f74e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f752:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f757:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f75e:	8b 40 28             	mov    0x28(%rax),%eax
  800420f761:	8d 50 01             	lea    0x1(%rax),%edx
  800420f764:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f76b:	89 50 28             	mov    %edx,0x28(%rax)
  800420f76e:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f775:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f77c:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f781:	48 89 ce             	mov    %rcx,%rsi
  800420f784:	48 89 c7             	mov    %rax,%rdi
  800420f787:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  800420f78e:	00 00 00 
  800420f791:	ff d0                	callq  *%rax
  800420f793:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f79a:	00 00 00 
  800420f79d:	48 8b 00             	mov    (%rax),%rax
  800420f7a0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f7a4:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420f7ab:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420f7b2:	48 89 c7             	mov    %rax,%rdi
  800420f7b5:	48 b8 33 2b 21 04 80 	movabs $0x8004212b33,%rax
  800420f7bc:	00 00 00 
  800420f7bf:	ff d0                	callq  *%rax
  800420f7c1:	85 c0                	test   %eax,%eax
  800420f7c3:	0f 84 8a fd ff ff    	je     800420f553 <list_func_die+0x4e2>
  800420f7c9:	b8 01 00 00 00       	mov    $0x1,%eax
  800420f7ce:	eb 05                	jmp    800420f7d5 <list_func_die+0x764>
  800420f7d0:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f7d5:	c9                   	leaveq 
  800420f7d6:	c3                   	retq   

000000800420f7d7 <debuginfo_rip>:
  800420f7d7:	55                   	push   %rbp
  800420f7d8:	48 89 e5             	mov    %rsp,%rbp
  800420f7db:	53                   	push   %rbx
  800420f7dc:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420f7e3:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420f7ea:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420f7f1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420f7f8:	00 
  800420f7f9:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420f800:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f804:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f80b:	48 bb 92 fc 21 04 80 	movabs $0x800421fc92,%rbx
  800420f812:	00 00 00 
  800420f815:	48 89 18             	mov    %rbx,(%rax)
  800420f818:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f81f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420f826:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f82d:	48 bb 92 fc 21 04 80 	movabs $0x800421fc92,%rbx
  800420f834:	00 00 00 
  800420f837:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420f83b:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f842:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420f849:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f850:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f857:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f85b:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f862:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f869:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420f870:	00 00 00 
  800420f873:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420f87a:	76 13                	jbe    800420f88f <debuginfo_rip+0xb8>
  800420f87c:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420f883:	00 00 00 
  800420f886:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f88a:	e9 04 01 00 00       	jmpq   800420f993 <debuginfo_rip+0x1bc>
  800420f88f:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420f896:	00 00 00 
  800420f899:	ff d0                	callq  *%rax
  800420f89b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420f8a2:	00 00 00 
  800420f8a5:	48 98                	cltq   
  800420f8a7:	48 c1 e0 03          	shl    $0x3,%rax
  800420f8ab:	48 89 c1             	mov    %rax,%rcx
  800420f8ae:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f8b2:	48 01 c8             	add    %rcx,%rax
  800420f8b5:	48 01 d0             	add    %rdx,%rax
  800420f8b8:	48 83 c0 08          	add    $0x8,%rax
  800420f8bc:	48 8b 10             	mov    (%rax),%rdx
  800420f8bf:	48 b8 98 d2 4d 04 80 	movabs $0x80044dd298,%rax
  800420f8c6:	00 00 00 
  800420f8c9:	48 8b 00             	mov    (%rax),%rax
  800420f8cc:	48 39 c2             	cmp    %rax,%rdx
  800420f8cf:	0f 84 83 00 00 00    	je     800420f958 <debuginfo_rip+0x181>
  800420f8d5:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420f8dc:	00 00 00 
  800420f8df:	ff d0                	callq  *%rax
  800420f8e1:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420f8e8:	00 00 00 
  800420f8eb:	48 98                	cltq   
  800420f8ed:	48 c1 e0 03          	shl    $0x3,%rax
  800420f8f1:	48 89 c1             	mov    %rax,%rcx
  800420f8f4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f8f8:	48 01 c8             	add    %rcx,%rax
  800420f8fb:	48 01 d0             	add    %rdx,%rax
  800420f8fe:	48 83 c0 08          	add    $0x8,%rax
  800420f902:	48 8b 00             	mov    (%rax),%rax
  800420f905:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f90c:	48 89 c7             	mov    %rax,%rdi
  800420f90f:	48 b8 c2 62 21 04 80 	movabs $0x80042162c2,%rax
  800420f916:	00 00 00 
  800420f919:	ff d0                	callq  *%rax
  800420f91b:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420f922:	00 00 00 
  800420f925:	ff d0                	callq  *%rax
  800420f927:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420f92e:	00 00 00 
  800420f931:	48 98                	cltq   
  800420f933:	48 c1 e0 03          	shl    $0x3,%rax
  800420f937:	48 89 c1             	mov    %rax,%rcx
  800420f93a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f93e:	48 01 c8             	add    %rcx,%rax
  800420f941:	48 01 d0             	add    %rdx,%rax
  800420f944:	48 83 c0 08          	add    $0x8,%rax
  800420f948:	48 8b 10             	mov    (%rax),%rdx
  800420f94b:	48 b8 98 d2 4d 04 80 	movabs $0x80044dd298,%rax
  800420f952:	00 00 00 
  800420f955:	48 89 10             	mov    %rdx,(%rax)
  800420f958:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800420f95f:	00 00 00 
  800420f962:	ff d0                	callq  *%rax
  800420f964:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800420f96b:	00 00 00 
  800420f96e:	48 98                	cltq   
  800420f970:	48 c1 e0 03          	shl    $0x3,%rax
  800420f974:	48 89 c1             	mov    %rax,%rcx
  800420f977:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f97b:	48 01 c8             	add    %rcx,%rax
  800420f97e:	48 01 d0             	add    %rdx,%rax
  800420f981:	48 83 c0 08          	add    $0x8,%rax
  800420f985:	48 8b 00             	mov    (%rax),%rax
  800420f988:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f98f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f993:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f99a:	00 00 00 
  800420f99d:	48 8b 00             	mov    (%rax),%rax
  800420f9a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f9a4:	48 89 d6             	mov    %rdx,%rsi
  800420f9a7:	48 89 c7             	mov    %rax,%rdi
  800420f9aa:	48 b8 ab 19 21 04 80 	movabs $0x80042119ab,%rax
  800420f9b1:	00 00 00 
  800420f9b4:	ff d0                	callq  *%rax
  800420f9b6:	48 bf 9c fc 21 04 80 	movabs $0x800421fc9c,%rdi
  800420f9bd:	00 00 00 
  800420f9c0:	48 b8 42 62 21 04 80 	movabs $0x8004216242,%rax
  800420f9c7:	00 00 00 
  800420f9ca:	ff d0                	callq  *%rax
  800420f9cc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f9d0:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f9d7:	00 00 00 
  800420f9da:	48 8b 00             	mov    (%rax),%rax
  800420f9dd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f9e1:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420f9e5:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420f9e9:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f9f0:	00 00 00 
  800420f9f3:	48 8b 00             	mov    (%rax),%rax
  800420f9f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420f9fa:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420f9fe:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fa02:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fa09:	00 00 00 
  800420fa0c:	48 8b 00             	mov    (%rax),%rax
  800420fa0f:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420fa13:	48 85 c0             	test   %rax,%rax
  800420fa16:	75 35                	jne    800420fa4d <debuginfo_rip+0x276>
  800420fa18:	48 b9 a8 fc 21 04 80 	movabs $0x800421fca8,%rcx
  800420fa1f:	00 00 00 
  800420fa22:	48 ba 6c fc 21 04 80 	movabs $0x800421fc6c,%rdx
  800420fa29:	00 00 00 
  800420fa2c:	be 40 01 00 00       	mov    $0x140,%esi
  800420fa31:	48 bf 81 fc 21 04 80 	movabs $0x800421fc81,%rdi
  800420fa38:	00 00 00 
  800420fa3b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fa40:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800420fa47:	00 00 00 
  800420fa4a:	41 ff d0             	callq  *%r8
  800420fa4d:	e9 6f 01 00 00       	jmpq   800420fbc1 <debuginfo_rip+0x3ea>
  800420fa52:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fa59:	00 00 00 
  800420fa5c:	48 8b 00             	mov    (%rax),%rax
  800420fa5f:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420fa63:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420fa6a:	be 00 00 00 00       	mov    $0x0,%esi
  800420fa6f:	48 89 c7             	mov    %rax,%rdi
  800420fa72:	48 b8 33 2b 21 04 80 	movabs $0x8004212b33,%rax
  800420fa79:	00 00 00 
  800420fa7c:	ff d0                	callq  *%rax
  800420fa7e:	83 f8 04             	cmp    $0x4,%eax
  800420fa81:	75 05                	jne    800420fa88 <debuginfo_rip+0x2b1>
  800420fa83:	e9 39 01 00 00       	jmpq   800420fbc1 <debuginfo_rip+0x3ea>
  800420fa88:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fa8c:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420fa93:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420fa9a:	00 00 00 00 
  800420fa9e:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420faa5:	00 00 00 
  800420faa8:	48 8b 00             	mov    (%rax),%rax
  800420faab:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420fab2:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420fab9:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420fabd:	48 89 c7             	mov    %rax,%rdi
  800420fac0:	48 b8 77 2d 21 04 80 	movabs $0x8004212d77,%rax
  800420fac7:	00 00 00 
  800420faca:	ff d0                	callq  *%rax
  800420facc:	83 f8 04             	cmp    $0x4,%eax
  800420facf:	75 05                	jne    800420fad6 <debuginfo_rip+0x2ff>
  800420fad1:	e9 eb 00 00 00       	jmpq   800420fbc1 <debuginfo_rip+0x3ea>
  800420fad6:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fada:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420fae1:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420fae8:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420faef:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420faf6:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420fafd:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fb04:	48 89 ce             	mov    %rcx,%rsi
  800420fb07:	48 89 c7             	mov    %rax,%rdi
  800420fb0a:	48 b8 71 f0 20 04 80 	movabs $0x800420f071,%rax
  800420fb11:	00 00 00 
  800420fb14:	ff d0                	callq  *%rax
  800420fb16:	85 c0                	test   %eax,%eax
  800420fb18:	74 30                	je     800420fb4a <debuginfo_rip+0x373>
  800420fb1a:	90                   	nop
  800420fb1b:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fb22:	00 00 00 
  800420fb25:	48 8b 00             	mov    (%rax),%rax
  800420fb28:	be 00 00 00 00       	mov    $0x0,%esi
  800420fb2d:	48 89 c7             	mov    %rax,%rdi
  800420fb30:	48 b8 4f 54 21 04 80 	movabs $0x800421544f,%rax
  800420fb37:	00 00 00 
  800420fb3a:	ff d0                	callq  *%rax
  800420fb3c:	83 f8 01             	cmp    $0x1,%eax
  800420fb3f:	0f 85 bb 00 00 00    	jne    800420fc00 <debuginfo_rip+0x429>
  800420fb45:	e9 ac 00 00 00       	jmpq   800420fbf6 <debuginfo_rip+0x41f>
  800420fb4a:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fb51:	00 00 00 
  800420fb54:	48 8b 00             	mov    (%rax),%rax
  800420fb57:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420fb5b:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420fb62:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420fb69:	48 89 c7             	mov    %rax,%rdi
  800420fb6c:	48 b8 33 2b 21 04 80 	movabs $0x8004212b33,%rax
  800420fb73:	00 00 00 
  800420fb76:	ff d0                	callq  *%rax
  800420fb78:	85 c0                	test   %eax,%eax
  800420fb7a:	79 02                	jns    800420fb7e <debuginfo_rip+0x3a7>
  800420fb7c:	eb 43                	jmp    800420fbc1 <debuginfo_rip+0x3ea>
  800420fb7e:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420fb85:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420fb8c:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420fb91:	48 89 ce             	mov    %rcx,%rsi
  800420fb94:	48 89 c7             	mov    %rax,%rdi
  800420fb97:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  800420fb9e:	00 00 00 
  800420fba1:	ff d0                	callq  *%rax
  800420fba3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fba7:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420fbae:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420fbb5:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420fbbc:	e9 2e ff ff ff       	jmpq   800420faef <debuginfo_rip+0x318>
  800420fbc1:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fbc8:	00 00 00 
  800420fbcb:	48 8b 00             	mov    (%rax),%rax
  800420fbce:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420fbd2:	48 89 d6             	mov    %rdx,%rsi
  800420fbd5:	48 89 c7             	mov    %rax,%rdi
  800420fbd8:	48 b8 8d 1a 21 04 80 	movabs $0x8004211a8d,%rax
  800420fbdf:	00 00 00 
  800420fbe2:	ff d0                	callq  *%rax
  800420fbe4:	85 c0                	test   %eax,%eax
  800420fbe6:	0f 84 66 fe ff ff    	je     800420fa52 <debuginfo_rip+0x27b>
  800420fbec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fbf1:	e9 a0 00 00 00       	jmpq   800420fc96 <debuginfo_rip+0x4bf>
  800420fbf6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fbfb:	e9 96 00 00 00       	jmpq   800420fc96 <debuginfo_rip+0x4bf>
  800420fc00:	48 b8 80 56 23 04 80 	movabs $0x8004235680,%rax
  800420fc07:	00 00 00 
  800420fc0a:	48 8b 08             	mov    (%rax),%rcx
  800420fc0d:	48 b8 78 56 23 04 80 	movabs $0x8004235678,%rax
  800420fc14:	00 00 00 
  800420fc17:	48 8b 10             	mov    (%rax),%rdx
  800420fc1a:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fc21:	00 00 00 
  800420fc24:	48 8b 00             	mov    (%rax),%rax
  800420fc27:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420fc2e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420fc34:	48 89 c7             	mov    %rax,%rdi
  800420fc37:	48 b8 b8 2f 21 04 80 	movabs $0x8004212fb8,%rax
  800420fc3e:	00 00 00 
  800420fc41:	ff d0                	callq  *%rax
  800420fc43:	85 c0                	test   %eax,%eax
  800420fc45:	75 4a                	jne    800420fc91 <debuginfo_rip+0x4ba>
  800420fc47:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fc4e:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420fc55:	48 b8 78 56 23 04 80 	movabs $0x8004235678,%rax
  800420fc5c:	00 00 00 
  800420fc5f:	48 8b 30             	mov    (%rax),%rsi
  800420fc62:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fc69:	00 00 00 
  800420fc6c:	48 8b 00             	mov    (%rax),%rax
  800420fc6f:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fc76:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420fc7c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420fc82:	48 89 c7             	mov    %rax,%rdi
  800420fc85:	48 b8 c4 42 21 04 80 	movabs $0x80042142c4,%rax
  800420fc8c:	00 00 00 
  800420fc8f:	ff d0                	callq  *%rax
  800420fc91:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fc96:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420fc9d:	5b                   	pop    %rbx
  800420fc9e:	5d                   	pop    %rbp
  800420fc9f:	c3                   	retq   

000000800420fca0 <printnum>:
  800420fca0:	55                   	push   %rbp
  800420fca1:	48 89 e5             	mov    %rsp,%rbp
  800420fca4:	53                   	push   %rbx
  800420fca5:	48 83 ec 38          	sub    $0x38,%rsp
  800420fca9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fcad:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fcb1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fcb5:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420fcb8:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420fcbc:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420fcc0:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420fcc3:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420fcc7:	77 3b                	ja     800420fd04 <printnum+0x64>
  800420fcc9:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420fccc:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420fcd0:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420fcd3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fcd7:	ba 00 00 00 00       	mov    $0x0,%edx
  800420fcdc:	48 f7 f3             	div    %rbx
  800420fcdf:	48 89 c2             	mov    %rax,%rdx
  800420fce2:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420fce5:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420fce8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420fcec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fcf0:	41 89 f9             	mov    %edi,%r9d
  800420fcf3:	48 89 c7             	mov    %rax,%rdi
  800420fcf6:	48 b8 a0 fc 20 04 80 	movabs $0x800420fca0,%rax
  800420fcfd:	00 00 00 
  800420fd00:	ff d0                	callq  *%rax
  800420fd02:	eb 1e                	jmp    800420fd22 <printnum+0x82>
  800420fd04:	eb 12                	jmp    800420fd18 <printnum+0x78>
  800420fd06:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fd0a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420fd0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd11:	48 89 ce             	mov    %rcx,%rsi
  800420fd14:	89 d7                	mov    %edx,%edi
  800420fd16:	ff d0                	callq  *%rax
  800420fd18:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420fd1c:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420fd20:	7f e4                	jg     800420fd06 <printnum+0x66>
  800420fd22:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420fd25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fd29:	ba 00 00 00 00       	mov    $0x0,%edx
  800420fd2e:	48 f7 f1             	div    %rcx
  800420fd31:	48 89 d0             	mov    %rdx,%rax
  800420fd34:	48 ba b0 fe 21 04 80 	movabs $0x800421feb0,%rdx
  800420fd3b:	00 00 00 
  800420fd3e:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420fd42:	0f be d0             	movsbl %al,%edx
  800420fd45:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fd49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd4d:	48 89 ce             	mov    %rcx,%rsi
  800420fd50:	89 d7                	mov    %edx,%edi
  800420fd52:	ff d0                	callq  *%rax
  800420fd54:	48 83 c4 38          	add    $0x38,%rsp
  800420fd58:	5b                   	pop    %rbx
  800420fd59:	5d                   	pop    %rbp
  800420fd5a:	c3                   	retq   

000000800420fd5b <getuint>:
  800420fd5b:	55                   	push   %rbp
  800420fd5c:	48 89 e5             	mov    %rsp,%rbp
  800420fd5f:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420fd63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fd67:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420fd6a:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420fd6e:	7e 52                	jle    800420fdc2 <getuint+0x67>
  800420fd70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd74:	8b 00                	mov    (%rax),%eax
  800420fd76:	83 f8 30             	cmp    $0x30,%eax
  800420fd79:	73 24                	jae    800420fd9f <getuint+0x44>
  800420fd7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd7f:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fd83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd87:	8b 00                	mov    (%rax),%eax
  800420fd89:	89 c0                	mov    %eax,%eax
  800420fd8b:	48 01 d0             	add    %rdx,%rax
  800420fd8e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd92:	8b 12                	mov    (%rdx),%edx
  800420fd94:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fd97:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fd9b:	89 0a                	mov    %ecx,(%rdx)
  800420fd9d:	eb 17                	jmp    800420fdb6 <getuint+0x5b>
  800420fd9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fda3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fda7:	48 89 d0             	mov    %rdx,%rax
  800420fdaa:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fdae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fdb2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fdb6:	48 8b 00             	mov    (%rax),%rax
  800420fdb9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fdbd:	e9 a3 00 00 00       	jmpq   800420fe65 <getuint+0x10a>
  800420fdc2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420fdc6:	74 4f                	je     800420fe17 <getuint+0xbc>
  800420fdc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdcc:	8b 00                	mov    (%rax),%eax
  800420fdce:	83 f8 30             	cmp    $0x30,%eax
  800420fdd1:	73 24                	jae    800420fdf7 <getuint+0x9c>
  800420fdd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdd7:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fddb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fddf:	8b 00                	mov    (%rax),%eax
  800420fde1:	89 c0                	mov    %eax,%eax
  800420fde3:	48 01 d0             	add    %rdx,%rax
  800420fde6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fdea:	8b 12                	mov    (%rdx),%edx
  800420fdec:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fdef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fdf3:	89 0a                	mov    %ecx,(%rdx)
  800420fdf5:	eb 17                	jmp    800420fe0e <getuint+0xb3>
  800420fdf7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdfb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fdff:	48 89 d0             	mov    %rdx,%rax
  800420fe02:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fe06:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe0a:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fe0e:	48 8b 00             	mov    (%rax),%rax
  800420fe11:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fe15:	eb 4e                	jmp    800420fe65 <getuint+0x10a>
  800420fe17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe1b:	8b 00                	mov    (%rax),%eax
  800420fe1d:	83 f8 30             	cmp    $0x30,%eax
  800420fe20:	73 24                	jae    800420fe46 <getuint+0xeb>
  800420fe22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe26:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fe2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe2e:	8b 00                	mov    (%rax),%eax
  800420fe30:	89 c0                	mov    %eax,%eax
  800420fe32:	48 01 d0             	add    %rdx,%rax
  800420fe35:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe39:	8b 12                	mov    (%rdx),%edx
  800420fe3b:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fe3e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe42:	89 0a                	mov    %ecx,(%rdx)
  800420fe44:	eb 17                	jmp    800420fe5d <getuint+0x102>
  800420fe46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe4a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fe4e:	48 89 d0             	mov    %rdx,%rax
  800420fe51:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fe55:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe59:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fe5d:	8b 00                	mov    (%rax),%eax
  800420fe5f:	89 c0                	mov    %eax,%eax
  800420fe61:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fe65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fe69:	c9                   	leaveq 
  800420fe6a:	c3                   	retq   

000000800420fe6b <getint>:
  800420fe6b:	55                   	push   %rbp
  800420fe6c:	48 89 e5             	mov    %rsp,%rbp
  800420fe6f:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420fe73:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fe77:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420fe7a:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420fe7e:	7e 52                	jle    800420fed2 <getint+0x67>
  800420fe80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe84:	8b 00                	mov    (%rax),%eax
  800420fe86:	83 f8 30             	cmp    $0x30,%eax
  800420fe89:	73 24                	jae    800420feaf <getint+0x44>
  800420fe8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe8f:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fe93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe97:	8b 00                	mov    (%rax),%eax
  800420fe99:	89 c0                	mov    %eax,%eax
  800420fe9b:	48 01 d0             	add    %rdx,%rax
  800420fe9e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fea2:	8b 12                	mov    (%rdx),%edx
  800420fea4:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fea7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420feab:	89 0a                	mov    %ecx,(%rdx)
  800420fead:	eb 17                	jmp    800420fec6 <getint+0x5b>
  800420feaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420feb3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420feb7:	48 89 d0             	mov    %rdx,%rax
  800420feba:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420febe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fec2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fec6:	48 8b 00             	mov    (%rax),%rax
  800420fec9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fecd:	e9 a3 00 00 00       	jmpq   800420ff75 <getint+0x10a>
  800420fed2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420fed6:	74 4f                	je     800420ff27 <getint+0xbc>
  800420fed8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fedc:	8b 00                	mov    (%rax),%eax
  800420fede:	83 f8 30             	cmp    $0x30,%eax
  800420fee1:	73 24                	jae    800420ff07 <getint+0x9c>
  800420fee3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fee7:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420feeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420feef:	8b 00                	mov    (%rax),%eax
  800420fef1:	89 c0                	mov    %eax,%eax
  800420fef3:	48 01 d0             	add    %rdx,%rax
  800420fef6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fefa:	8b 12                	mov    (%rdx),%edx
  800420fefc:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420feff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff03:	89 0a                	mov    %ecx,(%rdx)
  800420ff05:	eb 17                	jmp    800420ff1e <getint+0xb3>
  800420ff07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff0b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420ff0f:	48 89 d0             	mov    %rdx,%rax
  800420ff12:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420ff16:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff1a:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420ff1e:	48 8b 00             	mov    (%rax),%rax
  800420ff21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ff25:	eb 4e                	jmp    800420ff75 <getint+0x10a>
  800420ff27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff2b:	8b 00                	mov    (%rax),%eax
  800420ff2d:	83 f8 30             	cmp    $0x30,%eax
  800420ff30:	73 24                	jae    800420ff56 <getint+0xeb>
  800420ff32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff36:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420ff3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff3e:	8b 00                	mov    (%rax),%eax
  800420ff40:	89 c0                	mov    %eax,%eax
  800420ff42:	48 01 d0             	add    %rdx,%rax
  800420ff45:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff49:	8b 12                	mov    (%rdx),%edx
  800420ff4b:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420ff4e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff52:	89 0a                	mov    %ecx,(%rdx)
  800420ff54:	eb 17                	jmp    800420ff6d <getint+0x102>
  800420ff56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff5a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420ff5e:	48 89 d0             	mov    %rdx,%rax
  800420ff61:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420ff65:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff69:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420ff6d:	8b 00                	mov    (%rax),%eax
  800420ff6f:	48 98                	cltq   
  800420ff71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ff75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ff79:	c9                   	leaveq 
  800420ff7a:	c3                   	retq   

000000800420ff7b <vprintfmt>:
  800420ff7b:	55                   	push   %rbp
  800420ff7c:	48 89 e5             	mov    %rsp,%rbp
  800420ff7f:	41 54                	push   %r12
  800420ff81:	53                   	push   %rbx
  800420ff82:	48 83 ec 60          	sub    $0x60,%rsp
  800420ff86:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420ff8a:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420ff8e:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420ff92:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420ff96:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420ff9a:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420ff9e:	48 8b 0a             	mov    (%rdx),%rcx
  800420ffa1:	48 89 08             	mov    %rcx,(%rax)
  800420ffa4:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420ffa8:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420ffac:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420ffb0:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420ffb4:	eb 17                	jmp    800420ffcd <vprintfmt+0x52>
  800420ffb6:	85 db                	test   %ebx,%ebx
  800420ffb8:	0f 84 cc 04 00 00    	je     800421048a <vprintfmt+0x50f>
  800420ffbe:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420ffc2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420ffc6:	48 89 d6             	mov    %rdx,%rsi
  800420ffc9:	89 df                	mov    %ebx,%edi
  800420ffcb:	ff d0                	callq  *%rax
  800420ffcd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420ffd1:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420ffd5:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420ffd9:	0f b6 00             	movzbl (%rax),%eax
  800420ffdc:	0f b6 d8             	movzbl %al,%ebx
  800420ffdf:	83 fb 25             	cmp    $0x25,%ebx
  800420ffe2:	75 d2                	jne    800420ffb6 <vprintfmt+0x3b>
  800420ffe4:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  800420ffe8:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800420ffef:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800420fff6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800420fffd:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  8004210004:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210008:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421000c:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004210010:	0f b6 00             	movzbl (%rax),%eax
  8004210013:	0f b6 d8             	movzbl %al,%ebx
  8004210016:	8d 43 dd             	lea    -0x23(%rbx),%eax
  8004210019:	83 f8 55             	cmp    $0x55,%eax
  800421001c:	0f 87 34 04 00 00    	ja     8004210456 <vprintfmt+0x4db>
  8004210022:	89 c0                	mov    %eax,%eax
  8004210024:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421002b:	00 
  800421002c:	48 b8 d8 fe 21 04 80 	movabs $0x800421fed8,%rax
  8004210033:	00 00 00 
  8004210036:	48 01 d0             	add    %rdx,%rax
  8004210039:	48 8b 00             	mov    (%rax),%rax
  800421003c:	ff e0                	jmpq   *%rax
  800421003e:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  8004210042:	eb c0                	jmp    8004210004 <vprintfmt+0x89>
  8004210044:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  8004210048:	eb ba                	jmp    8004210004 <vprintfmt+0x89>
  800421004a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  8004210051:	8b 55 d8             	mov    -0x28(%rbp),%edx
  8004210054:	89 d0                	mov    %edx,%eax
  8004210056:	c1 e0 02             	shl    $0x2,%eax
  8004210059:	01 d0                	add    %edx,%eax
  800421005b:	01 c0                	add    %eax,%eax
  800421005d:	01 d8                	add    %ebx,%eax
  800421005f:	83 e8 30             	sub    $0x30,%eax
  8004210062:	89 45 d8             	mov    %eax,-0x28(%rbp)
  8004210065:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210069:	0f b6 00             	movzbl (%rax),%eax
  800421006c:	0f be d8             	movsbl %al,%ebx
  800421006f:	83 fb 2f             	cmp    $0x2f,%ebx
  8004210072:	7e 0c                	jle    8004210080 <vprintfmt+0x105>
  8004210074:	83 fb 39             	cmp    $0x39,%ebx
  8004210077:	7f 07                	jg     8004210080 <vprintfmt+0x105>
  8004210079:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  800421007e:	eb d1                	jmp    8004210051 <vprintfmt+0xd6>
  8004210080:	eb 58                	jmp    80042100da <vprintfmt+0x15f>
  8004210082:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210085:	83 f8 30             	cmp    $0x30,%eax
  8004210088:	73 17                	jae    80042100a1 <vprintfmt+0x126>
  800421008a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421008e:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210091:	89 c0                	mov    %eax,%eax
  8004210093:	48 01 d0             	add    %rdx,%rax
  8004210096:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210099:	83 c2 08             	add    $0x8,%edx
  800421009c:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421009f:	eb 0f                	jmp    80042100b0 <vprintfmt+0x135>
  80042100a1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042100a5:	48 89 d0             	mov    %rdx,%rax
  80042100a8:	48 83 c2 08          	add    $0x8,%rdx
  80042100ac:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042100b0:	8b 00                	mov    (%rax),%eax
  80042100b2:	89 45 d8             	mov    %eax,-0x28(%rbp)
  80042100b5:	eb 23                	jmp    80042100da <vprintfmt+0x15f>
  80042100b7:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042100bb:	79 0c                	jns    80042100c9 <vprintfmt+0x14e>
  80042100bd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  80042100c4:	e9 3b ff ff ff       	jmpq   8004210004 <vprintfmt+0x89>
  80042100c9:	e9 36 ff ff ff       	jmpq   8004210004 <vprintfmt+0x89>
  80042100ce:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  80042100d5:	e9 2a ff ff ff       	jmpq   8004210004 <vprintfmt+0x89>
  80042100da:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042100de:	79 12                	jns    80042100f2 <vprintfmt+0x177>
  80042100e0:	8b 45 d8             	mov    -0x28(%rbp),%eax
  80042100e3:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042100e6:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  80042100ed:	e9 12 ff ff ff       	jmpq   8004210004 <vprintfmt+0x89>
  80042100f2:	e9 0d ff ff ff       	jmpq   8004210004 <vprintfmt+0x89>
  80042100f7:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  80042100fb:	e9 04 ff ff ff       	jmpq   8004210004 <vprintfmt+0x89>
  8004210100:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210103:	83 f8 30             	cmp    $0x30,%eax
  8004210106:	73 17                	jae    800421011f <vprintfmt+0x1a4>
  8004210108:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421010c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421010f:	89 c0                	mov    %eax,%eax
  8004210111:	48 01 d0             	add    %rdx,%rax
  8004210114:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210117:	83 c2 08             	add    $0x8,%edx
  800421011a:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421011d:	eb 0f                	jmp    800421012e <vprintfmt+0x1b3>
  800421011f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210123:	48 89 d0             	mov    %rdx,%rax
  8004210126:	48 83 c2 08          	add    $0x8,%rdx
  800421012a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421012e:	8b 10                	mov    (%rax),%edx
  8004210130:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004210134:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210138:	48 89 ce             	mov    %rcx,%rsi
  800421013b:	89 d7                	mov    %edx,%edi
  800421013d:	ff d0                	callq  *%rax
  800421013f:	e9 40 03 00 00       	jmpq   8004210484 <vprintfmt+0x509>
  8004210144:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210147:	83 f8 30             	cmp    $0x30,%eax
  800421014a:	73 17                	jae    8004210163 <vprintfmt+0x1e8>
  800421014c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210150:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210153:	89 c0                	mov    %eax,%eax
  8004210155:	48 01 d0             	add    %rdx,%rax
  8004210158:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421015b:	83 c2 08             	add    $0x8,%edx
  800421015e:	89 55 b8             	mov    %edx,-0x48(%rbp)
  8004210161:	eb 0f                	jmp    8004210172 <vprintfmt+0x1f7>
  8004210163:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210167:	48 89 d0             	mov    %rdx,%rax
  800421016a:	48 83 c2 08          	add    $0x8,%rdx
  800421016e:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210172:	8b 18                	mov    (%rax),%ebx
  8004210174:	85 db                	test   %ebx,%ebx
  8004210176:	79 02                	jns    800421017a <vprintfmt+0x1ff>
  8004210178:	f7 db                	neg    %ebx
  800421017a:	83 fb 15             	cmp    $0x15,%ebx
  800421017d:	7f 16                	jg     8004210195 <vprintfmt+0x21a>
  800421017f:	48 b8 00 fe 21 04 80 	movabs $0x800421fe00,%rax
  8004210186:	00 00 00 
  8004210189:	48 63 d3             	movslq %ebx,%rdx
  800421018c:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  8004210190:	4d 85 e4             	test   %r12,%r12
  8004210193:	75 2e                	jne    80042101c3 <vprintfmt+0x248>
  8004210195:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210199:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421019d:	89 d9                	mov    %ebx,%ecx
  800421019f:	48 ba c1 fe 21 04 80 	movabs $0x800421fec1,%rdx
  80042101a6:	00 00 00 
  80042101a9:	48 89 c7             	mov    %rax,%rdi
  80042101ac:	b8 00 00 00 00       	mov    $0x0,%eax
  80042101b1:	49 b8 93 04 21 04 80 	movabs $0x8004210493,%r8
  80042101b8:	00 00 00 
  80042101bb:	41 ff d0             	callq  *%r8
  80042101be:	e9 c1 02 00 00       	jmpq   8004210484 <vprintfmt+0x509>
  80042101c3:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  80042101c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042101cb:	4c 89 e1             	mov    %r12,%rcx
  80042101ce:	48 ba ca fe 21 04 80 	movabs $0x800421feca,%rdx
  80042101d5:	00 00 00 
  80042101d8:	48 89 c7             	mov    %rax,%rdi
  80042101db:	b8 00 00 00 00       	mov    $0x0,%eax
  80042101e0:	49 b8 93 04 21 04 80 	movabs $0x8004210493,%r8
  80042101e7:	00 00 00 
  80042101ea:	41 ff d0             	callq  *%r8
  80042101ed:	e9 92 02 00 00       	jmpq   8004210484 <vprintfmt+0x509>
  80042101f2:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042101f5:	83 f8 30             	cmp    $0x30,%eax
  80042101f8:	73 17                	jae    8004210211 <vprintfmt+0x296>
  80042101fa:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042101fe:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210201:	89 c0                	mov    %eax,%eax
  8004210203:	48 01 d0             	add    %rdx,%rax
  8004210206:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210209:	83 c2 08             	add    $0x8,%edx
  800421020c:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421020f:	eb 0f                	jmp    8004210220 <vprintfmt+0x2a5>
  8004210211:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210215:	48 89 d0             	mov    %rdx,%rax
  8004210218:	48 83 c2 08          	add    $0x8,%rdx
  800421021c:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210220:	4c 8b 20             	mov    (%rax),%r12
  8004210223:	4d 85 e4             	test   %r12,%r12
  8004210226:	75 0a                	jne    8004210232 <vprintfmt+0x2b7>
  8004210228:	49 bc cd fe 21 04 80 	movabs $0x800421fecd,%r12
  800421022f:	00 00 00 
  8004210232:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210236:	7e 3f                	jle    8004210277 <vprintfmt+0x2fc>
  8004210238:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  800421023c:	74 39                	je     8004210277 <vprintfmt+0x2fc>
  800421023e:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004210241:	48 98                	cltq   
  8004210243:	48 89 c6             	mov    %rax,%rsi
  8004210246:	4c 89 e7             	mov    %r12,%rdi
  8004210249:	48 b8 94 08 21 04 80 	movabs $0x8004210894,%rax
  8004210250:	00 00 00 
  8004210253:	ff d0                	callq  *%rax
  8004210255:	29 45 dc             	sub    %eax,-0x24(%rbp)
  8004210258:	eb 17                	jmp    8004210271 <vprintfmt+0x2f6>
  800421025a:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  800421025e:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004210262:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210266:	48 89 ce             	mov    %rcx,%rsi
  8004210269:	89 d7                	mov    %edx,%edi
  800421026b:	ff d0                	callq  *%rax
  800421026d:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210271:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210275:	7f e3                	jg     800421025a <vprintfmt+0x2df>
  8004210277:	eb 37                	jmp    80042102b0 <vprintfmt+0x335>
  8004210279:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  800421027d:	74 1e                	je     800421029d <vprintfmt+0x322>
  800421027f:	83 fb 1f             	cmp    $0x1f,%ebx
  8004210282:	7e 05                	jle    8004210289 <vprintfmt+0x30e>
  8004210284:	83 fb 7e             	cmp    $0x7e,%ebx
  8004210287:	7e 14                	jle    800421029d <vprintfmt+0x322>
  8004210289:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421028d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210291:	48 89 d6             	mov    %rdx,%rsi
  8004210294:	bf 3f 00 00 00       	mov    $0x3f,%edi
  8004210299:	ff d0                	callq  *%rax
  800421029b:	eb 0f                	jmp    80042102ac <vprintfmt+0x331>
  800421029d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042102a1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042102a5:	48 89 d6             	mov    %rdx,%rsi
  80042102a8:	89 df                	mov    %ebx,%edi
  80042102aa:	ff d0                	callq  *%rax
  80042102ac:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  80042102b0:	4c 89 e0             	mov    %r12,%rax
  80042102b3:	4c 8d 60 01          	lea    0x1(%rax),%r12
  80042102b7:	0f b6 00             	movzbl (%rax),%eax
  80042102ba:	0f be d8             	movsbl %al,%ebx
  80042102bd:	85 db                	test   %ebx,%ebx
  80042102bf:	74 10                	je     80042102d1 <vprintfmt+0x356>
  80042102c1:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  80042102c5:	78 b2                	js     8004210279 <vprintfmt+0x2fe>
  80042102c7:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  80042102cb:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  80042102cf:	79 a8                	jns    8004210279 <vprintfmt+0x2fe>
  80042102d1:	eb 16                	jmp    80042102e9 <vprintfmt+0x36e>
  80042102d3:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042102d7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042102db:	48 89 d6             	mov    %rdx,%rsi
  80042102de:	bf 20 00 00 00       	mov    $0x20,%edi
  80042102e3:	ff d0                	callq  *%rax
  80042102e5:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  80042102e9:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042102ed:	7f e4                	jg     80042102d3 <vprintfmt+0x358>
  80042102ef:	e9 90 01 00 00       	jmpq   8004210484 <vprintfmt+0x509>
  80042102f4:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042102f8:	be 03 00 00 00       	mov    $0x3,%esi
  80042102fd:	48 89 c7             	mov    %rax,%rdi
  8004210300:	48 b8 6b fe 20 04 80 	movabs $0x800420fe6b,%rax
  8004210307:	00 00 00 
  800421030a:	ff d0                	callq  *%rax
  800421030c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210310:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210314:	48 85 c0             	test   %rax,%rax
  8004210317:	79 1d                	jns    8004210336 <vprintfmt+0x3bb>
  8004210319:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421031d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210321:	48 89 d6             	mov    %rdx,%rsi
  8004210324:	bf 2d 00 00 00       	mov    $0x2d,%edi
  8004210329:	ff d0                	callq  *%rax
  800421032b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421032f:	48 f7 d8             	neg    %rax
  8004210332:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210336:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800421033d:	e9 d5 00 00 00       	jmpq   8004210417 <vprintfmt+0x49c>
  8004210342:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210346:	be 03 00 00 00       	mov    $0x3,%esi
  800421034b:	48 89 c7             	mov    %rax,%rdi
  800421034e:	48 b8 5b fd 20 04 80 	movabs $0x800420fd5b,%rax
  8004210355:	00 00 00 
  8004210358:	ff d0                	callq  *%rax
  800421035a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421035e:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  8004210365:	e9 ad 00 00 00       	jmpq   8004210417 <vprintfmt+0x49c>
  800421036a:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800421036e:	be 03 00 00 00       	mov    $0x3,%esi
  8004210373:	48 89 c7             	mov    %rax,%rdi
  8004210376:	48 b8 5b fd 20 04 80 	movabs $0x800420fd5b,%rax
  800421037d:	00 00 00 
  8004210380:	ff d0                	callq  *%rax
  8004210382:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210386:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  800421038d:	e9 85 00 00 00       	jmpq   8004210417 <vprintfmt+0x49c>
  8004210392:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210396:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421039a:	48 89 d6             	mov    %rdx,%rsi
  800421039d:	bf 30 00 00 00       	mov    $0x30,%edi
  80042103a2:	ff d0                	callq  *%rax
  80042103a4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042103a8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042103ac:	48 89 d6             	mov    %rdx,%rsi
  80042103af:	bf 78 00 00 00       	mov    $0x78,%edi
  80042103b4:	ff d0                	callq  *%rax
  80042103b6:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042103b9:	83 f8 30             	cmp    $0x30,%eax
  80042103bc:	73 17                	jae    80042103d5 <vprintfmt+0x45a>
  80042103be:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042103c2:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042103c5:	89 c0                	mov    %eax,%eax
  80042103c7:	48 01 d0             	add    %rdx,%rax
  80042103ca:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042103cd:	83 c2 08             	add    $0x8,%edx
  80042103d0:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042103d3:	eb 0f                	jmp    80042103e4 <vprintfmt+0x469>
  80042103d5:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042103d9:	48 89 d0             	mov    %rdx,%rax
  80042103dc:	48 83 c2 08          	add    $0x8,%rdx
  80042103e0:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042103e4:	48 8b 00             	mov    (%rax),%rax
  80042103e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042103eb:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  80042103f2:	eb 23                	jmp    8004210417 <vprintfmt+0x49c>
  80042103f4:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042103f8:	be 03 00 00 00       	mov    $0x3,%esi
  80042103fd:	48 89 c7             	mov    %rax,%rdi
  8004210400:	48 b8 5b fd 20 04 80 	movabs $0x800420fd5b,%rax
  8004210407:	00 00 00 
  800421040a:	ff d0                	callq  *%rax
  800421040c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210410:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  8004210417:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  800421041c:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800421041f:	8b 7d dc             	mov    -0x24(%rbp),%edi
  8004210422:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210426:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800421042a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421042e:	45 89 c1             	mov    %r8d,%r9d
  8004210431:	41 89 f8             	mov    %edi,%r8d
  8004210434:	48 89 c7             	mov    %rax,%rdi
  8004210437:	48 b8 a0 fc 20 04 80 	movabs $0x800420fca0,%rax
  800421043e:	00 00 00 
  8004210441:	ff d0                	callq  *%rax
  8004210443:	eb 3f                	jmp    8004210484 <vprintfmt+0x509>
  8004210445:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210449:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421044d:	48 89 d6             	mov    %rdx,%rsi
  8004210450:	89 df                	mov    %ebx,%edi
  8004210452:	ff d0                	callq  *%rax
  8004210454:	eb 2e                	jmp    8004210484 <vprintfmt+0x509>
  8004210456:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421045a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421045e:	48 89 d6             	mov    %rdx,%rsi
  8004210461:	bf 25 00 00 00       	mov    $0x25,%edi
  8004210466:	ff d0                	callq  *%rax
  8004210468:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  800421046d:	eb 05                	jmp    8004210474 <vprintfmt+0x4f9>
  800421046f:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  8004210474:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210478:	48 83 e8 01          	sub    $0x1,%rax
  800421047c:	0f b6 00             	movzbl (%rax),%eax
  800421047f:	3c 25                	cmp    $0x25,%al
  8004210481:	75 ec                	jne    800421046f <vprintfmt+0x4f4>
  8004210483:	90                   	nop
  8004210484:	90                   	nop
  8004210485:	e9 43 fb ff ff       	jmpq   800420ffcd <vprintfmt+0x52>
  800421048a:	48 83 c4 60          	add    $0x60,%rsp
  800421048e:	5b                   	pop    %rbx
  800421048f:	41 5c                	pop    %r12
  8004210491:	5d                   	pop    %rbp
  8004210492:	c3                   	retq   

0000008004210493 <printfmt>:
  8004210493:	55                   	push   %rbp
  8004210494:	48 89 e5             	mov    %rsp,%rbp
  8004210497:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800421049e:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042104a5:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  80042104ac:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042104b3:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042104ba:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042104c1:	84 c0                	test   %al,%al
  80042104c3:	74 20                	je     80042104e5 <printfmt+0x52>
  80042104c5:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042104c9:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  80042104cd:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  80042104d1:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  80042104d5:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  80042104d9:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  80042104dd:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  80042104e1:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042104e5:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  80042104ec:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  80042104f3:	00 00 00 
  80042104f6:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  80042104fd:	00 00 00 
  8004210500:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004210504:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800421050b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004210512:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004210519:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  8004210520:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004210527:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800421052e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004210535:	48 89 c7             	mov    %rax,%rdi
  8004210538:	48 b8 7b ff 20 04 80 	movabs $0x800420ff7b,%rax
  800421053f:	00 00 00 
  8004210542:	ff d0                	callq  *%rax
  8004210544:	c9                   	leaveq 
  8004210545:	c3                   	retq   

0000008004210546 <sprintputch>:
  8004210546:	55                   	push   %rbp
  8004210547:	48 89 e5             	mov    %rsp,%rbp
  800421054a:	48 83 ec 10          	sub    $0x10,%rsp
  800421054e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004210551:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210555:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210559:	8b 40 10             	mov    0x10(%rax),%eax
  800421055c:	8d 50 01             	lea    0x1(%rax),%edx
  800421055f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210563:	89 50 10             	mov    %edx,0x10(%rax)
  8004210566:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421056a:	48 8b 10             	mov    (%rax),%rdx
  800421056d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210571:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004210575:	48 39 c2             	cmp    %rax,%rdx
  8004210578:	73 17                	jae    8004210591 <sprintputch+0x4b>
  800421057a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421057e:	48 8b 00             	mov    (%rax),%rax
  8004210581:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004210585:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004210589:	48 89 0a             	mov    %rcx,(%rdx)
  800421058c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421058f:	88 10                	mov    %dl,(%rax)
  8004210591:	c9                   	leaveq 
  8004210592:	c3                   	retq   

0000008004210593 <vsnprintf>:
  8004210593:	55                   	push   %rbp
  8004210594:	48 89 e5             	mov    %rsp,%rbp
  8004210597:	48 83 ec 50          	sub    $0x50,%rsp
  800421059b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421059f:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042105a2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042105a6:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042105aa:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  80042105ae:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042105b2:	48 8b 0a             	mov    (%rdx),%rcx
  80042105b5:	48 89 08             	mov    %rcx,(%rax)
  80042105b8:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042105bc:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042105c0:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042105c4:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042105c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042105cc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042105d0:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042105d3:	48 98                	cltq   
  80042105d5:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  80042105d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042105dd:	48 01 d0             	add    %rdx,%rax
  80042105e0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042105e4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  80042105eb:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042105f0:	74 06                	je     80042105f8 <vsnprintf+0x65>
  80042105f2:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042105f6:	7f 07                	jg     80042105ff <vsnprintf+0x6c>
  80042105f8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  80042105fd:	eb 2f                	jmp    800421062e <vsnprintf+0x9b>
  80042105ff:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  8004210603:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004210607:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800421060b:	48 89 c6             	mov    %rax,%rsi
  800421060e:	48 bf 46 05 21 04 80 	movabs $0x8004210546,%rdi
  8004210615:	00 00 00 
  8004210618:	48 b8 7b ff 20 04 80 	movabs $0x800420ff7b,%rax
  800421061f:	00 00 00 
  8004210622:	ff d0                	callq  *%rax
  8004210624:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210628:	c6 00 00             	movb   $0x0,(%rax)
  800421062b:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421062e:	c9                   	leaveq 
  800421062f:	c3                   	retq   

0000008004210630 <snprintf>:
  8004210630:	55                   	push   %rbp
  8004210631:	48 89 e5             	mov    %rsp,%rbp
  8004210634:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421063b:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004210642:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  8004210648:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800421064f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004210656:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800421065d:	84 c0                	test   %al,%al
  800421065f:	74 20                	je     8004210681 <snprintf+0x51>
  8004210661:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004210665:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004210669:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800421066d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004210671:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004210675:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004210679:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800421067d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004210681:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  8004210688:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  800421068f:	00 00 00 
  8004210692:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004210699:	00 00 00 
  800421069c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  80042106a0:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042106a7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042106ae:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042106b5:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  80042106bc:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  80042106c3:	48 8b 0a             	mov    (%rdx),%rcx
  80042106c6:	48 89 08             	mov    %rcx,(%rax)
  80042106c9:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042106cd:	48 89 48 08          	mov    %rcx,0x8(%rax)
  80042106d1:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  80042106d5:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042106d9:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  80042106e0:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  80042106e7:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  80042106ed:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  80042106f4:	48 89 c7             	mov    %rax,%rdi
  80042106f7:	48 b8 93 05 21 04 80 	movabs $0x8004210593,%rax
  80042106fe:	00 00 00 
  8004210701:	ff d0                	callq  *%rax
  8004210703:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004210709:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421070f:	c9                   	leaveq 
  8004210710:	c3                   	retq   

0000008004210711 <readline>:
  8004210711:	55                   	push   %rbp
  8004210712:	48 89 e5             	mov    %rsp,%rbp
  8004210715:	48 83 ec 20          	sub    $0x20,%rsp
  8004210719:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421071d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210722:	74 22                	je     8004210746 <readline+0x35>
  8004210724:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210728:	48 89 c6             	mov    %rax,%rsi
  800421072b:	48 bf 88 01 22 04 80 	movabs $0x8004220188,%rdi
  8004210732:	00 00 00 
  8004210735:	b8 00 00 00 00       	mov    $0x0,%eax
  800421073a:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004210741:	00 00 00 
  8004210744:	ff d2                	callq  *%rdx
  8004210746:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421074d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004210752:	48 b8 3f 12 20 04 80 	movabs $0x800420123f,%rax
  8004210759:	00 00 00 
  800421075c:	ff d0                	callq  *%rax
  800421075e:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004210761:	48 b8 1d 12 20 04 80 	movabs $0x800420121d,%rax
  8004210768:	00 00 00 
  800421076b:	ff d0                	callq  *%rax
  800421076d:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004210770:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004210774:	79 30                	jns    80042107a6 <readline+0x95>
  8004210776:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  800421077a:	74 20                	je     800421079c <readline+0x8b>
  800421077c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421077f:	89 c6                	mov    %eax,%esi
  8004210781:	48 bf 8b 01 22 04 80 	movabs $0x800422018b,%rdi
  8004210788:	00 00 00 
  800421078b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210790:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004210797:	00 00 00 
  800421079a:	ff d2                	callq  *%rdx
  800421079c:	b8 00 00 00 00       	mov    $0x0,%eax
  80042107a1:	e9 be 00 00 00       	jmpq   8004210864 <readline+0x153>
  80042107a6:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  80042107aa:	74 06                	je     80042107b2 <readline+0xa1>
  80042107ac:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  80042107b0:	75 26                	jne    80042107d8 <readline+0xc7>
  80042107b2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042107b6:	7e 20                	jle    80042107d8 <readline+0xc7>
  80042107b8:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042107bc:	74 11                	je     80042107cf <readline+0xbe>
  80042107be:	bf 08 00 00 00       	mov    $0x8,%edi
  80042107c3:	48 b8 ff 11 20 04 80 	movabs $0x80042011ff,%rax
  80042107ca:	00 00 00 
  80042107cd:	ff d0                	callq  *%rax
  80042107cf:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  80042107d3:	e9 87 00 00 00       	jmpq   800421085f <readline+0x14e>
  80042107d8:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  80042107dc:	7e 3f                	jle    800421081d <readline+0x10c>
  80042107de:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  80042107e5:	7f 36                	jg     800421081d <readline+0x10c>
  80042107e7:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042107eb:	74 11                	je     80042107fe <readline+0xed>
  80042107ed:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042107f0:	89 c7                	mov    %eax,%edi
  80042107f2:	48 b8 ff 11 20 04 80 	movabs $0x80042011ff,%rax
  80042107f9:	00 00 00 
  80042107fc:	ff d0                	callq  *%rax
  80042107fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210801:	8d 50 01             	lea    0x1(%rax),%edx
  8004210804:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004210807:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421080a:	89 d1                	mov    %edx,%ecx
  800421080c:	48 ba a0 d2 4d 04 80 	movabs $0x80044dd2a0,%rdx
  8004210813:	00 00 00 
  8004210816:	48 98                	cltq   
  8004210818:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800421081b:	eb 42                	jmp    800421085f <readline+0x14e>
  800421081d:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  8004210821:	74 06                	je     8004210829 <readline+0x118>
  8004210823:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  8004210827:	75 36                	jne    800421085f <readline+0x14e>
  8004210829:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421082d:	74 11                	je     8004210840 <readline+0x12f>
  800421082f:	bf 0a 00 00 00       	mov    $0xa,%edi
  8004210834:	48 b8 ff 11 20 04 80 	movabs $0x80042011ff,%rax
  800421083b:	00 00 00 
  800421083e:	ff d0                	callq  *%rax
  8004210840:	48 ba a0 d2 4d 04 80 	movabs $0x80044dd2a0,%rdx
  8004210847:	00 00 00 
  800421084a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421084d:	48 98                	cltq   
  800421084f:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  8004210853:	48 b8 a0 d2 4d 04 80 	movabs $0x80044dd2a0,%rax
  800421085a:	00 00 00 
  800421085d:	eb 05                	jmp    8004210864 <readline+0x153>
  800421085f:	e9 fd fe ff ff       	jmpq   8004210761 <readline+0x50>
  8004210864:	c9                   	leaveq 
  8004210865:	c3                   	retq   

0000008004210866 <strlen>:
  8004210866:	55                   	push   %rbp
  8004210867:	48 89 e5             	mov    %rsp,%rbp
  800421086a:	48 83 ec 18          	sub    $0x18,%rsp
  800421086e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210872:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210879:	eb 09                	jmp    8004210884 <strlen+0x1e>
  800421087b:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421087f:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210884:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210888:	0f b6 00             	movzbl (%rax),%eax
  800421088b:	84 c0                	test   %al,%al
  800421088d:	75 ec                	jne    800421087b <strlen+0x15>
  800421088f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210892:	c9                   	leaveq 
  8004210893:	c3                   	retq   

0000008004210894 <strnlen>:
  8004210894:	55                   	push   %rbp
  8004210895:	48 89 e5             	mov    %rsp,%rbp
  8004210898:	48 83 ec 20          	sub    $0x20,%rsp
  800421089c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042108a0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042108a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042108ab:	eb 0e                	jmp    80042108bb <strnlen+0x27>
  80042108ad:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042108b1:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042108b6:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  80042108bb:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042108c0:	74 0b                	je     80042108cd <strnlen+0x39>
  80042108c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042108c6:	0f b6 00             	movzbl (%rax),%eax
  80042108c9:	84 c0                	test   %al,%al
  80042108cb:	75 e0                	jne    80042108ad <strnlen+0x19>
  80042108cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042108d0:	c9                   	leaveq 
  80042108d1:	c3                   	retq   

00000080042108d2 <strcpy>:
  80042108d2:	55                   	push   %rbp
  80042108d3:	48 89 e5             	mov    %rsp,%rbp
  80042108d6:	48 83 ec 20          	sub    $0x20,%rsp
  80042108da:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042108de:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042108e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042108e6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042108ea:	90                   	nop
  80042108eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042108ef:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042108f3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042108f7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042108fb:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  80042108ff:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210903:	0f b6 12             	movzbl (%rdx),%edx
  8004210906:	88 10                	mov    %dl,(%rax)
  8004210908:	0f b6 00             	movzbl (%rax),%eax
  800421090b:	84 c0                	test   %al,%al
  800421090d:	75 dc                	jne    80042108eb <strcpy+0x19>
  800421090f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210913:	c9                   	leaveq 
  8004210914:	c3                   	retq   

0000008004210915 <strcat>:
  8004210915:	55                   	push   %rbp
  8004210916:	48 89 e5             	mov    %rsp,%rbp
  8004210919:	48 83 ec 20          	sub    $0x20,%rsp
  800421091d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210921:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210925:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210929:	48 89 c7             	mov    %rax,%rdi
  800421092c:	48 b8 66 08 21 04 80 	movabs $0x8004210866,%rax
  8004210933:	00 00 00 
  8004210936:	ff d0                	callq  *%rax
  8004210938:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421093b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421093e:	48 63 d0             	movslq %eax,%rdx
  8004210941:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210945:	48 01 c2             	add    %rax,%rdx
  8004210948:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421094c:	48 89 c6             	mov    %rax,%rsi
  800421094f:	48 89 d7             	mov    %rdx,%rdi
  8004210952:	48 b8 d2 08 21 04 80 	movabs $0x80042108d2,%rax
  8004210959:	00 00 00 
  800421095c:	ff d0                	callq  *%rax
  800421095e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210962:	c9                   	leaveq 
  8004210963:	c3                   	retq   

0000008004210964 <strncpy>:
  8004210964:	55                   	push   %rbp
  8004210965:	48 89 e5             	mov    %rsp,%rbp
  8004210968:	48 83 ec 28          	sub    $0x28,%rsp
  800421096c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210970:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210974:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210978:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421097c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210980:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004210987:	00 
  8004210988:	eb 2a                	jmp    80042109b4 <strncpy+0x50>
  800421098a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421098e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210992:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210996:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421099a:	0f b6 12             	movzbl (%rdx),%edx
  800421099d:	88 10                	mov    %dl,(%rax)
  800421099f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042109a3:	0f b6 00             	movzbl (%rax),%eax
  80042109a6:	84 c0                	test   %al,%al
  80042109a8:	74 05                	je     80042109af <strncpy+0x4b>
  80042109aa:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  80042109af:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042109b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042109b8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042109bc:	72 cc                	jb     800421098a <strncpy+0x26>
  80042109be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042109c2:	c9                   	leaveq 
  80042109c3:	c3                   	retq   

00000080042109c4 <strlcpy>:
  80042109c4:	55                   	push   %rbp
  80042109c5:	48 89 e5             	mov    %rsp,%rbp
  80042109c8:	48 83 ec 28          	sub    $0x28,%rsp
  80042109cc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042109d0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042109d4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042109d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109dc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042109e0:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042109e5:	74 3d                	je     8004210a24 <strlcpy+0x60>
  80042109e7:	eb 1d                	jmp    8004210a06 <strlcpy+0x42>
  80042109e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109ed:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042109f1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042109f5:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042109f9:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  80042109fd:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210a01:	0f b6 12             	movzbl (%rdx),%edx
  8004210a04:	88 10                	mov    %dl,(%rax)
  8004210a06:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  8004210a0b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210a10:	74 0b                	je     8004210a1d <strlcpy+0x59>
  8004210a12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210a16:	0f b6 00             	movzbl (%rax),%eax
  8004210a19:	84 c0                	test   %al,%al
  8004210a1b:	75 cc                	jne    80042109e9 <strlcpy+0x25>
  8004210a1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a21:	c6 00 00             	movb   $0x0,(%rax)
  8004210a24:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210a28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a2c:	48 29 c2             	sub    %rax,%rdx
  8004210a2f:	48 89 d0             	mov    %rdx,%rax
  8004210a32:	c9                   	leaveq 
  8004210a33:	c3                   	retq   

0000008004210a34 <strcmp>:
  8004210a34:	55                   	push   %rbp
  8004210a35:	48 89 e5             	mov    %rsp,%rbp
  8004210a38:	48 83 ec 10          	sub    $0x10,%rsp
  8004210a3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210a40:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210a44:	eb 0a                	jmp    8004210a50 <strcmp+0x1c>
  8004210a46:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210a4b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210a50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a54:	0f b6 00             	movzbl (%rax),%eax
  8004210a57:	84 c0                	test   %al,%al
  8004210a59:	74 12                	je     8004210a6d <strcmp+0x39>
  8004210a5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a5f:	0f b6 10             	movzbl (%rax),%edx
  8004210a62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a66:	0f b6 00             	movzbl (%rax),%eax
  8004210a69:	38 c2                	cmp    %al,%dl
  8004210a6b:	74 d9                	je     8004210a46 <strcmp+0x12>
  8004210a6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a71:	0f b6 00             	movzbl (%rax),%eax
  8004210a74:	0f b6 d0             	movzbl %al,%edx
  8004210a77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a7b:	0f b6 00             	movzbl (%rax),%eax
  8004210a7e:	0f b6 c0             	movzbl %al,%eax
  8004210a81:	29 c2                	sub    %eax,%edx
  8004210a83:	89 d0                	mov    %edx,%eax
  8004210a85:	c9                   	leaveq 
  8004210a86:	c3                   	retq   

0000008004210a87 <strncmp>:
  8004210a87:	55                   	push   %rbp
  8004210a88:	48 89 e5             	mov    %rsp,%rbp
  8004210a8b:	48 83 ec 18          	sub    $0x18,%rsp
  8004210a8f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210a93:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210a97:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210a9b:	eb 0f                	jmp    8004210aac <strncmp+0x25>
  8004210a9d:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  8004210aa2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210aa7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210aac:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210ab1:	74 1d                	je     8004210ad0 <strncmp+0x49>
  8004210ab3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ab7:	0f b6 00             	movzbl (%rax),%eax
  8004210aba:	84 c0                	test   %al,%al
  8004210abc:	74 12                	je     8004210ad0 <strncmp+0x49>
  8004210abe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ac2:	0f b6 10             	movzbl (%rax),%edx
  8004210ac5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ac9:	0f b6 00             	movzbl (%rax),%eax
  8004210acc:	38 c2                	cmp    %al,%dl
  8004210ace:	74 cd                	je     8004210a9d <strncmp+0x16>
  8004210ad0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210ad5:	75 07                	jne    8004210ade <strncmp+0x57>
  8004210ad7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210adc:	eb 18                	jmp    8004210af6 <strncmp+0x6f>
  8004210ade:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ae2:	0f b6 00             	movzbl (%rax),%eax
  8004210ae5:	0f b6 d0             	movzbl %al,%edx
  8004210ae8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210aec:	0f b6 00             	movzbl (%rax),%eax
  8004210aef:	0f b6 c0             	movzbl %al,%eax
  8004210af2:	29 c2                	sub    %eax,%edx
  8004210af4:	89 d0                	mov    %edx,%eax
  8004210af6:	c9                   	leaveq 
  8004210af7:	c3                   	retq   

0000008004210af8 <strchr>:
  8004210af8:	55                   	push   %rbp
  8004210af9:	48 89 e5             	mov    %rsp,%rbp
  8004210afc:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210b00:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210b04:	89 f0                	mov    %esi,%eax
  8004210b06:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210b09:	eb 17                	jmp    8004210b22 <strchr+0x2a>
  8004210b0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b0f:	0f b6 00             	movzbl (%rax),%eax
  8004210b12:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210b15:	75 06                	jne    8004210b1d <strchr+0x25>
  8004210b17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b1b:	eb 15                	jmp    8004210b32 <strchr+0x3a>
  8004210b1d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210b22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b26:	0f b6 00             	movzbl (%rax),%eax
  8004210b29:	84 c0                	test   %al,%al
  8004210b2b:	75 de                	jne    8004210b0b <strchr+0x13>
  8004210b2d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210b32:	c9                   	leaveq 
  8004210b33:	c3                   	retq   

0000008004210b34 <strfind>:
  8004210b34:	55                   	push   %rbp
  8004210b35:	48 89 e5             	mov    %rsp,%rbp
  8004210b38:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210b3c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210b40:	89 f0                	mov    %esi,%eax
  8004210b42:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210b45:	eb 13                	jmp    8004210b5a <strfind+0x26>
  8004210b47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b4b:	0f b6 00             	movzbl (%rax),%eax
  8004210b4e:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210b51:	75 02                	jne    8004210b55 <strfind+0x21>
  8004210b53:	eb 10                	jmp    8004210b65 <strfind+0x31>
  8004210b55:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210b5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b5e:	0f b6 00             	movzbl (%rax),%eax
  8004210b61:	84 c0                	test   %al,%al
  8004210b63:	75 e2                	jne    8004210b47 <strfind+0x13>
  8004210b65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b69:	c9                   	leaveq 
  8004210b6a:	c3                   	retq   

0000008004210b6b <memset>:
  8004210b6b:	55                   	push   %rbp
  8004210b6c:	48 89 e5             	mov    %rsp,%rbp
  8004210b6f:	48 83 ec 18          	sub    $0x18,%rsp
  8004210b73:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210b77:	89 75 f4             	mov    %esi,-0xc(%rbp)
  8004210b7a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210b7e:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210b83:	75 06                	jne    8004210b8b <memset+0x20>
  8004210b85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b89:	eb 69                	jmp    8004210bf4 <memset+0x89>
  8004210b8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b8f:	83 e0 03             	and    $0x3,%eax
  8004210b92:	48 85 c0             	test   %rax,%rax
  8004210b95:	75 48                	jne    8004210bdf <memset+0x74>
  8004210b97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210b9b:	83 e0 03             	and    $0x3,%eax
  8004210b9e:	48 85 c0             	test   %rax,%rax
  8004210ba1:	75 3c                	jne    8004210bdf <memset+0x74>
  8004210ba3:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  8004210baa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bad:	c1 e0 18             	shl    $0x18,%eax
  8004210bb0:	89 c2                	mov    %eax,%edx
  8004210bb2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bb5:	c1 e0 10             	shl    $0x10,%eax
  8004210bb8:	09 c2                	or     %eax,%edx
  8004210bba:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bbd:	c1 e0 08             	shl    $0x8,%eax
  8004210bc0:	09 d0                	or     %edx,%eax
  8004210bc2:	09 45 f4             	or     %eax,-0xc(%rbp)
  8004210bc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bc9:	48 c1 e8 02          	shr    $0x2,%rax
  8004210bcd:	48 89 c1             	mov    %rax,%rcx
  8004210bd0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210bd4:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bd7:	48 89 d7             	mov    %rdx,%rdi
  8004210bda:	fc                   	cld    
  8004210bdb:	f3 ab                	rep stos %eax,%es:(%rdi)
  8004210bdd:	eb 11                	jmp    8004210bf0 <memset+0x85>
  8004210bdf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210be3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210be6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004210bea:	48 89 d7             	mov    %rdx,%rdi
  8004210bed:	fc                   	cld    
  8004210bee:	f3 aa                	rep stos %al,%es:(%rdi)
  8004210bf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210bf4:	c9                   	leaveq 
  8004210bf5:	c3                   	retq   

0000008004210bf6 <memmove>:
  8004210bf6:	55                   	push   %rbp
  8004210bf7:	48 89 e5             	mov    %rsp,%rbp
  8004210bfa:	48 83 ec 28          	sub    $0x28,%rsp
  8004210bfe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c02:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210c06:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210c0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210c0e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210c12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c1e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210c22:	0f 83 88 00 00 00    	jae    8004210cb0 <memmove+0xba>
  8004210c28:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c2c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210c30:	48 01 d0             	add    %rdx,%rax
  8004210c33:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210c37:	76 77                	jbe    8004210cb0 <memmove+0xba>
  8004210c39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c3d:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210c41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c45:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  8004210c49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c4d:	83 e0 03             	and    $0x3,%eax
  8004210c50:	48 85 c0             	test   %rax,%rax
  8004210c53:	75 3b                	jne    8004210c90 <memmove+0x9a>
  8004210c55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c59:	83 e0 03             	and    $0x3,%eax
  8004210c5c:	48 85 c0             	test   %rax,%rax
  8004210c5f:	75 2f                	jne    8004210c90 <memmove+0x9a>
  8004210c61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c65:	83 e0 03             	and    $0x3,%eax
  8004210c68:	48 85 c0             	test   %rax,%rax
  8004210c6b:	75 23                	jne    8004210c90 <memmove+0x9a>
  8004210c6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c71:	48 83 e8 04          	sub    $0x4,%rax
  8004210c75:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210c79:	48 83 ea 04          	sub    $0x4,%rdx
  8004210c7d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210c81:	48 c1 e9 02          	shr    $0x2,%rcx
  8004210c85:	48 89 c7             	mov    %rax,%rdi
  8004210c88:	48 89 d6             	mov    %rdx,%rsi
  8004210c8b:	fd                   	std    
  8004210c8c:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210c8e:	eb 1d                	jmp    8004210cad <memmove+0xb7>
  8004210c90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c94:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210c98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c9c:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  8004210ca0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ca4:	48 89 d7             	mov    %rdx,%rdi
  8004210ca7:	48 89 c1             	mov    %rax,%rcx
  8004210caa:	fd                   	std    
  8004210cab:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210cad:	fc                   	cld    
  8004210cae:	eb 57                	jmp    8004210d07 <memmove+0x111>
  8004210cb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cb4:	83 e0 03             	and    $0x3,%eax
  8004210cb7:	48 85 c0             	test   %rax,%rax
  8004210cba:	75 36                	jne    8004210cf2 <memmove+0xfc>
  8004210cbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cc0:	83 e0 03             	and    $0x3,%eax
  8004210cc3:	48 85 c0             	test   %rax,%rax
  8004210cc6:	75 2a                	jne    8004210cf2 <memmove+0xfc>
  8004210cc8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ccc:	83 e0 03             	and    $0x3,%eax
  8004210ccf:	48 85 c0             	test   %rax,%rax
  8004210cd2:	75 1e                	jne    8004210cf2 <memmove+0xfc>
  8004210cd4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210cd8:	48 c1 e8 02          	shr    $0x2,%rax
  8004210cdc:	48 89 c1             	mov    %rax,%rcx
  8004210cdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210ce3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210ce7:	48 89 c7             	mov    %rax,%rdi
  8004210cea:	48 89 d6             	mov    %rdx,%rsi
  8004210ced:	fc                   	cld    
  8004210cee:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210cf0:	eb 15                	jmp    8004210d07 <memmove+0x111>
  8004210cf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cf6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210cfa:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210cfe:	48 89 c7             	mov    %rax,%rdi
  8004210d01:	48 89 d6             	mov    %rdx,%rsi
  8004210d04:	fc                   	cld    
  8004210d05:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210d07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d0b:	c9                   	leaveq 
  8004210d0c:	c3                   	retq   

0000008004210d0d <memcpy>:
  8004210d0d:	55                   	push   %rbp
  8004210d0e:	48 89 e5             	mov    %rsp,%rbp
  8004210d11:	48 83 ec 18          	sub    $0x18,%rsp
  8004210d15:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210d19:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210d1d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210d21:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210d25:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004210d29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d2d:	48 89 ce             	mov    %rcx,%rsi
  8004210d30:	48 89 c7             	mov    %rax,%rdi
  8004210d33:	48 b8 f6 0b 21 04 80 	movabs $0x8004210bf6,%rax
  8004210d3a:	00 00 00 
  8004210d3d:	ff d0                	callq  *%rax
  8004210d3f:	c9                   	leaveq 
  8004210d40:	c3                   	retq   

0000008004210d41 <memcmp>:
  8004210d41:	55                   	push   %rbp
  8004210d42:	48 89 e5             	mov    %rsp,%rbp
  8004210d45:	48 83 ec 28          	sub    $0x28,%rsp
  8004210d49:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210d4d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210d51:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210d55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210d5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210d61:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210d65:	eb 36                	jmp    8004210d9d <memcmp+0x5c>
  8004210d67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d6b:	0f b6 10             	movzbl (%rax),%edx
  8004210d6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d72:	0f b6 00             	movzbl (%rax),%eax
  8004210d75:	38 c2                	cmp    %al,%dl
  8004210d77:	74 1a                	je     8004210d93 <memcmp+0x52>
  8004210d79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d7d:	0f b6 00             	movzbl (%rax),%eax
  8004210d80:	0f b6 d0             	movzbl %al,%edx
  8004210d83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d87:	0f b6 00             	movzbl (%rax),%eax
  8004210d8a:	0f b6 c0             	movzbl %al,%eax
  8004210d8d:	29 c2                	sub    %eax,%edx
  8004210d8f:	89 d0                	mov    %edx,%eax
  8004210d91:	eb 20                	jmp    8004210db3 <memcmp+0x72>
  8004210d93:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210d98:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210d9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210da1:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210da5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210da9:	48 85 c0             	test   %rax,%rax
  8004210dac:	75 b9                	jne    8004210d67 <memcmp+0x26>
  8004210dae:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210db3:	c9                   	leaveq 
  8004210db4:	c3                   	retq   

0000008004210db5 <memfind>:
  8004210db5:	55                   	push   %rbp
  8004210db6:	48 89 e5             	mov    %rsp,%rbp
  8004210db9:	48 83 ec 28          	sub    $0x28,%rsp
  8004210dbd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210dc1:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210dc4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210dc8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210dcc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210dd0:	48 01 d0             	add    %rdx,%rax
  8004210dd3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210dd7:	eb 15                	jmp    8004210dee <memfind+0x39>
  8004210dd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210ddd:	0f b6 10             	movzbl (%rax),%edx
  8004210de0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210de3:	38 c2                	cmp    %al,%dl
  8004210de5:	75 02                	jne    8004210de9 <memfind+0x34>
  8004210de7:	eb 0f                	jmp    8004210df8 <memfind+0x43>
  8004210de9:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210dee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210df2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004210df6:	72 e1                	jb     8004210dd9 <memfind+0x24>
  8004210df8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210dfc:	c9                   	leaveq 
  8004210dfd:	c3                   	retq   

0000008004210dfe <strtol>:
  8004210dfe:	55                   	push   %rbp
  8004210dff:	48 89 e5             	mov    %rsp,%rbp
  8004210e02:	48 83 ec 34          	sub    $0x34,%rsp
  8004210e06:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210e0a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210e0e:	89 55 cc             	mov    %edx,-0x34(%rbp)
  8004210e11:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210e18:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004210e1f:	00 
  8004210e20:	eb 05                	jmp    8004210e27 <strtol+0x29>
  8004210e22:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210e27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e2b:	0f b6 00             	movzbl (%rax),%eax
  8004210e2e:	3c 20                	cmp    $0x20,%al
  8004210e30:	74 f0                	je     8004210e22 <strtol+0x24>
  8004210e32:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e36:	0f b6 00             	movzbl (%rax),%eax
  8004210e39:	3c 09                	cmp    $0x9,%al
  8004210e3b:	74 e5                	je     8004210e22 <strtol+0x24>
  8004210e3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e41:	0f b6 00             	movzbl (%rax),%eax
  8004210e44:	3c 2b                	cmp    $0x2b,%al
  8004210e46:	75 07                	jne    8004210e4f <strtol+0x51>
  8004210e48:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210e4d:	eb 17                	jmp    8004210e66 <strtol+0x68>
  8004210e4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e53:	0f b6 00             	movzbl (%rax),%eax
  8004210e56:	3c 2d                	cmp    $0x2d,%al
  8004210e58:	75 0c                	jne    8004210e66 <strtol+0x68>
  8004210e5a:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210e5f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  8004210e66:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210e6a:	74 06                	je     8004210e72 <strtol+0x74>
  8004210e6c:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  8004210e70:	75 28                	jne    8004210e9a <strtol+0x9c>
  8004210e72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e76:	0f b6 00             	movzbl (%rax),%eax
  8004210e79:	3c 30                	cmp    $0x30,%al
  8004210e7b:	75 1d                	jne    8004210e9a <strtol+0x9c>
  8004210e7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e81:	48 83 c0 01          	add    $0x1,%rax
  8004210e85:	0f b6 00             	movzbl (%rax),%eax
  8004210e88:	3c 78                	cmp    $0x78,%al
  8004210e8a:	75 0e                	jne    8004210e9a <strtol+0x9c>
  8004210e8c:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  8004210e91:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  8004210e98:	eb 2c                	jmp    8004210ec6 <strtol+0xc8>
  8004210e9a:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210e9e:	75 19                	jne    8004210eb9 <strtol+0xbb>
  8004210ea0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ea4:	0f b6 00             	movzbl (%rax),%eax
  8004210ea7:	3c 30                	cmp    $0x30,%al
  8004210ea9:	75 0e                	jne    8004210eb9 <strtol+0xbb>
  8004210eab:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210eb0:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  8004210eb7:	eb 0d                	jmp    8004210ec6 <strtol+0xc8>
  8004210eb9:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210ebd:	75 07                	jne    8004210ec6 <strtol+0xc8>
  8004210ebf:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  8004210ec6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210eca:	0f b6 00             	movzbl (%rax),%eax
  8004210ecd:	3c 2f                	cmp    $0x2f,%al
  8004210ecf:	7e 1d                	jle    8004210eee <strtol+0xf0>
  8004210ed1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ed5:	0f b6 00             	movzbl (%rax),%eax
  8004210ed8:	3c 39                	cmp    $0x39,%al
  8004210eda:	7f 12                	jg     8004210eee <strtol+0xf0>
  8004210edc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ee0:	0f b6 00             	movzbl (%rax),%eax
  8004210ee3:	0f be c0             	movsbl %al,%eax
  8004210ee6:	83 e8 30             	sub    $0x30,%eax
  8004210ee9:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210eec:	eb 4e                	jmp    8004210f3c <strtol+0x13e>
  8004210eee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ef2:	0f b6 00             	movzbl (%rax),%eax
  8004210ef5:	3c 60                	cmp    $0x60,%al
  8004210ef7:	7e 1d                	jle    8004210f16 <strtol+0x118>
  8004210ef9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210efd:	0f b6 00             	movzbl (%rax),%eax
  8004210f00:	3c 7a                	cmp    $0x7a,%al
  8004210f02:	7f 12                	jg     8004210f16 <strtol+0x118>
  8004210f04:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f08:	0f b6 00             	movzbl (%rax),%eax
  8004210f0b:	0f be c0             	movsbl %al,%eax
  8004210f0e:	83 e8 57             	sub    $0x57,%eax
  8004210f11:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210f14:	eb 26                	jmp    8004210f3c <strtol+0x13e>
  8004210f16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f1a:	0f b6 00             	movzbl (%rax),%eax
  8004210f1d:	3c 40                	cmp    $0x40,%al
  8004210f1f:	7e 48                	jle    8004210f69 <strtol+0x16b>
  8004210f21:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f25:	0f b6 00             	movzbl (%rax),%eax
  8004210f28:	3c 5a                	cmp    $0x5a,%al
  8004210f2a:	7f 3d                	jg     8004210f69 <strtol+0x16b>
  8004210f2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f30:	0f b6 00             	movzbl (%rax),%eax
  8004210f33:	0f be c0             	movsbl %al,%eax
  8004210f36:	83 e8 37             	sub    $0x37,%eax
  8004210f39:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210f3c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210f3f:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  8004210f42:	7c 02                	jl     8004210f46 <strtol+0x148>
  8004210f44:	eb 23                	jmp    8004210f69 <strtol+0x16b>
  8004210f46:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210f4b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004210f4e:	48 98                	cltq   
  8004210f50:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  8004210f55:	48 89 c2             	mov    %rax,%rdx
  8004210f58:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210f5b:	48 98                	cltq   
  8004210f5d:	48 01 d0             	add    %rdx,%rax
  8004210f60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210f64:	e9 5d ff ff ff       	jmpq   8004210ec6 <strtol+0xc8>
  8004210f69:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004210f6e:	74 0b                	je     8004210f7b <strtol+0x17d>
  8004210f70:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210f74:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004210f78:	48 89 10             	mov    %rdx,(%rax)
  8004210f7b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210f7f:	74 09                	je     8004210f8a <strtol+0x18c>
  8004210f81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f85:	48 f7 d8             	neg    %rax
  8004210f88:	eb 04                	jmp    8004210f8e <strtol+0x190>
  8004210f8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210f8e:	c9                   	leaveq 
  8004210f8f:	c3                   	retq   

0000008004210f90 <strstr>:
  8004210f90:	55                   	push   %rbp
  8004210f91:	48 89 e5             	mov    %rsp,%rbp
  8004210f94:	48 83 ec 30          	sub    $0x30,%rsp
  8004210f98:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210f9c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210fa0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210fa4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210fa8:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004210fac:	0f b6 00             	movzbl (%rax),%eax
  8004210faf:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004210fb2:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  8004210fb6:	75 06                	jne    8004210fbe <strstr+0x2e>
  8004210fb8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210fbc:	eb 6b                	jmp    8004211029 <strstr+0x99>
  8004210fbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210fc2:	48 89 c7             	mov    %rax,%rdi
  8004210fc5:	48 b8 66 08 21 04 80 	movabs $0x8004210866,%rax
  8004210fcc:	00 00 00 
  8004210fcf:	ff d0                	callq  *%rax
  8004210fd1:	48 98                	cltq   
  8004210fd3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210fd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210fdb:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210fdf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210fe3:	0f b6 00             	movzbl (%rax),%eax
  8004210fe6:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004210fe9:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  8004210fed:	75 07                	jne    8004210ff6 <strstr+0x66>
  8004210fef:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210ff4:	eb 33                	jmp    8004211029 <strstr+0x99>
  8004210ff6:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004210ffa:	3a 45 ff             	cmp    -0x1(%rbp),%al
  8004210ffd:	75 d8                	jne    8004210fd7 <strstr+0x47>
  8004210fff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211003:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  8004211007:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421100b:	48 89 ce             	mov    %rcx,%rsi
  800421100e:	48 89 c7             	mov    %rax,%rdi
  8004211011:	48 b8 87 0a 21 04 80 	movabs $0x8004210a87,%rax
  8004211018:	00 00 00 
  800421101b:	ff d0                	callq  *%rax
  800421101d:	85 c0                	test   %eax,%eax
  800421101f:	75 b6                	jne    8004210fd7 <strstr+0x47>
  8004211021:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211025:	48 83 e8 01          	sub    $0x1,%rax
  8004211029:	c9                   	leaveq 
  800421102a:	c3                   	retq   

000000800421102b <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  800421102b:	55                   	push   %rbp
  800421102c:	48 89 e5             	mov    %rsp,%rbp
  800421102f:	48 83 ec 24          	sub    $0x24,%rsp
  8004211033:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211037:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421103b:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  800421103e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211042:	48 8b 10             	mov    (%rax),%rdx
  8004211045:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211049:	48 01 d0             	add    %rdx,%rax
  800421104c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004211050:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211057:	00 
	switch (bytes_to_read) {
  8004211058:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421105b:	83 f8 02             	cmp    $0x2,%eax
  800421105e:	0f 84 ab 00 00 00    	je     800421110f <_dwarf_read_lsb+0xe4>
  8004211064:	83 f8 02             	cmp    $0x2,%eax
  8004211067:	7f 0e                	jg     8004211077 <_dwarf_read_lsb+0x4c>
  8004211069:	83 f8 01             	cmp    $0x1,%eax
  800421106c:	0f 84 b3 00 00 00    	je     8004211125 <_dwarf_read_lsb+0xfa>
  8004211072:	e9 d9 00 00 00       	jmpq   8004211150 <_dwarf_read_lsb+0x125>
  8004211077:	83 f8 04             	cmp    $0x4,%eax
  800421107a:	74 65                	je     80042110e1 <_dwarf_read_lsb+0xb6>
  800421107c:	83 f8 08             	cmp    $0x8,%eax
  800421107f:	0f 85 cb 00 00 00    	jne    8004211150 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  8004211085:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211089:	48 83 c0 04          	add    $0x4,%rax
  800421108d:	0f b6 00             	movzbl (%rax),%eax
  8004211090:	0f b6 c0             	movzbl %al,%eax
  8004211093:	48 c1 e0 20          	shl    $0x20,%rax
  8004211097:	48 89 c2             	mov    %rax,%rdx
  800421109a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421109e:	48 83 c0 05          	add    $0x5,%rax
  80042110a2:	0f b6 00             	movzbl (%rax),%eax
  80042110a5:	0f b6 c0             	movzbl %al,%eax
  80042110a8:	48 c1 e0 28          	shl    $0x28,%rax
  80042110ac:	48 09 d0             	or     %rdx,%rax
  80042110af:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042110b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110b7:	48 83 c0 06          	add    $0x6,%rax
  80042110bb:	0f b6 00             	movzbl (%rax),%eax
  80042110be:	0f b6 c0             	movzbl %al,%eax
  80042110c1:	48 c1 e0 30          	shl    $0x30,%rax
  80042110c5:	48 89 c2             	mov    %rax,%rdx
  80042110c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110cc:	48 83 c0 07          	add    $0x7,%rax
  80042110d0:	0f b6 00             	movzbl (%rax),%eax
  80042110d3:	0f b6 c0             	movzbl %al,%eax
  80042110d6:	48 c1 e0 38          	shl    $0x38,%rax
  80042110da:	48 09 d0             	or     %rdx,%rax
  80042110dd:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  80042110e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110e5:	48 83 c0 02          	add    $0x2,%rax
  80042110e9:	0f b6 00             	movzbl (%rax),%eax
  80042110ec:	0f b6 c0             	movzbl %al,%eax
  80042110ef:	48 c1 e0 10          	shl    $0x10,%rax
  80042110f3:	48 89 c2             	mov    %rax,%rdx
  80042110f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110fa:	48 83 c0 03          	add    $0x3,%rax
  80042110fe:	0f b6 00             	movzbl (%rax),%eax
  8004211101:	0f b6 c0             	movzbl %al,%eax
  8004211104:	48 c1 e0 18          	shl    $0x18,%rax
  8004211108:	48 09 d0             	or     %rdx,%rax
  800421110b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  800421110f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211113:	48 83 c0 01          	add    $0x1,%rax
  8004211117:	0f b6 00             	movzbl (%rax),%eax
  800421111a:	0f b6 c0             	movzbl %al,%eax
  800421111d:	48 c1 e0 08          	shl    $0x8,%rax
  8004211121:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  8004211125:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211129:	0f b6 00             	movzbl (%rax),%eax
  800421112c:	0f b6 c0             	movzbl %al,%eax
  800421112f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211133:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  8004211134:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211138:	48 8b 10             	mov    (%rax),%rdx
  800421113b:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421113e:	48 98                	cltq   
  8004211140:	48 01 c2             	add    %rax,%rdx
  8004211143:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211147:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421114a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421114e:	eb 05                	jmp    8004211155 <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004211150:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  8004211155:	c9                   	leaveq 
  8004211156:	c3                   	retq   

0000008004211157 <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  8004211157:	55                   	push   %rbp
  8004211158:	48 89 e5             	mov    %rsp,%rbp
  800421115b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421115f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211163:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211166:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421116a:	48 8b 00             	mov    (%rax),%rax
  800421116d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004211171:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211178:	00 
	switch (bytes_to_read) {
  8004211179:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421117c:	83 f8 02             	cmp    $0x2,%eax
  800421117f:	0f 84 ab 00 00 00    	je     8004211230 <_dwarf_decode_lsb+0xd9>
  8004211185:	83 f8 02             	cmp    $0x2,%eax
  8004211188:	7f 0e                	jg     8004211198 <_dwarf_decode_lsb+0x41>
  800421118a:	83 f8 01             	cmp    $0x1,%eax
  800421118d:	0f 84 b3 00 00 00    	je     8004211246 <_dwarf_decode_lsb+0xef>
  8004211193:	e9 d9 00 00 00       	jmpq   8004211271 <_dwarf_decode_lsb+0x11a>
  8004211198:	83 f8 04             	cmp    $0x4,%eax
  800421119b:	74 65                	je     8004211202 <_dwarf_decode_lsb+0xab>
  800421119d:	83 f8 08             	cmp    $0x8,%eax
  80042111a0:	0f 85 cb 00 00 00    	jne    8004211271 <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  80042111a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111aa:	48 83 c0 04          	add    $0x4,%rax
  80042111ae:	0f b6 00             	movzbl (%rax),%eax
  80042111b1:	0f b6 c0             	movzbl %al,%eax
  80042111b4:	48 c1 e0 20          	shl    $0x20,%rax
  80042111b8:	48 89 c2             	mov    %rax,%rdx
  80042111bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111bf:	48 83 c0 05          	add    $0x5,%rax
  80042111c3:	0f b6 00             	movzbl (%rax),%eax
  80042111c6:	0f b6 c0             	movzbl %al,%eax
  80042111c9:	48 c1 e0 28          	shl    $0x28,%rax
  80042111cd:	48 09 d0             	or     %rdx,%rax
  80042111d0:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042111d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111d8:	48 83 c0 06          	add    $0x6,%rax
  80042111dc:	0f b6 00             	movzbl (%rax),%eax
  80042111df:	0f b6 c0             	movzbl %al,%eax
  80042111e2:	48 c1 e0 30          	shl    $0x30,%rax
  80042111e6:	48 89 c2             	mov    %rax,%rdx
  80042111e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111ed:	48 83 c0 07          	add    $0x7,%rax
  80042111f1:	0f b6 00             	movzbl (%rax),%eax
  80042111f4:	0f b6 c0             	movzbl %al,%eax
  80042111f7:	48 c1 e0 38          	shl    $0x38,%rax
  80042111fb:	48 09 d0             	or     %rdx,%rax
  80042111fe:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004211202:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211206:	48 83 c0 02          	add    $0x2,%rax
  800421120a:	0f b6 00             	movzbl (%rax),%eax
  800421120d:	0f b6 c0             	movzbl %al,%eax
  8004211210:	48 c1 e0 10          	shl    $0x10,%rax
  8004211214:	48 89 c2             	mov    %rax,%rdx
  8004211217:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421121b:	48 83 c0 03          	add    $0x3,%rax
  800421121f:	0f b6 00             	movzbl (%rax),%eax
  8004211222:	0f b6 c0             	movzbl %al,%eax
  8004211225:	48 c1 e0 18          	shl    $0x18,%rax
  8004211229:	48 09 d0             	or     %rdx,%rax
  800421122c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004211230:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211234:	48 83 c0 01          	add    $0x1,%rax
  8004211238:	0f b6 00             	movzbl (%rax),%eax
  800421123b:	0f b6 c0             	movzbl %al,%eax
  800421123e:	48 c1 e0 08          	shl    $0x8,%rax
  8004211242:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  8004211246:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421124a:	0f b6 00             	movzbl (%rax),%eax
  800421124d:	0f b6 c0             	movzbl %al,%eax
  8004211250:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211254:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  8004211255:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211259:	48 8b 10             	mov    (%rax),%rdx
  800421125c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421125f:	48 98                	cltq   
  8004211261:	48 01 c2             	add    %rax,%rdx
  8004211264:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211268:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421126b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421126f:	eb 05                	jmp    8004211276 <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004211271:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  8004211276:	c9                   	leaveq 
  8004211277:	c3                   	retq   

0000008004211278 <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  8004211278:	55                   	push   %rbp
  8004211279:	48 89 e5             	mov    %rsp,%rbp
  800421127c:	48 83 ec 24          	sub    $0x24,%rsp
  8004211280:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211284:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004211288:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  800421128b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421128f:	48 8b 10             	mov    (%rax),%rdx
  8004211292:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211296:	48 01 d0             	add    %rdx,%rax
  8004211299:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  800421129d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042112a0:	83 f8 02             	cmp    $0x2,%eax
  80042112a3:	74 35                	je     80042112da <_dwarf_read_msb+0x62>
  80042112a5:	83 f8 02             	cmp    $0x2,%eax
  80042112a8:	7f 0a                	jg     80042112b4 <_dwarf_read_msb+0x3c>
  80042112aa:	83 f8 01             	cmp    $0x1,%eax
  80042112ad:	74 18                	je     80042112c7 <_dwarf_read_msb+0x4f>
  80042112af:	e9 53 01 00 00       	jmpq   8004211407 <_dwarf_read_msb+0x18f>
  80042112b4:	83 f8 04             	cmp    $0x4,%eax
  80042112b7:	74 49                	je     8004211302 <_dwarf_read_msb+0x8a>
  80042112b9:	83 f8 08             	cmp    $0x8,%eax
  80042112bc:	0f 84 96 00 00 00    	je     8004211358 <_dwarf_read_msb+0xe0>
  80042112c2:	e9 40 01 00 00       	jmpq   8004211407 <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  80042112c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112cb:	0f b6 00             	movzbl (%rax),%eax
  80042112ce:	0f b6 c0             	movzbl %al,%eax
  80042112d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042112d5:	e9 34 01 00 00       	jmpq   800421140e <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042112da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112de:	48 83 c0 01          	add    $0x1,%rax
  80042112e2:	0f b6 00             	movzbl (%rax),%eax
  80042112e5:	0f b6 d0             	movzbl %al,%edx
  80042112e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042112ec:	0f b6 00             	movzbl (%rax),%eax
  80042112ef:	0f b6 c0             	movzbl %al,%eax
  80042112f2:	48 c1 e0 08          	shl    $0x8,%rax
  80042112f6:	48 09 d0             	or     %rdx,%rax
  80042112f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042112fd:	e9 0c 01 00 00       	jmpq   800421140e <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004211302:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211306:	48 83 c0 03          	add    $0x3,%rax
  800421130a:	0f b6 00             	movzbl (%rax),%eax
  800421130d:	0f b6 c0             	movzbl %al,%eax
  8004211310:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211314:	48 83 c2 02          	add    $0x2,%rdx
  8004211318:	0f b6 12             	movzbl (%rdx),%edx
  800421131b:	0f b6 d2             	movzbl %dl,%edx
  800421131e:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211322:	48 09 d0             	or     %rdx,%rax
  8004211325:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004211329:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421132d:	48 83 c0 01          	add    $0x1,%rax
  8004211331:	0f b6 00             	movzbl (%rax),%eax
  8004211334:	0f b6 c0             	movzbl %al,%eax
  8004211337:	48 c1 e0 10          	shl    $0x10,%rax
  800421133b:	48 89 c2             	mov    %rax,%rdx
  800421133e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211342:	0f b6 00             	movzbl (%rax),%eax
  8004211345:	0f b6 c0             	movzbl %al,%eax
  8004211348:	48 c1 e0 18          	shl    $0x18,%rax
  800421134c:	48 09 d0             	or     %rdx,%rax
  800421134f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211353:	e9 b6 00 00 00       	jmpq   800421140e <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004211358:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421135c:	48 83 c0 07          	add    $0x7,%rax
  8004211360:	0f b6 00             	movzbl (%rax),%eax
  8004211363:	0f b6 c0             	movzbl %al,%eax
  8004211366:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421136a:	48 83 c2 06          	add    $0x6,%rdx
  800421136e:	0f b6 12             	movzbl (%rdx),%edx
  8004211371:	0f b6 d2             	movzbl %dl,%edx
  8004211374:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211378:	48 09 d0             	or     %rdx,%rax
  800421137b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  800421137f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211383:	48 83 c0 05          	add    $0x5,%rax
  8004211387:	0f b6 00             	movzbl (%rax),%eax
  800421138a:	0f b6 c0             	movzbl %al,%eax
  800421138d:	48 c1 e0 10          	shl    $0x10,%rax
  8004211391:	48 89 c2             	mov    %rax,%rdx
  8004211394:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211398:	48 83 c0 04          	add    $0x4,%rax
  800421139c:	0f b6 00             	movzbl (%rax),%eax
  800421139f:	0f b6 c0             	movzbl %al,%eax
  80042113a2:	48 c1 e0 18          	shl    $0x18,%rax
  80042113a6:	48 09 d0             	or     %rdx,%rax
  80042113a9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  80042113ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113b1:	48 83 c0 03          	add    $0x3,%rax
  80042113b5:	0f b6 00             	movzbl (%rax),%eax
  80042113b8:	0f b6 c0             	movzbl %al,%eax
  80042113bb:	48 c1 e0 20          	shl    $0x20,%rax
  80042113bf:	48 89 c2             	mov    %rax,%rdx
  80042113c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113c6:	48 83 c0 02          	add    $0x2,%rax
  80042113ca:	0f b6 00             	movzbl (%rax),%eax
  80042113cd:	0f b6 c0             	movzbl %al,%eax
  80042113d0:	48 c1 e0 28          	shl    $0x28,%rax
  80042113d4:	48 09 d0             	or     %rdx,%rax
  80042113d7:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042113db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113df:	48 83 c0 01          	add    $0x1,%rax
  80042113e3:	0f b6 00             	movzbl (%rax),%eax
  80042113e6:	0f b6 c0             	movzbl %al,%eax
  80042113e9:	48 c1 e0 30          	shl    $0x30,%rax
  80042113ed:	48 89 c2             	mov    %rax,%rdx
  80042113f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113f4:	0f b6 00             	movzbl (%rax),%eax
  80042113f7:	0f b6 c0             	movzbl %al,%eax
  80042113fa:	48 c1 e0 38          	shl    $0x38,%rax
  80042113fe:	48 09 d0             	or     %rdx,%rax
  8004211401:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211405:	eb 07                	jmp    800421140e <_dwarf_read_msb+0x196>
	default:
		return (0);
  8004211407:	b8 00 00 00 00       	mov    $0x0,%eax
  800421140c:	eb 1a                	jmp    8004211428 <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  800421140e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211412:	48 8b 10             	mov    (%rax),%rdx
  8004211415:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004211418:	48 98                	cltq   
  800421141a:	48 01 c2             	add    %rax,%rdx
  800421141d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211421:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211424:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211428:	c9                   	leaveq 
  8004211429:	c3                   	retq   

000000800421142a <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  800421142a:	55                   	push   %rbp
  800421142b:	48 89 e5             	mov    %rsp,%rbp
  800421142e:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004211432:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211436:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211439:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421143d:	48 8b 00             	mov    (%rax),%rax
  8004211440:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004211444:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421144b:	00 
	switch (bytes_to_read) {
  800421144c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421144f:	83 f8 02             	cmp    $0x2,%eax
  8004211452:	74 35                	je     8004211489 <_dwarf_decode_msb+0x5f>
  8004211454:	83 f8 02             	cmp    $0x2,%eax
  8004211457:	7f 0a                	jg     8004211463 <_dwarf_decode_msb+0x39>
  8004211459:	83 f8 01             	cmp    $0x1,%eax
  800421145c:	74 18                	je     8004211476 <_dwarf_decode_msb+0x4c>
  800421145e:	e9 53 01 00 00       	jmpq   80042115b6 <_dwarf_decode_msb+0x18c>
  8004211463:	83 f8 04             	cmp    $0x4,%eax
  8004211466:	74 49                	je     80042114b1 <_dwarf_decode_msb+0x87>
  8004211468:	83 f8 08             	cmp    $0x8,%eax
  800421146b:	0f 84 96 00 00 00    	je     8004211507 <_dwarf_decode_msb+0xdd>
  8004211471:	e9 40 01 00 00       	jmpq   80042115b6 <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  8004211476:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421147a:	0f b6 00             	movzbl (%rax),%eax
  800421147d:	0f b6 c0             	movzbl %al,%eax
  8004211480:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211484:	e9 34 01 00 00       	jmpq   80042115bd <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  8004211489:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421148d:	48 83 c0 01          	add    $0x1,%rax
  8004211491:	0f b6 00             	movzbl (%rax),%eax
  8004211494:	0f b6 d0             	movzbl %al,%edx
  8004211497:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421149b:	0f b6 00             	movzbl (%rax),%eax
  800421149e:	0f b6 c0             	movzbl %al,%eax
  80042114a1:	48 c1 e0 08          	shl    $0x8,%rax
  80042114a5:	48 09 d0             	or     %rdx,%rax
  80042114a8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042114ac:	e9 0c 01 00 00       	jmpq   80042115bd <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042114b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114b5:	48 83 c0 03          	add    $0x3,%rax
  80042114b9:	0f b6 00             	movzbl (%rax),%eax
  80042114bc:	0f b6 c0             	movzbl %al,%eax
  80042114bf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042114c3:	48 83 c2 02          	add    $0x2,%rdx
  80042114c7:	0f b6 12             	movzbl (%rdx),%edx
  80042114ca:	0f b6 d2             	movzbl %dl,%edx
  80042114cd:	48 c1 e2 08          	shl    $0x8,%rdx
  80042114d1:	48 09 d0             	or     %rdx,%rax
  80042114d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  80042114d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114dc:	48 83 c0 01          	add    $0x1,%rax
  80042114e0:	0f b6 00             	movzbl (%rax),%eax
  80042114e3:	0f b6 c0             	movzbl %al,%eax
  80042114e6:	48 c1 e0 10          	shl    $0x10,%rax
  80042114ea:	48 89 c2             	mov    %rax,%rdx
  80042114ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114f1:	0f b6 00             	movzbl (%rax),%eax
  80042114f4:	0f b6 c0             	movzbl %al,%eax
  80042114f7:	48 c1 e0 18          	shl    $0x18,%rax
  80042114fb:	48 09 d0             	or     %rdx,%rax
  80042114fe:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211502:	e9 b6 00 00 00       	jmpq   80042115bd <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004211507:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421150b:	48 83 c0 07          	add    $0x7,%rax
  800421150f:	0f b6 00             	movzbl (%rax),%eax
  8004211512:	0f b6 c0             	movzbl %al,%eax
  8004211515:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211519:	48 83 c2 06          	add    $0x6,%rdx
  800421151d:	0f b6 12             	movzbl (%rdx),%edx
  8004211520:	0f b6 d2             	movzbl %dl,%edx
  8004211523:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211527:	48 09 d0             	or     %rdx,%rax
  800421152a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  800421152e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211532:	48 83 c0 05          	add    $0x5,%rax
  8004211536:	0f b6 00             	movzbl (%rax),%eax
  8004211539:	0f b6 c0             	movzbl %al,%eax
  800421153c:	48 c1 e0 10          	shl    $0x10,%rax
  8004211540:	48 89 c2             	mov    %rax,%rdx
  8004211543:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211547:	48 83 c0 04          	add    $0x4,%rax
  800421154b:	0f b6 00             	movzbl (%rax),%eax
  800421154e:	0f b6 c0             	movzbl %al,%eax
  8004211551:	48 c1 e0 18          	shl    $0x18,%rax
  8004211555:	48 09 d0             	or     %rdx,%rax
  8004211558:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  800421155c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211560:	48 83 c0 03          	add    $0x3,%rax
  8004211564:	0f b6 00             	movzbl (%rax),%eax
  8004211567:	0f b6 c0             	movzbl %al,%eax
  800421156a:	48 c1 e0 20          	shl    $0x20,%rax
  800421156e:	48 89 c2             	mov    %rax,%rdx
  8004211571:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211575:	48 83 c0 02          	add    $0x2,%rax
  8004211579:	0f b6 00             	movzbl (%rax),%eax
  800421157c:	0f b6 c0             	movzbl %al,%eax
  800421157f:	48 c1 e0 28          	shl    $0x28,%rax
  8004211583:	48 09 d0             	or     %rdx,%rax
  8004211586:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  800421158a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421158e:	48 83 c0 01          	add    $0x1,%rax
  8004211592:	0f b6 00             	movzbl (%rax),%eax
  8004211595:	0f b6 c0             	movzbl %al,%eax
  8004211598:	48 c1 e0 30          	shl    $0x30,%rax
  800421159c:	48 89 c2             	mov    %rax,%rdx
  800421159f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115a3:	0f b6 00             	movzbl (%rax),%eax
  80042115a6:	0f b6 c0             	movzbl %al,%eax
  80042115a9:	48 c1 e0 38          	shl    $0x38,%rax
  80042115ad:	48 09 d0             	or     %rdx,%rax
  80042115b0:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042115b4:	eb 07                	jmp    80042115bd <_dwarf_decode_msb+0x193>
	default:
		return (0);
  80042115b6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042115bb:	eb 1a                	jmp    80042115d7 <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  80042115bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042115c1:	48 8b 10             	mov    (%rax),%rdx
  80042115c4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042115c7:	48 98                	cltq   
  80042115c9:	48 01 c2             	add    %rax,%rdx
  80042115cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042115d0:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042115d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042115d7:	c9                   	leaveq 
  80042115d8:	c3                   	retq   

00000080042115d9 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  80042115d9:	55                   	push   %rbp
  80042115da:	48 89 e5             	mov    %rsp,%rbp
  80042115dd:	48 83 ec 30          	sub    $0x30,%rsp
  80042115e1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042115e5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  80042115e9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042115f0:	00 
	uint8_t b;
	int shift = 0;
  80042115f1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  80042115f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042115fc:	48 8b 10             	mov    (%rax),%rdx
  80042115ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211603:	48 01 d0             	add    %rdx,%rax
  8004211606:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800421160a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421160e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211612:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211616:	0f b6 00             	movzbl (%rax),%eax
  8004211619:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800421161c:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211620:	83 e0 7f             	and    $0x7f,%eax
  8004211623:	89 c2                	mov    %eax,%edx
  8004211625:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211628:	89 c1                	mov    %eax,%ecx
  800421162a:	d3 e2                	shl    %cl,%edx
  800421162c:	89 d0                	mov    %edx,%eax
  800421162e:	48 98                	cltq   
  8004211630:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211634:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211638:	48 8b 00             	mov    (%rax),%rax
  800421163b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421163f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211643:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004211646:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  800421164a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421164e:	84 c0                	test   %al,%al
  8004211650:	78 b8                	js     800421160a <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  8004211652:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211656:	7f 1f                	jg     8004211677 <_dwarf_read_sleb128+0x9e>
  8004211658:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421165c:	83 e0 40             	and    $0x40,%eax
  800421165f:	85 c0                	test   %eax,%eax
  8004211661:	74 14                	je     8004211677 <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  8004211663:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211666:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  800421166b:	89 c1                	mov    %eax,%ecx
  800421166d:	d3 e2                	shl    %cl,%edx
  800421166f:	89 d0                	mov    %edx,%eax
  8004211671:	48 98                	cltq   
  8004211673:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  8004211677:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800421167b:	c9                   	leaveq 
  800421167c:	c3                   	retq   

000000800421167d <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  800421167d:	55                   	push   %rbp
  800421167e:	48 89 e5             	mov    %rsp,%rbp
  8004211681:	48 83 ec 30          	sub    $0x30,%rsp
  8004211685:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211689:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  800421168d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211694:	00 
	uint8_t b;
	int shift = 0;
  8004211695:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  800421169c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042116a0:	48 8b 10             	mov    (%rax),%rdx
  80042116a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042116a7:	48 01 d0             	add    %rdx,%rax
  80042116aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042116ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116b2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042116b6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042116ba:	0f b6 00             	movzbl (%rax),%eax
  80042116bd:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  80042116c0:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042116c4:	83 e0 7f             	and    $0x7f,%eax
  80042116c7:	89 c2                	mov    %eax,%edx
  80042116c9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042116cc:	89 c1                	mov    %eax,%ecx
  80042116ce:	d3 e2                	shl    %cl,%edx
  80042116d0:	89 d0                	mov    %edx,%eax
  80042116d2:	48 98                	cltq   
  80042116d4:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  80042116d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042116dc:	48 8b 00             	mov    (%rax),%rax
  80042116df:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042116e3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042116e7:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  80042116ea:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  80042116ee:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042116f2:	84 c0                	test   %al,%al
  80042116f4:	78 b8                	js     80042116ae <_dwarf_read_uleb128+0x31>

	return (ret);
  80042116f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042116fa:	c9                   	leaveq 
  80042116fb:	c3                   	retq   

00000080042116fc <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  80042116fc:	55                   	push   %rbp
  80042116fd:	48 89 e5             	mov    %rsp,%rbp
  8004211700:	48 83 ec 28          	sub    $0x28,%rsp
  8004211704:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004211708:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421170f:	00 
	uint8_t b;
	int shift = 0;
  8004211710:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211717:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421171b:	48 8b 00             	mov    (%rax),%rax
  800421171e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211722:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211726:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421172a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421172e:	0f b6 00             	movzbl (%rax),%eax
  8004211731:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211734:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211738:	83 e0 7f             	and    $0x7f,%eax
  800421173b:	89 c2                	mov    %eax,%edx
  800421173d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211740:	89 c1                	mov    %eax,%ecx
  8004211742:	d3 e2                	shl    %cl,%edx
  8004211744:	89 d0                	mov    %edx,%eax
  8004211746:	48 98                	cltq   
  8004211748:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  800421174c:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211750:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211754:	84 c0                	test   %al,%al
  8004211756:	78 ca                	js     8004211722 <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004211758:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800421175c:	7f 1f                	jg     800421177d <_dwarf_decode_sleb128+0x81>
  800421175e:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211762:	83 e0 40             	and    $0x40,%eax
  8004211765:	85 c0                	test   %eax,%eax
  8004211767:	74 14                	je     800421177d <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  8004211769:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421176c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004211771:	89 c1                	mov    %eax,%ecx
  8004211773:	d3 e2                	shl    %cl,%edx
  8004211775:	89 d0                	mov    %edx,%eax
  8004211777:	48 98                	cltq   
  8004211779:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  800421177d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211781:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211785:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800421178c:	c9                   	leaveq 
  800421178d:	c3                   	retq   

000000800421178e <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  800421178e:	55                   	push   %rbp
  800421178f:	48 89 e5             	mov    %rsp,%rbp
  8004211792:	48 83 ec 28          	sub    $0x28,%rsp
  8004211796:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  800421179a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042117a1:	00 
	uint8_t b;
	int shift = 0;
  80042117a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  80042117a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042117ad:	48 8b 00             	mov    (%rax),%rax
  80042117b0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042117b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042117b8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042117bc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042117c0:	0f b6 00             	movzbl (%rax),%eax
  80042117c3:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  80042117c6:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042117ca:	83 e0 7f             	and    $0x7f,%eax
  80042117cd:	89 c2                	mov    %eax,%edx
  80042117cf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042117d2:	89 c1                	mov    %eax,%ecx
  80042117d4:	d3 e2                	shl    %cl,%edx
  80042117d6:	89 d0                	mov    %edx,%eax
  80042117d8:	48 98                	cltq   
  80042117da:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  80042117de:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  80042117e2:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042117e6:	84 c0                	test   %al,%al
  80042117e8:	78 ca                	js     80042117b4 <_dwarf_decode_uleb128+0x26>

	*dp = src;
  80042117ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042117ee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042117f2:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042117f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042117f9:	c9                   	leaveq 
  80042117fa:	c3                   	retq   

00000080042117fb <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  80042117fb:	55                   	push   %rbp
  80042117fc:	48 89 e5             	mov    %rsp,%rbp
  80042117ff:	48 83 ec 28          	sub    $0x28,%rsp
  8004211803:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211807:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421180b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  800421180f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211813:	48 8b 10             	mov    (%rax),%rdx
  8004211816:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421181a:	48 01 d0             	add    %rdx,%rax
  800421181d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211821:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211825:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004211829:	eb 17                	jmp    8004211842 <_dwarf_read_string+0x47>
		src++;
  800421182b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004211830:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211834:	48 8b 00             	mov    (%rax),%rax
  8004211837:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421183b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421183f:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  8004211842:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211846:	0f b6 00             	movzbl (%rax),%eax
  8004211849:	84 c0                	test   %al,%al
  800421184b:	74 0d                	je     800421185a <_dwarf_read_string+0x5f>
  800421184d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211851:	48 8b 00             	mov    (%rax),%rax
  8004211854:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211858:	72 d1                	jb     800421182b <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  800421185a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421185e:	0f b6 00             	movzbl (%rax),%eax
  8004211861:	84 c0                	test   %al,%al
  8004211863:	75 1f                	jne    8004211884 <_dwarf_read_string+0x89>
  8004211865:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211869:	48 8b 00             	mov    (%rax),%rax
  800421186c:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211870:	73 12                	jae    8004211884 <_dwarf_read_string+0x89>
		(*offsetp)++;
  8004211872:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211876:	48 8b 00             	mov    (%rax),%rax
  8004211879:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421187d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211881:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211884:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211888:	c9                   	leaveq 
  8004211889:	c3                   	retq   

000000800421188a <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  800421188a:	55                   	push   %rbp
  800421188b:	48 89 e5             	mov    %rsp,%rbp
  800421188e:	48 83 ec 28          	sub    $0x28,%rsp
  8004211892:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211896:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421189a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  800421189e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042118a2:	48 8b 10             	mov    (%rax),%rdx
  80042118a5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118a9:	48 01 d0             	add    %rdx,%rax
  80042118ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042118b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042118b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  80042118b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042118bc:	48 8b 10             	mov    (%rax),%rdx
  80042118bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042118c3:	48 01 c2             	add    %rax,%rdx
  80042118c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042118ca:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042118cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  80042118d1:	c9                   	leaveq 
  80042118d2:	c3                   	retq   

00000080042118d3 <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  80042118d3:	55                   	push   %rbp
  80042118d4:	48 89 e5             	mov    %rsp,%rbp
  80042118d7:	48 83 ec 20          	sub    $0x20,%rsp
  80042118db:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  80042118df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  80042118e7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042118ec:	75 35                	jne    8004211923 <_dwarf_elf_get_byte_order+0x50>
  80042118ee:	48 b9 a0 01 22 04 80 	movabs $0x80042201a0,%rcx
  80042118f5:	00 00 00 
  80042118f8:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  80042118ff:	00 00 00 
  8004211902:	be 29 01 00 00       	mov    $0x129,%esi
  8004211907:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  800421190e:	00 00 00 
  8004211911:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211916:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421191d:	00 00 00 
  8004211920:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004211923:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211927:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  800421192b:	0f b6 c0             	movzbl %al,%eax
  800421192e:	83 f8 02             	cmp    $0x2,%eax
  8004211931:	75 07                	jne    800421193a <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004211933:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211938:	eb 05                	jmp    800421193f <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  800421193a:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  800421193f:	c9                   	leaveq 
  8004211940:	c3                   	retq   

0000008004211941 <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004211941:	55                   	push   %rbp
  8004211942:	48 89 e5             	mov    %rsp,%rbp
  8004211945:	48 83 ec 20          	sub    $0x20,%rsp
  8004211949:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  800421194d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211951:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211955:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421195a:	75 35                	jne    8004211991 <_dwarf_elf_get_pointer_size+0x50>
  800421195c:	48 b9 a0 01 22 04 80 	movabs $0x80042201a0,%rcx
  8004211963:	00 00 00 
  8004211966:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  800421196d:	00 00 00 
  8004211970:	be 3f 01 00 00       	mov    $0x13f,%esi
  8004211975:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  800421197c:	00 00 00 
  800421197f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211984:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421198b:	00 00 00 
  800421198e:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  8004211991:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211995:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  8004211999:	3c 01                	cmp    $0x1,%al
  800421199b:	75 07                	jne    80042119a4 <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  800421199d:	b8 04 00 00 00       	mov    $0x4,%eax
  80042119a2:	eb 05                	jmp    80042119a9 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  80042119a4:	b8 08 00 00 00       	mov    $0x8,%eax
}
  80042119a9:	c9                   	leaveq 
  80042119aa:	c3                   	retq   

00000080042119ab <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  80042119ab:	55                   	push   %rbp
  80042119ac:	48 89 e5             	mov    %rsp,%rbp
  80042119af:	53                   	push   %rbx
  80042119b0:	48 83 ec 18          	sub    $0x18,%rsp
  80042119b4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042119b8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  80042119bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119c0:	ba 60 00 00 00       	mov    $0x60,%edx
  80042119c5:	be 00 00 00 00       	mov    $0x0,%esi
  80042119ca:	48 89 c7             	mov    %rax,%rdi
  80042119cd:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  80042119d4:	00 00 00 
  80042119d7:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  80042119d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119dd:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  80042119e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042119e8:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  80042119ef:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  80042119f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042119f4:	48 89 c7             	mov    %rax,%rdi
  80042119f7:	48 b8 41 19 21 04 80 	movabs $0x8004211941,%rax
  80042119fe:	00 00 00 
  8004211a01:	ff d0                	callq  *%rax
  8004211a03:	0f b6 d0             	movzbl %al,%edx
  8004211a06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a0a:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004211a0d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211a11:	48 89 c7             	mov    %rax,%rdi
  8004211a14:	48 b8 d3 18 21 04 80 	movabs $0x80042118d3,%rax
  8004211a1b:	00 00 00 
  8004211a1e:	ff d0                	callq  *%rax
  8004211a20:	85 c0                	test   %eax,%eax
  8004211a22:	75 26                	jne    8004211a4a <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  8004211a24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a28:	48 b9 78 12 21 04 80 	movabs $0x8004211278,%rcx
  8004211a2f:	00 00 00 
  8004211a32:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  8004211a36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a3a:	48 bb 2a 14 21 04 80 	movabs $0x800421142a,%rbx
  8004211a41:	00 00 00 
  8004211a44:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004211a48:	eb 24                	jmp    8004211a6e <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004211a4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a4e:	48 b9 2b 10 21 04 80 	movabs $0x800421102b,%rcx
  8004211a55:	00 00 00 
  8004211a58:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004211a5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a60:	48 be 57 11 21 04 80 	movabs $0x8004211157,%rsi
  8004211a67:	00 00 00 
  8004211a6a:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004211a6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a72:	48 89 c7             	mov    %rax,%rdi
  8004211a75:	48 b8 78 2f 21 04 80 	movabs $0x8004212f78,%rax
  8004211a7c:	00 00 00 
  8004211a7f:	ff d0                	callq  *%rax
	return 0;
  8004211a81:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211a86:	48 83 c4 18          	add    $0x18,%rsp
  8004211a8a:	5b                   	pop    %rbx
  8004211a8b:	5d                   	pop    %rbp
  8004211a8c:	c3                   	retq   

0000008004211a8d <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  8004211a8d:	55                   	push   %rbp
  8004211a8e:	48 89 e5             	mov    %rsp,%rbp
  8004211a91:	48 83 ec 20          	sub    $0x20,%rsp
  8004211a95:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211a99:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  8004211a9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211aa1:	48 8b 10             	mov    (%rax),%rdx
  8004211aa4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211aa8:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004211aac:	48 39 c2             	cmp    %rax,%rdx
  8004211aaf:	76 0a                	jbe    8004211abb <_get_next_cu+0x2e>
		return -1;
  8004211ab1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211ab6:	e9 6b 01 00 00       	jmpq   8004211c26 <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004211abb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211abf:	48 8b 00             	mov    (%rax),%rax
  8004211ac2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  8004211ac6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211aca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211ace:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  8004211ad2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ad6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211ada:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211ade:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211ae2:	48 89 d1             	mov    %rdx,%rcx
  8004211ae5:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211ae9:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211aee:	48 89 cf             	mov    %rcx,%rdi
  8004211af1:	ff d0                	callq  *%rax
  8004211af3:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  8004211af6:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004211afa:	75 2a                	jne    8004211b26 <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004211afc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b00:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211b04:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211b08:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211b0c:	48 89 d1             	mov    %rdx,%rcx
  8004211b0f:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211b13:	ba 08 00 00 00       	mov    $0x8,%edx
  8004211b18:	48 89 cf             	mov    %rcx,%rdi
  8004211b1b:	ff d0                	callq  *%rax
  8004211b1d:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004211b20:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  8004211b24:	eb 04                	jmp    8004211b2a <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  8004211b26:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004211b2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b2e:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211b32:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  8004211b35:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b3c:	48 01 c2             	add    %rax,%rdx
  8004211b3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b43:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  8004211b46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b4a:	48 8b 10             	mov    (%rax),%rdx
  8004211b4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b51:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  8004211b55:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211b58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b5c:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004211b5f:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004211b63:	75 07                	jne    8004211b6c <_get_next_cu+0xdf>
  8004211b65:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211b6a:	eb 05                	jmp    8004211b71 <_get_next_cu+0xe4>
  8004211b6c:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004211b71:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211b75:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004211b78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b7c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211b80:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211b84:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211b88:	48 89 d1             	mov    %rdx,%rcx
  8004211b8b:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211b8f:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211b94:	48 89 cf             	mov    %rcx,%rdi
  8004211b97:	ff d0                	callq  *%rax
  8004211b99:	89 c2                	mov    %eax,%edx
  8004211b9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b9f:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004211ba3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ba7:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211bab:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211baf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211bb3:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  8004211bb7:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211bbb:	48 89 cf             	mov    %rcx,%rdi
  8004211bbe:	ff d0                	callq  *%rax
  8004211bc0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211bc4:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  8004211bc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211bcc:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211bd0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211bd4:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211bd8:	48 89 d1             	mov    %rdx,%rcx
  8004211bdb:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211bdf:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211be4:	48 89 cf             	mov    %rcx,%rdi
  8004211be7:	ff d0                	callq  *%rax
  8004211be9:	89 c2                	mov    %eax,%edx
  8004211beb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211bef:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  8004211bf2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211bf6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211bfa:	66 83 f8 01          	cmp    $0x1,%ax
  8004211bfe:	76 0e                	jbe    8004211c0e <_get_next_cu+0x181>
  8004211c00:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211c04:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211c08:	66 83 f8 04          	cmp    $0x4,%ax
  8004211c0c:	76 07                	jbe    8004211c15 <_get_next_cu+0x188>
		return -1;
  8004211c0e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211c13:	eb 11                	jmp    8004211c26 <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  8004211c15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211c19:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211c1d:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  8004211c21:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211c26:	c9                   	leaveq 
  8004211c27:	c3                   	retq   

0000008004211c28 <print_cu>:

void print_cu(Dwarf_CU cu)
{
  8004211c28:	55                   	push   %rbp
  8004211c29:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004211c2c:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004211c30:	0f b6 c8             	movzbl %al,%ecx
  8004211c33:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  8004211c37:	0f b7 d0             	movzwl %ax,%edx
  8004211c3a:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004211c3e:	48 89 c6             	mov    %rax,%rsi
  8004211c41:	48 bf d2 01 22 04 80 	movabs $0x80042201d2,%rdi
  8004211c48:	00 00 00 
  8004211c4b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211c50:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  8004211c57:	00 00 00 
  8004211c5a:	41 ff d0             	callq  *%r8
}
  8004211c5d:	5d                   	pop    %rbp
  8004211c5e:	c3                   	retq   

0000008004211c5f <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211c5f:	55                   	push   %rbp
  8004211c60:	48 89 e5             	mov    %rsp,%rbp
  8004211c63:	48 83 ec 60          	sub    $0x60,%rsp
  8004211c67:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211c6b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211c6f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004211c73:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  8004211c77:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211c7c:	75 35                	jne    8004211cb3 <_dwarf_abbrev_parse+0x54>
  8004211c7e:	48 b9 e1 01 22 04 80 	movabs $0x80042201e1,%rcx
  8004211c85:	00 00 00 
  8004211c88:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004211c8f:	00 00 00 
  8004211c92:	be a4 01 00 00       	mov    $0x1a4,%esi
  8004211c97:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004211c9e:	00 00 00 
  8004211ca1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211ca6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004211cad:	00 00 00 
  8004211cb0:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  8004211cb3:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  8004211cb8:	75 35                	jne    8004211cef <_dwarf_abbrev_parse+0x90>
  8004211cba:	48 b9 ed 01 22 04 80 	movabs $0x80042201ed,%rcx
  8004211cc1:	00 00 00 
  8004211cc4:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004211ccb:	00 00 00 
  8004211cce:	be a5 01 00 00       	mov    $0x1a5,%esi
  8004211cd3:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004211cda:	00 00 00 
  8004211cdd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211ce2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004211ce9:	00 00 00 
  8004211cec:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  8004211cef:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211cf3:	48 8b 10             	mov    (%rax),%rdx
  8004211cf6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211cfa:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211cfe:	48 39 c2             	cmp    %rax,%rdx
  8004211d01:	72 0a                	jb     8004211d0d <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  8004211d03:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211d08:	e9 d3 01 00 00       	jmpq   8004211ee0 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211d0d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211d11:	48 8b 00             	mov    (%rax),%rax
  8004211d14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  8004211d18:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211d1c:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211d20:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211d24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211d28:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211d2c:	48 89 d6             	mov    %rdx,%rsi
  8004211d2f:	48 89 c7             	mov    %rax,%rdi
  8004211d32:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  8004211d39:	00 00 00 
  8004211d3c:	ff d0                	callq  *%rax
  8004211d3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  8004211d42:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211d47:	75 15                	jne    8004211d5e <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  8004211d49:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211d4d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  8004211d54:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d59:	e9 82 01 00 00       	jmpq   8004211ee0 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211d5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211d62:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211d66:	48 89 d6             	mov    %rdx,%rsi
  8004211d69:	48 89 c7             	mov    %rax,%rdi
  8004211d6c:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  8004211d73:	00 00 00 
  8004211d76:	ff d0                	callq  *%rax
  8004211d78:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004211d7c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211d80:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211d84:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004211d88:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004211d8c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211d91:	48 89 cf             	mov    %rcx,%rdi
  8004211d94:	ff d0                	callq  *%rax
  8004211d96:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  8004211d99:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211d9d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211da1:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  8004211da4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211da8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211dac:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  8004211db0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211db4:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  8004211db8:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  8004211dbb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211dbf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211dc3:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  8004211dc7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211dcb:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  8004211dd2:	00 
	abp->ab_atnum    = 0;
  8004211dd3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211dd7:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  8004211dde:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  8004211ddf:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211de3:	48 8b 00             	mov    (%rax),%rax
  8004211de6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211dea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211dee:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211df2:	48 89 d6             	mov    %rdx,%rsi
  8004211df5:	48 89 c7             	mov    %rax,%rdi
  8004211df8:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  8004211dff:	00 00 00 
  8004211e02:	ff d0                	callq  *%rax
  8004211e04:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211e08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211e0c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211e10:	48 89 d6             	mov    %rdx,%rsi
  8004211e13:	48 89 c7             	mov    %rax,%rdi
  8004211e16:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  8004211e1d:	00 00 00 
  8004211e20:	ff d0                	callq  *%rax
  8004211e22:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  8004211e26:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211e2b:	0f 84 89 00 00 00    	je     8004211eba <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  8004211e31:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211e35:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211e39:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211e3d:	48 89 d0             	mov    %rdx,%rax
  8004211e40:	48 01 c0             	add    %rax,%rax
  8004211e43:	48 01 d0             	add    %rdx,%rax
  8004211e46:	48 c1 e0 03          	shl    $0x3,%rax
  8004211e4a:	48 01 c8             	add    %rcx,%rax
  8004211e4d:	48 8d 50 30          	lea    0x30(%rax),%rdx
  8004211e51:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211e55:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  8004211e58:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211e5c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211e60:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211e64:	48 89 d0             	mov    %rdx,%rax
  8004211e67:	48 01 c0             	add    %rax,%rax
  8004211e6a:	48 01 d0             	add    %rdx,%rax
  8004211e6d:	48 c1 e0 03          	shl    $0x3,%rax
  8004211e71:	48 01 c8             	add    %rcx,%rax
  8004211e74:	48 8d 50 38          	lea    0x38(%rax),%rdx
  8004211e78:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004211e7c:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  8004211e7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211e83:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211e87:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211e8b:	48 89 d0             	mov    %rdx,%rax
  8004211e8e:	48 01 c0             	add    %rax,%rax
  8004211e91:	48 01 d0             	add    %rdx,%rax
  8004211e94:	48 c1 e0 03          	shl    $0x3,%rax
  8004211e98:	48 01 c8             	add    %rcx,%rax
  8004211e9b:	48 8d 50 40          	lea    0x40(%rax),%rdx
  8004211e9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211ea3:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  8004211ea6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211eaa:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004211eae:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211eb2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211eb6:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  8004211eba:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211ebf:	0f 85 1a ff ff ff    	jne    8004211ddf <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  8004211ec5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211ec9:	48 8b 00             	mov    (%rax),%rax
  8004211ecc:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  8004211ed0:	48 89 c2             	mov    %rax,%rdx
  8004211ed3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211ed7:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  8004211edb:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211ee0:	c9                   	leaveq 
  8004211ee1:	c3                   	retq   

0000008004211ee2 <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  8004211ee2:	55                   	push   %rbp
  8004211ee3:	48 89 e5             	mov    %rsp,%rbp
  8004211ee6:	48 83 ec 70          	sub    $0x70,%rsp
  8004211eea:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211eee:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004211ef2:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  8004211ef6:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004211efb:	75 0a                	jne    8004211f07 <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  8004211efd:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211f02:	e9 0a 01 00 00       	jmpq   8004212011 <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  8004211f07:	48 bf f8 01 22 04 80 	movabs $0x80042201f8,%rdi
  8004211f0e:	00 00 00 
  8004211f11:	48 b8 42 62 21 04 80 	movabs $0x8004216242,%rax
  8004211f18:	00 00 00 
  8004211f1b:	ff d0                	callq  *%rax
  8004211f1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  8004211f21:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211f26:	75 35                	jne    8004211f5d <_dwarf_abbrev_find+0x7b>
  8004211f28:	48 b9 ed 01 22 04 80 	movabs $0x80042201ed,%rcx
  8004211f2f:	00 00 00 
  8004211f32:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004211f39:	00 00 00 
  8004211f3c:	be e5 01 00 00       	mov    $0x1e5,%esi
  8004211f41:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004211f48:	00 00 00 
  8004211f4b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f50:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004211f57:	00 00 00 
  8004211f5a:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004211f5d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004211f61:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  8004211f65:	e9 8d 00 00 00       	jmpq   8004211ff7 <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  8004211f6a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004211f6e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211f72:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  8004211f76:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211f7a:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004211f7e:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004211f82:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  8004211f86:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004211f8b:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  8004211f8f:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004211f94:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  8004211f98:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004211f9d:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  8004211fa1:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004211fa6:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  8004211faa:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004211faf:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  8004211fb3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  8004211fb8:	48 89 c7             	mov    %rax,%rdi
  8004211fbb:	48 b8 5f 1c 21 04 80 	movabs $0x8004211c5f,%rax
  8004211fc2:	00 00 00 
  8004211fc5:	ff d0                	callq  *%rax
  8004211fc7:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  8004211fca:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004211fce:	74 05                	je     8004211fd5 <_dwarf_abbrev_find+0xf3>
			return (ret);
  8004211fd0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211fd3:	eb 3c                	jmp    8004212011 <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  8004211fd5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211fd9:	48 8b 00             	mov    (%rax),%rax
  8004211fdc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004211fe0:	75 07                	jne    8004211fe9 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  8004211fe2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211fe7:	eb 28                	jmp    8004212011 <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  8004211fe9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211fed:	48 8b 00             	mov    (%rax),%rax
  8004211ff0:	48 85 c0             	test   %rax,%rax
  8004211ff3:	75 02                	jne    8004211ff7 <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  8004211ff5:	eb 15                	jmp    800421200c <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  8004211ff7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211ffb:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004211fff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212003:	48 39 c2             	cmp    %rax,%rdx
  8004212006:	0f 87 5e ff ff ff    	ja     8004211f6a <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  800421200c:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004212011:	c9                   	leaveq 
  8004212012:	c3                   	retq   

0000008004212013 <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  8004212013:	55                   	push   %rbp
  8004212014:	48 89 e5             	mov    %rsp,%rbp
  8004212017:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  800421201e:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004212025:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  800421202c:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004212033:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  800421203a:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  8004212041:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  8004212048:	48 bf 06 02 22 04 80 	movabs $0x8004220206,%rdi
  800421204f:	00 00 00 
  8004212052:	48 b8 42 62 21 04 80 	movabs $0x8004216242,%rax
  8004212059:	00 00 00 
  800421205c:	ff d0                	callq  *%rax
  800421205e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  8004212062:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004212066:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421206a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  800421206e:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004212075:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004212079:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  800421207c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  8004212083:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  800421208a:	ba 60 00 00 00       	mov    $0x60,%edx
  800421208f:	be 00 00 00 00       	mov    $0x0,%esi
  8004212094:	48 89 c7             	mov    %rax,%rdi
  8004212097:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  800421209e:	00 00 00 
  80042120a1:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  80042120a3:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042120aa:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  80042120b1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042120b8:	48 8b 00             	mov    (%rax),%rax
  80042120bb:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  80042120bf:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042120c6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042120ca:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  80042120ce:	8b 45 10             	mov    0x10(%rbp),%eax
  80042120d1:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  80042120d4:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  80042120db:	00 

	switch (form) {
  80042120dc:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  80042120e3:	20 
  80042120e4:	0f 87 82 04 00 00    	ja     800421256c <_dwarf_attr_init+0x559>
  80042120ea:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  80042120f1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042120f8:	00 
  80042120f9:	48 b8 30 02 22 04 80 	movabs $0x8004220230,%rax
  8004212100:	00 00 00 
  8004212103:	48 01 d0             	add    %rdx,%rax
  8004212106:	48 8b 00             	mov    (%rax),%rax
  8004212109:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  800421210b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212112:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212116:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421211d:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004212121:	0f b6 d2             	movzbl %dl,%edx
  8004212124:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421212b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421212f:	48 89 cf             	mov    %rcx,%rdi
  8004212132:	ff d0                	callq  *%rax
  8004212134:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212138:	e9 37 04 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  800421213d:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212144:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212148:	48 89 d6             	mov    %rdx,%rsi
  800421214b:	48 89 c7             	mov    %rax,%rdi
  800421214e:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  8004212155:	00 00 00 
  8004212158:	ff d0                	callq  *%rax
  800421215a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421215e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004212162:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212169:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421216d:	48 89 ce             	mov    %rcx,%rsi
  8004212170:	48 89 c7             	mov    %rax,%rdi
  8004212173:	48 b8 8a 18 21 04 80 	movabs $0x800421188a,%rax
  800421217a:	00 00 00 
  800421217d:	ff d0                	callq  *%rax
  800421217f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212183:	e9 ec 03 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004212188:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421218f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212193:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421219a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421219e:	ba 01 00 00 00       	mov    $0x1,%edx
  80042121a3:	48 89 cf             	mov    %rcx,%rdi
  80042121a6:	ff d0                	callq  *%rax
  80042121a8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042121ac:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042121b0:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042121b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042121bb:	48 89 ce             	mov    %rcx,%rsi
  80042121be:	48 89 c7             	mov    %rax,%rdi
  80042121c1:	48 b8 8a 18 21 04 80 	movabs $0x800421188a,%rax
  80042121c8:	00 00 00 
  80042121cb:	ff d0                	callq  *%rax
  80042121cd:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042121d1:	e9 9e 03 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042121d6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042121dd:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042121e1:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042121e8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042121ec:	ba 02 00 00 00       	mov    $0x2,%edx
  80042121f1:	48 89 cf             	mov    %rcx,%rdi
  80042121f4:	ff d0                	callq  *%rax
  80042121f6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042121fa:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042121fe:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212205:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212209:	48 89 ce             	mov    %rcx,%rsi
  800421220c:	48 89 c7             	mov    %rax,%rdi
  800421220f:	48 b8 8a 18 21 04 80 	movabs $0x800421188a,%rax
  8004212216:	00 00 00 
  8004212219:	ff d0                	callq  *%rax
  800421221b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421221f:	e9 50 03 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004212224:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421222b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421222f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212236:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421223a:	ba 04 00 00 00       	mov    $0x4,%edx
  800421223f:	48 89 cf             	mov    %rcx,%rdi
  8004212242:	ff d0                	callq  *%rax
  8004212244:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212248:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421224c:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212253:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212257:	48 89 ce             	mov    %rcx,%rsi
  800421225a:	48 89 c7             	mov    %rax,%rdi
  800421225d:	48 b8 8a 18 21 04 80 	movabs $0x800421188a,%rax
  8004212264:	00 00 00 
  8004212267:	ff d0                	callq  *%rax
  8004212269:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421226d:	e9 02 03 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  8004212272:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212279:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421227d:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212284:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212288:	ba 01 00 00 00       	mov    $0x1,%edx
  800421228d:	48 89 cf             	mov    %rcx,%rdi
  8004212290:	ff d0                	callq  *%rax
  8004212292:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212296:	e9 d9 02 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  800421229b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042122a2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042122a6:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042122ad:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042122b1:	ba 02 00 00 00       	mov    $0x2,%edx
  80042122b6:	48 89 cf             	mov    %rcx,%rdi
  80042122b9:	ff d0                	callq  *%rax
  80042122bb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042122bf:	e9 b0 02 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  80042122c4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042122cb:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042122cf:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042122d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042122da:	ba 04 00 00 00       	mov    $0x4,%edx
  80042122df:	48 89 cf             	mov    %rcx,%rdi
  80042122e2:	ff d0                	callq  *%rax
  80042122e4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042122e8:	e9 87 02 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  80042122ed:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042122f4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042122f8:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042122ff:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212303:	ba 08 00 00 00       	mov    $0x8,%edx
  8004212308:	48 89 cf             	mov    %rcx,%rdi
  800421230b:	ff d0                	callq  *%rax
  800421230d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212311:	e9 5e 02 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  8004212316:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421231d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212321:	48 89 d6             	mov    %rdx,%rsi
  8004212324:	48 89 c7             	mov    %rax,%rdi
  8004212327:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  800421232e:	00 00 00 
  8004212331:	ff d0                	callq  *%rax
  8004212333:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  800421233a:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  8004212341:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  8004212348:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  800421234f:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004212356:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421235d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212364:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  800421236b:	4d 89 c1             	mov    %r8,%r9
  800421236e:	49 89 f8             	mov    %rdi,%r8
  8004212371:	48 89 c7             	mov    %rax,%rdi
  8004212374:	48 b8 13 20 21 04 80 	movabs $0x8004212013,%rax
  800421237b:	00 00 00 
  800421237e:	ff d0                	callq  *%rax
  8004212380:	e9 1d 03 00 00       	jmpq   80042126a2 <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  8004212385:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800421238c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004212390:	66 83 f8 02          	cmp    $0x2,%ax
  8004212394:	75 2f                	jne    80042123c5 <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  8004212396:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421239d:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042123a1:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042123a8:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042123ac:	0f b6 d2             	movzbl %dl,%edx
  80042123af:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042123b6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042123ba:	48 89 cf             	mov    %rcx,%rdi
  80042123bd:	ff d0                	callq  *%rax
  80042123bf:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042123c3:	eb 39                	jmp    80042123fe <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  80042123c5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042123cc:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042123d0:	66 83 f8 03          	cmp    $0x3,%ax
  80042123d4:	75 28                	jne    80042123fe <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042123d6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042123dd:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042123e1:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042123e5:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042123ec:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042123f0:	48 89 cf             	mov    %rcx,%rdi
  80042123f3:	ff d0                	callq  *%rax
  80042123f5:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042123f9:	e9 76 01 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
  80042123fe:	e9 71 01 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004212403:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421240a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421240e:	48 89 d6             	mov    %rdx,%rsi
  8004212411:	48 89 c7             	mov    %rax,%rdi
  8004212414:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  800421241b:	00 00 00 
  800421241e:	ff d0                	callq  *%rax
  8004212420:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212424:	e9 4b 01 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  8004212429:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212430:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212434:	48 89 d6             	mov    %rdx,%rsi
  8004212437:	48 89 c7             	mov    %rax,%rdi
  800421243a:	48 b8 d9 15 21 04 80 	movabs $0x80042115d9,%rax
  8004212441:	00 00 00 
  8004212444:	ff d0                	callq  *%rax
  8004212446:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421244a:	e9 25 01 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800421244f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212456:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421245a:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800421245e:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212465:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212469:	48 89 cf             	mov    %rcx,%rdi
  800421246c:	ff d0                	callq  *%rax
  800421246e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212472:	e9 fd 00 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  8004212477:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421247b:	48 8b 48 18          	mov    0x18(%rax),%rcx
  800421247f:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212486:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421248a:	48 89 ce             	mov    %rcx,%rsi
  800421248d:	48 89 c7             	mov    %rax,%rdi
  8004212490:	48 b8 fb 17 21 04 80 	movabs $0x80042117fb,%rax
  8004212497:	00 00 00 
  800421249a:	ff d0                	callq  *%rax
  800421249c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042124a0:	e9 cf 00 00 00       	jmpq   8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042124a5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042124ac:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042124b0:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042124b4:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042124bb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042124bf:	48 89 cf             	mov    %rcx,%rdi
  80042124c2:	ff d0                	callq  *%rax
  80042124c4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  80042124c8:	48 bf 12 02 22 04 80 	movabs $0x8004220212,%rdi
  80042124cf:	00 00 00 
  80042124d2:	48 b8 42 62 21 04 80 	movabs $0x8004216242,%rax
  80042124d9:	00 00 00 
  80042124dc:	ff d0                	callq  *%rax
  80042124de:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  80042124e2:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042124e7:	75 35                	jne    800421251e <_dwarf_attr_init+0x50b>
  80042124e9:	48 b9 1d 02 22 04 80 	movabs $0x800422021d,%rcx
  80042124f0:	00 00 00 
  80042124f3:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  80042124fa:	00 00 00 
  80042124fd:	be 51 02 00 00       	mov    $0x251,%esi
  8004212502:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212509:	00 00 00 
  800421250c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212511:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212518:	00 00 00 
  800421251b:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  800421251e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212522:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004212526:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421252a:	48 01 d0             	add    %rdx,%rax
  800421252d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212531:	eb 41                	jmp    8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  8004212533:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  800421253a:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  800421253b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421253f:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212546:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421254a:	48 89 ce             	mov    %rcx,%rsi
  800421254d:	48 89 c7             	mov    %rax,%rdi
  8004212550:	48 b8 8a 18 21 04 80 	movabs $0x800421188a,%rax
  8004212557:	00 00 00 
  800421255a:	ff d0                	callq  *%rax
  800421255c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212560:	eb 12                	jmp    8004212574 <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  8004212562:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  8004212569:	00 
		break;
  800421256a:	eb 08                	jmp    8004212574 <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  800421256c:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  8004212573:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  8004212574:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212578:	0f 85 21 01 00 00    	jne    800421269f <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  800421257e:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  8004212585:	09 
  8004212586:	74 1e                	je     80042125a6 <_dwarf_attr_init+0x593>
  8004212588:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  800421258f:	0a 
  8004212590:	74 14                	je     80042125a6 <_dwarf_attr_init+0x593>
  8004212592:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  8004212599:	03 
  800421259a:	74 0a                	je     80042125a6 <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  800421259c:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  80042125a3:	04 
  80042125a4:	75 10                	jne    80042125b6 <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  80042125a6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042125aa:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  80042125ae:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042125b2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  80042125b6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042125ba:	48 83 f8 03          	cmp    $0x3,%rax
  80042125be:	75 39                	jne    80042125f9 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  80042125c0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042125c4:	48 83 f8 08          	cmp    $0x8,%rax
  80042125c8:	74 1c                	je     80042125e6 <_dwarf_attr_init+0x5d3>
  80042125ca:	48 83 f8 0e          	cmp    $0xe,%rax
  80042125ce:	74 02                	je     80042125d2 <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  80042125d0:	eb 27                	jmp    80042125f9 <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  80042125d2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042125d6:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042125dd:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  80042125e4:	eb 13                	jmp    80042125f9 <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  80042125e6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042125ea:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042125f1:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  80042125f8:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  80042125f9:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212600:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212607:	8d 48 01             	lea    0x1(%rax),%ecx
  800421260a:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004212611:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004212617:	0f b6 c0             	movzbl %al,%eax
  800421261a:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004212621:	48 63 d0             	movslq %eax,%rdx
  8004212624:	48 89 d0             	mov    %rdx,%rax
  8004212627:	48 01 c0             	add    %rax,%rax
  800421262a:	48 01 d0             	add    %rdx,%rax
  800421262d:	48 c1 e0 05          	shl    $0x5,%rax
  8004212631:	48 01 c8             	add    %rcx,%rax
  8004212634:	48 05 70 03 00 00    	add    $0x370,%rax
  800421263a:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004212641:	48 89 10             	mov    %rdx,(%rax)
  8004212644:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800421264b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421264f:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004212653:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004212657:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421265b:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421265f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004212663:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004212667:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421266b:	48 89 50 28          	mov    %rdx,0x28(%rax)
  800421266f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212673:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004212677:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421267b:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421267f:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004212683:	48 89 50 40          	mov    %rdx,0x40(%rax)
  8004212687:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  800421268b:	48 89 50 48          	mov    %rdx,0x48(%rax)
  800421268f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004212693:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004212697:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421269b:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  800421269f:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042126a2:	c9                   	leaveq 
  80042126a3:	c3                   	retq   

00000080042126a4 <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  80042126a4:	55                   	push   %rbp
  80042126a5:	48 89 e5             	mov    %rsp,%rbp
  80042126a8:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  80042126af:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  80042126b6:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  80042126bd:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  80042126c4:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  80042126ca:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  80042126d1:	00 
  80042126d2:	75 35                	jne    8004212709 <dwarf_search_die_within_cu+0x65>
  80042126d4:	48 b9 38 03 22 04 80 	movabs $0x8004220338,%rcx
  80042126db:	00 00 00 
  80042126de:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  80042126e5:	00 00 00 
  80042126e8:	be 86 02 00 00       	mov    $0x286,%esi
  80042126ed:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  80042126f4:	00 00 00 
  80042126f7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042126fc:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212703:	00 00 00 
  8004212706:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004212709:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004212710:	00 
  8004212711:	75 35                	jne    8004212748 <dwarf_search_die_within_cu+0xa4>
  8004212713:	48 b9 3c 03 22 04 80 	movabs $0x800422033c,%rcx
  800421271a:	00 00 00 
  800421271d:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004212724:	00 00 00 
  8004212727:	be 88 02 00 00       	mov    $0x288,%esi
  800421272c:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212733:	00 00 00 
  8004212736:	b8 00 00 00 00       	mov    $0x0,%eax
  800421273b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212742:	00 00 00 
  8004212745:	41 ff d0             	callq  *%r8

	level = 1;
  8004212748:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  800421274f:	e9 17 02 00 00       	jmpq   800421296b <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  8004212754:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800421275b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  800421275f:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212766:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421276a:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  8004212771:	48 89 d6             	mov    %rdx,%rsi
  8004212774:	48 89 c7             	mov    %rax,%rdi
  8004212777:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  800421277e:	00 00 00 
  8004212781:	ff d0                	callq  *%rax
  8004212783:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  8004212787:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421278c:	75 22                	jne    80042127b0 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  800421278e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212792:	74 09                	je     800421279d <dwarf_search_die_within_cu+0xf9>
  8004212794:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  800421279b:	75 0a                	jne    80042127a7 <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  800421279d:	b8 04 00 00 00       	mov    $0x4,%eax
  80042127a2:	e9 f4 01 00 00       	jmpq   800421299b <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  80042127a7:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  80042127ab:	e9 bb 01 00 00       	jmpq   800421296b <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  80042127b0:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  80042127b7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042127bb:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  80042127c2:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  80042127c6:	48 89 34 24          	mov    %rsi,(%rsp)
  80042127ca:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  80042127ce:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  80042127d3:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  80042127d7:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  80042127dc:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  80042127e0:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  80042127e5:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  80042127e9:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  80042127ee:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  80042127f2:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  80042127f7:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  80042127fb:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004212800:	48 89 ce             	mov    %rcx,%rsi
  8004212803:	48 89 c7             	mov    %rax,%rdi
  8004212806:	48 b8 e2 1e 21 04 80 	movabs $0x8004211ee2,%rax
  800421280d:	00 00 00 
  8004212810:	ff d0                	callq  *%rax
  8004212812:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212815:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212819:	74 08                	je     8004212823 <dwarf_search_die_within_cu+0x17f>
			return (ret);
  800421281b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421281e:	e9 78 01 00 00       	jmpq   800421299b <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  8004212823:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800421282a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421282e:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004212831:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212838:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421283c:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004212840:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212847:	48 8d 78 20          	lea    0x20(%rax),%rdi
  800421284b:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212852:	b8 66 00 00 00       	mov    $0x66,%eax
  8004212857:	48 89 d6             	mov    %rdx,%rsi
  800421285a:	48 89 c1             	mov    %rax,%rcx
  800421285d:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  8004212860:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212867:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  800421286e:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  8004212875:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800421287c:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212880:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004212887:	e9 8e 00 00 00       	jmpq   800421291a <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  800421288c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421288f:	48 63 d0             	movslq %eax,%rdx
  8004212892:	48 89 d0             	mov    %rdx,%rax
  8004212895:	48 01 c0             	add    %rax,%rax
  8004212898:	48 01 d0             	add    %rdx,%rax
  800421289b:	48 c1 e0 03          	shl    $0x3,%rax
  800421289f:	48 01 e8             	add    %rbp,%rax
  80042128a2:	48 2d 18 03 00 00    	sub    $0x318,%rax
  80042128a8:	48 8b 08             	mov    (%rax),%rcx
  80042128ab:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  80042128b2:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042128b5:	48 63 d0             	movslq %eax,%rdx
  80042128b8:	48 89 d0             	mov    %rdx,%rax
  80042128bb:	48 01 c0             	add    %rax,%rax
  80042128be:	48 01 d0             	add    %rdx,%rax
  80042128c1:	48 c1 e0 03          	shl    $0x3,%rax
  80042128c5:	48 83 c0 30          	add    $0x30,%rax
  80042128c9:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  80042128cd:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  80042128d4:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  80042128db:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  80042128e2:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  80042128e9:	49 89 c9             	mov    %rcx,%r9
  80042128ec:	49 89 f8             	mov    %rdi,%r8
  80042128ef:	48 89 d1             	mov    %rdx,%rcx
  80042128f2:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  80042128f6:	48 89 c7             	mov    %rax,%rdi
  80042128f9:	48 b8 13 20 21 04 80 	movabs $0x8004212013,%rax
  8004212900:	00 00 00 
  8004212903:	ff d0                	callq  *%rax
  8004212905:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212908:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421290c:	74 08                	je     8004212916 <dwarf_search_die_within_cu+0x272>
				return (ret);
  800421290e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212911:	e9 85 00 00 00       	jmpq   800421299b <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212916:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421291a:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421291d:	48 63 d0             	movslq %eax,%rdx
  8004212920:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004212927:	48 39 c2             	cmp    %rax,%rdx
  800421292a:	0f 82 5c ff ff ff    	jb     800421288c <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004212930:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004212937:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800421293e:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004212942:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212949:	74 19                	je     8004212964 <dwarf_search_die_within_cu+0x2c0>
  800421294b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421294f:	7e 13                	jle    8004212964 <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212951:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004212958:	3c 01                	cmp    $0x1,%al
  800421295a:	75 06                	jne    8004212962 <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  800421295c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212960:	eb 09                	jmp    800421296b <dwarf_search_die_within_cu+0x2c7>
  8004212962:	eb 07                	jmp    800421296b <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  8004212964:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212969:	eb 30                	jmp    800421299b <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  800421296b:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  800421296f:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  8004212976:	48 39 c2             	cmp    %rax,%rdx
  8004212979:	76 1b                	jbe    8004212996 <dwarf_search_die_within_cu+0x2f2>
  800421297b:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212982:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004212986:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800421298d:	48 39 c2             	cmp    %rax,%rdx
  8004212990:	0f 87 be fd ff ff    	ja     8004212754 <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  8004212996:	b8 04 00 00 00       	mov    $0x4,%eax
}
  800421299b:	c9                   	leaveq 
  800421299c:	c3                   	retq   

000000800421299d <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  800421299d:	55                   	push   %rbp
  800421299e:	48 89 e5             	mov    %rsp,%rbp
  80042129a1:	48 83 ec 60          	sub    $0x60,%rsp
  80042129a5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042129a9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042129ad:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  80042129b1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042129b6:	75 35                	jne    80042129ed <dwarf_offdie+0x50>
  80042129b8:	48 b9 38 03 22 04 80 	movabs $0x8004220338,%rcx
  80042129bf:	00 00 00 
  80042129c2:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  80042129c9:	00 00 00 
  80042129cc:	be c4 02 00 00       	mov    $0x2c4,%esi
  80042129d1:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  80042129d8:	00 00 00 
  80042129db:	b8 00 00 00 00       	mov    $0x0,%eax
  80042129e0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042129e7:	00 00 00 
  80042129ea:	41 ff d0             	callq  *%r8
	assert(ret_die);
  80042129ed:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042129f2:	75 35                	jne    8004212a29 <dwarf_offdie+0x8c>
  80042129f4:	48 b9 3c 03 22 04 80 	movabs $0x800422033c,%rcx
  80042129fb:	00 00 00 
  80042129fe:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004212a05:	00 00 00 
  8004212a08:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004212a0d:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212a14:	00 00 00 
  8004212a17:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212a1c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212a23:	00 00 00 
  8004212a26:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004212a29:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004212a2d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212a31:	76 66                	jbe    8004212a99 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  8004212a33:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004212a37:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004212a3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212a3f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  8004212a43:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212a47:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004212a4b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212a50:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  8004212a54:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212a59:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212a5d:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212a62:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  8004212a66:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212a6b:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004212a6f:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212a74:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004212a78:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004212a7d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212a82:	48 89 c7             	mov    %rax,%rdi
  8004212a85:	48 b8 a4 26 21 04 80 	movabs $0x80042126a4,%rax
  8004212a8c:	00 00 00 
  8004212a8f:	ff d0                	callq  *%rax
  8004212a91:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  8004212a94:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004212a97:	eb 05                	jmp    8004212a9e <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004212a99:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212a9e:	c9                   	leaveq 
  8004212a9f:	c3                   	retq   

0000008004212aa0 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004212aa0:	55                   	push   %rbp
  8004212aa1:	48 89 e5             	mov    %rsp,%rbp
  8004212aa4:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004212aa8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212aac:	89 f0                	mov    %esi,%eax
  8004212aae:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  8004212ab2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004212ab9:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212aba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004212ac1:	eb 57                	jmp    8004212b1a <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  8004212ac3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212ac7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212aca:	48 63 d0             	movslq %eax,%rdx
  8004212acd:	48 89 d0             	mov    %rdx,%rax
  8004212ad0:	48 01 c0             	add    %rax,%rax
  8004212ad3:	48 01 d0             	add    %rdx,%rax
  8004212ad6:	48 c1 e0 05          	shl    $0x5,%rax
  8004212ada:	48 01 c8             	add    %rcx,%rax
  8004212add:	48 05 80 03 00 00    	add    $0x380,%rax
  8004212ae3:	48 8b 10             	mov    (%rax),%rdx
  8004212ae6:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004212aea:	48 39 c2             	cmp    %rax,%rdx
  8004212aed:	75 27                	jne    8004212b16 <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004212aef:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212af2:	48 63 d0             	movslq %eax,%rdx
  8004212af5:	48 89 d0             	mov    %rdx,%rax
  8004212af8:	48 01 c0             	add    %rax,%rax
  8004212afb:	48 01 d0             	add    %rdx,%rax
  8004212afe:	48 c1 e0 05          	shl    $0x5,%rax
  8004212b02:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004212b09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212b0d:	48 01 d0             	add    %rdx,%rax
  8004212b10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  8004212b14:	eb 17                	jmp    8004212b2d <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212b16:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004212b1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212b1e:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212b25:	0f b6 c0             	movzbl %al,%eax
  8004212b28:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004212b2b:	7f 96                	jg     8004212ac3 <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  8004212b2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004212b31:	c9                   	leaveq 
  8004212b32:	c3                   	retq   

0000008004212b33 <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  8004212b33:	55                   	push   %rbp
  8004212b34:	48 89 e5             	mov    %rsp,%rbp
  8004212b37:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004212b3b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212b3f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212b43:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212b47:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004212b4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212b50:	75 35                	jne    8004212b87 <dwarf_siblingof+0x54>
  8004212b52:	48 b9 38 03 22 04 80 	movabs $0x8004220338,%rcx
  8004212b59:	00 00 00 
  8004212b5c:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004212b63:	00 00 00 
  8004212b66:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212b6b:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212b72:	00 00 00 
  8004212b75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212b7a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212b81:	00 00 00 
  8004212b84:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212b87:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212b8c:	75 35                	jne    8004212bc3 <dwarf_siblingof+0x90>
  8004212b8e:	48 b9 3c 03 22 04 80 	movabs $0x800422033c,%rcx
  8004212b95:	00 00 00 
  8004212b98:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004212b9f:	00 00 00 
  8004212ba2:	be ed 02 00 00       	mov    $0x2ed,%esi
  8004212ba7:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212bae:	00 00 00 
  8004212bb1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212bb6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212bbd:	00 00 00 
  8004212bc0:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212bc3:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004212bc8:	75 35                	jne    8004212bff <dwarf_siblingof+0xcc>
  8004212bca:	48 b9 44 03 22 04 80 	movabs $0x8004220344,%rcx
  8004212bd1:	00 00 00 
  8004212bd4:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004212bdb:	00 00 00 
  8004212bde:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004212be3:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212bea:	00 00 00 
  8004212bed:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212bf2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212bf9:	00 00 00 
  8004212bfc:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004212bff:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212c04:	75 65                	jne    8004212c6b <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  8004212c06:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212c0a:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004212c0e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212c12:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004212c16:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212c1a:	48 8b 38             	mov    (%rax),%rdi
  8004212c1d:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004212c21:	48 8b 78 08          	mov    0x8(%rax),%rdi
  8004212c25:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004212c2a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004212c2e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004212c33:	48 8b 78 18          	mov    0x18(%rax),%rdi
  8004212c37:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004212c3c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004212c40:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004212c45:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004212c49:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004212c4e:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212c52:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212c57:	48 89 cf             	mov    %rcx,%rdi
  8004212c5a:	48 b8 9d 29 21 04 80 	movabs $0x800421299d,%rax
  8004212c61:	00 00 00 
  8004212c64:	ff d0                	callq  *%rax
  8004212c66:	e9 0a 01 00 00       	jmpq   8004212d75 <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004212c6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212c72:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212c76:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212c7a:	84 c0                	test   %al,%al
  8004212c7c:	75 0e                	jne    8004212c8c <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  8004212c7e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212c82:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212c86:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212c8a:	eb 6b                	jmp    8004212cf7 <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  8004212c8c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212c90:	be 01 00 00 00       	mov    $0x1,%esi
  8004212c95:	48 89 c7             	mov    %rax,%rdi
  8004212c98:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  8004212c9f:	00 00 00 
  8004212ca2:	ff d0                	callq  *%rax
  8004212ca4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004212ca8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212cad:	74 35                	je     8004212ce4 <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  8004212caf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212cb3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212cb7:	48 83 f8 10          	cmp    $0x10,%rax
  8004212cbb:	74 19                	je     8004212cd6 <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  8004212cbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212cc1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212cc5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212cc9:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212ccd:	48 01 d0             	add    %rdx,%rax
  8004212cd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212cd4:	eb 21                	jmp    8004212cf7 <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  8004212cd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212cda:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004212cde:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212ce2:	eb 13                	jmp    8004212cf7 <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  8004212ce4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212ce8:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212cec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004212cf0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  8004212cf7:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004212cfa:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212cfe:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004212d02:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  8004212d06:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212d0a:	4c 8b 00             	mov    (%rax),%r8
  8004212d0d:	4c 89 04 24          	mov    %r8,(%rsp)
  8004212d11:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004212d15:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004212d1a:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004212d1e:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004212d23:	4c 8b 40 18          	mov    0x18(%rax),%r8
  8004212d27:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004212d2c:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004212d30:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  8004212d35:	4c 8b 40 28          	mov    0x28(%rax),%r8
  8004212d39:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  8004212d3e:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212d42:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212d47:	48 b8 a4 26 21 04 80 	movabs $0x80042126a4,%rax
  8004212d4e:	00 00 00 
  8004212d51:	ff d0                	callq  *%rax
  8004212d53:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  8004212d56:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  8004212d5a:	75 07                	jne    8004212d63 <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004212d5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212d61:	eb 12                	jmp    8004212d75 <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  8004212d63:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212d67:	74 07                	je     8004212d70 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  8004212d69:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212d6e:	eb 05                	jmp    8004212d75 <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  8004212d70:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212d75:	c9                   	leaveq 
  8004212d76:	c3                   	retq   

0000008004212d77 <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  8004212d77:	55                   	push   %rbp
  8004212d78:	48 89 e5             	mov    %rsp,%rbp
  8004212d7b:	48 83 ec 70          	sub    $0x70,%rsp
  8004212d7f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212d83:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212d87:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212d8b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  8004212d8f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212d94:	75 35                	jne    8004212dcb <dwarf_child+0x54>
  8004212d96:	48 b9 47 03 22 04 80 	movabs $0x8004220347,%rcx
  8004212d9d:	00 00 00 
  8004212da0:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004212da7:	00 00 00 
  8004212daa:	be 1c 03 00 00       	mov    $0x31c,%esi
  8004212daf:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212db6:	00 00 00 
  8004212db9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212dbe:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212dc5:	00 00 00 
  8004212dc8:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212dcb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212dd0:	75 35                	jne    8004212e07 <dwarf_child+0x90>
  8004212dd2:	48 b9 3c 03 22 04 80 	movabs $0x800422033c,%rcx
  8004212dd9:	00 00 00 
  8004212ddc:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004212de3:	00 00 00 
  8004212de6:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004212deb:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212df2:	00 00 00 
  8004212df5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212dfa:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212e01:	00 00 00 
  8004212e04:	41 ff d0             	callq  *%r8
	assert(dbg);
  8004212e07:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212e0c:	75 35                	jne    8004212e43 <dwarf_child+0xcc>
  8004212e0e:	48 b9 38 03 22 04 80 	movabs $0x8004220338,%rcx
  8004212e15:	00 00 00 
  8004212e18:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004212e1f:	00 00 00 
  8004212e22:	be 1e 03 00 00       	mov    $0x31e,%esi
  8004212e27:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212e2e:	00 00 00 
  8004212e31:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e36:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212e3d:	00 00 00 
  8004212e40:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212e43:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004212e48:	75 35                	jne    8004212e7f <dwarf_child+0x108>
  8004212e4a:	48 b9 44 03 22 04 80 	movabs $0x8004220344,%rcx
  8004212e51:	00 00 00 
  8004212e54:	48 ba aa 01 22 04 80 	movabs $0x80042201aa,%rdx
  8004212e5b:	00 00 00 
  8004212e5e:	be 1f 03 00 00       	mov    $0x31f,%esi
  8004212e63:	48 bf bf 01 22 04 80 	movabs $0x80042201bf,%rdi
  8004212e6a:	00 00 00 
  8004212e6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e72:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004212e79:	00 00 00 
  8004212e7c:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212e7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212e83:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212e87:	84 c0                	test   %al,%al
  8004212e89:	75 0a                	jne    8004212e95 <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  8004212e8b:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212e90:	e9 84 00 00 00       	jmpq   8004212f19 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  8004212e95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212e99:	48 8b 70 08          	mov    0x8(%rax),%rsi
  8004212e9d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ea1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  8004212ea5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212ea9:	48 8b 08             	mov    (%rax),%rcx
  8004212eac:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212eb0:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004212eb4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212eb9:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004212ebd:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212ec2:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004212ec6:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212ecb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212ecf:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212ed4:	48 8b 48 28          	mov    0x28(%rax),%rcx
  8004212ed8:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212edd:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212ee1:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212ee6:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212eeb:	48 b8 a4 26 21 04 80 	movabs $0x80042126a4,%rax
  8004212ef2:	00 00 00 
  8004212ef5:	ff d0                	callq  *%rax
  8004212ef7:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  8004212efa:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004212efe:	75 07                	jne    8004212f07 <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004212f00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212f05:	eb 12                	jmp    8004212f19 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  8004212f07:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212f0b:	74 07                	je     8004212f14 <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  8004212f0d:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212f12:	eb 05                	jmp    8004212f19 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  8004212f14:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212f19:	c9                   	leaveq 
  8004212f1a:	c3                   	retq   

0000008004212f1b <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  8004212f1b:	55                   	push   %rbp
  8004212f1c:	48 89 e5             	mov    %rsp,%rbp
  8004212f1f:	48 83 ec 20          	sub    $0x20,%rsp
  8004212f23:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  8004212f27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f2b:	48 8b 00             	mov    (%rax),%rax
  8004212f2e:	48 89 c7             	mov    %rax,%rdi
  8004212f31:	48 b8 42 62 21 04 80 	movabs $0x8004216242,%rax
  8004212f38:	00 00 00 
  8004212f3b:	ff d0                	callq  *%rax
  8004212f3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  8004212f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212f45:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004212f49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f4d:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  8004212f51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212f55:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004212f59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f5d:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  8004212f61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212f65:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004212f69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f6d:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  8004212f71:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212f76:	c9                   	leaveq 
  8004212f77:	c3                   	retq   

0000008004212f78 <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  8004212f78:	55                   	push   %rbp
  8004212f79:	48 89 e5             	mov    %rsp,%rbp
  8004212f7c:	48 83 ec 08          	sub    $0x8,%rsp
  8004212f80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  8004212f84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212f88:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  8004212f8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212f92:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  8004212f98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212f9c:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  8004212fa2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212fa6:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  8004212fac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212fb0:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  8004212fb6:	c9                   	leaveq 
  8004212fb7:	c3                   	retq   

0000008004212fb8 <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  8004212fb8:	55                   	push   %rbp
  8004212fb9:	48 89 e5             	mov    %rsp,%rbp
  8004212fbc:	48 83 ec 40          	sub    $0x40,%rsp
  8004212fc0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212fc4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212fc8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212fcc:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004212fd0:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  8004212fd4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212fd8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  8004212fdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212fe0:	ba 80 00 00 00       	mov    $0x80,%edx
  8004212fe5:	be 00 00 00 00       	mov    $0x0,%esi
  8004212fea:	48 89 c7             	mov    %rax,%rdi
  8004212fed:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004212ff4:	00 00 00 
  8004212ff7:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  8004212ff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212ffd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213001:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  8004213005:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421300a:	75 07                	jne    8004213013 <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  800421300c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213011:	eb 75                	jmp    8004213088 <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004213013:	eb 59                	jmp    800421306e <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  8004213015:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004213019:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421301d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213021:	be 01 00 00 00       	mov    $0x1,%esi
  8004213026:	48 89 c7             	mov    %rax,%rdi
  8004213029:	48 b8 cd 51 21 04 80 	movabs $0x80042151cd,%rax
  8004213030:	00 00 00 
  8004213033:	ff d0                	callq  *%rax
  8004213035:	85 c0                	test   %eax,%eax
  8004213037:	79 07                	jns    8004213040 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  8004213039:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421303e:	eb 48                	jmp    8004213088 <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004213040:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213044:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213048:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421304c:	77 20                	ja     800421306e <dwarf_get_fde_at_pc+0xb6>
  800421304e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213052:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  8004213056:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421305a:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  800421305e:	48 01 d0             	add    %rdx,%rax
  8004213061:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004213065:	76 07                	jbe    800421306e <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  8004213067:	b8 00 00 00 00       	mov    $0x0,%eax
  800421306c:	eb 1a                	jmp    8004213088 <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  800421306e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213072:	48 8b 50 30          	mov    0x30(%rax),%rdx
  8004213076:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421307a:	48 8b 40 40          	mov    0x40(%rax),%rax
  800421307e:	48 39 c2             	cmp    %rax,%rdx
  8004213081:	72 92                	jb     8004213015 <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  8004213083:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  8004213088:	c9                   	leaveq 
  8004213089:	c3                   	retq   

000000800421308a <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  800421308a:	55                   	push   %rbp
  800421308b:	48 89 e5             	mov    %rsp,%rbp
  800421308e:	53                   	push   %rbx
  800421308f:	48 83 ec 38          	sub    $0x38,%rsp
  8004213093:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004213097:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421309b:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421309f:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  80042130a3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042130a8:	75 35                	jne    80042130df <_dwarf_frame_regtable_copy+0x55>
  80042130aa:	48 b9 5a 03 22 04 80 	movabs $0x800422035a,%rcx
  80042130b1:	00 00 00 
  80042130b4:	48 ba 67 03 22 04 80 	movabs $0x8004220367,%rdx
  80042130bb:	00 00 00 
  80042130be:	be 57 00 00 00       	mov    $0x57,%esi
  80042130c3:	48 bf 7c 03 22 04 80 	movabs $0x800422037c,%rdi
  80042130ca:	00 00 00 
  80042130cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042130d2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042130d9:	00 00 00 
  80042130dc:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  80042130df:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042130e4:	75 35                	jne    800421311b <_dwarf_frame_regtable_copy+0x91>
  80042130e6:	48 b9 92 03 22 04 80 	movabs $0x8004220392,%rcx
  80042130ed:	00 00 00 
  80042130f0:	48 ba 67 03 22 04 80 	movabs $0x8004220367,%rdx
  80042130f7:	00 00 00 
  80042130fa:	be 58 00 00 00       	mov    $0x58,%esi
  80042130ff:	48 bf 7c 03 22 04 80 	movabs $0x800422037c,%rdi
  8004213106:	00 00 00 
  8004213109:	b8 00 00 00 00       	mov    $0x0,%eax
  800421310e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004213115:	00 00 00 
  8004213118:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  800421311b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421311f:	48 8b 00             	mov    (%rax),%rax
  8004213122:	48 85 c0             	test   %rax,%rax
  8004213125:	75 39                	jne    8004213160 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  8004213127:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421312b:	48 bb e0 d6 4d 04 80 	movabs $0x80044dd6e0,%rbx
  8004213132:	00 00 00 
  8004213135:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  8004213138:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421313c:	48 8b 00             	mov    (%rax),%rax
  800421313f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213143:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  8004213147:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  800421314b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421314f:	48 8b 00             	mov    (%rax),%rax
  8004213152:	48 bb 00 b8 6d 04 80 	movabs $0x80046db800,%rbx
  8004213159:	00 00 00 
  800421315c:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  8004213160:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004213164:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213168:	48 8b 00             	mov    (%rax),%rax
  800421316b:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213170:	48 89 ce             	mov    %rcx,%rsi
  8004213173:	48 89 c7             	mov    %rax,%rdi
  8004213176:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  800421317d:	00 00 00 
  8004213180:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004213182:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004213189:	eb 5a                	jmp    80042131e5 <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  800421318b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421318f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213193:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213196:	48 63 d0             	movslq %eax,%rdx
  8004213199:	48 89 d0             	mov    %rdx,%rax
  800421319c:	48 01 c0             	add    %rax,%rax
  800421319f:	48 01 d0             	add    %rdx,%rax
  80042131a2:	48 c1 e0 03          	shl    $0x3,%rax
  80042131a6:	48 01 c1             	add    %rax,%rcx
  80042131a9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042131ad:	48 8b 00             	mov    (%rax),%rax
  80042131b0:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042131b4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042131b7:	48 63 d0             	movslq %eax,%rdx
  80042131ba:	48 89 d0             	mov    %rdx,%rax
  80042131bd:	48 01 c0             	add    %rax,%rax
  80042131c0:	48 01 d0             	add    %rdx,%rax
  80042131c3:	48 c1 e0 03          	shl    $0x3,%rax
  80042131c7:	48 01 f0             	add    %rsi,%rax
  80042131ca:	ba 18 00 00 00       	mov    $0x18,%edx
  80042131cf:	48 89 ce             	mov    %rcx,%rsi
  80042131d2:	48 89 c7             	mov    %rax,%rdi
  80042131d5:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  80042131dc:	00 00 00 
  80042131df:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  80042131e1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042131e5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042131e9:	48 8b 00             	mov    (%rax),%rax
  80042131ec:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042131f0:	0f b7 c0             	movzwl %ax,%eax
  80042131f3:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  80042131f6:	7e 10                	jle    8004213208 <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  80042131f8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042131fc:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213200:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004213203:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213206:	7f 83                	jg     800421318b <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213208:	eb 32                	jmp    800421323c <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  800421320a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421320e:	48 8b 00             	mov    (%rax),%rax
  8004213211:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213215:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213218:	48 63 d0             	movslq %eax,%rdx
  800421321b:	48 89 d0             	mov    %rdx,%rax
  800421321e:	48 01 c0             	add    %rax,%rax
  8004213221:	48 01 d0             	add    %rdx,%rax
  8004213224:	48 c1 e0 03          	shl    $0x3,%rax
  8004213228:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  800421322c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213230:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  8004213234:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213238:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800421323c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213240:	48 8b 00             	mov    (%rax),%rax
  8004213243:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213247:	0f b7 c0             	movzwl %ax,%eax
  800421324a:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421324d:	7f bb                	jg     800421320a <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  800421324f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213254:	48 83 c4 38          	add    $0x38,%rsp
  8004213258:	5b                   	pop    %rbx
  8004213259:	5d                   	pop    %rbp
  800421325a:	c3                   	retq   

000000800421325b <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  800421325b:	55                   	push   %rbp
  800421325c:	48 89 e5             	mov    %rsp,%rbp
  800421325f:	53                   	push   %rbx
  8004213260:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  8004213267:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421326b:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  800421326f:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  8004213273:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  8004213277:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  800421327e:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  8004213285:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  800421328c:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004213293:	00 
  8004213294:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004213298:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  800421329c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042132a0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042132a4:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  80042132a7:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042132ab:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  80042132af:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  80042132b3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042132b7:	48 89 c7             	mov    %rax,%rdi
  80042132ba:	48 b8 8a 30 21 04 80 	movabs $0x800421308a,%rax
  80042132c1:	00 00 00 
  80042132c4:	ff d0                	callq  *%rax
	p = insts;
  80042132c6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042132ca:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  80042132ce:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042132d2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042132d6:	48 01 d0             	add    %rdx,%rax
  80042132d9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  80042132dd:	e9 3a 0d 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  80042132e2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042132e6:	0f b6 00             	movzbl (%rax),%eax
  80042132e9:	84 c0                	test   %al,%al
  80042132eb:	75 11                	jne    80042132fe <_dwarf_frame_run_inst+0xa3>
			p++;
  80042132ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042132f1:	48 83 c0 01          	add    $0x1,%rax
  80042132f5:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  80042132f9:	e9 1e 0d 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  80042132fe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213302:	0f b6 00             	movzbl (%rax),%eax
  8004213305:	83 e0 c0             	and    $0xffffffc0,%eax
  8004213308:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  800421330b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421330f:	0f b6 00             	movzbl (%rax),%eax
  8004213312:	83 e0 3f             	and    $0x3f,%eax
  8004213315:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  8004213318:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421331c:	48 83 c0 01          	add    $0x1,%rax
  8004213320:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  8004213324:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  8004213328:	0f 84 a1 01 00 00    	je     80042134cf <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  800421332e:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004213332:	3d 80 00 00 00       	cmp    $0x80,%eax
  8004213337:	74 38                	je     8004213371 <_dwarf_frame_run_inst+0x116>
  8004213339:	3d c0 00 00 00       	cmp    $0xc0,%eax
  800421333e:	0f 84 01 01 00 00    	je     8004213445 <_dwarf_frame_run_inst+0x1ea>
  8004213344:	83 f8 40             	cmp    $0x40,%eax
  8004213347:	0f 85 71 01 00 00    	jne    80042134be <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  800421334d:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004213351:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213358:	ff 
  8004213359:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  800421335d:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213361:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213365:	73 05                	jae    800421336c <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  8004213367:	e9 be 0c 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			        break;
  800421336c:	e9 59 01 00 00       	jmpq   80042134ca <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  8004213371:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213375:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213379:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  800421337c:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213380:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213384:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213388:	66 39 c2             	cmp    %ax,%dx
  800421338b:	72 0c                	jb     8004213399 <_dwarf_frame_run_inst+0x13e>
  800421338d:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213394:	e9 91 0c 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  8004213399:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421339d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133a1:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042133a5:	48 89 d0             	mov    %rdx,%rax
  80042133a8:	48 01 c0             	add    %rax,%rax
  80042133ab:	48 01 d0             	add    %rdx,%rax
  80042133ae:	48 c1 e0 03          	shl    $0x3,%rax
  80042133b2:	48 01 c8             	add    %rcx,%rax
  80042133b5:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  80042133b8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133bc:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133c0:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042133c4:	48 89 d0             	mov    %rdx,%rax
  80042133c7:	48 01 c0             	add    %rax,%rax
  80042133ca:	48 01 d0             	add    %rdx,%rax
  80042133cd:	48 c1 e0 03          	shl    $0x3,%rax
  80042133d1:	48 01 c8             	add    %rcx,%rax
  80042133d4:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  80042133d8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133dc:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133e0:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042133e4:	48 89 d0             	mov    %rdx,%rax
  80042133e7:	48 01 c0             	add    %rax,%rax
  80042133ea:	48 01 d0             	add    %rdx,%rax
  80042133ed:	48 c1 e0 03          	shl    $0x3,%rax
  80042133f1:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042133f5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042133f9:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042133fd:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  8004213401:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213405:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213409:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421340d:	48 89 d0             	mov    %rdx,%rax
  8004213410:	48 01 c0             	add    %rax,%rax
  8004213413:	48 01 d0             	add    %rdx,%rax
  8004213416:	48 c1 e0 03          	shl    $0x3,%rax
  800421341a:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  800421341e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213422:	48 89 c7             	mov    %rax,%rdi
  8004213425:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  800421342c:	00 00 00 
  800421342f:	ff d0                	callq  *%rax
  8004213431:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213438:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  800421343c:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  8004213440:	e9 85 00 00 00       	jmpq   80042134ca <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  8004213445:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213449:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421344d:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004213450:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213454:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213458:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421345c:	66 39 c2             	cmp    %ax,%dx
  800421345f:	72 0c                	jb     800421346d <_dwarf_frame_run_inst+0x212>
  8004213461:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213468:	e9 bd 0b 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  800421346d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004213471:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213475:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213479:	48 89 d0             	mov    %rdx,%rax
  800421347c:	48 01 c0             	add    %rax,%rax
  800421347f:	48 01 d0             	add    %rdx,%rax
  8004213482:	48 c1 e0 03          	shl    $0x3,%rax
  8004213486:	48 01 c1             	add    %rax,%rcx
  8004213489:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421348d:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213491:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213495:	48 89 d0             	mov    %rdx,%rax
  8004213498:	48 01 c0             	add    %rax,%rax
  800421349b:	48 01 d0             	add    %rdx,%rax
  800421349e:	48 c1 e0 03          	shl    $0x3,%rax
  80042134a2:	48 01 f0             	add    %rsi,%rax
  80042134a5:	ba 18 00 00 00       	mov    $0x18,%edx
  80042134aa:	48 89 ce             	mov    %rcx,%rsi
  80042134ad:	48 89 c7             	mov    %rax,%rdi
  80042134b0:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  80042134b7:	00 00 00 
  80042134ba:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  80042134bc:	eb 0c                	jmp    80042134ca <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  80042134be:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  80042134c5:	e9 60 0b 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  80042134ca:	e9 4d 0b 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  80042134cf:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  80042134d3:	83 f8 16             	cmp    $0x16,%eax
  80042134d6:	0f 87 37 0b 00 00    	ja     8004214013 <_dwarf_frame_run_inst+0xdb8>
  80042134dc:	89 c0                	mov    %eax,%eax
  80042134de:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042134e5:	00 
  80042134e6:	48 b8 a0 03 22 04 80 	movabs $0x80042203a0,%rax
  80042134ed:	00 00 00 
  80042134f0:	48 01 d0             	add    %rdx,%rax
  80042134f3:	48 8b 00             	mov    (%rax),%rax
  80042134f6:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  80042134f8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042134fc:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213500:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004213504:	8b 4a 28             	mov    0x28(%rdx),%ecx
  8004213507:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800421350b:	89 ce                	mov    %ecx,%esi
  800421350d:	48 89 d7             	mov    %rdx,%rdi
  8004213510:	ff d0                	callq  *%rax
  8004213512:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213516:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800421351a:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421351e:	73 05                	jae    8004213525 <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  8004213520:	e9 05 0b 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213525:	e9 f2 0a 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  800421352a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421352e:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213532:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213536:	be 01 00 00 00       	mov    $0x1,%esi
  800421353b:	48 89 d7             	mov    %rdx,%rdi
  800421353e:	ff d0                	callq  *%rax
  8004213540:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213547:	ff 
  8004213548:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  800421354c:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213550:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213554:	73 05                	jae    800421355b <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  8004213556:	e9 cf 0a 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			break;
  800421355b:	e9 bc 0a 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  8004213560:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213564:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213568:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800421356c:	be 02 00 00 00       	mov    $0x2,%esi
  8004213571:	48 89 d7             	mov    %rdx,%rdi
  8004213574:	ff d0                	callq  *%rax
  8004213576:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  800421357d:	ff 
  800421357e:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213582:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213586:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421358a:	73 05                	jae    8004213591 <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  800421358c:	e9 99 0a 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213591:	e9 86 0a 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  8004213596:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421359a:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421359e:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042135a2:	be 04 00 00 00       	mov    $0x4,%esi
  80042135a7:	48 89 d7             	mov    %rdx,%rdi
  80042135aa:	ff d0                	callq  *%rax
  80042135ac:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042135b3:	ff 
  80042135b4:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042135b8:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042135bc:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042135c0:	73 05                	jae    80042135c7 <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  80042135c2:	e9 63 0a 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			break;
  80042135c7:	e9 50 0a 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  80042135cc:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042135d0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042135d4:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042135d7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042135db:	48 89 c7             	mov    %rax,%rdi
  80042135de:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  80042135e5:	00 00 00 
  80042135e8:	ff d0                	callq  *%rax
  80042135ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  80042135ee:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042135f2:	48 89 c7             	mov    %rax,%rdi
  80042135f5:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  80042135fc:	00 00 00 
  80042135ff:	ff d0                	callq  *%rax
  8004213601:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213605:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213609:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421360d:	0f b7 c0             	movzwl %ax,%eax
  8004213610:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213614:	77 0c                	ja     8004213622 <_dwarf_frame_run_inst+0x3c7>
  8004213616:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421361d:	e9 08 0a 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213622:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213626:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421362a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421362e:	48 89 d0             	mov    %rdx,%rax
  8004213631:	48 01 c0             	add    %rax,%rax
  8004213634:	48 01 d0             	add    %rdx,%rax
  8004213637:	48 c1 e0 03          	shl    $0x3,%rax
  800421363b:	48 01 c8             	add    %rcx,%rax
  800421363e:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213641:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213645:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213649:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421364d:	48 89 d0             	mov    %rdx,%rax
  8004213650:	48 01 c0             	add    %rax,%rax
  8004213653:	48 01 d0             	add    %rdx,%rax
  8004213656:	48 c1 e0 03          	shl    $0x3,%rax
  800421365a:	48 01 c8             	add    %rcx,%rax
  800421365d:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213661:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213665:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213669:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421366d:	48 89 d0             	mov    %rdx,%rax
  8004213670:	48 01 c0             	add    %rax,%rax
  8004213673:	48 01 d0             	add    %rdx,%rax
  8004213676:	48 c1 e0 03          	shl    $0x3,%rax
  800421367a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421367e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213682:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213686:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  800421368a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421368e:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213692:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213696:	48 89 d0             	mov    %rdx,%rax
  8004213699:	48 01 c0             	add    %rax,%rax
  800421369c:	48 01 d0             	add    %rdx,%rax
  800421369f:	48 c1 e0 03          	shl    $0x3,%rax
  80042136a3:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042136a7:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042136ae:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  80042136b3:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042136b7:	e9 60 09 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  80042136bc:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042136c0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042136c4:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042136c7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042136cb:	48 89 c7             	mov    %rax,%rdi
  80042136ce:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  80042136d5:	00 00 00 
  80042136d8:	ff d0                	callq  *%rax
  80042136da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042136de:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136e2:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042136e6:	0f b7 c0             	movzwl %ax,%eax
  80042136e9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042136ed:	77 0c                	ja     80042136fb <_dwarf_frame_run_inst+0x4a0>
  80042136ef:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042136f6:	e9 2f 09 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  80042136fb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042136ff:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213703:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213707:	48 89 d0             	mov    %rdx,%rax
  800421370a:	48 01 c0             	add    %rax,%rax
  800421370d:	48 01 d0             	add    %rdx,%rax
  8004213710:	48 c1 e0 03          	shl    $0x3,%rax
  8004213714:	48 01 c1             	add    %rax,%rcx
  8004213717:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421371b:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421371f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213723:	48 89 d0             	mov    %rdx,%rax
  8004213726:	48 01 c0             	add    %rax,%rax
  8004213729:	48 01 d0             	add    %rdx,%rax
  800421372c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213730:	48 01 f0             	add    %rsi,%rax
  8004213733:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213738:	48 89 ce             	mov    %rcx,%rsi
  800421373b:	48 89 c7             	mov    %rax,%rdi
  800421373e:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  8004213745:	00 00 00 
  8004213748:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  800421374a:	e9 cd 08 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  800421374f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213753:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213757:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421375a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421375e:	48 89 c7             	mov    %rax,%rdi
  8004213761:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213768:	00 00 00 
  800421376b:	ff d0                	callq  *%rax
  800421376d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213771:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213775:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213779:	0f b7 c0             	movzwl %ax,%eax
  800421377c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213780:	77 0c                	ja     800421378e <_dwarf_frame_run_inst+0x533>
  8004213782:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213789:	e9 9c 08 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800421378e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213792:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213796:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421379a:	48 89 d0             	mov    %rdx,%rax
  800421379d:	48 01 c0             	add    %rax,%rax
  80042137a0:	48 01 d0             	add    %rdx,%rax
  80042137a3:	48 c1 e0 03          	shl    $0x3,%rax
  80042137a7:	48 01 c8             	add    %rcx,%rax
  80042137aa:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  80042137ad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137b1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042137b5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042137b9:	48 89 d0             	mov    %rdx,%rax
  80042137bc:	48 01 c0             	add    %rax,%rax
  80042137bf:	48 01 d0             	add    %rdx,%rax
  80042137c2:	48 c1 e0 03          	shl    $0x3,%rax
  80042137c6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042137ca:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042137ce:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  80042137d2:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  80042137d6:	e9 41 08 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  80042137db:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042137df:	48 89 c7             	mov    %rax,%rdi
  80042137e2:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  80042137e9:	00 00 00 
  80042137ec:	ff d0                	callq  *%rax
  80042137ee:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042137f2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137f6:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042137fa:	0f b7 c0             	movzwl %ax,%eax
  80042137fd:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213801:	77 0c                	ja     800421380f <_dwarf_frame_run_inst+0x5b4>
  8004213803:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421380a:	e9 1b 08 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800421380f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213813:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213817:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421381b:	48 89 d0             	mov    %rdx,%rax
  800421381e:	48 01 c0             	add    %rax,%rax
  8004213821:	48 01 d0             	add    %rdx,%rax
  8004213824:	48 c1 e0 03          	shl    $0x3,%rax
  8004213828:	48 01 c8             	add    %rcx,%rax
  800421382b:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  800421382e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213832:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213836:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421383a:	48 89 d0             	mov    %rdx,%rax
  800421383d:	48 01 c0             	add    %rax,%rax
  8004213840:	48 01 d0             	add    %rdx,%rax
  8004213843:	48 c1 e0 03          	shl    $0x3,%rax
  8004213847:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421384b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421384f:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004213853:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213857:	e9 c0 07 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  800421385c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213860:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213864:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213867:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421386b:	48 89 c7             	mov    %rax,%rdi
  800421386e:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213875:	00 00 00 
  8004213878:	ff d0                	callq  *%rax
  800421387a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  800421387e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213882:	48 89 c7             	mov    %rax,%rdi
  8004213885:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  800421388c:	00 00 00 
  800421388f:	ff d0                	callq  *%rax
  8004213891:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213895:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213899:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421389d:	0f b7 c0             	movzwl %ax,%eax
  80042138a0:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042138a4:	77 0c                	ja     80042138b2 <_dwarf_frame_run_inst+0x657>
  80042138a6:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042138ad:	e9 78 07 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042138b2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138b6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138ba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138be:	48 89 d0             	mov    %rdx,%rax
  80042138c1:	48 01 c0             	add    %rax,%rax
  80042138c4:	48 01 d0             	add    %rdx,%rax
  80042138c7:	48 c1 e0 03          	shl    $0x3,%rax
  80042138cb:	48 01 c8             	add    %rcx,%rax
  80042138ce:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  80042138d1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138d5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138d9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138dd:	48 89 d0             	mov    %rdx,%rax
  80042138e0:	48 01 c0             	add    %rax,%rax
  80042138e3:	48 01 d0             	add    %rdx,%rax
  80042138e6:	48 c1 e0 03          	shl    $0x3,%rax
  80042138ea:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042138ee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042138f2:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  80042138f6:	e9 21 07 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  80042138fb:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042138ff:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213903:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004213907:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421390b:	48 89 c7             	mov    %rax,%rdi
  800421390e:	48 b8 8a 30 21 04 80 	movabs $0x800421308a,%rax
  8004213915:	00 00 00 
  8004213918:	ff d0                	callq  *%rax
			break;
  800421391a:	e9 fd 06 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  800421391f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213923:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213927:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  800421392a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421392e:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213932:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004213936:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421393a:	48 89 c7             	mov    %rax,%rdi
  800421393d:	48 b8 8a 30 21 04 80 	movabs $0x800421308a,%rax
  8004213944:	00 00 00 
  8004213947:	ff d0                	callq  *%rax
			break;
  8004213949:	e9 ce 06 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  800421394e:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213952:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213956:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213959:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421395d:	48 89 c7             	mov    %rax,%rdi
  8004213960:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213967:	00 00 00 
  800421396a:	ff d0                	callq  *%rax
  800421396c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213970:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213974:	48 89 c7             	mov    %rax,%rdi
  8004213977:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  800421397e:	00 00 00 
  8004213981:	ff d0                	callq  *%rax
  8004213983:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213987:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421398b:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  800421398e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213992:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213996:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421399a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421399e:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  80042139a2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139a6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042139aa:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042139ae:	e9 69 06 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  80042139b3:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042139b7:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042139bb:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042139be:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042139c2:	48 89 c7             	mov    %rax,%rdi
  80042139c5:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  80042139cc:	00 00 00 
  80042139cf:	ff d0                	callq  *%rax
  80042139d1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  80042139d5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139d9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042139dd:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  80042139e1:	e9 36 06 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  80042139e6:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042139ea:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042139ee:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  80042139f1:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042139f5:	48 89 c7             	mov    %rax,%rdi
  80042139f8:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  80042139ff:	00 00 00 
  8004213a02:	ff d0                	callq  *%rax
  8004213a04:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213a08:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a0c:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213a0f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a13:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004213a17:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a1b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213a1f:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213a23:	e9 f4 05 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004213a28:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213a2c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213a30:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  8004213a33:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a37:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004213a3a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a3e:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  8004213a42:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  8004213a46:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a4a:	48 89 c7             	mov    %rax,%rdi
  8004213a4d:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213a54:	00 00 00 
  8004213a57:	ff d0                	callq  *%rax
  8004213a59:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004213a5d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a61:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213a65:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004213a69:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213a6d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a71:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213a75:	48 01 d0             	add    %rdx,%rax
  8004213a78:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213a7c:	e9 9b 05 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  8004213a81:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213a85:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213a89:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213a8c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a90:	48 89 c7             	mov    %rax,%rdi
  8004213a93:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213a9a:	00 00 00 
  8004213a9d:	ff d0                	callq  *%rax
  8004213a9f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213aa3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213aa7:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213aab:	0f b7 c0             	movzwl %ax,%eax
  8004213aae:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213ab2:	77 0c                	ja     8004213ac0 <_dwarf_frame_run_inst+0x865>
  8004213ab4:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213abb:	e9 6a 05 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213ac0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ac4:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ac8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213acc:	48 89 d0             	mov    %rdx,%rax
  8004213acf:	48 01 c0             	add    %rax,%rax
  8004213ad2:	48 01 d0             	add    %rdx,%rax
  8004213ad5:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ad9:	48 01 c8             	add    %rcx,%rax
  8004213adc:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  8004213adf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ae3:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ae7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213aeb:	48 89 d0             	mov    %rdx,%rax
  8004213aee:	48 01 c0             	add    %rax,%rax
  8004213af1:	48 01 d0             	add    %rdx,%rax
  8004213af4:	48 c1 e0 03          	shl    $0x3,%rax
  8004213af8:	48 01 c8             	add    %rcx,%rax
  8004213afb:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213aff:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b03:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b07:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b0b:	48 89 d0             	mov    %rdx,%rax
  8004213b0e:	48 01 c0             	add    %rax,%rax
  8004213b11:	48 01 d0             	add    %rdx,%rax
  8004213b14:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b18:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213b1c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b20:	48 89 c7             	mov    %rax,%rdi
  8004213b23:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213b2a:	00 00 00 
  8004213b2d:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213b2f:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213b33:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b37:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b3b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b3f:	48 89 d0             	mov    %rdx,%rax
  8004213b42:	48 01 c0             	add    %rax,%rax
  8004213b45:	48 01 d0             	add    %rdx,%rax
  8004213b48:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b4c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213b50:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213b54:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213b58:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213b5c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b60:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213b64:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b68:	48 89 d0             	mov    %rdx,%rax
  8004213b6b:	48 01 c0             	add    %rax,%rax
  8004213b6e:	48 01 d0             	add    %rdx,%rax
  8004213b71:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b75:	48 01 f0             	add    %rsi,%rax
  8004213b78:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213b7c:	48 01 c8             	add    %rcx,%rax
  8004213b7f:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213b83:	e9 94 04 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  8004213b88:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213b8c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213b90:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213b93:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b97:	48 89 c7             	mov    %rax,%rdi
  8004213b9a:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213ba1:	00 00 00 
  8004213ba4:	ff d0                	callq  *%rax
  8004213ba6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213baa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213bae:	48 89 c7             	mov    %rax,%rdi
  8004213bb1:	48 b8 fc 16 21 04 80 	movabs $0x80042116fc,%rax
  8004213bb8:	00 00 00 
  8004213bbb:	ff d0                	callq  *%rax
  8004213bbd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213bc1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213bc5:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213bc9:	0f b7 c0             	movzwl %ax,%eax
  8004213bcc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213bd0:	77 0c                	ja     8004213bde <_dwarf_frame_run_inst+0x983>
  8004213bd2:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213bd9:	e9 4c 04 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213bde:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213be2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213be6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213bea:	48 89 d0             	mov    %rdx,%rax
  8004213bed:	48 01 c0             	add    %rax,%rax
  8004213bf0:	48 01 d0             	add    %rdx,%rax
  8004213bf3:	48 c1 e0 03          	shl    $0x3,%rax
  8004213bf7:	48 01 c8             	add    %rcx,%rax
  8004213bfa:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213bfd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c01:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c05:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c09:	48 89 d0             	mov    %rdx,%rax
  8004213c0c:	48 01 c0             	add    %rax,%rax
  8004213c0f:	48 01 d0             	add    %rdx,%rax
  8004213c12:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c16:	48 01 c8             	add    %rcx,%rax
  8004213c19:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213c1d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c21:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c25:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c29:	48 89 d0             	mov    %rdx,%rax
  8004213c2c:	48 01 c0             	add    %rax,%rax
  8004213c2f:	48 01 d0             	add    %rdx,%rax
  8004213c32:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c36:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213c3a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213c3e:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213c42:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213c46:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c4a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c4e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c52:	48 89 d0             	mov    %rdx,%rax
  8004213c55:	48 01 c0             	add    %rax,%rax
  8004213c58:	48 01 d0             	add    %rdx,%rax
  8004213c5b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c5f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213c63:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213c6a:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213c6f:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213c73:	e9 a4 03 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  8004213c78:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213c7c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213c80:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213c83:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c87:	48 89 c7             	mov    %rax,%rdi
  8004213c8a:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213c91:	00 00 00 
  8004213c94:	ff d0                	callq  *%rax
  8004213c96:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213c9a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213c9e:	48 89 c7             	mov    %rax,%rdi
  8004213ca1:	48 b8 fc 16 21 04 80 	movabs $0x80042116fc,%rax
  8004213ca8:	00 00 00 
  8004213cab:	ff d0                	callq  *%rax
  8004213cad:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213cb1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cb5:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213cb8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cbc:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213cc0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cc4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213cc8:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213ccc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cd0:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213cd7:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213cdc:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213ce0:	e9 37 03 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  8004213ce5:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213ce9:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213ced:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  8004213cf0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213cf4:	48 89 c7             	mov    %rax,%rdi
  8004213cf7:	48 b8 fc 16 21 04 80 	movabs $0x80042116fc,%rax
  8004213cfe:	00 00 00 
  8004213d01:	ff d0                	callq  *%rax
  8004213d03:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213d07:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d0b:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213d0e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d12:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213d16:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d1a:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213d21:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213d26:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213d2a:	e9 ed 02 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004213d2f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213d33:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213d37:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213d3a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d3e:	48 89 c7             	mov    %rax,%rdi
  8004213d41:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213d48:	00 00 00 
  8004213d4b:	ff d0                	callq  *%rax
  8004213d4d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213d51:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d55:	48 89 c7             	mov    %rax,%rdi
  8004213d58:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213d5f:	00 00 00 
  8004213d62:	ff d0                	callq  *%rax
  8004213d64:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213d68:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d6c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213d70:	0f b7 c0             	movzwl %ax,%eax
  8004213d73:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213d77:	77 0c                	ja     8004213d85 <_dwarf_frame_run_inst+0xb2a>
  8004213d79:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213d80:	e9 a5 02 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213d85:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d89:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213d8d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d91:	48 89 d0             	mov    %rdx,%rax
  8004213d94:	48 01 c0             	add    %rax,%rax
  8004213d97:	48 01 d0             	add    %rdx,%rax
  8004213d9a:	48 c1 e0 03          	shl    $0x3,%rax
  8004213d9e:	48 01 c8             	add    %rcx,%rax
  8004213da1:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213da4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213da8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213dac:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213db0:	48 89 d0             	mov    %rdx,%rax
  8004213db3:	48 01 c0             	add    %rax,%rax
  8004213db6:	48 01 d0             	add    %rdx,%rax
  8004213db9:	48 c1 e0 03          	shl    $0x3,%rax
  8004213dbd:	48 01 c8             	add    %rcx,%rax
  8004213dc0:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213dc4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213dc8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213dcc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213dd0:	48 89 d0             	mov    %rdx,%rax
  8004213dd3:	48 01 c0             	add    %rax,%rax
  8004213dd6:	48 01 d0             	add    %rdx,%rax
  8004213dd9:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ddd:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213de1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213de5:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213de9:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213ded:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213df1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213df5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213df9:	48 89 d0             	mov    %rdx,%rax
  8004213dfc:	48 01 c0             	add    %rax,%rax
  8004213dff:	48 01 d0             	add    %rdx,%rax
  8004213e02:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e06:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213e0a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213e11:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004213e16:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213e1a:	e9 fd 01 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  8004213e1f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213e23:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213e27:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213e2a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e2e:	48 89 c7             	mov    %rax,%rdi
  8004213e31:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213e38:	00 00 00 
  8004213e3b:	ff d0                	callq  *%rax
  8004213e3d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213e41:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e45:	48 89 c7             	mov    %rax,%rdi
  8004213e48:	48 b8 fc 16 21 04 80 	movabs $0x80042116fc,%rax
  8004213e4f:	00 00 00 
  8004213e52:	ff d0                	callq  *%rax
  8004213e54:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213e58:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e5c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213e60:	0f b7 c0             	movzwl %ax,%eax
  8004213e63:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213e67:	77 0c                	ja     8004213e75 <_dwarf_frame_run_inst+0xc1a>
  8004213e69:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213e70:	e9 b5 01 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213e75:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e79:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e7d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e81:	48 89 d0             	mov    %rdx,%rax
  8004213e84:	48 01 c0             	add    %rax,%rax
  8004213e87:	48 01 d0             	add    %rdx,%rax
  8004213e8a:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e8e:	48 01 c8             	add    %rcx,%rax
  8004213e91:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213e94:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e98:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e9c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ea0:	48 89 d0             	mov    %rdx,%rax
  8004213ea3:	48 01 c0             	add    %rax,%rax
  8004213ea6:	48 01 d0             	add    %rdx,%rax
  8004213ea9:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ead:	48 01 c8             	add    %rcx,%rax
  8004213eb0:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213eb4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213eb8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ebc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ec0:	48 89 d0             	mov    %rdx,%rax
  8004213ec3:	48 01 c0             	add    %rax,%rax
  8004213ec6:	48 01 d0             	add    %rdx,%rax
  8004213ec9:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ecd:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213ed1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213ed5:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213ed9:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213edd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ee1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ee5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ee9:	48 89 d0             	mov    %rdx,%rax
  8004213eec:	48 01 c0             	add    %rax,%rax
  8004213eef:	48 01 d0             	add    %rdx,%rax
  8004213ef2:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ef6:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213efa:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213f01:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213f06:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213f0a:	e9 0d 01 00 00       	jmpq   800421401c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  8004213f0f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213f13:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213f17:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213f1a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213f1e:	48 89 c7             	mov    %rax,%rdi
  8004213f21:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213f28:	00 00 00 
  8004213f2b:	ff d0                	callq  *%rax
  8004213f2d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213f31:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f35:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213f39:	0f b7 c0             	movzwl %ax,%eax
  8004213f3c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213f40:	77 0c                	ja     8004213f4e <_dwarf_frame_run_inst+0xcf3>
  8004213f42:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213f49:	e9 dc 00 00 00       	jmpq   800421402a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213f4e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f52:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f56:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f5a:	48 89 d0             	mov    %rdx,%rax
  8004213f5d:	48 01 c0             	add    %rax,%rax
  8004213f60:	48 01 d0             	add    %rdx,%rax
  8004213f63:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f67:	48 01 c8             	add    %rcx,%rax
  8004213f6a:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  8004213f6d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f71:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f75:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f79:	48 89 d0             	mov    %rdx,%rax
  8004213f7c:	48 01 c0             	add    %rax,%rax
  8004213f7f:	48 01 d0             	add    %rdx,%rax
  8004213f82:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f86:	48 01 c8             	add    %rcx,%rax
  8004213f89:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213f8d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f91:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f95:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f99:	48 89 d0             	mov    %rdx,%rax
  8004213f9c:	48 01 c0             	add    %rax,%rax
  8004213f9f:	48 01 d0             	add    %rdx,%rax
  8004213fa2:	48 c1 e0 03          	shl    $0x3,%rax
  8004213fa6:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213faa:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213fae:	48 89 c7             	mov    %rax,%rdi
  8004213fb1:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004213fb8:	00 00 00 
  8004213fbb:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213fbd:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213fc1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fc5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213fc9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213fcd:	48 89 d0             	mov    %rdx,%rax
  8004213fd0:	48 01 c0             	add    %rax,%rax
  8004213fd3:	48 01 d0             	add    %rdx,%rax
  8004213fd6:	48 c1 e0 03          	shl    $0x3,%rax
  8004213fda:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213fde:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213fe2:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213fe6:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213fea:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fee:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213ff2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ff6:	48 89 d0             	mov    %rdx,%rax
  8004213ff9:	48 01 c0             	add    %rax,%rax
  8004213ffc:	48 01 d0             	add    %rdx,%rax
  8004213fff:	48 c1 e0 03          	shl    $0x3,%rax
  8004214003:	48 01 f0             	add    %rsi,%rax
  8004214006:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421400a:	48 01 c8             	add    %rcx,%rax
  800421400d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004214011:	eb 09                	jmp    800421401c <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004214013:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  800421401a:	eb 0e                	jmp    800421402a <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  800421401c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214020:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214024:	0f 82 b8 f2 ff ff    	jb     80042132e2 <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  800421402a:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  800421402d:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  8004214034:	5b                   	pop    %rbx
  8004214035:	5d                   	pop    %rbp
  8004214036:	c3                   	retq   

0000008004214037 <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  8004214037:	55                   	push   %rbp
  8004214038:	48 89 e5             	mov    %rsp,%rbp
  800421403b:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800421403f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214043:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214047:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421404b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800421404f:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  8004214053:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  8004214057:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  800421405c:	75 35                	jne    8004214093 <_dwarf_frame_get_internal_table+0x5c>
  800421405e:	48 b9 58 04 22 04 80 	movabs $0x8004220458,%rcx
  8004214065:	00 00 00 
  8004214068:	48 ba 67 03 22 04 80 	movabs $0x8004220367,%rdx
  800421406f:	00 00 00 
  8004214072:	be 83 01 00 00       	mov    $0x183,%esi
  8004214077:	48 bf 7c 03 22 04 80 	movabs $0x800422037c,%rdi
  800421407e:	00 00 00 
  8004214081:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214086:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421408d:	00 00 00 
  8004214090:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  8004214093:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004214098:	75 35                	jne    80042140cf <_dwarf_frame_get_internal_table+0x98>
  800421409a:	48 b9 67 04 22 04 80 	movabs $0x8004220467,%rcx
  80042140a1:	00 00 00 
  80042140a4:	48 ba 67 03 22 04 80 	movabs $0x8004220367,%rdx
  80042140ab:	00 00 00 
  80042140ae:	be 86 01 00 00       	mov    $0x186,%esi
  80042140b3:	48 bf 7c 03 22 04 80 	movabs $0x800422037c,%rdi
  80042140ba:	00 00 00 
  80042140bd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042140c2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042140c9:	00 00 00 
  80042140cc:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  80042140cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042140d3:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042140d7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  80042140db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042140df:	ba 18 00 00 00       	mov    $0x18,%edx
  80042140e4:	be 00 00 00 00       	mov    $0x0,%esi
  80042140e9:	48 89 c7             	mov    %rax,%rdi
  80042140ec:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  80042140f3:	00 00 00 
  80042140f6:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  80042140f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042140fc:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214100:	0f b7 d0             	movzwl %ax,%edx
  8004214103:	48 89 d0             	mov    %rdx,%rax
  8004214106:	48 01 c0             	add    %rax,%rax
  8004214109:	48 01 d0             	add    %rdx,%rax
  800421410c:	48 c1 e0 03          	shl    $0x3,%rax
  8004214110:	48 89 c2             	mov    %rax,%rdx
  8004214113:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214117:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421411b:	be 00 00 00 00       	mov    $0x0,%esi
  8004214120:	48 89 c7             	mov    %rax,%rdi
  8004214123:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  800421412a:	00 00 00 
  800421412d:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  800421412f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004214136:	eb 2f                	jmp    8004214167 <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  8004214138:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421413c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214140:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214143:	48 63 d0             	movslq %eax,%rdx
  8004214146:	48 89 d0             	mov    %rdx,%rax
  8004214149:	48 01 c0             	add    %rax,%rax
  800421414c:	48 01 d0             	add    %rdx,%rax
  800421414f:	48 c1 e0 03          	shl    $0x3,%rax
  8004214153:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214157:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421415b:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  800421415f:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  8004214163:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004214167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421416b:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421416f:	0f b7 c0             	movzwl %ax,%eax
  8004214172:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214175:	7f c1                	jg     8004214138 <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  8004214177:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421417b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421417f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  8004214183:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004214188:	75 35                	jne    80042141bf <_dwarf_frame_get_internal_table+0x188>
  800421418a:	48 b9 73 04 22 04 80 	movabs $0x8004220473,%rcx
  8004214191:	00 00 00 
  8004214194:	48 ba 67 03 22 04 80 	movabs $0x8004220367,%rdx
  800421419b:	00 00 00 
  800421419e:	be 95 01 00 00       	mov    $0x195,%esi
  80042141a3:	48 bf 7c 03 22 04 80 	movabs $0x800422037c,%rdi
  80042141aa:	00 00 00 
  80042141ad:	b8 00 00 00 00       	mov    $0x0,%eax
  80042141b2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042141b9:	00 00 00 
  80042141bc:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  80042141bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141c3:	4c 8b 48 40          	mov    0x40(%rax),%r9
  80042141c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141cb:	4c 8b 40 38          	mov    0x38(%rax),%r8
  80042141cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141d3:	48 8b 48 70          	mov    0x70(%rax),%rcx
  80042141d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042141db:	48 8b 50 68          	mov    0x68(%rax),%rdx
  80042141df:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042141e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042141e7:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  80042141eb:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  80042141f0:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  80042141f4:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  80042141f9:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  8004214200:	ff ff 
  8004214202:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  8004214209:	00 
  800421420a:	48 89 c7             	mov    %rax,%rdi
  800421420d:	48 b8 5b 32 21 04 80 	movabs $0x800421325b,%rax
  8004214214:	00 00 00 
  8004214217:	ff d0                	callq  *%rax
  8004214219:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  800421421c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004214220:	74 08                	je     800421422a <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  8004214222:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004214225:	e9 98 00 00 00       	jmpq   80042142c2 <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  800421422a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421422e:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214232:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004214236:	77 6f                	ja     80042142a7 <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  8004214238:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421423c:	48 8b 78 30          	mov    0x30(%rax),%rdi
  8004214240:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214244:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004214248:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421424c:	4c 8b 50 38          	mov    0x38(%rax),%r10
  8004214250:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214254:	48 8b 48 58          	mov    0x58(%rax),%rcx
  8004214258:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421425c:	48 8b 50 50          	mov    0x50(%rax),%rdx
  8004214260:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004214264:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214268:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  800421426c:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004214271:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  8004214275:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  800421427a:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  800421427e:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004214283:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214287:	4d 89 d0             	mov    %r10,%r8
  800421428a:	48 89 c7             	mov    %rax,%rdi
  800421428d:	48 b8 5b 32 21 04 80 	movabs $0x800421325b,%rax
  8004214294:	00 00 00 
  8004214297:	ff d0                	callq  *%rax
  8004214299:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  800421429c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042142a0:	74 05                	je     80042142a7 <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  80042142a2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042142a5:	eb 1b                	jmp    80042142c2 <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  80042142a7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042142ab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042142af:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  80042142b2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042142b6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042142ba:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  80042142bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042142c2:	c9                   	leaveq 
  80042142c3:	c3                   	retq   

00000080042142c4 <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  80042142c4:	55                   	push   %rbp
  80042142c5:	48 89 e5             	mov    %rsp,%rbp
  80042142c8:	48 83 ec 50          	sub    $0x50,%rsp
  80042142cc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042142d0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042142d4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042142d8:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  80042142dc:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  80042142e0:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  80042142e4:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042142e9:	74 07                	je     80042142f2 <dwarf_get_fde_info_for_all_regs+0x2e>
  80042142eb:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  80042142f0:	75 0a                	jne    80042142fc <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  80042142f2:	b8 01 00 00 00       	mov    $0x1,%eax
  80042142f7:	e9 eb 02 00 00       	jmpq   80042145e7 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  80042142fc:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004214301:	75 35                	jne    8004214338 <dwarf_get_fde_info_for_all_regs+0x74>
  8004214303:	48 b9 67 04 22 04 80 	movabs $0x8004220467,%rcx
  800421430a:	00 00 00 
  800421430d:	48 ba 67 03 22 04 80 	movabs $0x8004220367,%rdx
  8004214314:	00 00 00 
  8004214317:	be bf 01 00 00       	mov    $0x1bf,%esi
  800421431c:	48 bf 7c 03 22 04 80 	movabs $0x800422037c,%rdi
  8004214323:	00 00 00 
  8004214326:	b8 00 00 00 00       	mov    $0x0,%eax
  800421432b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004214332:	00 00 00 
  8004214335:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  8004214338:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421433c:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214340:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004214344:	77 19                	ja     800421435f <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  8004214346:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421434a:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800421434e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214352:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214356:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  8004214359:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800421435d:	77 0a                	ja     8004214369 <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  800421435f:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214364:	e9 7e 02 00 00       	jmpq   80042145e7 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  8004214369:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  800421436d:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  8004214371:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  8004214375:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214379:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421437d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214381:	4d 89 c1             	mov    %r8,%r9
  8004214384:	49 89 f8             	mov    %rdi,%r8
  8004214387:	48 89 c7             	mov    %rax,%rdi
  800421438a:	48 b8 37 40 21 04 80 	movabs $0x8004214037,%rax
  8004214391:	00 00 00 
  8004214394:	ff d0                	callq  *%rax
  8004214396:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  8004214399:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421439d:	74 0a                	je     80042143a9 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  800421439f:	b8 01 00 00 00       	mov    $0x1,%eax
  80042143a4:	e9 3e 02 00 00       	jmpq   80042145e7 <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  80042143a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042143ad:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042143b1:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  80042143b5:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  80042143ba:	0f 87 b1 00 00 00    	ja     8004214471 <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  80042143c0:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  80042143c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042143c8:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  80042143cb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042143cf:	48 63 c9             	movslq %ecx,%rcx
  80042143d2:	48 83 c1 01          	add    $0x1,%rcx
  80042143d6:	48 c1 e1 04          	shl    $0x4,%rcx
  80042143da:	48 01 ca             	add    %rcx,%rdx
  80042143dd:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  80042143df:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  80042143e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042143e7:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  80042143eb:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042143ef:	48 63 c9             	movslq %ecx,%rcx
  80042143f2:	48 83 c1 01          	add    $0x1,%rcx
  80042143f6:	48 c1 e1 04          	shl    $0x4,%rcx
  80042143fa:	48 01 ca             	add    %rcx,%rdx
  80042143fd:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  8004214400:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214404:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214408:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800421440c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214410:	48 63 c9             	movslq %ecx,%rcx
  8004214413:	48 83 c1 01          	add    $0x1,%rcx
  8004214417:	48 c1 e1 04          	shl    $0x4,%rcx
  800421441b:	48 01 ca             	add    %rcx,%rdx
  800421441e:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  8004214422:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214426:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421442a:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421442e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214432:	48 63 c9             	movslq %ecx,%rcx
  8004214435:	48 83 c1 01          	add    $0x1,%rcx
  8004214439:	48 c1 e1 04          	shl    $0x4,%rcx
  800421443d:	48 01 ca             	add    %rcx,%rdx
  8004214440:	48 83 c2 08          	add    $0x8,%rdx
  8004214444:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  8004214447:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  800421444b:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800421444f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214453:	48 63 d2             	movslq %edx,%rdx
  8004214456:	48 83 c2 01          	add    $0x1,%rdx
  800421445a:	48 c1 e2 04          	shl    $0x4,%rdx
  800421445e:	48 01 d0             	add    %rdx,%rax
  8004214461:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004214465:	48 8b 00             	mov    (%rax),%rax
  8004214468:	48 89 01             	mov    %rax,(%rcx)
  800421446b:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  800421446f:	eb 3c                	jmp    80042144ad <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  8004214471:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214475:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  8004214478:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421447c:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  800421447e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214482:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  8004214486:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421448a:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  800421448d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214491:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  8004214495:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214499:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  800421449d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144a1:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042144a5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042144a9:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042144ad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042144b4:	e9 fd 00 00 00       	jmpq   80042145b6 <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  80042144b9:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  80042144bd:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042144c0:	75 05                	jne    80042144c7 <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  80042144c2:	e9 eb 00 00 00       	jmpq   80042145b2 <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  80042144c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144cb:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042144cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042144d2:	48 63 d0             	movslq %eax,%rdx
  80042144d5:	48 89 d0             	mov    %rdx,%rax
  80042144d8:	48 01 c0             	add    %rax,%rax
  80042144db:	48 01 d0             	add    %rdx,%rax
  80042144de:	48 c1 e0 03          	shl    $0x3,%rax
  80042144e2:	48 01 c8             	add    %rcx,%rax
  80042144e5:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  80042144e8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042144ec:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042144ef:	48 63 c9             	movslq %ecx,%rcx
  80042144f2:	48 83 c1 01          	add    $0x1,%rcx
  80042144f6:	48 c1 e1 04          	shl    $0x4,%rcx
  80042144fa:	48 01 ca             	add    %rcx,%rdx
  80042144fd:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  80042144ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214503:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214507:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421450a:	48 63 d0             	movslq %eax,%rdx
  800421450d:	48 89 d0             	mov    %rdx,%rax
  8004214510:	48 01 c0             	add    %rax,%rax
  8004214513:	48 01 d0             	add    %rdx,%rax
  8004214516:	48 c1 e0 03          	shl    $0x3,%rax
  800421451a:	48 01 c8             	add    %rcx,%rax
  800421451d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  8004214521:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214525:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214528:	48 63 c9             	movslq %ecx,%rcx
  800421452b:	48 83 c1 01          	add    $0x1,%rcx
  800421452f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214533:	48 01 ca             	add    %rcx,%rdx
  8004214536:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004214539:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421453d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214541:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214544:	48 63 d0             	movslq %eax,%rdx
  8004214547:	48 89 d0             	mov    %rdx,%rax
  800421454a:	48 01 c0             	add    %rax,%rax
  800421454d:	48 01 d0             	add    %rdx,%rax
  8004214550:	48 c1 e0 03          	shl    $0x3,%rax
  8004214554:	48 01 c8             	add    %rcx,%rax
  8004214557:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800421455b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421455f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214562:	48 63 c9             	movslq %ecx,%rcx
  8004214565:	48 83 c1 01          	add    $0x1,%rcx
  8004214569:	48 c1 e1 04          	shl    $0x4,%rcx
  800421456d:	48 01 ca             	add    %rcx,%rdx
  8004214570:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  8004214574:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214578:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421457c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421457f:	48 63 d0             	movslq %eax,%rdx
  8004214582:	48 89 d0             	mov    %rdx,%rax
  8004214585:	48 01 c0             	add    %rax,%rax
  8004214588:	48 01 d0             	add    %rdx,%rax
  800421458b:	48 c1 e0 03          	shl    $0x3,%rax
  800421458f:	48 01 c8             	add    %rcx,%rax
  8004214592:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  8004214596:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421459a:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421459d:	48 63 c9             	movslq %ecx,%rcx
  80042145a0:	48 83 c1 01          	add    $0x1,%rcx
  80042145a4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042145a8:	48 01 ca             	add    %rcx,%rdx
  80042145ab:	48 83 c2 08          	add    $0x8,%rdx
  80042145af:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  80042145b2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042145b6:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  80042145ba:	7f 14                	jg     80042145d0 <dwarf_get_fde_info_for_all_regs+0x30c>
  80042145bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042145c0:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  80042145c4:	0f b7 c0             	movzwl %ax,%eax
  80042145c7:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042145ca:	0f 8f e9 fe ff ff    	jg     80042144b9 <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  80042145d0:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  80042145d5:	74 0b                	je     80042145e2 <dwarf_get_fde_info_for_all_regs+0x31e>
  80042145d7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042145db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042145df:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  80042145e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042145e7:	c9                   	leaveq 
  80042145e8:	c3                   	retq   

00000080042145e9 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042145e9:	55                   	push   %rbp
  80042145ea:	48 89 e5             	mov    %rsp,%rbp
  80042145ed:	48 83 ec 40          	sub    $0x40,%rsp
  80042145f1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042145f5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042145f9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042145fd:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004214601:	44 89 c0             	mov    %r8d,%eax
  8004214604:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004214608:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  800421460b:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  800421460f:	75 0a                	jne    800421461b <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004214611:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214616:	e9 e6 01 00 00       	jmpq   8004214801 <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  800421461b:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800421461f:	83 e0 f0             	and    $0xfffffff0,%eax
  8004214622:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004214625:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004214629:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800421462d:	83 f8 0c             	cmp    $0xc,%eax
  8004214630:	0f 87 72 01 00 00    	ja     80042147a8 <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004214636:	89 c0                	mov    %eax,%eax
  8004214638:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421463f:	00 
  8004214640:	48 b8 80 04 22 04 80 	movabs $0x8004220480,%rax
  8004214647:	00 00 00 
  800421464a:	48 01 d0             	add    %rdx,%rax
  800421464d:	48 8b 00             	mov    (%rax),%rax
  8004214650:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  8004214652:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214656:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421465a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421465e:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214661:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214665:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214669:	48 89 cf             	mov    %rcx,%rdi
  800421466c:	ff d0                	callq  *%rax
  800421466e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214672:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214675:	e9 35 01 00 00       	jmpq   80042147af <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  800421467a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421467e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214682:	48 89 d6             	mov    %rdx,%rsi
  8004214685:	48 89 c7             	mov    %rax,%rdi
  8004214688:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  800421468f:	00 00 00 
  8004214692:	ff d0                	callq  *%rax
  8004214694:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214698:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421469b:	e9 0f 01 00 00       	jmpq   80042147af <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  80042146a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146a4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042146a8:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042146ac:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042146b0:	ba 02 00 00 00       	mov    $0x2,%edx
  80042146b5:	48 89 cf             	mov    %rcx,%rdi
  80042146b8:	ff d0                	callq  *%rax
  80042146ba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042146be:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042146c1:	e9 e9 00 00 00       	jmpq   80042147af <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  80042146c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146ca:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042146ce:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042146d2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042146d6:	ba 04 00 00 00       	mov    $0x4,%edx
  80042146db:	48 89 cf             	mov    %rcx,%rdi
  80042146de:	ff d0                	callq  *%rax
  80042146e0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042146e4:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042146e7:	e9 c3 00 00 00       	jmpq   80042147af <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  80042146ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146f0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042146f4:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042146f8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042146fc:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214701:	48 89 cf             	mov    %rcx,%rdi
  8004214704:	ff d0                	callq  *%rax
  8004214706:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421470a:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421470d:	e9 9d 00 00 00       	jmpq   80042147af <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  8004214712:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214716:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421471a:	48 89 d6             	mov    %rdx,%rsi
  800421471d:	48 89 c7             	mov    %rax,%rdi
  8004214720:	48 b8 d9 15 21 04 80 	movabs $0x80042115d9,%rax
  8004214727:	00 00 00 
  800421472a:	ff d0                	callq  *%rax
  800421472c:	48 89 c2             	mov    %rax,%rdx
  800421472f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214733:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214736:	eb 77                	jmp    80042147af <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004214738:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421473c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214740:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214744:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214748:	ba 02 00 00 00       	mov    $0x2,%edx
  800421474d:	48 89 cf             	mov    %rcx,%rdi
  8004214750:	ff d0                	callq  *%rax
  8004214752:	48 0f bf d0          	movswq %ax,%rdx
  8004214756:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421475a:	48 89 10             	mov    %rdx,(%rax)
		break;
  800421475d:	eb 50                	jmp    80042147af <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  800421475f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214763:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214767:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800421476b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421476f:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214774:	48 89 cf             	mov    %rcx,%rdi
  8004214777:	ff d0                	callq  *%rax
  8004214779:	48 63 d0             	movslq %eax,%rdx
  800421477c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214780:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214783:	eb 2a                	jmp    80042147af <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  8004214785:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214789:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421478d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214791:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214795:	ba 08 00 00 00       	mov    $0x8,%edx
  800421479a:	48 89 cf             	mov    %rcx,%rdi
  800421479d:	ff d0                	callq  *%rax
  800421479f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042147a3:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042147a6:	eb 07                	jmp    80042147af <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  80042147a8:	b8 14 00 00 00       	mov    $0x14,%eax
  80042147ad:	eb 52                	jmp    8004214801 <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  80042147af:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  80042147b3:	75 47                	jne    80042147fc <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  80042147b5:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042147b9:	83 f8 01             	cmp    $0x1,%eax
  80042147bc:	7c 3d                	jl     80042147fb <_dwarf_frame_read_lsb_encoded+0x212>
  80042147be:	83 f8 04             	cmp    $0x4,%eax
  80042147c1:	7e 0a                	jle    80042147cd <_dwarf_frame_read_lsb_encoded+0x1e4>
  80042147c3:	83 e8 09             	sub    $0x9,%eax
  80042147c6:	83 f8 03             	cmp    $0x3,%eax
  80042147c9:	77 30                	ja     80042147fb <_dwarf_frame_read_lsb_encoded+0x212>
  80042147cb:	eb 17                	jmp    80042147e4 <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  80042147cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042147d1:	48 8b 10             	mov    (%rax),%rdx
  80042147d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042147d8:	48 01 c2             	add    %rax,%rdx
  80042147db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042147df:	48 89 10             	mov    %rdx,(%rax)
			break;
  80042147e2:	eb 18                	jmp    80042147fc <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  80042147e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042147e8:	48 8b 10             	mov    (%rax),%rdx
  80042147eb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042147ef:	48 01 c2             	add    %rax,%rdx
  80042147f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042147f6:	48 89 10             	mov    %rdx,(%rax)
			break;
  80042147f9:	eb 01                	jmp    80042147fc <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  80042147fb:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  80042147fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214801:	c9                   	leaveq 
  8004214802:	c3                   	retq   

0000008004214803 <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004214803:	55                   	push   %rbp
  8004214804:	48 89 e5             	mov    %rsp,%rbp
  8004214807:	48 83 ec 50          	sub    $0x50,%rsp
  800421480b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421480f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214813:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004214817:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421481b:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421481f:	48 85 c0             	test   %rax,%rax
  8004214822:	74 0f                	je     8004214833 <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004214824:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214828:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421482c:	0f b6 00             	movzbl (%rax),%eax
  800421482f:	3c 7a                	cmp    $0x7a,%al
  8004214831:	74 35                	je     8004214868 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004214833:	48 b9 e8 04 22 04 80 	movabs $0x80042204e8,%rcx
  800421483a:	00 00 00 
  800421483d:	48 ba 67 03 22 04 80 	movabs $0x8004220367,%rdx
  8004214844:	00 00 00 
  8004214847:	be 4a 02 00 00       	mov    $0x24a,%esi
  800421484c:	48 bf 7c 03 22 04 80 	movabs $0x800422037c,%rdi
  8004214853:	00 00 00 
  8004214856:	b8 00 00 00 00       	mov    $0x0,%eax
  800421485b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004214862:	00 00 00 
  8004214865:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  8004214868:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421486c:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214870:	48 83 c0 01          	add    $0x1,%rax
  8004214874:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  8004214878:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421487c:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214880:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  8004214884:	e9 af 00 00 00       	jmpq   8004214938 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  8004214889:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421488d:	0f b6 00             	movzbl (%rax),%eax
  8004214890:	0f b6 c0             	movzbl %al,%eax
  8004214893:	83 f8 50             	cmp    $0x50,%eax
  8004214896:	74 18                	je     80042148b0 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  8004214898:	83 f8 52             	cmp    $0x52,%eax
  800421489b:	74 77                	je     8004214914 <_dwarf_frame_parse_lsb_cie_augment+0x111>
  800421489d:	83 f8 4c             	cmp    $0x4c,%eax
  80042148a0:	0f 85 86 00 00 00    	jne    800421492c <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  80042148a6:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  80042148ab:	e9 83 00 00 00       	jmpq   8004214933 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  80042148b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042148b4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042148b8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  80042148bc:	0f b6 00             	movzbl (%rax),%eax
  80042148bf:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  80042148c2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042148c9:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  80042148ca:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  80042148cf:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  80042148d3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042148d7:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  80042148db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042148df:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042148e3:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042148e7:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  80042148ed:	48 89 c7             	mov    %rax,%rdi
  80042148f0:	48 b8 e9 45 21 04 80 	movabs $0x80042145e9,%rax
  80042148f7:	00 00 00 
  80042148fa:	ff d0                	callq  *%rax
  80042148fc:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  80042148ff:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004214903:	74 05                	je     800421490a <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  8004214905:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004214908:	eb 42                	jmp    800421494c <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  800421490a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421490e:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004214912:	eb 1f                	jmp    8004214933 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004214914:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214918:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421491c:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214920:	0f b6 10             	movzbl (%rax),%edx
  8004214923:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214927:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  800421492a:	eb 07                	jmp    8004214933 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  800421492c:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214931:	eb 19                	jmp    800421494c <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  8004214933:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004214938:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421493c:	0f b6 00             	movzbl (%rax),%eax
  800421493f:	84 c0                	test   %al,%al
  8004214941:	0f 85 42 ff ff ff    	jne    8004214889 <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  8004214947:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421494c:	c9                   	leaveq 
  800421494d:	c3                   	retq   

000000800421494e <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  800421494e:	55                   	push   %rbp
  800421494f:	48 89 e5             	mov    %rsp,%rbp
  8004214952:	48 83 ec 60          	sub    $0x60,%rsp
  8004214956:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421495a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421495e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214962:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214966:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  800421496a:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  800421496f:	75 35                	jne    80042149a6 <_dwarf_frame_set_cie+0x58>
  8004214971:	48 b9 1d 05 22 04 80 	movabs $0x800422051d,%rcx
  8004214978:	00 00 00 
  800421497b:	48 ba 67 03 22 04 80 	movabs $0x8004220367,%rdx
  8004214982:	00 00 00 
  8004214985:	be 7b 02 00 00       	mov    $0x27b,%esi
  800421498a:	48 bf 7c 03 22 04 80 	movabs $0x800422037c,%rdi
  8004214991:	00 00 00 
  8004214994:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214999:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042149a0:	00 00 00 
  80042149a3:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  80042149a6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042149aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  80042149ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149b2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042149b6:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  80042149b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042149bd:	48 8b 10             	mov    (%rax),%rdx
  80042149c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149c4:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  80042149c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042149cc:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042149d0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042149d4:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042149d8:	48 89 d1             	mov    %rdx,%rcx
  80042149db:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042149df:	ba 04 00 00 00       	mov    $0x4,%edx
  80042149e4:	48 89 cf             	mov    %rcx,%rdi
  80042149e7:	ff d0                	callq  *%rax
  80042149e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  80042149ed:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042149f2:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042149f6:	75 2e                	jne    8004214a26 <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  80042149f8:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  80042149ff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a03:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a07:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a0b:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214a0f:	48 89 d1             	mov    %rdx,%rcx
  8004214a12:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214a16:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214a1b:	48 89 cf             	mov    %rcx,%rdi
  8004214a1e:	ff d0                	callq  *%rax
  8004214a20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214a24:	eb 07                	jmp    8004214a2d <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  8004214a26:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214a2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a31:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214a35:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214a39:	48 8b 00             	mov    (%rax),%rax
  8004214a3c:	48 29 c2             	sub    %rax,%rdx
  8004214a3f:	48 89 d0             	mov    %rdx,%rax
  8004214a42:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214a46:	73 0a                	jae    8004214a52 <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214a48:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214a4d:	e9 5d 03 00 00       	jmpq   8004214daf <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  8004214a52:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a56:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a5a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a5e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214a62:	48 89 d1             	mov    %rdx,%rcx
  8004214a65:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214a68:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214a6c:	48 89 cf             	mov    %rcx,%rdi
  8004214a6f:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004214a71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a75:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214a79:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214a7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a81:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a85:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a89:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214a8d:	48 89 d1             	mov    %rdx,%rcx
  8004214a90:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214a94:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214a99:	48 89 cf             	mov    %rcx,%rdi
  8004214a9c:	ff d0                	callq  *%rax
  8004214a9e:	89 c2                	mov    %eax,%edx
  8004214aa0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214aa4:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214aa8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214aac:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214ab0:	66 83 f8 01          	cmp    $0x1,%ax
  8004214ab4:	74 26                	je     8004214adc <_dwarf_frame_set_cie+0x18e>
  8004214ab6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214aba:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214abe:	66 83 f8 03          	cmp    $0x3,%ax
  8004214ac2:	74 18                	je     8004214adc <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004214ac4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ac8:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214acc:	66 83 f8 04          	cmp    $0x4,%ax
  8004214ad0:	74 0a                	je     8004214adc <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  8004214ad2:	b8 16 00 00 00       	mov    $0x16,%eax
  8004214ad7:	e9 d3 02 00 00       	jmpq   8004214daf <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214adc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ae0:	48 8b 10             	mov    (%rax),%rdx
  8004214ae3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ae7:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214aeb:	48 01 d0             	add    %rdx,%rax
  8004214aee:	48 89 c2             	mov    %rax,%rdx
  8004214af1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214af5:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004214af9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214afd:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214b01:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  8004214b05:	90                   	nop
  8004214b06:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b0a:	48 8b 00             	mov    (%rax),%rax
  8004214b0d:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004214b11:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214b15:	48 89 0a             	mov    %rcx,(%rdx)
  8004214b18:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214b1c:	48 01 d0             	add    %rdx,%rax
  8004214b1f:	0f b6 00             	movzbl (%rax),%eax
  8004214b22:	84 c0                	test   %al,%al
  8004214b24:	75 e0                	jne    8004214b06 <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  8004214b26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b2a:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214b2e:	0f b6 00             	movzbl (%rax),%eax
  8004214b31:	84 c0                	test   %al,%al
  8004214b33:	74 48                	je     8004214b7d <_dwarf_frame_set_cie+0x22f>
  8004214b35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b39:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214b3d:	0f b6 00             	movzbl (%rax),%eax
  8004214b40:	3c 7a                	cmp    $0x7a,%al
  8004214b42:	74 39                	je     8004214b7d <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214b44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b48:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214b4c:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214b50:	75 07                	jne    8004214b59 <_dwarf_frame_set_cie+0x20b>
  8004214b52:	b8 04 00 00 00       	mov    $0x4,%eax
  8004214b57:	eb 05                	jmp    8004214b5e <_dwarf_frame_set_cie+0x210>
  8004214b59:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004214b5e:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004214b61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b65:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214b69:	48 01 c2             	add    %rax,%rdx
  8004214b6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b70:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  8004214b73:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214b78:	e9 32 02 00 00       	jmpq   8004214daf <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004214b7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b81:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214b85:	48 be 25 05 22 04 80 	movabs $0x8004220525,%rsi
  8004214b8c:	00 00 00 
  8004214b8f:	48 89 c7             	mov    %rax,%rdi
  8004214b92:	48 b8 90 0f 21 04 80 	movabs $0x8004210f90,%rax
  8004214b99:	00 00 00 
  8004214b9c:	ff d0                	callq  *%rax
  8004214b9e:	48 85 c0             	test   %rax,%rax
  8004214ba1:	74 28                	je     8004214bcb <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214ba3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ba7:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214bab:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214baf:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214bb2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214bb6:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214bba:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214bbe:	48 89 cf             	mov    %rcx,%rdi
  8004214bc1:	ff d0                	callq  *%rax
  8004214bc3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214bc7:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214bcb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214bcf:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214bd3:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214bd7:	48 89 d6             	mov    %rdx,%rsi
  8004214bda:	48 89 c7             	mov    %rax,%rdi
  8004214bdd:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  8004214be4:	00 00 00 
  8004214be7:	ff d0                	callq  *%rax
  8004214be9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214bed:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214bf1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214bf5:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214bf9:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214bfd:	48 89 d6             	mov    %rdx,%rsi
  8004214c00:	48 89 c7             	mov    %rax,%rdi
  8004214c03:	48 b8 d9 15 21 04 80 	movabs $0x80042115d9,%rax
  8004214c0a:	00 00 00 
  8004214c0d:	ff d0                	callq  *%rax
  8004214c0f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214c13:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  8004214c17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c1b:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214c1f:	66 83 f8 01          	cmp    $0x1,%ax
  8004214c23:	75 2b                	jne    8004214c50 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214c25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c29:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214c2d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c31:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214c35:	48 89 d1             	mov    %rdx,%rcx
  8004214c38:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214c3c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214c41:	48 89 cf             	mov    %rcx,%rdi
  8004214c44:	ff d0                	callq  *%rax
  8004214c46:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214c4a:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004214c4e:	eb 26                	jmp    8004214c76 <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214c50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c54:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214c58:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214c5c:	48 89 d6             	mov    %rdx,%rsi
  8004214c5f:	48 89 c7             	mov    %rax,%rdi
  8004214c62:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  8004214c69:	00 00 00 
  8004214c6c:	ff d0                	callq  *%rax
  8004214c6e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214c72:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  8004214c76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c7a:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214c7e:	0f b6 00             	movzbl (%rax),%eax
  8004214c81:	3c 7a                	cmp    $0x7a,%al
  8004214c83:	0f 85 93 00 00 00    	jne    8004214d1c <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214c89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c8d:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214c91:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214c95:	48 89 d6             	mov    %rdx,%rsi
  8004214c98:	48 89 c7             	mov    %rax,%rdi
  8004214c9b:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  8004214ca2:	00 00 00 
  8004214ca5:	ff d0                	callq  *%rax
  8004214ca7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214cab:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214caf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214cb3:	48 8b 10             	mov    (%rax),%rdx
  8004214cb6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cba:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214cbe:	48 01 d0             	add    %rdx,%rax
  8004214cc1:	48 89 c2             	mov    %rax,%rdx
  8004214cc4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214cc8:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  8004214ccc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214cd0:	48 8b 10             	mov    (%rax),%rdx
  8004214cd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214cd7:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004214cdb:	48 01 c2             	add    %rax,%rdx
  8004214cde:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214ce2:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  8004214ce5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ce9:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  8004214ced:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004214cf1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004214cf5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cf9:	48 89 ce             	mov    %rcx,%rsi
  8004214cfc:	48 89 c7             	mov    %rax,%rdi
  8004214cff:	48 b8 03 48 21 04 80 	movabs $0x8004214803,%rax
  8004214d06:	00 00 00 
  8004214d09:	ff d0                	callq  *%rax
  8004214d0b:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004214d0e:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214d12:	74 08                	je     8004214d1c <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  8004214d14:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214d17:	e9 93 00 00 00       	jmpq   8004214daf <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214d1c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d20:	48 8b 10             	mov    (%rax),%rdx
  8004214d23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d27:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214d2b:	48 01 d0             	add    %rdx,%rax
  8004214d2e:	48 89 c2             	mov    %rax,%rdx
  8004214d31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d35:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  8004214d39:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214d3d:	75 2a                	jne    8004214d69 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  8004214d3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d43:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214d4b:	48 01 c2             	add    %rax,%rdx
  8004214d4e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d52:	48 8b 00             	mov    (%rax),%rax
  8004214d55:	48 29 c2             	sub    %rax,%rdx
  8004214d58:	48 89 d0             	mov    %rdx,%rax
  8004214d5b:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214d5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d63:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004214d67:	eb 28                	jmp    8004214d91 <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  8004214d69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d6d:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214d71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214d75:	48 01 c2             	add    %rax,%rdx
  8004214d78:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d7c:	48 8b 00             	mov    (%rax),%rax
  8004214d7f:	48 29 c2             	sub    %rax,%rdx
  8004214d82:	48 89 d0             	mov    %rdx,%rax
  8004214d85:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004214d89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d8d:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  8004214d91:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d95:	48 8b 10             	mov    (%rax),%rdx
  8004214d98:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d9c:	48 8b 40 70          	mov    0x70(%rax),%rax
  8004214da0:	48 01 c2             	add    %rax,%rdx
  8004214da3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214da7:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214daa:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214daf:	c9                   	leaveq 
  8004214db0:	c3                   	retq   

0000008004214db1 <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  8004214db1:	55                   	push   %rbp
  8004214db2:	48 89 e5             	mov    %rsp,%rbp
  8004214db5:	48 83 ec 70          	sub    $0x70,%rsp
  8004214db9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214dbd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214dc1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214dc5:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214dc9:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  8004214dcd:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  8004214dd1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214dd5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  8004214dd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ddd:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214de1:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214de4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214de8:	48 8b 10             	mov    (%rax),%rdx
  8004214deb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214def:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214df3:	48 01 d0             	add    %rdx,%rax
  8004214df6:	48 89 c2             	mov    %rax,%rdx
  8004214df9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dfd:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  8004214e01:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214e05:	48 8b 10             	mov    (%rax),%rdx
  8004214e08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e0c:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214e10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e14:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e18:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e1c:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214e20:	48 89 d1             	mov    %rdx,%rcx
  8004214e23:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214e27:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214e2c:	48 89 cf             	mov    %rcx,%rdi
  8004214e2f:	ff d0                	callq  *%rax
  8004214e31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214e35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214e3a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214e3e:	75 2e                	jne    8004214e6e <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  8004214e40:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214e47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e4b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e4f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e53:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214e57:	48 89 d1             	mov    %rdx,%rcx
  8004214e5a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214e5e:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214e63:	48 89 cf             	mov    %rcx,%rdi
  8004214e66:	ff d0                	callq  *%rax
  8004214e68:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214e6c:	eb 07                	jmp    8004214e75 <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  8004214e6e:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214e75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e79:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214e7d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214e81:	48 8b 00             	mov    (%rax),%rax
  8004214e84:	48 29 c2             	sub    %rax,%rdx
  8004214e87:	48 89 d0             	mov    %rdx,%rax
  8004214e8a:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214e8e:	73 0a                	jae    8004214e9a <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214e90:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214e95:	e9 ca 02 00 00       	jmpq   8004215164 <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  8004214e9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e9e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214ea2:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  8004214ea6:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214eaa:	74 5e                	je     8004214f0a <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214eac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214eb0:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214eb4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214eb8:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214ebc:	48 89 d1             	mov    %rdx,%rcx
  8004214ebf:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214ec3:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214ec8:	48 89 cf             	mov    %rcx,%rdi
  8004214ecb:	ff d0                	callq  *%rax
  8004214ecd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214ed1:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  8004214ed5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214ed9:	48 8b 10             	mov    (%rax),%rdx
  8004214edc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ee0:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214ee4:	48 29 c2             	sub    %rax,%rdx
  8004214ee7:	48 89 d0             	mov    %rdx,%rax
  8004214eea:	48 83 e8 04          	sub    $0x4,%rax
  8004214eee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  8004214ef2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ef6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214efa:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214efe:	75 3d                	jne    8004214f3d <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  8004214f00:	b8 13 00 00 00       	mov    $0x13,%eax
  8004214f05:	e9 5a 02 00 00       	jmpq   8004215164 <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  8004214f0a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f0e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214f12:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214f16:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214f1a:	48 89 d1             	mov    %rdx,%rcx
  8004214f1d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214f20:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214f24:	48 89 cf             	mov    %rcx,%rdi
  8004214f27:	ff d0                	callq  *%rax
  8004214f29:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214f2d:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  8004214f31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f35:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214f39:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  8004214f3d:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214f41:	0f 84 c9 00 00 00    	je     8004215010 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214f47:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f4b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214f4f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214f53:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214f56:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214f5a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214f5e:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214f62:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214f66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f6a:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214f6e:	48 89 c2             	mov    %rax,%rdx
  8004214f71:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214f75:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214f79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f7d:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004214f81:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214f85:	48 89 c7             	mov    %rax,%rdi
  8004214f88:	48 b8 e9 45 21 04 80 	movabs $0x80042145e9,%rax
  8004214f8f:	00 00 00 
  8004214f92:	ff d0                	callq  *%rax
  8004214f94:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  8004214f97:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214f9b:	74 08                	je     8004214fa5 <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  8004214f9d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214fa0:	e9 bf 01 00 00       	jmpq   8004215164 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  8004214fa5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214fa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fad:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  8004214fb1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214fb5:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214fb9:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214fbd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214fc1:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214fc5:	48 89 c2             	mov    %rax,%rdx
  8004214fc8:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214fcc:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214fd0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214fd4:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004214fd8:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214fdc:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004214fe2:	48 89 c7             	mov    %rax,%rdi
  8004214fe5:	48 b8 e9 45 21 04 80 	movabs $0x80042145e9,%rax
  8004214fec:	00 00 00 
  8004214fef:	ff d0                	callq  *%rax
  8004214ff1:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  8004214ff4:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214ff8:	74 08                	je     8004215002 <_dwarf_frame_set_fde+0x251>
			return (ret);
  8004214ffa:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214ffd:	e9 62 01 00 00       	jmpq   8004215164 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  8004215002:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215006:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421500a:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421500e:	eb 50                	jmp    8004215060 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004215010:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215014:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215018:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421501c:	8b 52 28             	mov    0x28(%rdx),%edx
  800421501f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004215023:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004215027:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421502b:	48 89 cf             	mov    %rcx,%rdi
  800421502e:	ff d0                	callq  *%rax
  8004215030:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215034:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004215038:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421503c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215040:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215044:	8b 52 28             	mov    0x28(%rdx),%edx
  8004215047:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800421504b:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800421504f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215053:	48 89 cf             	mov    %rcx,%rdi
  8004215056:	ff d0                	callq  *%rax
  8004215058:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421505c:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  8004215060:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004215064:	74 6b                	je     80042150d1 <_dwarf_frame_set_fde+0x320>
  8004215066:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421506a:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421506e:	0f b6 00             	movzbl (%rax),%eax
  8004215071:	3c 7a                	cmp    $0x7a,%al
  8004215073:	75 5c                	jne    80042150d1 <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004215075:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215079:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421507d:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004215081:	48 89 d6             	mov    %rdx,%rsi
  8004215084:	48 89 c7             	mov    %rax,%rdi
  8004215087:	48 b8 7d 16 21 04 80 	movabs $0x800421167d,%rax
  800421508e:	00 00 00 
  8004215091:	ff d0                	callq  *%rax
  8004215093:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215097:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  800421509b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421509f:	48 8b 10             	mov    (%rax),%rdx
  80042150a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150a6:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042150aa:	48 01 d0             	add    %rdx,%rax
  80042150ad:	48 89 c2             	mov    %rax,%rdx
  80042150b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150b4:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  80042150b8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150bc:	48 8b 10             	mov    (%rax),%rdx
  80042150bf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150c3:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042150c7:	48 01 c2             	add    %rax,%rdx
  80042150ca:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150ce:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042150d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150d5:	48 8b 10             	mov    (%rax),%rdx
  80042150d8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150dc:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042150e0:	48 01 d0             	add    %rdx,%rax
  80042150e3:	48 89 c2             	mov    %rax,%rdx
  80042150e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150ea:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  80042150ee:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042150f2:	75 2a                	jne    800421511e <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  80042150f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150f8:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042150fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215100:	48 01 c2             	add    %rax,%rdx
  8004215103:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215107:	48 8b 00             	mov    (%rax),%rax
  800421510a:	48 29 c2             	sub    %rax,%rdx
  800421510d:	48 89 d0             	mov    %rdx,%rax
  8004215110:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004215114:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215118:	48 89 50 58          	mov    %rdx,0x58(%rax)
  800421511c:	eb 28                	jmp    8004215146 <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  800421511e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215122:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215126:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421512a:	48 01 c2             	add    %rax,%rdx
  800421512d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215131:	48 8b 00             	mov    (%rax),%rax
  8004215134:	48 29 c2             	sub    %rax,%rdx
  8004215137:	48 89 d0             	mov    %rdx,%rax
  800421513a:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  800421513e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215142:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  8004215146:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421514a:	48 8b 10             	mov    (%rax),%rdx
  800421514d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215151:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004215155:	48 01 c2             	add    %rax,%rdx
  8004215158:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421515c:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  800421515f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215164:	c9                   	leaveq 
  8004215165:	c3                   	retq   

0000008004215166 <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  8004215166:	55                   	push   %rbp
  8004215167:	48 89 e5             	mov    %rsp,%rbp
  800421516a:	48 83 ec 20          	sub    $0x20,%rsp
  800421516e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004215172:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  8004215176:	48 b8 a0 d6 4d 04 80 	movabs $0x80044dd6a0,%rax
  800421517d:	00 00 00 
  8004215180:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  8004215184:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215188:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421518c:	48 85 c0             	test   %rax,%rax
  800421518f:	74 07                	je     8004215198 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  8004215191:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215196:	eb 33                	jmp    80042151cb <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  8004215198:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421519c:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  80042151a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042151a4:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  80042151a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042151ac:	48 b9 40 be 6d 04 80 	movabs $0x80046dbe40,%rcx
  80042151b3:	00 00 00 
  80042151b6:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  80042151ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042151c2:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  80042151c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042151cb:	c9                   	leaveq 
  80042151cc:	c3                   	retq   

00000080042151cd <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  80042151cd:	55                   	push   %rbp
  80042151ce:	48 89 e5             	mov    %rsp,%rbp
  80042151d1:	48 83 ec 60          	sub    $0x60,%rsp
  80042151d5:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042151d9:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042151dc:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042151e0:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  80042151e4:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  80042151eb:	00 00 00 
  80042151ee:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  80042151f2:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  80042151f9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042151fd:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004215201:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  8004215205:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215209:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421520d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215211:	48 39 c2             	cmp    %rax,%rdx
  8004215214:	0f 86 fe 01 00 00    	jbe    8004215418 <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  800421521a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421521e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  8004215222:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215226:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421522a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421522e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215232:	48 89 d1             	mov    %rdx,%rcx
  8004215235:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215239:	ba 04 00 00 00       	mov    $0x4,%edx
  800421523e:	48 89 cf             	mov    %rcx,%rdi
  8004215241:	ff d0                	callq  *%rax
  8004215243:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  8004215247:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421524c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004215250:	75 2e                	jne    8004215280 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  8004215252:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  8004215259:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421525d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215261:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215265:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215269:	48 89 d1             	mov    %rdx,%rcx
  800421526c:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215270:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215275:	48 89 cf             	mov    %rcx,%rdi
  8004215278:	ff d0                	callq  *%rax
  800421527a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421527e:	eb 07                	jmp    8004215287 <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  8004215280:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  8004215287:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421528b:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421528f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215293:	48 29 c2             	sub    %rax,%rdx
  8004215296:	48 89 d0             	mov    %rdx,%rax
  8004215299:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  800421529d:	72 0d                	jb     80042152ac <_dwarf_get_next_fde+0xdf>
  800421529f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042152a4:	75 10                	jne    80042152b6 <_dwarf_get_next_fde+0xe9>
  80042152a6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042152aa:	75 0a                	jne    80042152b6 <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042152ac:	b8 12 00 00 00       	mov    $0x12,%eax
  80042152b1:	e9 67 01 00 00       	jmpq   800421541d <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  80042152b6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042152ba:	74 11                	je     80042152cd <_dwarf_get_next_fde+0x100>
  80042152bc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042152c1:	75 0a                	jne    80042152cd <_dwarf_get_next_fde+0x100>
			return(-1);
  80042152c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042152c8:	e9 50 01 00 00       	jmpq   800421541d <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  80042152cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042152d1:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042152d5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042152d9:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042152dd:	48 89 d1             	mov    %rdx,%rcx
  80042152e0:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042152e3:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  80042152e7:	48 89 cf             	mov    %rcx,%rdi
  80042152ea:	ff d0                	callq  *%rax
  80042152ec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  80042152f0:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042152f4:	74 79                	je     800421536f <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  80042152f6:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  80042152fb:	75 32                	jne    800421532f <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  80042152fd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215301:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004215305:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215309:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800421530d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004215311:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215315:	49 89 f8             	mov    %rdi,%r8
  8004215318:	48 89 c7             	mov    %rax,%rdi
  800421531b:	48 b8 4e 49 21 04 80 	movabs $0x800421494e,%rax
  8004215322:	00 00 00 
  8004215325:	ff d0                	callq  *%rax
  8004215327:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421532a:	e9 c8 00 00 00       	jmpq   80042153f7 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  800421532f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215333:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004215337:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800421533b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421533f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215343:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215347:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421534b:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421534f:	4d 89 c1             	mov    %r8,%r9
  8004215352:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004215358:	48 89 c7             	mov    %rax,%rdi
  800421535b:	48 b8 b1 4d 21 04 80 	movabs $0x8004214db1,%rax
  8004215362:	00 00 00 
  8004215365:	ff d0                	callq  *%rax
  8004215367:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421536a:	e9 88 00 00 00       	jmpq   80042153f7 <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  800421536f:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004215373:	75 0b                	jne    8004215380 <_dwarf_get_next_fde+0x1b3>
  8004215375:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421537a:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421537e:	74 0d                	je     800421538d <_dwarf_get_next_fde+0x1c0>
  8004215380:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  8004215384:	75 36                	jne    80042153bc <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  8004215386:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  800421538b:	75 2f                	jne    80042153bc <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  800421538d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215391:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004215395:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215399:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800421539d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042153a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042153a5:	49 89 f8             	mov    %rdi,%r8
  80042153a8:	48 89 c7             	mov    %rax,%rdi
  80042153ab:	48 b8 4e 49 21 04 80 	movabs $0x800421494e,%rax
  80042153b2:	00 00 00 
  80042153b5:	ff d0                	callq  *%rax
  80042153b7:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042153ba:	eb 3b                	jmp    80042153f7 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  80042153bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042153c0:	4c 8b 40 08          	mov    0x8(%rax),%r8
  80042153c4:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  80042153c8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042153cc:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  80042153d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042153d4:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042153d8:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042153dc:	4d 89 c1             	mov    %r8,%r9
  80042153df:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  80042153e5:	48 89 c7             	mov    %rax,%rdi
  80042153e8:	48 b8 b1 4d 21 04 80 	movabs $0x8004214db1,%rax
  80042153ef:	00 00 00 
  80042153f2:	ff d0                	callq  *%rax
  80042153f4:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  80042153f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042153fb:	74 07                	je     8004215404 <_dwarf_get_next_fde+0x237>
			return(-1);
  80042153fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215402:	eb 19                	jmp    800421541d <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  8004215404:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215408:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  800421540c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215410:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215414:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  8004215418:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421541d:	c9                   	leaveq 
  800421541e:	c3                   	retq   

000000800421541f <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  800421541f:	55                   	push   %rbp
  8004215420:	48 89 e5             	mov    %rsp,%rbp
  8004215423:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004215427:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421542b:	89 f0                	mov    %esi,%eax
  800421542d:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  8004215431:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215435:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004215439:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  800421543d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215441:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  8004215445:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  8004215449:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  800421544d:	c9                   	leaveq 
  800421544e:	c3                   	retq   

000000800421544f <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  800421544f:	55                   	push   %rbp
  8004215450:	48 89 e5             	mov    %rsp,%rbp
  8004215453:	48 83 ec 10          	sub    $0x10,%rsp
  8004215457:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421545b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  800421545f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215464:	75 0a                	jne    8004215470 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  8004215466:	b8 01 00 00 00       	mov    $0x1,%eax
  800421546b:	e9 85 00 00 00       	jmpq   80042154f5 <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  8004215470:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215474:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004215478:	48 85 c0             	test   %rax,%rax
  800421547b:	75 25                	jne    80042154a2 <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  800421547d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004215481:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215485:	48 89 d6             	mov    %rdx,%rsi
  8004215488:	48 89 c7             	mov    %rax,%rdi
  800421548b:	48 b8 66 51 21 04 80 	movabs $0x8004215166,%rax
  8004215492:	00 00 00 
  8004215495:	ff d0                	callq  *%rax
  8004215497:	85 c0                	test   %eax,%eax
  8004215499:	74 07                	je     80042154a2 <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  800421549b:	b8 01 00 00 00       	mov    $0x1,%eax
  80042154a0:	eb 53                	jmp    80042154f5 <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  80042154a2:	48 bf a0 56 23 04 80 	movabs $0x80042356a0,%rdi
  80042154a9:	00 00 00 
  80042154ac:	48 b8 1b 2f 21 04 80 	movabs $0x8004212f1b,%rax
  80042154b3:	00 00 00 
  80042154b6:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  80042154b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042154bc:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  80042154c3:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  80042154c4:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  80042154cb:	00 00 00 
  80042154ce:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042154d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042154d6:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  80042154da:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  80042154e1:	00 00 00 
  80042154e4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042154e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042154ec:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  80042154f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042154f5:	c9                   	leaveq 
  80042154f6:	c3                   	retq   

00000080042154f7 <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042154f7:	55                   	push   %rbp
  80042154f8:	48 89 e5             	mov    %rsp,%rbp
  80042154fb:	53                   	push   %rbx
  80042154fc:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  8004215503:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004215507:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  800421550b:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004215512:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  8004215519:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  8004215520:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  8004215527:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421552b:	48 83 c0 48          	add    $0x48,%rax
  800421552f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  8004215533:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421553a:	00 
  800421553b:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004215542:	00 
  8004215543:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  800421554a:	00 
  800421554b:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004215552:	00 
  8004215553:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215557:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  800421555b:	0f b6 c0             	movzbl %al,%eax
  800421555e:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004215561:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004215568:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  800421556f:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004215576:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  800421557d:	e9 0a 05 00 00       	jmpq   8004215a8c <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  8004215582:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215589:	0f b6 00             	movzbl (%rax),%eax
  800421558c:	84 c0                	test   %al,%al
  800421558e:	0f 85 78 01 00 00    	jne    800421570c <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  8004215594:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421559b:	48 83 c0 01          	add    $0x1,%rax
  800421559f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  80042155a6:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042155ad:	48 89 c7             	mov    %rax,%rdi
  80042155b0:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  80042155b7:	00 00 00 
  80042155ba:	ff d0                	callq  *%rax
  80042155bc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  80042155c0:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042155c7:	0f b6 00             	movzbl (%rax),%eax
  80042155ca:	0f b6 c0             	movzbl %al,%eax
  80042155cd:	83 f8 02             	cmp    $0x2,%eax
  80042155d0:	74 7a                	je     800421564c <_dwarf_lineno_run_program+0x155>
  80042155d2:	83 f8 03             	cmp    $0x3,%eax
  80042155d5:	0f 84 b3 00 00 00    	je     800421568e <_dwarf_lineno_run_program+0x197>
  80042155db:	83 f8 01             	cmp    $0x1,%eax
  80042155de:	0f 85 09 01 00 00    	jne    80042156ed <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  80042155e4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042155eb:	48 83 c0 01          	add    $0x1,%rax
  80042155ef:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  80042155f6:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  80042155fd:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215604:	00 
  8004215605:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  800421560c:	00 
  800421560d:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215614:	00 
  8004215615:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421561c:	00 
  800421561d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215621:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215625:	0f b6 c0             	movzbl %al,%eax
  8004215628:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421562b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004215632:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215639:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004215640:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215647:	e9 bb 00 00 00       	jmpq   8004215707 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  800421564c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215653:	48 83 c0 01          	add    $0x1,%rax
  8004215657:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  800421565e:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215665:	00 00 00 
  8004215668:	48 8b 00             	mov    (%rax),%rax
  800421566b:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421566f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  8004215673:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004215677:	0f b6 ca             	movzbl %dl,%ecx
  800421567a:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215681:	89 ce                	mov    %ecx,%esi
  8004215683:	48 89 d7             	mov    %rdx,%rdi
  8004215686:	ff d0                	callq  *%rax
  8004215688:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  800421568c:	eb 79                	jmp    8004215707 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  800421568e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215695:	48 83 c0 01          	add    $0x1,%rax
  8004215699:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  80042156a0:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  80042156a7:	00 00 00 
  80042156aa:	48 8b 08             	mov    (%rax),%rcx
  80042156ad:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042156b4:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  80042156bb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042156bf:	49 89 c8             	mov    %rcx,%r8
  80042156c2:	48 89 d1             	mov    %rdx,%rcx
  80042156c5:	ba 00 00 00 00       	mov    $0x0,%edx
  80042156ca:	48 89 c7             	mov    %rax,%rdi
  80042156cd:	48 b8 af 5a 21 04 80 	movabs $0x8004215aaf,%rax
  80042156d4:	00 00 00 
  80042156d7:	ff d0                	callq  *%rax
  80042156d9:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  80042156dc:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  80042156e0:	74 09                	je     80042156eb <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  80042156e2:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  80042156e3:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  80042156e6:	e9 ba 03 00 00       	jmpq   8004215aa5 <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  80042156eb:	eb 1a                	jmp    8004215707 <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  80042156ed:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  80042156f4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042156f8:	48 01 d0             	add    %rdx,%rax
  80042156fb:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004215702:	e9 85 03 00 00       	jmpq   8004215a8c <_dwarf_lineno_run_program+0x595>
  8004215707:	e9 80 03 00 00       	jmpq   8004215a8c <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  800421570c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215713:	0f b6 00             	movzbl (%rax),%eax
  8004215716:	84 c0                	test   %al,%al
  8004215718:	0f 84 3c 02 00 00    	je     800421595a <_dwarf_lineno_run_program+0x463>
  800421571e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215725:	0f b6 10             	movzbl (%rax),%edx
  8004215728:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421572c:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215730:	38 c2                	cmp    %al,%dl
  8004215732:	0f 83 22 02 00 00    	jae    800421595a <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004215738:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421573f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215743:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  800421574a:	0f b6 00             	movzbl (%rax),%eax
  800421574d:	0f b6 c0             	movzbl %al,%eax
  8004215750:	83 f8 0c             	cmp    $0xc,%eax
  8004215753:	0f 87 fb 01 00 00    	ja     8004215954 <_dwarf_lineno_run_program+0x45d>
  8004215759:	89 c0                	mov    %eax,%eax
  800421575b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004215762:	00 
  8004215763:	48 b8 28 05 22 04 80 	movabs $0x8004220528,%rax
  800421576a:	00 00 00 
  800421576d:	48 01 d0             	add    %rdx,%rax
  8004215770:	48 8b 00             	mov    (%rax),%rax
  8004215773:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  8004215775:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421577c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215780:	73 0a                	jae    800421578c <_dwarf_lineno_run_program+0x295>
  8004215782:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215787:	e9 19 03 00 00       	jmpq   8004215aa5 <_dwarf_lineno_run_program+0x5ae>
  800421578c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215790:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215794:	48 89 10             	mov    %rdx,(%rax)
  8004215797:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421579b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  80042157a2:	00 
  80042157a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157a7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042157ab:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042157af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157b3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042157b7:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042157bb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042157bf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157c3:	48 89 50 20          	mov    %rdx,0x20(%rax)
  80042157c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157cb:	8b 55 c8             	mov    -0x38(%rbp),%edx
  80042157ce:	89 50 28             	mov    %edx,0x28(%rax)
  80042157d1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157d5:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042157d8:	89 50 2c             	mov    %edx,0x2c(%rax)
  80042157db:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157df:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042157e2:	89 50 30             	mov    %edx,0x30(%rax)
  80042157e5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042157e9:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  80042157f0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042157f4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042157f8:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  80042157ff:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  8004215806:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  800421580d:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215814:	e9 3c 01 00 00       	jmpq   8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215819:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215820:	48 89 c7             	mov    %rax,%rdi
  8004215823:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  800421582a:	00 00 00 
  800421582d:	ff d0                	callq  *%rax
					li->li_minlen;
  800421582f:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004215833:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215837:	0f b6 d2             	movzbl %dl,%edx
  800421583a:	48 0f af c2          	imul   %rdx,%rax
  800421583e:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  8004215842:	e9 0e 01 00 00       	jmpq   8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004215847:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  800421584e:	48 89 c7             	mov    %rax,%rdi
  8004215851:	48 b8 fc 16 21 04 80 	movabs $0x80042116fc,%rax
  8004215858:	00 00 00 
  800421585b:	ff d0                	callq  *%rax
  800421585d:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  8004215861:	e9 ef 00 00 00       	jmpq   8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  8004215866:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  800421586d:	48 89 c7             	mov    %rax,%rdi
  8004215870:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004215877:	00 00 00 
  800421587a:	ff d0                	callq  *%rax
  800421587c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  8004215880:	e9 d0 00 00 00       	jmpq   8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  8004215885:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  800421588c:	48 89 c7             	mov    %rax,%rdi
  800421588f:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004215896:	00 00 00 
  8004215899:	ff d0                	callq  *%rax
  800421589b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  800421589f:	e9 b1 00 00 00       	jmpq   8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  80042158a4:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042158a8:	0f 94 c0             	sete   %al
  80042158ab:	0f b6 c0             	movzbl %al,%eax
  80042158ae:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  80042158b1:	e9 9f 00 00 00       	jmpq   8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  80042158b6:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  80042158bd:	e9 93 00 00 00       	jmpq   8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  80042158c2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042158c6:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042158ca:	0f b6 c0             	movzbl %al,%eax
  80042158cd:	ba ff 00 00 00       	mov    $0xff,%edx
  80042158d2:	89 d1                	mov    %edx,%ecx
  80042158d4:	29 c1                	sub    %eax,%ecx
  80042158d6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042158da:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042158de:	0f b6 d8             	movzbl %al,%ebx
  80042158e1:	89 c8                	mov    %ecx,%eax
  80042158e3:	99                   	cltd   
  80042158e4:	f7 fb                	idiv   %ebx
  80042158e6:	89 c2                	mov    %eax,%edx
  80042158e8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042158ec:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  80042158f0:	0f b6 c0             	movzbl %al,%eax
  80042158f3:	0f af c2             	imul   %edx,%eax
  80042158f6:	48 98                	cltq   
  80042158f8:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  80042158fc:	eb 57                	jmp    8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  80042158fe:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215905:	00 00 00 
  8004215908:	48 8b 00             	mov    (%rax),%rax
  800421590b:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421590f:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215916:	be 02 00 00 00       	mov    $0x2,%esi
  800421591b:	48 89 d7             	mov    %rdx,%rdi
  800421591e:	ff d0                	callq  *%rax
  8004215920:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215924:	eb 2f                	jmp    8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  8004215926:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  800421592d:	eb 26                	jmp    8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  800421592f:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  8004215936:	eb 1d                	jmp    8004215955 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004215938:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  800421593f:	48 89 c7             	mov    %rax,%rdi
  8004215942:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004215949:	00 00 00 
  800421594c:	ff d0                	callq  *%rax
  800421594e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  8004215952:	eb 01                	jmp    8004215955 <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  8004215954:	90                   	nop
			}

		} else {
  8004215955:	e9 32 01 00 00       	jmpq   8004215a8c <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  800421595a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421595e:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  8004215962:	0f be c8             	movsbl %al,%ecx
  8004215965:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421596c:	0f b6 00             	movzbl (%rax),%eax
  800421596f:	0f b6 d0             	movzbl %al,%edx
  8004215972:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215976:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  800421597a:	0f b6 c0             	movzbl %al,%eax
  800421597d:	29 c2                	sub    %eax,%edx
  800421597f:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215983:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  8004215987:	0f b6 f0             	movzbl %al,%esi
  800421598a:	89 d0                	mov    %edx,%eax
  800421598c:	99                   	cltd   
  800421598d:	f7 fe                	idiv   %esi
  800421598f:	89 d0                	mov    %edx,%eax
  8004215991:	01 c8                	add    %ecx,%eax
  8004215993:	48 98                	cltq   
  8004215995:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  8004215999:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042159a0:	0f b6 00             	movzbl (%rax),%eax
  80042159a3:	0f b6 d0             	movzbl %al,%edx
  80042159a6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042159aa:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042159ae:	0f b6 c0             	movzbl %al,%eax
  80042159b1:	89 d1                	mov    %edx,%ecx
  80042159b3:	29 c1                	sub    %eax,%ecx
  80042159b5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042159b9:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042159bd:	0f b6 d8             	movzbl %al,%ebx
  80042159c0:	89 c8                	mov    %ecx,%eax
  80042159c2:	99                   	cltd   
  80042159c3:	f7 fb                	idiv   %ebx
  80042159c5:	89 c2                	mov    %eax,%edx
  80042159c7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042159cb:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  80042159cf:	0f b6 c0             	movzbl %al,%eax
  80042159d2:	0f af c2             	imul   %edx,%eax
  80042159d5:	48 98                	cltq   
  80042159d7:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  80042159db:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042159e2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042159e6:	73 0a                	jae    80042159f2 <_dwarf_lineno_run_program+0x4fb>
  80042159e8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042159ed:	e9 b3 00 00 00       	jmpq   8004215aa5 <_dwarf_lineno_run_program+0x5ae>
  80042159f2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042159f6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042159fa:	48 89 10             	mov    %rdx,(%rax)
  80042159fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a01:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215a08:	00 
  8004215a09:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a0d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215a11:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215a15:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a19:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215a1d:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215a21:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215a25:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a29:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215a2d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a31:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215a34:	89 50 28             	mov    %edx,0x28(%rax)
  8004215a37:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a3b:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215a3e:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215a41:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a45:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215a48:	89 50 30             	mov    %edx,0x30(%rax)
  8004215a4b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215a4f:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215a56:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215a5a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215a5e:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004215a65:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004215a6c:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  8004215a73:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004215a7a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215a81:	48 83 c0 01          	add    $0x1,%rax
  8004215a85:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004215a8c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215a93:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004215a9a:	0f 82 e2 fa ff ff    	jb     8004215582 <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004215aa0:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004215aa5:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  8004215aac:	5b                   	pop    %rbx
  8004215aad:	5d                   	pop    %rbp
  8004215aae:	c3                   	retq   

0000008004215aaf <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004215aaf:	55                   	push   %rbp
  8004215ab0:	48 89 e5             	mov    %rsp,%rbp
  8004215ab3:	53                   	push   %rbx
  8004215ab4:	48 83 ec 48          	sub    $0x48,%rsp
  8004215ab8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004215abc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004215ac0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004215ac4:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004215ac8:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004215acc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215ad0:	48 8b 00             	mov    (%rax),%rax
  8004215ad3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004215ad7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215adb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004215adf:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  8004215ae3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215ae7:	48 89 c7             	mov    %rax,%rdi
  8004215aea:	48 b8 66 08 21 04 80 	movabs $0x8004210866,%rax
  8004215af1:	00 00 00 
  8004215af4:	ff d0                	callq  *%rax
  8004215af6:	48 98                	cltq   
  8004215af8:	48 83 c0 01          	add    $0x1,%rax
  8004215afc:	48 01 d8             	add    %rbx,%rax
  8004215aff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  8004215b03:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215b07:	48 89 c7             	mov    %rax,%rdi
  8004215b0a:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004215b11:	00 00 00 
  8004215b14:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  8004215b16:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215b1a:	48 89 c7             	mov    %rax,%rdi
  8004215b1d:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004215b24:	00 00 00 
  8004215b27:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004215b29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215b2d:	48 89 c7             	mov    %rax,%rdi
  8004215b30:	48 b8 8e 17 21 04 80 	movabs $0x800421178e,%rax
  8004215b37:	00 00 00 
  8004215b3a:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004215b3c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215b40:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215b44:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004215b47:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215b4c:	48 83 c4 48          	add    $0x48,%rsp
  8004215b50:	5b                   	pop    %rbx
  8004215b51:	5d                   	pop    %rbp
  8004215b52:	c3                   	retq   

0000008004215b53 <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  8004215b53:	55                   	push   %rbp
  8004215b54:	48 89 e5             	mov    %rsp,%rbp
  8004215b57:	53                   	push   %rbx
  8004215b58:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215b5f:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  8004215b66:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215b6d:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  8004215b74:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004215b7b:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  8004215b82:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  8004215b89:	00 
  8004215b8a:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004215b91:	00 
  8004215b92:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  8004215b99:	00 
  8004215b9a:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004215ba1:	00 
  8004215ba2:	48 b8 90 05 22 04 80 	movabs $0x8004220590,%rax
  8004215ba9:	00 00 00 
  8004215bac:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  8004215bb0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004215bb4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  8004215bb8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004215bbf:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  8004215bc6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  8004215bca:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004215bcf:	75 35                	jne    8004215c06 <_dwarf_lineno_init+0xb3>
  8004215bd1:	48 b9 9c 05 22 04 80 	movabs $0x800422059c,%rcx
  8004215bd8:	00 00 00 
  8004215bdb:	48 ba a7 05 22 04 80 	movabs $0x80042205a7,%rdx
  8004215be2:	00 00 00 
  8004215be5:	be 13 01 00 00       	mov    $0x113,%esi
  8004215bea:	48 bf bc 05 22 04 80 	movabs $0x80042205bc,%rdi
  8004215bf1:	00 00 00 
  8004215bf4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215bf9:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004215c00:	00 00 00 
  8004215c03:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  8004215c06:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215c0d:	00 00 00 
  8004215c10:	48 8b 00             	mov    (%rax),%rax
  8004215c13:	48 85 c0             	test   %rax,%rax
  8004215c16:	75 35                	jne    8004215c4d <_dwarf_lineno_init+0xfa>
  8004215c18:	48 b9 d3 05 22 04 80 	movabs $0x80042205d3,%rcx
  8004215c1f:	00 00 00 
  8004215c22:	48 ba a7 05 22 04 80 	movabs $0x80042205a7,%rdx
  8004215c29:	00 00 00 
  8004215c2c:	be 14 01 00 00       	mov    $0x114,%esi
  8004215c31:	48 bf bc 05 22 04 80 	movabs $0x80042205bc,%rdi
  8004215c38:	00 00 00 
  8004215c3b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215c40:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004215c47:	00 00 00 
  8004215c4a:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215c4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215c51:	48 89 c7             	mov    %rax,%rdi
  8004215c54:	48 b8 1b 2f 21 04 80 	movabs $0x8004212f1b,%rax
  8004215c5b:	00 00 00 
  8004215c5e:	ff d0                	callq  *%rax
  8004215c60:	85 c0                	test   %eax,%eax
  8004215c62:	74 0a                	je     8004215c6e <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  8004215c64:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215c69:	e9 4f 04 00 00       	jmpq   80042160bd <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004215c6e:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004215c75:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  8004215c79:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215c80:	00 00 00 
  8004215c83:	48 8b 00             	mov    (%rax),%rax
  8004215c86:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215c8a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215c8e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215c92:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215c99:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215c9e:	48 89 cf             	mov    %rcx,%rdi
  8004215ca1:	ff d0                	callq  *%rax
  8004215ca3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  8004215ca7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215cac:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004215cb0:	75 37                	jne    8004215ce9 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  8004215cb2:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  8004215cb9:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215cc0:	00 00 00 
  8004215cc3:	48 8b 00             	mov    (%rax),%rax
  8004215cc6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215cca:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215cce:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215cd2:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215cd9:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215cde:	48 89 cf             	mov    %rcx,%rdi
  8004215ce1:	ff d0                	callq  *%rax
  8004215ce3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004215ce7:	eb 07                	jmp    8004215cf0 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004215ce9:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004215cf0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215cf4:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215cf8:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215cff:	48 29 c2             	sub    %rax,%rdx
  8004215d02:	48 89 d0             	mov    %rdx,%rax
  8004215d05:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215d09:	73 0a                	jae    8004215d15 <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215d0b:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215d10:	e9 a8 03 00 00       	jmpq   80042160bd <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  8004215d15:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215d19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215d1d:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215d20:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  8004215d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215d2b:	48 01 d0             	add    %rdx,%rax
  8004215d2e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  8004215d32:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215d39:	00 00 00 
  8004215d3c:	48 8b 00             	mov    (%rax),%rax
  8004215d3f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215d43:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215d47:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215d4b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215d52:	ba 02 00 00 00       	mov    $0x2,%edx
  8004215d57:	48 89 cf             	mov    %rcx,%rdi
  8004215d5a:	ff d0                	callq  *%rax
  8004215d5c:	89 c2                	mov    %eax,%edx
  8004215d5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215d62:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  8004215d66:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215d6d:	00 00 00 
  8004215d70:	48 8b 00             	mov    (%rax),%rax
  8004215d73:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215d77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215d7b:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215d7f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004215d82:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215d89:	48 89 cf             	mov    %rcx,%rdi
  8004215d8c:	ff d0                	callq  *%rax
  8004215d8e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215d92:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  8004215d96:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215d9d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  8004215da1:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215da8:	00 00 00 
  8004215dab:	48 8b 00             	mov    (%rax),%rax
  8004215dae:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215db2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215db6:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215dba:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215dc1:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215dc6:	48 89 cf             	mov    %rcx,%rdi
  8004215dc9:	ff d0                	callq  *%rax
  8004215dcb:	89 c2                	mov    %eax,%edx
  8004215dcd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215dd1:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  8004215dd4:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215ddb:	00 00 00 
  8004215dde:	48 8b 00             	mov    (%rax),%rax
  8004215de1:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215de5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215de9:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215ded:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215df4:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215df9:	48 89 cf             	mov    %rcx,%rdi
  8004215dfc:	ff d0                	callq  *%rax
  8004215dfe:	89 c2                	mov    %eax,%edx
  8004215e00:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e04:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  8004215e07:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215e0e:	00 00 00 
  8004215e11:	48 8b 00             	mov    (%rax),%rax
  8004215e14:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215e18:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215e1c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215e20:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215e27:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215e2c:	48 89 cf             	mov    %rcx,%rdi
  8004215e2f:	ff d0                	callq  *%rax
  8004215e31:	89 c2                	mov    %eax,%edx
  8004215e33:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e37:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004215e3a:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215e41:	00 00 00 
  8004215e44:	48 8b 00             	mov    (%rax),%rax
  8004215e47:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215e4b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215e4f:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215e53:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215e5a:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215e5f:	48 89 cf             	mov    %rcx,%rdi
  8004215e62:	ff d0                	callq  *%rax
  8004215e64:	89 c2                	mov    %eax,%edx
  8004215e66:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e6a:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004215e6d:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215e74:	00 00 00 
  8004215e77:	48 8b 00             	mov    (%rax),%rax
  8004215e7a:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215e7e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215e82:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215e86:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215e8d:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215e92:	48 89 cf             	mov    %rcx,%rdi
  8004215e95:	ff d0                	callq  *%rax
  8004215e97:	89 c2                	mov    %eax,%edx
  8004215e99:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e9d:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  8004215ea0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215ea4:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215ea8:	8d 50 fb             	lea    -0x5(%rax),%edx
  8004215eab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215eaf:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215eb3:	0f b6 c0             	movzbl %al,%eax
  8004215eb6:	83 e8 01             	sub    $0x1,%eax
  8004215eb9:	39 c2                	cmp    %eax,%edx
  8004215ebb:	7d 0c                	jge    8004215ec9 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215ebd:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215ec4:	e9 f1 01 00 00       	jmpq   80042160ba <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  8004215ec9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215ecd:	48 bb 80 c4 6d 04 80 	movabs $0x80046dc480,%rbx
  8004215ed4:	00 00 00 
  8004215ed7:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215edb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  8004215ee2:	eb 41                	jmp    8004215f25 <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  8004215ee4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215ee8:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215eec:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004215eef:	48 98                	cltq   
  8004215ef1:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004215ef5:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215efc:	00 00 00 
  8004215eff:	48 8b 00             	mov    (%rax),%rax
  8004215f02:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215f06:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215f0a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215f0e:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215f15:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215f1a:	48 89 cf             	mov    %rcx,%rdi
  8004215f1d:	ff d0                	callq  *%rax
  8004215f1f:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215f21:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  8004215f25:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215f29:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215f2d:	0f b6 c0             	movzbl %al,%eax
  8004215f30:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  8004215f33:	7f af                	jg     8004215ee4 <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  8004215f35:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215f3c:	00 
	p = ds->ds_data + offset;
  8004215f3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215f41:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215f45:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215f4c:	48 01 d0             	add    %rdx,%rax
  8004215f4f:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  8004215f56:	eb 1f                	jmp    8004215f77 <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  8004215f58:	90                   	nop
  8004215f59:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215f60:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215f64:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004215f6b:	0f b6 00             	movzbl (%rax),%eax
  8004215f6e:	84 c0                	test   %al,%al
  8004215f70:	75 e7                	jne    8004215f59 <_dwarf_lineno_init+0x406>
			;
		length++;
  8004215f72:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  8004215f77:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215f7e:	0f b6 00             	movzbl (%rax),%eax
  8004215f81:	84 c0                	test   %al,%al
  8004215f83:	75 d3                	jne    8004215f58 <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  8004215f85:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215f89:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215f8d:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  8004215f91:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215f98:	48 89 c2             	mov    %rax,%rdx
  8004215f9b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215f9f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215fa3:	48 29 c2             	sub    %rax,%rdx
  8004215fa6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215faa:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215fae:	48 98                	cltq   
  8004215fb0:	48 39 c2             	cmp    %rax,%rdx
  8004215fb3:	7e 0c                	jle    8004215fc1 <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215fb5:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215fbc:	e9 f9 00 00 00       	jmpq   80042160ba <_dwarf_lineno_init+0x567>
	}
	p++;
  8004215fc1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215fc8:	48 83 c0 01          	add    $0x1,%rax
  8004215fcc:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004215fd3:	eb 3c                	jmp    8004216011 <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  8004215fd5:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215fdc:	00 00 00 
  8004215fdf:	48 8b 08             	mov    (%rax),%rcx
  8004215fe2:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004215fe9:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  8004215ff0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215ff4:	49 89 c8             	mov    %rcx,%r8
  8004215ff7:	48 89 d1             	mov    %rdx,%rcx
  8004215ffa:	ba 00 00 00 00       	mov    $0x0,%edx
  8004215fff:	48 89 c7             	mov    %rax,%rdi
  8004216002:	48 b8 af 5a 21 04 80 	movabs $0x8004215aaf,%rax
  8004216009:	00 00 00 
  800421600c:	ff d0                	callq  *%rax
  800421600e:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004216011:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216018:	0f b6 00             	movzbl (%rax),%eax
  800421601b:	84 c0                	test   %al,%al
  800421601d:	75 b6                	jne    8004215fd5 <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  800421601f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216026:	48 83 c0 01          	add    $0x1,%rax
  800421602a:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  8004216031:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216038:	48 89 c2             	mov    %rax,%rdx
  800421603b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421603f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004216043:	48 29 c2             	sub    %rax,%rdx
  8004216046:	48 89 d0             	mov    %rdx,%rax
  8004216049:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  800421604d:	48 89 c2             	mov    %rax,%rdx
  8004216050:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216054:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216058:	48 39 c2             	cmp    %rax,%rdx
  800421605b:	74 09                	je     8004216066 <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  800421605d:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004216064:	eb 54                	jmp    80042160ba <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  8004216066:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421606a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800421606e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216072:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004216076:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421607d:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  8004216084:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  800421608b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800421608f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216093:	4d 89 c1             	mov    %r8,%r9
  8004216096:	49 89 f8             	mov    %rdi,%r8
  8004216099:	48 89 c7             	mov    %rax,%rdi
  800421609c:	48 b8 f7 54 21 04 80 	movabs $0x80042154f7,%rax
  80042160a3:	00 00 00 
  80042160a6:	ff d0                	callq  *%rax
  80042160a8:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  80042160ab:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042160af:	74 02                	je     80042160b3 <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  80042160b1:	eb 07                	jmp    80042160ba <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  80042160b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042160b8:	eb 03                	jmp    80042160bd <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  80042160ba:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  80042160bd:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  80042160c4:	5b                   	pop    %rbx
  80042160c5:	5d                   	pop    %rbp
  80042160c6:	c3                   	retq   

00000080042160c7 <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  80042160c7:	55                   	push   %rbp
  80042160c8:	48 89 e5             	mov    %rsp,%rbp
  80042160cb:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  80042160d2:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  80042160d9:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  80042160e0:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  80042160e7:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  80042160ee:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  80042160f5:	00 
  80042160f6:	75 35                	jne    800421612d <dwarf_srclines+0x66>
  80042160f8:	48 b9 df 05 22 04 80 	movabs $0x80042205df,%rcx
  80042160ff:	00 00 00 
  8004216102:	48 ba a7 05 22 04 80 	movabs $0x80042205a7,%rdx
  8004216109:	00 00 00 
  800421610c:	be 9a 01 00 00       	mov    $0x19a,%esi
  8004216111:	48 bf bc 05 22 04 80 	movabs $0x80042205bc,%rdi
  8004216118:	00 00 00 
  800421611b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216120:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004216127:	00 00 00 
  800421612a:	41 ff d0             	callq  *%r8
	assert(linebuf);
  800421612d:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004216134:	00 
  8004216135:	75 35                	jne    800421616c <dwarf_srclines+0xa5>
  8004216137:	48 b9 e3 05 22 04 80 	movabs $0x80042205e3,%rcx
  800421613e:	00 00 00 
  8004216141:	48 ba a7 05 22 04 80 	movabs $0x80042205a7,%rdx
  8004216148:	00 00 00 
  800421614b:	be 9b 01 00 00       	mov    $0x19b,%esi
  8004216150:	48 bf bc 05 22 04 80 	movabs $0x80042205bc,%rdi
  8004216157:	00 00 00 
  800421615a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421615f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004216166:	00 00 00 
  8004216169:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  800421616c:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  8004216173:	ba 88 00 00 00       	mov    $0x88,%edx
  8004216178:	be 00 00 00 00       	mov    $0x0,%esi
  800421617d:	48 89 c7             	mov    %rax,%rdi
  8004216180:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004216187:	00 00 00 
  800421618a:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  800421618c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216193:	be 10 00 00 00       	mov    $0x10,%esi
  8004216198:	48 89 c7             	mov    %rax,%rdi
  800421619b:	48 b8 a0 2a 21 04 80 	movabs $0x8004212aa0,%rax
  80042161a2:	00 00 00 
  80042161a5:	ff d0                	callq  *%rax
  80042161a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042161ab:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042161b0:	75 0a                	jne    80042161bc <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  80042161b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042161b7:	e9 84 00 00 00       	jmpq   8004216240 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  80042161bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042161c0:	48 8b 70 28          	mov    0x28(%rax),%rsi
  80042161c4:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  80042161cb:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  80042161d2:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  80042161d9:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042161e0:	49 89 f8             	mov    %rdi,%r8
  80042161e3:	48 89 c7             	mov    %rax,%rdi
  80042161e6:	48 b8 53 5b 21 04 80 	movabs $0x8004215b53,%rax
  80042161ed:	00 00 00 
  80042161f0:	ff d0                	callq  *%rax
  80042161f2:	85 c0                	test   %eax,%eax
  80042161f4:	74 07                	je     80042161fd <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  80042161f6:	b8 01 00 00 00       	mov    $0x1,%eax
  80042161fb:	eb 43                	jmp    8004216240 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  80042161fd:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004216204:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004216208:	48 89 10             	mov    %rdx,(%rax)
  800421620b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421620f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216213:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004216217:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421621b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421621f:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216223:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216227:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800421622b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421622f:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216233:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216237:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  800421623b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004216240:	c9                   	leaveq 
  8004216241:	c3                   	retq   

0000008004216242 <_dwarf_find_section>:
  8004216242:	55                   	push   %rbp
  8004216243:	48 89 e5             	mov    %rsp,%rbp
  8004216246:	48 83 ec 20          	sub    $0x20,%rsp
  800421624a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421624e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004216255:	00 
  8004216256:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421625d:	eb 57                	jmp    80042162b6 <_dwarf_find_section+0x74>
  800421625f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216266:	00 00 00 
  8004216269:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421626c:	48 63 d2             	movslq %edx,%rdx
  800421626f:	48 c1 e2 05          	shl    $0x5,%rdx
  8004216273:	48 01 d0             	add    %rdx,%rax
  8004216276:	48 8b 00             	mov    (%rax),%rax
  8004216279:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421627d:	48 89 d6             	mov    %rdx,%rsi
  8004216280:	48 89 c7             	mov    %rax,%rdi
  8004216283:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  800421628a:	00 00 00 
  800421628d:	ff d0                	callq  *%rax
  800421628f:	85 c0                	test   %eax,%eax
  8004216291:	75 1f                	jne    80042162b2 <_dwarf_find_section+0x70>
  8004216293:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216296:	48 98                	cltq   
  8004216298:	48 c1 e0 05          	shl    $0x5,%rax
  800421629c:	48 89 c2             	mov    %rax,%rdx
  800421629f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042162a6:	00 00 00 
  80042162a9:	48 01 d0             	add    %rdx,%rax
  80042162ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042162b0:	eb 0a                	jmp    80042162bc <_dwarf_find_section+0x7a>
  80042162b2:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042162b6:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042162ba:	7e a3                	jle    800421625f <_dwarf_find_section+0x1d>
  80042162bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042162c0:	c9                   	leaveq 
  80042162c1:	c3                   	retq   

00000080042162c2 <find_debug_sections>:
  80042162c2:	55                   	push   %rbp
  80042162c3:	48 89 e5             	mov    %rsp,%rbp
  80042162c6:	48 83 ec 40          	sub    $0x40,%rsp
  80042162ca:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042162ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042162d2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042162d6:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  80042162dd:	00 
  80042162de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042162e2:	48 8b 50 28          	mov    0x28(%rax),%rdx
  80042162e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042162ea:	48 01 d0             	add    %rdx,%rax
  80042162ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042162f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042162f5:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  80042162f9:	0f b7 c0             	movzwl %ax,%eax
  80042162fc:	48 c1 e0 06          	shl    $0x6,%rax
  8004216300:	48 89 c2             	mov    %rax,%rdx
  8004216303:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216307:	48 01 d0             	add    %rdx,%rax
  800421630a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421630e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216312:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004216316:	0f b7 c0             	movzwl %ax,%eax
  8004216319:	48 c1 e0 06          	shl    $0x6,%rax
  800421631d:	48 89 c2             	mov    %rax,%rdx
  8004216320:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216324:	48 01 d0             	add    %rdx,%rax
  8004216327:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421632b:	e9 4b 02 00 00       	jmpq   800421657b <find_debug_sections+0x2b9>
  8004216330:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216334:	8b 00                	mov    (%rax),%eax
  8004216336:	89 c2                	mov    %eax,%edx
  8004216338:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421633c:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004216340:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216344:	48 01 c8             	add    %rcx,%rax
  8004216347:	48 01 d0             	add    %rdx,%rax
  800421634a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421634e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216352:	48 be eb 05 22 04 80 	movabs $0x80042205eb,%rsi
  8004216359:	00 00 00 
  800421635c:	48 89 c7             	mov    %rax,%rdi
  800421635f:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  8004216366:	00 00 00 
  8004216369:	ff d0                	callq  *%rax
  800421636b:	85 c0                	test   %eax,%eax
  800421636d:	75 4b                	jne    80042163ba <find_debug_sections+0xf8>
  800421636f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216373:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421637a:	00 00 00 
  800421637d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216381:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216388:	00 00 00 
  800421638b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421638f:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216393:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216397:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421639b:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042163a2:	00 00 00 
  80042163a5:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042163a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042163ad:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042163b1:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042163b5:	e9 bc 01 00 00       	jmpq   8004216576 <find_debug_sections+0x2b4>
  80042163ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042163be:	48 be f7 05 22 04 80 	movabs $0x80042205f7,%rsi
  80042163c5:	00 00 00 
  80042163c8:	48 89 c7             	mov    %rax,%rdi
  80042163cb:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  80042163d2:	00 00 00 
  80042163d5:	ff d0                	callq  *%rax
  80042163d7:	85 c0                	test   %eax,%eax
  80042163d9:	75 4b                	jne    8004216426 <find_debug_sections+0x164>
  80042163db:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042163df:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042163e6:	00 00 00 
  80042163e9:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042163ed:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042163f4:	00 00 00 
  80042163f7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042163fb:	48 89 50 30          	mov    %rdx,0x30(%rax)
  80042163ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216403:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216407:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421640e:	00 00 00 
  8004216411:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004216415:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216419:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421641d:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216421:	e9 50 01 00 00       	jmpq   8004216576 <find_debug_sections+0x2b4>
  8004216426:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421642a:	48 be 0f 06 22 04 80 	movabs $0x800422060f,%rsi
  8004216431:	00 00 00 
  8004216434:	48 89 c7             	mov    %rax,%rdi
  8004216437:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  800421643e:	00 00 00 
  8004216441:	ff d0                	callq  *%rax
  8004216443:	85 c0                	test   %eax,%eax
  8004216445:	75 4b                	jne    8004216492 <find_debug_sections+0x1d0>
  8004216447:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421644b:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216452:	00 00 00 
  8004216455:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216459:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216460:	00 00 00 
  8004216463:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004216467:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800421646b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421646f:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216473:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421647a:	00 00 00 
  800421647d:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004216481:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216485:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216489:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  800421648d:	e9 e4 00 00 00       	jmpq   8004216576 <find_debug_sections+0x2b4>
  8004216492:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216496:	48 be 05 06 22 04 80 	movabs $0x8004220605,%rsi
  800421649d:	00 00 00 
  80042164a0:	48 89 c7             	mov    %rax,%rdi
  80042164a3:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  80042164aa:	00 00 00 
  80042164ad:	ff d0                	callq  *%rax
  80042164af:	85 c0                	test   %eax,%eax
  80042164b1:	75 53                	jne    8004216506 <find_debug_sections+0x244>
  80042164b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042164b7:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042164bb:	48 89 c2             	mov    %rax,%rdx
  80042164be:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042164c5:	00 00 00 
  80042164c8:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042164cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042164d0:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042164d4:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042164db:	00 00 00 
  80042164de:	48 89 50 50          	mov    %rdx,0x50(%rax)
  80042164e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042164e6:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042164ea:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042164f1:	00 00 00 
  80042164f4:	48 89 50 58          	mov    %rdx,0x58(%rax)
  80042164f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042164fc:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216500:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216504:	eb 70                	jmp    8004216576 <find_debug_sections+0x2b4>
  8004216506:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421650a:	48 be 1b 06 22 04 80 	movabs $0x800422061b,%rsi
  8004216511:	00 00 00 
  8004216514:	48 89 c7             	mov    %rax,%rdi
  8004216517:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  800421651e:	00 00 00 
  8004216521:	ff d0                	callq  *%rax
  8004216523:	85 c0                	test   %eax,%eax
  8004216525:	75 4f                	jne    8004216576 <find_debug_sections+0x2b4>
  8004216527:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421652b:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216532:	00 00 00 
  8004216535:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800421653c:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216543:	00 00 00 
  8004216546:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421654a:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216551:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216555:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216559:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216560:	00 00 00 
  8004216563:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800421656a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421656e:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216572:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216576:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  800421657b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421657f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004216583:	0f 82 a7 fd ff ff    	jb     8004216330 <find_debug_sections+0x6e>
  8004216589:	c9                   	leaveq 
  800421658a:	c3                   	retq   

000000800421658b <read_section_headers>:
  800421658b:	55                   	push   %rbp
  800421658c:	48 89 e5             	mov    %rsp,%rbp
  800421658f:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  8004216596:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  800421659d:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  80042165a4:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  80042165ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042165b0:	ba 14 00 00 00       	mov    $0x14,%edx
  80042165b5:	48 89 f7             	mov    %rsi,%rdi
  80042165b8:	48 89 d1             	mov    %rdx,%rcx
  80042165bb:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  80042165be:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  80042165c5:	00 
  80042165c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042165ca:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  80042165d1:	48 01 d0             	add    %rdx,%rax
  80042165d4:	48 83 e8 01          	sub    $0x1,%rax
  80042165d8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042165dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042165e0:	ba 00 00 00 00       	mov    $0x0,%edx
  80042165e5:	48 f7 75 e8          	divq   -0x18(%rbp)
  80042165e9:	48 89 d0             	mov    %rdx,%rax
  80042165ec:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042165f0:	48 29 c2             	sub    %rax,%rdx
  80042165f3:	48 89 d0             	mov    %rdx,%rax
  80042165f6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042165fa:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004216601:	00 00 00 00 
  8004216605:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216609:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421660d:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004216614:	00 
  8004216615:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800421661c:	00 00 00 
  800421661f:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004216626:	75 11                	jne    8004216639 <read_section_headers+0xae>
  8004216628:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421662f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004216633:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216637:	eb 26                	jmp    800421665f <read_section_headers+0xd4>
  8004216639:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216640:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004216644:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421664b:	48 01 c2             	add    %rax,%rdx
  800421664e:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004216655:	ff ff ff 
  8004216658:	48 01 d0             	add    %rdx,%rax
  800421665b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421665f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216666:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  800421666a:	0f b7 c0             	movzwl %ax,%eax
  800421666d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004216670:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216677:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  800421667b:	0f b7 c0             	movzwl %ax,%eax
  800421667e:	89 45 c0             	mov    %eax,-0x40(%rbp)
  8004216681:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216688:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421668c:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421668f:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  8004216693:	48 63 f0             	movslq %eax,%rsi
  8004216696:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421669a:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042166a1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042166a5:	48 89 c7             	mov    %rax,%rdi
  80042166a8:	48 b8 ca 6c 21 04 80 	movabs $0x8004216cca,%rax
  80042166af:	00 00 00 
  80042166b2:	ff d0                	callq  *%rax
  80042166b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166b8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042166bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042166c0:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042166c6:	48 89 c2             	mov    %rax,%rdx
  80042166c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166cd:	48 29 d0             	sub    %rdx,%rax
  80042166d0:	48 89 c2             	mov    %rax,%rdx
  80042166d3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042166d7:	48 01 d0             	add    %rdx,%rax
  80042166da:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042166de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042166e5:	eb 24                	jmp    800421670b <read_section_headers+0x180>
  80042166e7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042166ea:	48 98                	cltq   
  80042166ec:	48 c1 e0 06          	shl    $0x6,%rax
  80042166f0:	48 89 c2             	mov    %rax,%rdx
  80042166f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042166f7:	48 01 c2             	add    %rax,%rdx
  80042166fa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042166fd:	48 98                	cltq   
  80042166ff:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004216706:	ff 
  8004216707:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421670b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421670e:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216711:	7c d4                	jl     80042166e7 <read_section_headers+0x15c>
  8004216713:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216717:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  800421671b:	0f b7 c0             	movzwl %ax,%eax
  800421671e:	48 98                	cltq   
  8004216720:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216727:	ff 
  8004216728:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421672c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216733:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216737:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421673b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421673f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216743:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216747:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421674e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216752:	48 01 c8             	add    %rcx,%rax
  8004216755:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421675c:	48 89 c7             	mov    %rax,%rdi
  800421675f:	48 b8 ca 6c 21 04 80 	movabs $0x8004216cca,%rax
  8004216766:	00 00 00 
  8004216769:	ff d0                	callq  *%rax
  800421676b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421676f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216773:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216777:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421677b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800421677f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004216783:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216789:	48 29 c2             	sub    %rax,%rdx
  800421678c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216790:	48 01 c2             	add    %rax,%rdx
  8004216793:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216797:	48 01 d0             	add    %rdx,%rax
  800421679a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800421679e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042167a5:	e9 04 05 00 00       	jmpq   8004216cae <read_section_headers+0x723>
  80042167aa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042167ad:	48 98                	cltq   
  80042167af:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042167b6:	ff 
  80042167b7:	8b 00                	mov    (%rax),%eax
  80042167b9:	89 c2                	mov    %eax,%edx
  80042167bb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042167bf:	48 01 d0             	add    %rdx,%rax
  80042167c2:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042167c6:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  80042167cd:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042167d2:	48 85 c0             	test   %rax,%rax
  80042167d5:	74 35                	je     800421680c <read_section_headers+0x281>
  80042167d7:	48 b9 26 06 22 04 80 	movabs $0x8004220626,%rcx
  80042167de:	00 00 00 
  80042167e1:	48 ba 3f 06 22 04 80 	movabs $0x800422063f,%rdx
  80042167e8:	00 00 00 
  80042167eb:	be 8a 00 00 00       	mov    $0x8a,%esi
  80042167f0:	48 bf 54 06 22 04 80 	movabs $0x8004220654,%rdi
  80042167f7:	00 00 00 
  80042167fa:	b8 00 00 00 00       	mov    $0x0,%eax
  80042167ff:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004216806:	00 00 00 
  8004216809:	41 ff d0             	callq  *%r8
  800421680c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216813:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216817:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800421681b:	48 be eb 05 22 04 80 	movabs $0x80042205eb,%rsi
  8004216822:	00 00 00 
  8004216825:	48 89 c7             	mov    %rax,%rdi
  8004216828:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  800421682f:	00 00 00 
  8004216832:	ff d0                	callq  *%rax
  8004216834:	85 c0                	test   %eax,%eax
  8004216836:	0f 85 d8 00 00 00    	jne    8004216914 <read_section_headers+0x389>
  800421683c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421683f:	48 98                	cltq   
  8004216841:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216848:	ff 
  8004216849:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421684d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216850:	48 98                	cltq   
  8004216852:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216859:	ff 
  800421685a:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421685e:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216865:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216869:	48 01 c8             	add    %rcx,%rax
  800421686c:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216873:	48 89 c7             	mov    %rax,%rdi
  8004216876:	48 b8 ca 6c 21 04 80 	movabs $0x8004216cca,%rax
  800421687d:	00 00 00 
  8004216880:	ff d0                	callq  *%rax
  8004216882:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216885:	48 98                	cltq   
  8004216887:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421688e:	ff 
  800421688f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216893:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216896:	48 98                	cltq   
  8004216898:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421689f:	ff 
  80042168a0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042168a4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042168a8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042168ac:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042168b2:	48 29 c2             	sub    %rax,%rdx
  80042168b5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042168b9:	48 01 c2             	add    %rax,%rdx
  80042168bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042168c0:	48 01 c2             	add    %rax,%rdx
  80042168c3:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042168ca:	00 00 00 
  80042168cd:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042168d1:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042168d8:	00 00 00 
  80042168db:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042168df:	48 89 c2             	mov    %rax,%rdx
  80042168e2:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042168e9:	00 00 00 
  80042168ec:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042168f0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042168f3:	48 98                	cltq   
  80042168f5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042168fc:	ff 
  80042168fd:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216901:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216908:	00 00 00 
  800421690b:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421690f:	e9 96 03 00 00       	jmpq   8004216caa <read_section_headers+0x71f>
  8004216914:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216918:	48 be f7 05 22 04 80 	movabs $0x80042205f7,%rsi
  800421691f:	00 00 00 
  8004216922:	48 89 c7             	mov    %rax,%rdi
  8004216925:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  800421692c:	00 00 00 
  800421692f:	ff d0                	callq  *%rax
  8004216931:	85 c0                	test   %eax,%eax
  8004216933:	0f 85 de 00 00 00    	jne    8004216a17 <read_section_headers+0x48c>
  8004216939:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421693c:	48 98                	cltq   
  800421693e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216945:	ff 
  8004216946:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421694a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421694d:	48 98                	cltq   
  800421694f:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216956:	ff 
  8004216957:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421695b:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216962:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216966:	48 01 c8             	add    %rcx,%rax
  8004216969:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216970:	48 89 c7             	mov    %rax,%rdi
  8004216973:	48 b8 ca 6c 21 04 80 	movabs $0x8004216cca,%rax
  800421697a:	00 00 00 
  800421697d:	ff d0                	callq  *%rax
  800421697f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216982:	48 98                	cltq   
  8004216984:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421698b:	ff 
  800421698c:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216990:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216993:	48 98                	cltq   
  8004216995:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421699c:	ff 
  800421699d:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042169a1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042169a8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042169af:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042169b5:	48 29 c2             	sub    %rax,%rdx
  80042169b8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042169bc:	48 01 c2             	add    %rax,%rdx
  80042169bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042169c3:	48 01 c2             	add    %rax,%rdx
  80042169c6:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042169cd:	00 00 00 
  80042169d0:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042169d4:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042169db:	00 00 00 
  80042169de:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042169e2:	48 89 c2             	mov    %rax,%rdx
  80042169e5:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042169ec:	00 00 00 
  80042169ef:	48 89 50 30          	mov    %rdx,0x30(%rax)
  80042169f3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169f6:	48 98                	cltq   
  80042169f8:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042169ff:	ff 
  8004216a00:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216a04:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216a0b:	00 00 00 
  8004216a0e:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004216a12:	e9 93 02 00 00       	jmpq   8004216caa <read_section_headers+0x71f>
  8004216a17:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216a1b:	48 be 0f 06 22 04 80 	movabs $0x800422060f,%rsi
  8004216a22:	00 00 00 
  8004216a25:	48 89 c7             	mov    %rax,%rdi
  8004216a28:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  8004216a2f:	00 00 00 
  8004216a32:	ff d0                	callq  *%rax
  8004216a34:	85 c0                	test   %eax,%eax
  8004216a36:	0f 85 de 00 00 00    	jne    8004216b1a <read_section_headers+0x58f>
  8004216a3c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a3f:	48 98                	cltq   
  8004216a41:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a48:	ff 
  8004216a49:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216a4d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a50:	48 98                	cltq   
  8004216a52:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a59:	ff 
  8004216a5a:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216a5e:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216a65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a69:	48 01 c8             	add    %rcx,%rax
  8004216a6c:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216a73:	48 89 c7             	mov    %rax,%rdi
  8004216a76:	48 b8 ca 6c 21 04 80 	movabs $0x8004216cca,%rax
  8004216a7d:	00 00 00 
  8004216a80:	ff d0                	callq  *%rax
  8004216a82:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a85:	48 98                	cltq   
  8004216a87:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a8e:	ff 
  8004216a8f:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216a93:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a96:	48 98                	cltq   
  8004216a98:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a9f:	ff 
  8004216aa0:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216aa4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004216aab:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004216ab2:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216ab8:	48 29 c2             	sub    %rax,%rdx
  8004216abb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216abf:	48 01 c2             	add    %rax,%rdx
  8004216ac2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216ac6:	48 01 c2             	add    %rax,%rdx
  8004216ac9:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216ad0:	00 00 00 
  8004216ad3:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216ad7:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216ade:	00 00 00 
  8004216ae1:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004216ae5:	48 89 c2             	mov    %rax,%rdx
  8004216ae8:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216aef:	00 00 00 
  8004216af2:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216af6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216af9:	48 98                	cltq   
  8004216afb:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b02:	ff 
  8004216b03:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216b07:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b0e:	00 00 00 
  8004216b11:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004216b15:	e9 90 01 00 00       	jmpq   8004216caa <read_section_headers+0x71f>
  8004216b1a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216b1e:	48 be 05 06 22 04 80 	movabs $0x8004220605,%rsi
  8004216b25:	00 00 00 
  8004216b28:	48 89 c7             	mov    %rax,%rdi
  8004216b2b:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  8004216b32:	00 00 00 
  8004216b35:	ff d0                	callq  *%rax
  8004216b37:	85 c0                	test   %eax,%eax
  8004216b39:	75 65                	jne    8004216ba0 <read_section_headers+0x615>
  8004216b3b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b3e:	48 98                	cltq   
  8004216b40:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b47:	ff 
  8004216b48:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216b4c:	48 89 c2             	mov    %rax,%rdx
  8004216b4f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b56:	00 00 00 
  8004216b59:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216b5d:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b64:	00 00 00 
  8004216b67:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216b6b:	48 89 c2             	mov    %rax,%rdx
  8004216b6e:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b75:	00 00 00 
  8004216b78:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216b7c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b7f:	48 98                	cltq   
  8004216b81:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b88:	ff 
  8004216b89:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216b8d:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b94:	00 00 00 
  8004216b97:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216b9b:	e9 0a 01 00 00       	jmpq   8004216caa <read_section_headers+0x71f>
  8004216ba0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216ba4:	48 be 1b 06 22 04 80 	movabs $0x800422061b,%rsi
  8004216bab:	00 00 00 
  8004216bae:	48 89 c7             	mov    %rax,%rdi
  8004216bb1:	48 b8 34 0a 21 04 80 	movabs $0x8004210a34,%rax
  8004216bb8:	00 00 00 
  8004216bbb:	ff d0                	callq  *%rax
  8004216bbd:	85 c0                	test   %eax,%eax
  8004216bbf:	0f 85 e5 00 00 00    	jne    8004216caa <read_section_headers+0x71f>
  8004216bc5:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216bc8:	48 98                	cltq   
  8004216bca:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216bd1:	ff 
  8004216bd2:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216bd6:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216bd9:	48 98                	cltq   
  8004216bdb:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216be2:	ff 
  8004216be3:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216be7:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216bee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216bf2:	48 01 c8             	add    %rcx,%rax
  8004216bf5:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216bfc:	48 89 c7             	mov    %rax,%rdi
  8004216bff:	48 b8 ca 6c 21 04 80 	movabs $0x8004216cca,%rax
  8004216c06:	00 00 00 
  8004216c09:	ff d0                	callq  *%rax
  8004216c0b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c0e:	48 98                	cltq   
  8004216c10:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c17:	ff 
  8004216c18:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216c1c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c1f:	48 98                	cltq   
  8004216c21:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c28:	ff 
  8004216c29:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216c2d:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004216c34:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216c3b:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216c41:	48 29 c2             	sub    %rax,%rdx
  8004216c44:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216c48:	48 01 c2             	add    %rax,%rdx
  8004216c4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c4f:	48 01 c2             	add    %rax,%rdx
  8004216c52:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216c59:	00 00 00 
  8004216c5c:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216c63:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216c6a:	00 00 00 
  8004216c6d:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004216c74:	48 89 c2             	mov    %rax,%rdx
  8004216c77:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216c7e:	00 00 00 
  8004216c81:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216c88:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c8b:	48 98                	cltq   
  8004216c8d:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c94:	ff 
  8004216c95:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216c99:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216ca0:	00 00 00 
  8004216ca3:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216caa:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216cae:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216cb1:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216cb4:	0f 8c f0 fa ff ff    	jl     80042167aa <read_section_headers+0x21f>
  8004216cba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216cbe:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216cc5:	48 01 d0             	add    %rdx,%rax
  8004216cc8:	c9                   	leaveq 
  8004216cc9:	c3                   	retq   

0000008004216cca <readseg>:
  8004216cca:	55                   	push   %rbp
  8004216ccb:	48 89 e5             	mov    %rsp,%rbp
  8004216cce:	48 83 ec 30          	sub    $0x30,%rsp
  8004216cd2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216cd6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004216cda:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004216cde:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004216ce2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216ce6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216cea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216cee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216cf2:	48 01 d0             	add    %rdx,%rax
  8004216cf5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216cf9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216cfd:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216d02:	48 85 c0             	test   %rax,%rax
  8004216d05:	74 35                	je     8004216d3c <readseg+0x72>
  8004216d07:	48 b9 65 06 22 04 80 	movabs $0x8004220665,%rcx
  8004216d0e:	00 00 00 
  8004216d11:	48 ba 3f 06 22 04 80 	movabs $0x800422063f,%rdx
  8004216d18:	00 00 00 
  8004216d1b:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216d20:	48 bf 54 06 22 04 80 	movabs $0x8004220654,%rdi
  8004216d27:	00 00 00 
  8004216d2a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216d2f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004216d36:	00 00 00 
  8004216d39:	41 ff d0             	callq  *%r8
  8004216d3c:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  8004216d43:	ff 
  8004216d44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d48:	48 c1 e8 09          	shr    $0x9,%rax
  8004216d4c:	48 83 c0 01          	add    $0x1,%rax
  8004216d50:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216d54:	eb 3c                	jmp    8004216d92 <readseg+0xc8>
  8004216d56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216d5a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216d5e:	48 89 d6             	mov    %rdx,%rsi
  8004216d61:	48 89 c7             	mov    %rax,%rdi
  8004216d64:	48 b8 5a 6e 21 04 80 	movabs $0x8004216e5a,%rax
  8004216d6b:	00 00 00 
  8004216d6e:	ff d0                	callq  *%rax
  8004216d70:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  8004216d77:	00 
  8004216d78:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216d7c:	48 8b 00             	mov    (%rax),%rax
  8004216d7f:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216d86:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216d8a:	48 89 10             	mov    %rdx,(%rax)
  8004216d8d:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004216d92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216d96:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004216d9a:	72 ba                	jb     8004216d56 <readseg+0x8c>
  8004216d9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216da0:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216da5:	48 89 c2             	mov    %rax,%rdx
  8004216da8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216dac:	48 01 d0             	add    %rdx,%rax
  8004216daf:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  8004216db5:	76 2f                	jbe    8004216de6 <readseg+0x11c>
  8004216db7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216dbb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216dbf:	48 89 d6             	mov    %rdx,%rsi
  8004216dc2:	48 89 c7             	mov    %rax,%rdi
  8004216dc5:	48 b8 5a 6e 21 04 80 	movabs $0x8004216e5a,%rax
  8004216dcc:	00 00 00 
  8004216dcf:	ff d0                	callq  *%rax
  8004216dd1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216dd5:	48 8b 00             	mov    (%rax),%rax
  8004216dd8:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216ddf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216de3:	48 89 10             	mov    %rdx,(%rax)
  8004216de6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216dea:	48 8b 00             	mov    (%rax),%rax
  8004216ded:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216df2:	48 85 c0             	test   %rax,%rax
  8004216df5:	74 35                	je     8004216e2c <readseg+0x162>
  8004216df7:	48 b9 78 06 22 04 80 	movabs $0x8004220678,%rcx
  8004216dfe:	00 00 00 
  8004216e01:	48 ba 3f 06 22 04 80 	movabs $0x800422063f,%rdx
  8004216e08:	00 00 00 
  8004216e0b:	be da 00 00 00       	mov    $0xda,%esi
  8004216e10:	48 bf 54 06 22 04 80 	movabs $0x8004220654,%rdi
  8004216e17:	00 00 00 
  8004216e1a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216e1f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004216e26:	00 00 00 
  8004216e29:	41 ff d0             	callq  *%r8
  8004216e2c:	c9                   	leaveq 
  8004216e2d:	c3                   	retq   

0000008004216e2e <waitdisk>:
  8004216e2e:	55                   	push   %rbp
  8004216e2f:	48 89 e5             	mov    %rsp,%rbp
  8004216e32:	48 83 ec 10          	sub    $0x10,%rsp
  8004216e36:	90                   	nop
  8004216e37:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216e3e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216e41:	89 c2                	mov    %eax,%edx
  8004216e43:	ec                   	in     (%dx),%al
  8004216e44:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  8004216e47:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216e4b:	0f b6 c0             	movzbl %al,%eax
  8004216e4e:	25 c0 00 00 00       	and    $0xc0,%eax
  8004216e53:	83 f8 40             	cmp    $0x40,%eax
  8004216e56:	75 df                	jne    8004216e37 <waitdisk+0x9>
  8004216e58:	c9                   	leaveq 
  8004216e59:	c3                   	retq   

0000008004216e5a <readsect>:
  8004216e5a:	55                   	push   %rbp
  8004216e5b:	48 89 e5             	mov    %rsp,%rbp
  8004216e5e:	48 83 ec 60          	sub    $0x60,%rsp
  8004216e62:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004216e66:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004216e6a:	48 b8 2e 6e 21 04 80 	movabs $0x8004216e2e,%rax
  8004216e71:	00 00 00 
  8004216e74:	ff d0                	callq  *%rax
  8004216e76:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  8004216e7d:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216e81:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216e85:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004216e88:	ee                   	out    %al,(%dx)
  8004216e89:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216e8d:	0f b6 c0             	movzbl %al,%eax
  8004216e90:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  8004216e97:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004216e9a:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004216e9e:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216ea1:	ee                   	out    %al,(%dx)
  8004216ea2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ea6:	48 c1 e8 08          	shr    $0x8,%rax
  8004216eaa:	0f b6 c0             	movzbl %al,%eax
  8004216ead:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  8004216eb4:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004216eb7:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004216ebb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216ebe:	ee                   	out    %al,(%dx)
  8004216ebf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ec3:	48 c1 e8 10          	shr    $0x10,%rax
  8004216ec7:	0f b6 c0             	movzbl %al,%eax
  8004216eca:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  8004216ed1:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004216ed4:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004216ed8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004216edb:	ee                   	out    %al,(%dx)
  8004216edc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ee0:	48 c1 e8 18          	shr    $0x18,%rax
  8004216ee4:	83 c8 e0             	or     $0xffffffe0,%eax
  8004216ee7:	0f b6 c0             	movzbl %al,%eax
  8004216eea:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  8004216ef1:	88 45 db             	mov    %al,-0x25(%rbp)
  8004216ef4:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004216ef8:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216efb:	ee                   	out    %al,(%dx)
  8004216efc:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  8004216f03:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004216f07:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004216f0b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004216f0e:	ee                   	out    %al,(%dx)
  8004216f0f:	48 b8 2e 6e 21 04 80 	movabs $0x8004216e2e,%rax
  8004216f16:	00 00 00 
  8004216f19:	ff d0                	callq  *%rax
  8004216f1b:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  8004216f22:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216f26:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004216f2a:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  8004216f31:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004216f34:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004216f38:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004216f3b:	48 89 ce             	mov    %rcx,%rsi
  8004216f3e:	48 89 f7             	mov    %rsi,%rdi
  8004216f41:	89 c1                	mov    %eax,%ecx
  8004216f43:	fc                   	cld    
  8004216f44:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  8004216f46:	89 c8                	mov    %ecx,%eax
  8004216f48:	48 89 fe             	mov    %rdi,%rsi
  8004216f4b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004216f4f:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004216f52:	c9                   	leaveq 
  8004216f53:	c3                   	retq   
  8004216f54:	0f 1f 40 00          	nopl   0x0(%rax)

0000008004216f58 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004216f58:	fa                   	cli    
	xorw    %ax, %ax
  8004216f59:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  8004216f5b:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216f5d:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216f5f:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004216f61:	0f 01 16             	lgdt   (%rsi)
  8004216f64:	e0 70                	loopne 8004216fd6 <start64+0x10>
	movl    %cr0, %eax
  8004216f66:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216f69:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  8004216f6d:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004216f70:	ea                   	(bad)  
  8004216f71:	1d                   	.byte 0x1d
  8004216f72:	70 08                	jo     8004216f7c <start32+0x7>
	...

0000008004216f75 <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  8004216f75:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216f79:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216f7b:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216f7d:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216f7f:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004216f83:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004216f85:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
  8004216f87:	b8 20 00 00 00       	mov    $0x20,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
#endif

	movl %eax,%cr4
  8004216f8c:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  8004216f8f:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421e056 <etext+0x336>
	movl    %cr0, %eax
  8004216f96:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216f99:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  8004216f9c:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  8004216f9f:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  8004216fa4:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  8004216fa7:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  8004216fac:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  8004216fae:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  8004216fb2:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  8004216fb4:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  8004216fb7:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  8004216fbc:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  8004216fbf:	ea                   	(bad)  
  8004216fc0:	6e                   	outsb  %ds:(%rsi),(%dx)
  8004216fc1:	70 00                	jo     8004216fc3 <start32+0x4e>
  8004216fc3:	00 08                	add    %cl,(%rax)
	...

0000008004216fc6 <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  8004216fc6:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216fca:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216fcc:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216fce:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216fd0:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004216fd4:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004216fd6:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004216fd8:	48 a1 e0 b5 6d 04 80 	movabs 0x80046db5e0,%rax
  8004216fdf:	00 00 00 
	movq    %rax,%rsp
  8004216fe2:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  8004216fe5:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  8004216fec:	48 b8 0f 04 20 04 80 	movabs $0x800420040f,%rax
  8004216ff3:	00 00 00 
	call    *%rax
  8004216ff6:	ff d0                	callq  *%rax

0000008004216ff8 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004216ff8:	eb fe                	jmp    8004216ff8 <spin>
  8004216ffa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004217000 <gdt>:
	...
  8004217008:	ff                   	(bad)  
  8004217009:	ff 00                	incl   (%rax)
  800421700b:	00 00                	add    %al,(%rax)
  800421700d:	9a                   	(bad)  
  800421700e:	af                   	scas   %es:(%rdi),%eax
  800421700f:	00 ff                	add    %bh,%bh
  8004217011:	ff 00                	incl   (%rax)
  8004217013:	00 00                	add    %al,(%rax)
  8004217015:	92                   	xchg   %eax,%edx
  8004217016:	af                   	scas   %es:(%rdi),%eax
	...

0000008004217018 <gdtdesc>:
  8004217018:	17                   	(bad)  
  8004217019:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  800421701f:	90                   	nop

0000008004217020 <gdt32>:
	...
  8004217028:	ff                   	(bad)  
  8004217029:	ff 00                	incl   (%rax)
  800421702b:	00 00                	add    %al,(%rax)
  800421702d:	9a                   	(bad)  
  800421702e:	cf                   	iret   
  800421702f:	00 ff                	add    %bh,%bh
  8004217031:	ff 00                	incl   (%rax)
  8004217033:	00 00                	add    %al,(%rax)
  8004217035:	92                   	xchg   %eax,%edx
  8004217036:	cf                   	iret   
	...

0000008004217038 <gdt32desc>:
  8004217038:	17                   	(bad)  
  8004217039:	00 c8                	add    %cl,%al
  800421703b:	70 00                	jo     800421703d <gdt32desc+0x5>
	...

000000800421703e <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  800421703e:	90                   	nop

000000800421703f <sum>:
  800421703f:	55                   	push   %rbp
  8004217040:	48 89 e5             	mov    %rsp,%rbp
  8004217043:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004217047:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421704b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800421704e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004217055:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421705c:	eb 1a                	jmp    8004217078 <sum+0x39>
  800421705e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217061:	48 63 d0             	movslq %eax,%rdx
  8004217064:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217068:	48 01 d0             	add    %rdx,%rax
  800421706b:	0f b6 00             	movzbl (%rax),%eax
  800421706e:	0f b6 c0             	movzbl %al,%eax
  8004217071:	01 45 f8             	add    %eax,-0x8(%rbp)
  8004217074:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217078:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421707b:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  800421707e:	7c de                	jl     800421705e <sum+0x1f>
  8004217080:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004217083:	c9                   	leaveq 
  8004217084:	c3                   	retq   

0000008004217085 <mpsearch1>:
  8004217085:	55                   	push   %rbp
  8004217086:	48 89 e5             	mov    %rsp,%rbp
  8004217089:	48 83 ec 40          	sub    $0x40,%rsp
  800421708d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004217091:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004217094:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004217098:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421709c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042170a0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042170a4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042170a7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042170aa:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042170b1:	00 00 00 
  80042170b4:	48 8b 00             	mov    (%rax),%rax
  80042170b7:	48 39 c2             	cmp    %rax,%rdx
  80042170ba:	72 32                	jb     80042170ee <mpsearch1+0x69>
  80042170bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042170c0:	48 89 c1             	mov    %rax,%rcx
  80042170c3:	48 ba 98 06 22 04 80 	movabs $0x8004220698,%rdx
  80042170ca:	00 00 00 
  80042170cd:	be 74 00 00 00       	mov    $0x74,%esi
  80042170d2:	48 bf bb 06 22 04 80 	movabs $0x80042206bb,%rdi
  80042170d9:	00 00 00 
  80042170dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042170e1:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042170e8:	00 00 00 
  80042170eb:	41 ff d0             	callq  *%r8
  80042170ee:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042170f5:	00 00 00 
  80042170f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042170fc:	48 01 d0             	add    %rdx,%rax
  80042170ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217103:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217106:	48 63 d0             	movslq %eax,%rdx
  8004217109:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421710d:	48 01 d0             	add    %rdx,%rax
  8004217110:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217114:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217118:	48 c1 e8 0c          	shr    $0xc,%rax
  800421711c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421711f:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217122:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004217129:	00 00 00 
  800421712c:	48 8b 00             	mov    (%rax),%rax
  800421712f:	48 39 c2             	cmp    %rax,%rdx
  8004217132:	72 32                	jb     8004217166 <mpsearch1+0xe1>
  8004217134:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217138:	48 89 c1             	mov    %rax,%rcx
  800421713b:	48 ba 98 06 22 04 80 	movabs $0x8004220698,%rdx
  8004217142:	00 00 00 
  8004217145:	be 74 00 00 00       	mov    $0x74,%esi
  800421714a:	48 bf bb 06 22 04 80 	movabs $0x80042206bb,%rdi
  8004217151:	00 00 00 
  8004217154:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217159:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004217160:	00 00 00 
  8004217163:	41 ff d0             	callq  *%r8
  8004217166:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421716d:	00 00 00 
  8004217170:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217174:	48 01 d0             	add    %rdx,%rax
  8004217177:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421717b:	eb 4d                	jmp    80042171ca <mpsearch1+0x145>
  800421717d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217181:	ba 04 00 00 00       	mov    $0x4,%edx
  8004217186:	48 be ce 06 22 04 80 	movabs $0x80042206ce,%rsi
  800421718d:	00 00 00 
  8004217190:	48 89 c7             	mov    %rax,%rdi
  8004217193:	48 b8 41 0d 21 04 80 	movabs $0x8004210d41,%rax
  800421719a:	00 00 00 
  800421719d:	ff d0                	callq  *%rax
  800421719f:	85 c0                	test   %eax,%eax
  80042171a1:	75 22                	jne    80042171c5 <mpsearch1+0x140>
  80042171a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042171a7:	be 10 00 00 00       	mov    $0x10,%esi
  80042171ac:	48 89 c7             	mov    %rax,%rdi
  80042171af:	48 b8 3f 70 21 04 80 	movabs $0x800421703f,%rax
  80042171b6:	00 00 00 
  80042171b9:	ff d0                	callq  *%rax
  80042171bb:	84 c0                	test   %al,%al
  80042171bd:	75 06                	jne    80042171c5 <mpsearch1+0x140>
  80042171bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042171c3:	eb 14                	jmp    80042171d9 <mpsearch1+0x154>
  80042171c5:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  80042171ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042171ce:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042171d2:	72 a9                	jb     800421717d <mpsearch1+0xf8>
  80042171d4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042171d9:	c9                   	leaveq 
  80042171da:	c3                   	retq   

00000080042171db <mpsearch>:
  80042171db:	55                   	push   %rbp
  80042171dc:	48 89 e5             	mov    %rsp,%rbp
  80042171df:	48 83 ec 30          	sub    $0x30,%rsp
  80042171e3:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042171ea:	00 
  80042171eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042171ef:	48 c1 e8 0c          	shr    $0xc,%rax
  80042171f3:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042171f6:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042171f9:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004217200:	00 00 00 
  8004217203:	48 8b 00             	mov    (%rax),%rax
  8004217206:	48 39 c2             	cmp    %rax,%rdx
  8004217209:	72 32                	jb     800421723d <mpsearch+0x62>
  800421720b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421720f:	48 89 c1             	mov    %rax,%rcx
  8004217212:	48 ba 98 06 22 04 80 	movabs $0x8004220698,%rdx
  8004217219:	00 00 00 
  800421721c:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004217221:	48 bf bb 06 22 04 80 	movabs $0x80042206bb,%rdi
  8004217228:	00 00 00 
  800421722b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217230:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004217237:	00 00 00 
  800421723a:	41 ff d0             	callq  *%r8
  800421723d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217244:	00 00 00 
  8004217247:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421724b:	48 01 d0             	add    %rdx,%rax
  800421724e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004217252:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217256:	48 83 c0 0e          	add    $0xe,%rax
  800421725a:	0f b7 00             	movzwl (%rax),%eax
  800421725d:	0f b7 c0             	movzwl %ax,%eax
  8004217260:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004217263:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004217267:	74 2c                	je     8004217295 <mpsearch+0xba>
  8004217269:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  800421726d:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217270:	be 00 04 00 00       	mov    $0x400,%esi
  8004217275:	48 89 c7             	mov    %rax,%rdi
  8004217278:	48 b8 85 70 21 04 80 	movabs $0x8004217085,%rax
  800421727f:	00 00 00 
  8004217282:	ff d0                	callq  *%rax
  8004217284:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004217288:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421728d:	74 49                	je     80042172d8 <mpsearch+0xfd>
  800421728f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217293:	eb 59                	jmp    80042172ee <mpsearch+0x113>
  8004217295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217299:	48 83 c0 13          	add    $0x13,%rax
  800421729d:	0f b7 00             	movzwl (%rax),%eax
  80042172a0:	0f b7 c0             	movzwl %ax,%eax
  80042172a3:	c1 e0 0a             	shl    $0xa,%eax
  80042172a6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042172a9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042172ac:	2d 00 04 00 00       	sub    $0x400,%eax
  80042172b1:	89 c0                	mov    %eax,%eax
  80042172b3:	be 00 04 00 00       	mov    $0x400,%esi
  80042172b8:	48 89 c7             	mov    %rax,%rdi
  80042172bb:	48 b8 85 70 21 04 80 	movabs $0x8004217085,%rax
  80042172c2:	00 00 00 
  80042172c5:	ff d0                	callq  *%rax
  80042172c7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042172cb:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042172d0:	74 06                	je     80042172d8 <mpsearch+0xfd>
  80042172d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042172d6:	eb 16                	jmp    80042172ee <mpsearch+0x113>
  80042172d8:	be 00 00 01 00       	mov    $0x10000,%esi
  80042172dd:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  80042172e2:	48 b8 85 70 21 04 80 	movabs $0x8004217085,%rax
  80042172e9:	00 00 00 
  80042172ec:	ff d0                	callq  *%rax
  80042172ee:	c9                   	leaveq 
  80042172ef:	c3                   	retq   

00000080042172f0 <mpconfig>:
  80042172f0:	55                   	push   %rbp
  80042172f1:	48 89 e5             	mov    %rsp,%rbp
  80042172f4:	48 83 ec 30          	sub    $0x30,%rsp
  80042172f8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042172fc:	48 b8 db 71 21 04 80 	movabs $0x80042171db,%rax
  8004217303:	00 00 00 
  8004217306:	ff d0                	callq  *%rax
  8004217308:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421730c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217311:	75 0a                	jne    800421731d <mpconfig+0x2d>
  8004217313:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217318:	e9 f6 01 00 00       	jmpq   8004217513 <mpconfig+0x223>
  800421731d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217321:	8b 40 04             	mov    0x4(%rax),%eax
  8004217324:	85 c0                	test   %eax,%eax
  8004217326:	74 0c                	je     8004217334 <mpconfig+0x44>
  8004217328:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421732c:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  8004217330:	84 c0                	test   %al,%al
  8004217332:	74 25                	je     8004217359 <mpconfig+0x69>
  8004217334:	48 bf d8 06 22 04 80 	movabs $0x80042206d8,%rdi
  800421733b:	00 00 00 
  800421733e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217343:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421734a:	00 00 00 
  800421734d:	ff d2                	callq  *%rdx
  800421734f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217354:	e9 ba 01 00 00       	jmpq   8004217513 <mpconfig+0x223>
  8004217359:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421735d:	8b 40 04             	mov    0x4(%rax),%eax
  8004217360:	89 c0                	mov    %eax,%eax
  8004217362:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004217366:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421736a:	48 c1 e8 0c          	shr    $0xc,%rax
  800421736e:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217371:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004217374:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421737b:	00 00 00 
  800421737e:	48 8b 00             	mov    (%rax),%rax
  8004217381:	48 39 c2             	cmp    %rax,%rdx
  8004217384:	72 32                	jb     80042173b8 <mpconfig+0xc8>
  8004217386:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421738a:	48 89 c1             	mov    %rax,%rcx
  800421738d:	48 ba 98 06 22 04 80 	movabs $0x8004220698,%rdx
  8004217394:	00 00 00 
  8004217397:	be ad 00 00 00       	mov    $0xad,%esi
  800421739c:	48 bf bb 06 22 04 80 	movabs $0x80042206bb,%rdi
  80042173a3:	00 00 00 
  80042173a6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042173ab:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042173b2:	00 00 00 
  80042173b5:	41 ff d0             	callq  *%r8
  80042173b8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042173bf:	00 00 00 
  80042173c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042173c6:	48 01 d0             	add    %rdx,%rax
  80042173c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042173cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042173d1:	ba 04 00 00 00       	mov    $0x4,%edx
  80042173d6:	48 be 05 07 22 04 80 	movabs $0x8004220705,%rsi
  80042173dd:	00 00 00 
  80042173e0:	48 89 c7             	mov    %rax,%rdi
  80042173e3:	48 b8 41 0d 21 04 80 	movabs $0x8004210d41,%rax
  80042173ea:	00 00 00 
  80042173ed:	ff d0                	callq  *%rax
  80042173ef:	85 c0                	test   %eax,%eax
  80042173f1:	74 25                	je     8004217418 <mpconfig+0x128>
  80042173f3:	48 bf 10 07 22 04 80 	movabs $0x8004220710,%rdi
  80042173fa:	00 00 00 
  80042173fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217402:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217409:	00 00 00 
  800421740c:	ff d2                	callq  *%rdx
  800421740e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217413:	e9 fb 00 00 00       	jmpq   8004217513 <mpconfig+0x223>
  8004217418:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421741c:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004217420:	0f b7 d0             	movzwl %ax,%edx
  8004217423:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217427:	89 d6                	mov    %edx,%esi
  8004217429:	48 89 c7             	mov    %rax,%rdi
  800421742c:	48 b8 3f 70 21 04 80 	movabs $0x800421703f,%rax
  8004217433:	00 00 00 
  8004217436:	ff d0                	callq  *%rax
  8004217438:	84 c0                	test   %al,%al
  800421743a:	74 25                	je     8004217461 <mpconfig+0x171>
  800421743c:	48 bf 48 07 22 04 80 	movabs $0x8004220748,%rdi
  8004217443:	00 00 00 
  8004217446:	b8 00 00 00 00       	mov    $0x0,%eax
  800421744b:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217452:	00 00 00 
  8004217455:	ff d2                	callq  *%rdx
  8004217457:	b8 00 00 00 00       	mov    $0x0,%eax
  800421745c:	e9 b2 00 00 00       	jmpq   8004217513 <mpconfig+0x223>
  8004217461:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217465:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217469:	3c 01                	cmp    $0x1,%al
  800421746b:	74 3b                	je     80042174a8 <mpconfig+0x1b8>
  800421746d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217471:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217475:	3c 04                	cmp    $0x4,%al
  8004217477:	74 2f                	je     80042174a8 <mpconfig+0x1b8>
  8004217479:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421747d:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  8004217481:	0f b6 c0             	movzbl %al,%eax
  8004217484:	89 c6                	mov    %eax,%esi
  8004217486:	48 bf 70 07 22 04 80 	movabs $0x8004220770,%rdi
  800421748d:	00 00 00 
  8004217490:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217495:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421749c:	00 00 00 
  800421749f:	ff d2                	callq  *%rdx
  80042174a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174a6:	eb 6b                	jmp    8004217513 <mpconfig+0x223>
  80042174a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042174ac:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  80042174b0:	0f b7 c0             	movzwl %ax,%eax
  80042174b3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042174b7:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  80042174bb:	0f b7 ca             	movzwl %dx,%ecx
  80042174be:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042174c2:	48 01 ca             	add    %rcx,%rdx
  80042174c5:	89 c6                	mov    %eax,%esi
  80042174c7:	48 89 d7             	mov    %rdx,%rdi
  80042174ca:	48 b8 3f 70 21 04 80 	movabs $0x800421703f,%rax
  80042174d1:	00 00 00 
  80042174d4:	ff d0                	callq  *%rax
  80042174d6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042174da:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  80042174de:	38 d0                	cmp    %dl,%al
  80042174e0:	74 22                	je     8004217504 <mpconfig+0x214>
  80042174e2:	48 bf 90 07 22 04 80 	movabs $0x8004220790,%rdi
  80042174e9:	00 00 00 
  80042174ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174f1:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042174f8:	00 00 00 
  80042174fb:	ff d2                	callq  *%rdx
  80042174fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217502:	eb 0f                	jmp    8004217513 <mpconfig+0x223>
  8004217504:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217508:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421750c:	48 89 10             	mov    %rdx,(%rax)
  800421750f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217513:	c9                   	leaveq 
  8004217514:	c3                   	retq   

0000008004217515 <mp_init>:
  8004217515:	55                   	push   %rbp
  8004217516:	48 89 e5             	mov    %rsp,%rbp
  8004217519:	53                   	push   %rbx
  800421751a:	48 83 ec 58          	sub    $0x58,%rsp
  800421751e:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  8004217525:	00 00 00 
  8004217528:	48 bb 20 d0 6d 04 80 	movabs $0x80046dd020,%rbx
  800421752f:	00 00 00 
  8004217532:	48 89 18             	mov    %rbx,(%rax)
  8004217535:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004217539:	48 89 c7             	mov    %rax,%rdi
  800421753c:	48 b8 f0 72 21 04 80 	movabs $0x80042172f0,%rax
  8004217543:	00 00 00 
  8004217546:	ff d0                	callq  *%rax
  8004217548:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421754c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217551:	75 05                	jne    8004217558 <mp_init+0x43>
  8004217553:	e9 d2 03 00 00       	jmpq   800421792a <mp_init+0x415>
  8004217558:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  800421755f:	00 00 00 
  8004217562:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217568:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421756c:	8b 40 24             	mov    0x24(%rax),%eax
  800421756f:	89 c2                	mov    %eax,%edx
  8004217571:	48 b8 00 e0 71 04 80 	movabs $0x800471e000,%rax
  8004217578:	00 00 00 
  800421757b:	48 89 10             	mov    %rdx,(%rax)
  800421757e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217582:	48 83 c0 2c          	add    $0x2c,%rax
  8004217586:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421758a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217591:	e9 17 02 00 00       	jmpq   80042177ad <mp_init+0x298>
  8004217596:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421759a:	0f b6 00             	movzbl (%rax),%eax
  800421759d:	0f b6 c0             	movzbl %al,%eax
  80042175a0:	85 c0                	test   %eax,%eax
  80042175a2:	74 16                	je     80042175ba <mp_init+0xa5>
  80042175a4:	85 c0                	test   %eax,%eax
  80042175a6:	0f 88 b8 01 00 00    	js     8004217764 <mp_init+0x24f>
  80042175ac:	83 f8 04             	cmp    $0x4,%eax
  80042175af:	0f 8f af 01 00 00    	jg     8004217764 <mp_init+0x24f>
  80042175b5:	e9 a3 01 00 00       	jmpq   800421775d <mp_init+0x248>
  80042175ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042175be:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042175c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042175c6:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  80042175ca:	0f b6 c0             	movzbl %al,%eax
  80042175cd:	83 e0 02             	and    $0x2,%eax
  80042175d0:	85 c0                	test   %eax,%eax
  80042175d2:	74 51                	je     8004217625 <mp_init+0x110>
  80042175d4:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  80042175db:	00 00 00 
  80042175de:	8b 00                	mov    (%rax),%eax
  80042175e0:	48 98                	cltq   
  80042175e2:	48 c1 e0 03          	shl    $0x3,%rax
  80042175e6:	48 89 c2             	mov    %rax,%rdx
  80042175e9:	48 c1 e2 04          	shl    $0x4,%rdx
  80042175ed:	48 01 d0             	add    %rdx,%rax
  80042175f0:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042175f7:	00 00 00 
  80042175fa:	48 01 c2             	add    %rax,%rdx
  80042175fd:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  8004217604:	00 00 00 
  8004217607:	48 89 10             	mov    %rdx,(%rax)
  800421760a:	48 bf bd 07 22 04 80 	movabs $0x80042207bd,%rdi
  8004217611:	00 00 00 
  8004217614:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217619:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217620:	00 00 00 
  8004217623:	ff d2                	callq  *%rdx
  8004217625:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  800421762c:	00 00 00 
  800421762f:	8b 00                	mov    (%rax),%eax
  8004217631:	83 f8 03             	cmp    $0x3,%eax
  8004217634:	0f 8f f4 00 00 00    	jg     800421772e <mp_init+0x219>
  800421763a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421763e:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  8004217642:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217646:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  800421764a:	0f b6 f0             	movzbl %al,%esi
  800421764d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217651:	8b 78 08             	mov    0x8(%rax),%edi
  8004217654:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217658:	4c 8d 50 04          	lea    0x4(%rax),%r10
  800421765c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217660:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  8004217664:	0f b6 c8             	movzbl %al,%ecx
  8004217667:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421766b:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  800421766f:	0f b6 d0             	movzbl %al,%edx
  8004217672:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217676:	0f b6 00             	movzbl (%rax),%eax
  8004217679:	0f b6 c0             	movzbl %al,%eax
  800421767c:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004217681:	89 34 24             	mov    %esi,(%rsp)
  8004217684:	41 89 f9             	mov    %edi,%r9d
  8004217687:	4d 89 d0             	mov    %r10,%r8
  800421768a:	89 c6                	mov    %eax,%esi
  800421768c:	48 bf d0 07 22 04 80 	movabs $0x80042207d0,%rdi
  8004217693:	00 00 00 
  8004217696:	b8 00 00 00 00       	mov    $0x0,%eax
  800421769b:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  80042176a2:	00 00 00 
  80042176a5:	41 ff d2             	callq  *%r10
  80042176a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042176ac:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  80042176b0:	0f b6 c0             	movzbl %al,%eax
  80042176b3:	83 e0 01             	and    $0x1,%eax
  80042176b6:	85 c0                	test   %eax,%eax
  80042176b8:	74 57                	je     8004217711 <mp_init+0x1fc>
  80042176ba:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  80042176c1:	00 00 00 
  80042176c4:	8b 30                	mov    (%rax),%esi
  80042176c6:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  80042176cd:	00 00 00 
  80042176d0:	8b 00                	mov    (%rax),%eax
  80042176d2:	89 c2                	mov    %eax,%edx
  80042176d4:	48 b9 20 d0 6d 04 80 	movabs $0x80046dd020,%rcx
  80042176db:	00 00 00 
  80042176de:	48 63 c6             	movslq %esi,%rax
  80042176e1:	48 c1 e0 03          	shl    $0x3,%rax
  80042176e5:	48 89 c6             	mov    %rax,%rsi
  80042176e8:	48 c1 e6 04          	shl    $0x4,%rsi
  80042176ec:	48 01 f0             	add    %rsi,%rax
  80042176ef:	48 01 c8             	add    %rcx,%rax
  80042176f2:	88 10                	mov    %dl,(%rax)
  80042176f4:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  80042176fb:	00 00 00 
  80042176fe:	8b 00                	mov    (%rax),%eax
  8004217700:	8d 50 01             	lea    0x1(%rax),%edx
  8004217703:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  800421770a:	00 00 00 
  800421770d:	89 10                	mov    %edx,(%rax)
  800421770f:	eb 45                	jmp    8004217756 <mp_init+0x241>
  8004217711:	48 bf 20 08 22 04 80 	movabs $0x8004220820,%rdi
  8004217718:	00 00 00 
  800421771b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217720:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217727:	00 00 00 
  800421772a:	ff d2                	callq  *%rdx
  800421772c:	eb 28                	jmp    8004217756 <mp_init+0x241>
  800421772e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217732:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217736:	0f b6 c0             	movzbl %al,%eax
  8004217739:	89 c6                	mov    %eax,%esi
  800421773b:	48 bf 50 08 22 04 80 	movabs $0x8004220850,%rdi
  8004217742:	00 00 00 
  8004217745:	b8 00 00 00 00       	mov    $0x0,%eax
  800421774a:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217751:	00 00 00 
  8004217754:	ff d2                	callq  *%rdx
  8004217756:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  800421775b:	eb 4c                	jmp    80042177a9 <mp_init+0x294>
  800421775d:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  8004217762:	eb 45                	jmp    80042177a9 <mp_init+0x294>
  8004217764:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217768:	0f b6 00             	movzbl (%rax),%eax
  800421776b:	0f b6 c0             	movzbl %al,%eax
  800421776e:	89 c6                	mov    %eax,%esi
  8004217770:	48 bf 78 08 22 04 80 	movabs $0x8004220878,%rdi
  8004217777:	00 00 00 
  800421777a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421777f:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004217786:	00 00 00 
  8004217789:	ff d2                	callq  *%rdx
  800421778b:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  8004217792:	00 00 00 
  8004217795:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  800421779b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421779f:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  80042177a3:	0f b7 c0             	movzwl %ax,%eax
  80042177a6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042177a9:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  80042177ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042177b1:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  80042177b5:	0f b7 c0             	movzwl %ax,%eax
  80042177b8:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  80042177bb:	0f 87 d5 fd ff ff    	ja     8004217596 <mp_init+0x81>
  80042177c1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  80042177c8:	eb 53                	jmp    800421781d <mp_init+0x308>
  80042177ca:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042177d1:	00 00 00 
  80042177d4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042177d7:	48 c1 e0 03          	shl    $0x3,%rax
  80042177db:	48 89 c1             	mov    %rax,%rcx
  80042177de:	48 c1 e1 04          	shl    $0x4,%rcx
  80042177e2:	48 01 c8             	add    %rcx,%rax
  80042177e5:	48 01 d0             	add    %rdx,%rax
  80042177e8:	48 83 c0 70          	add    $0x70,%rax
  80042177ec:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  80042177f0:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  80042177f7:	00 00 00 
  80042177fa:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042177fd:	48 c1 e0 03          	shl    $0x3,%rax
  8004217801:	48 89 c1             	mov    %rax,%rcx
  8004217804:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217808:	48 01 c8             	add    %rcx,%rax
  800421780b:	48 01 d0             	add    %rdx,%rax
  800421780e:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004217812:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217819:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  800421781d:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004217821:	76 a7                	jbe    80042177ca <mp_init+0x2b5>
  8004217823:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  800421782a:	00 00 00 
  800421782d:	48 8b 00             	mov    (%rax),%rax
  8004217830:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004217837:	48 b8 00 d0 6d 04 80 	movabs $0x80046dd000,%rax
  800421783e:	00 00 00 
  8004217841:	8b 00                	mov    (%rax),%eax
  8004217843:	85 c0                	test   %eax,%eax
  8004217845:	75 41                	jne    8004217888 <mp_init+0x373>
  8004217847:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  800421784e:	00 00 00 
  8004217851:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217857:	48 b8 00 e0 71 04 80 	movabs $0x800471e000,%rax
  800421785e:	00 00 00 
  8004217861:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217868:	48 bf 98 08 22 04 80 	movabs $0x8004220898,%rdi
  800421786f:	00 00 00 
  8004217872:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217877:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421787e:	00 00 00 
  8004217881:	ff d2                	callq  *%rdx
  8004217883:	e9 a2 00 00 00       	jmpq   800421792a <mp_init+0x415>
  8004217888:	48 b8 48 d2 6d 04 80 	movabs $0x80046dd248,%rax
  800421788f:	00 00 00 
  8004217892:	8b 10                	mov    (%rax),%edx
  8004217894:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  800421789b:	00 00 00 
  800421789e:	48 8b 00             	mov    (%rax),%rax
  80042178a1:	0f b6 00             	movzbl (%rax),%eax
  80042178a4:	0f b6 c0             	movzbl %al,%eax
  80042178a7:	89 c6                	mov    %eax,%esi
  80042178a9:	48 bf c4 08 22 04 80 	movabs $0x80042208c4,%rdi
  80042178b0:	00 00 00 
  80042178b3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178b8:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  80042178bf:	00 00 00 
  80042178c2:	ff d1                	callq  *%rcx
  80042178c4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042178c8:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042178cc:	84 c0                	test   %al,%al
  80042178ce:	74 5a                	je     800421792a <mp_init+0x415>
  80042178d0:	48 bf e8 08 22 04 80 	movabs $0x80042208e8,%rdi
  80042178d7:	00 00 00 
  80042178da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178df:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  80042178e6:	00 00 00 
  80042178e9:	ff d2                	callq  *%rdx
  80042178eb:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  80042178f2:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  80042178f6:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  80042178fa:	8b 55 cc             	mov    -0x34(%rbp),%edx
  80042178fd:	ee                   	out    %al,(%dx)
  80042178fe:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004217905:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217908:	89 c2                	mov    %eax,%edx
  800421790a:	ec                   	in     (%dx),%al
  800421790b:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  800421790e:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004217912:	83 c8 01             	or     $0x1,%eax
  8004217915:	0f b6 c0             	movzbl %al,%eax
  8004217918:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  800421791f:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217922:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004217926:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004217929:	ee                   	out    %al,(%dx)
  800421792a:	48 83 c4 58          	add    $0x58,%rsp
  800421792e:	5b                   	pop    %rbx
  800421792f:	5d                   	pop    %rbp
  8004217930:	c3                   	retq   

0000008004217931 <lapicw>:
  8004217931:	55                   	push   %rbp
  8004217932:	48 89 e5             	mov    %rsp,%rbp
  8004217935:	48 83 ec 08          	sub    $0x8,%rsp
  8004217939:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800421793c:	89 75 f8             	mov    %esi,-0x8(%rbp)
  800421793f:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004217946:	00 00 00 
  8004217949:	48 8b 00             	mov    (%rax),%rax
  800421794c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421794f:	48 63 d2             	movslq %edx,%rdx
  8004217952:	48 c1 e2 02          	shl    $0x2,%rdx
  8004217956:	48 01 c2             	add    %rax,%rdx
  8004217959:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421795c:	89 02                	mov    %eax,(%rdx)
  800421795e:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004217965:	00 00 00 
  8004217968:	48 8b 00             	mov    (%rax),%rax
  800421796b:	48 83 c0 20          	add    $0x20,%rax
  800421796f:	8b 00                	mov    (%rax),%eax
  8004217971:	c9                   	leaveq 
  8004217972:	c3                   	retq   

0000008004217973 <lapic_init>:
  8004217973:	55                   	push   %rbp
  8004217974:	48 89 e5             	mov    %rsp,%rbp
  8004217977:	48 b8 00 e0 71 04 80 	movabs $0x800471e000,%rax
  800421797e:	00 00 00 
  8004217981:	48 8b 00             	mov    (%rax),%rax
  8004217984:	48 85 c0             	test   %rax,%rax
  8004217987:	75 05                	jne    800421798e <lapic_init+0x1b>
  8004217989:	e9 da 01 00 00       	jmpq   8004217b68 <lapic_init+0x1f5>
  800421798e:	48 b8 00 e0 71 04 80 	movabs $0x800471e000,%rax
  8004217995:	00 00 00 
  8004217998:	48 8b 00             	mov    (%rax),%rax
  800421799b:	be 00 10 00 00       	mov    $0x1000,%esi
  80042179a0:	48 89 c7             	mov    %rax,%rdi
  80042179a3:	48 b8 56 3f 20 04 80 	movabs $0x8004203f56,%rax
  80042179aa:	00 00 00 
  80042179ad:	ff d0                	callq  *%rax
  80042179af:	48 ba 08 e0 71 04 80 	movabs $0x800471e008,%rdx
  80042179b6:	00 00 00 
  80042179b9:	48 89 02             	mov    %rax,(%rdx)
  80042179bc:	be 27 01 00 00       	mov    $0x127,%esi
  80042179c1:	bf 3c 00 00 00       	mov    $0x3c,%edi
  80042179c6:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  80042179cd:	00 00 00 
  80042179d0:	ff d0                	callq  *%rax
  80042179d2:	be 0b 00 00 00       	mov    $0xb,%esi
  80042179d7:	bf f8 00 00 00       	mov    $0xf8,%edi
  80042179dc:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  80042179e3:	00 00 00 
  80042179e6:	ff d0                	callq  *%rax
  80042179e8:	be 20 00 02 00       	mov    $0x20020,%esi
  80042179ed:	bf c8 00 00 00       	mov    $0xc8,%edi
  80042179f2:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  80042179f9:	00 00 00 
  80042179fc:	ff d0                	callq  *%rax
  80042179fe:	be 80 96 98 00       	mov    $0x989680,%esi
  8004217a03:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004217a08:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217a0f:	00 00 00 
  8004217a12:	ff d0                	callq  *%rax
  8004217a14:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004217a1b:	00 00 00 
  8004217a1e:	ff d0                	callq  *%rax
  8004217a20:	48 98                	cltq   
  8004217a22:	48 c1 e0 03          	shl    $0x3,%rax
  8004217a26:	48 89 c2             	mov    %rax,%rdx
  8004217a29:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217a2d:	48 01 d0             	add    %rdx,%rax
  8004217a30:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004217a37:	00 00 00 
  8004217a3a:	48 01 c2             	add    %rax,%rdx
  8004217a3d:	48 b8 40 d2 6d 04 80 	movabs $0x80046dd240,%rax
  8004217a44:	00 00 00 
  8004217a47:	48 8b 00             	mov    (%rax),%rax
  8004217a4a:	48 39 c2             	cmp    %rax,%rdx
  8004217a4d:	74 16                	je     8004217a65 <lapic_init+0xf2>
  8004217a4f:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217a54:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004217a59:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217a60:	00 00 00 
  8004217a63:	ff d0                	callq  *%rax
  8004217a65:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217a6a:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004217a6f:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217a76:	00 00 00 
  8004217a79:	ff d0                	callq  *%rax
  8004217a7b:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004217a82:	00 00 00 
  8004217a85:	48 8b 00             	mov    (%rax),%rax
  8004217a88:	48 83 c0 30          	add    $0x30,%rax
  8004217a8c:	8b 00                	mov    (%rax),%eax
  8004217a8e:	c1 e8 10             	shr    $0x10,%eax
  8004217a91:	0f b6 c0             	movzbl %al,%eax
  8004217a94:	83 f8 03             	cmp    $0x3,%eax
  8004217a97:	76 16                	jbe    8004217aaf <lapic_init+0x13c>
  8004217a99:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217a9e:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004217aa3:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217aaa:	00 00 00 
  8004217aad:	ff d0                	callq  *%rax
  8004217aaf:	be 33 00 00 00       	mov    $0x33,%esi
  8004217ab4:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004217ab9:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217ac0:	00 00 00 
  8004217ac3:	ff d0                	callq  *%rax
  8004217ac5:	be 00 00 00 00       	mov    $0x0,%esi
  8004217aca:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217acf:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217ad6:	00 00 00 
  8004217ad9:	ff d0                	callq  *%rax
  8004217adb:	be 00 00 00 00       	mov    $0x0,%esi
  8004217ae0:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217ae5:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217aec:	00 00 00 
  8004217aef:	ff d0                	callq  *%rax
  8004217af1:	be 00 00 00 00       	mov    $0x0,%esi
  8004217af6:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217afb:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217b02:	00 00 00 
  8004217b05:	ff d0                	callq  *%rax
  8004217b07:	be 00 00 00 00       	mov    $0x0,%esi
  8004217b0c:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217b11:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217b18:	00 00 00 
  8004217b1b:	ff d0                	callq  *%rax
  8004217b1d:	be 00 85 08 00       	mov    $0x88500,%esi
  8004217b22:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217b27:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217b2e:	00 00 00 
  8004217b31:	ff d0                	callq  *%rax
  8004217b33:	90                   	nop
  8004217b34:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004217b3b:	00 00 00 
  8004217b3e:	48 8b 00             	mov    (%rax),%rax
  8004217b41:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217b47:	8b 00                	mov    (%rax),%eax
  8004217b49:	25 00 10 00 00       	and    $0x1000,%eax
  8004217b4e:	85 c0                	test   %eax,%eax
  8004217b50:	75 e2                	jne    8004217b34 <lapic_init+0x1c1>
  8004217b52:	be 00 00 00 00       	mov    $0x0,%esi
  8004217b57:	bf 20 00 00 00       	mov    $0x20,%edi
  8004217b5c:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217b63:	00 00 00 
  8004217b66:	ff d0                	callq  *%rax
  8004217b68:	5d                   	pop    %rbp
  8004217b69:	c3                   	retq   

0000008004217b6a <cpunum>:
  8004217b6a:	55                   	push   %rbp
  8004217b6b:	48 89 e5             	mov    %rsp,%rbp
  8004217b6e:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004217b75:	00 00 00 
  8004217b78:	48 8b 00             	mov    (%rax),%rax
  8004217b7b:	48 85 c0             	test   %rax,%rax
  8004217b7e:	74 18                	je     8004217b98 <cpunum+0x2e>
  8004217b80:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004217b87:	00 00 00 
  8004217b8a:	48 8b 00             	mov    (%rax),%rax
  8004217b8d:	48 83 c0 20          	add    $0x20,%rax
  8004217b91:	8b 00                	mov    (%rax),%eax
  8004217b93:	c1 e8 18             	shr    $0x18,%eax
  8004217b96:	eb 05                	jmp    8004217b9d <cpunum+0x33>
  8004217b98:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217b9d:	5d                   	pop    %rbp
  8004217b9e:	c3                   	retq   

0000008004217b9f <lapic_eoi>:
  8004217b9f:	55                   	push   %rbp
  8004217ba0:	48 89 e5             	mov    %rsp,%rbp
  8004217ba3:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004217baa:	00 00 00 
  8004217bad:	48 8b 00             	mov    (%rax),%rax
  8004217bb0:	48 85 c0             	test   %rax,%rax
  8004217bb3:	74 16                	je     8004217bcb <lapic_eoi+0x2c>
  8004217bb5:	be 00 00 00 00       	mov    $0x0,%esi
  8004217bba:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217bbf:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217bc6:	00 00 00 
  8004217bc9:	ff d0                	callq  *%rax
  8004217bcb:	5d                   	pop    %rbp
  8004217bcc:	c3                   	retq   

0000008004217bcd <microdelay>:
  8004217bcd:	55                   	push   %rbp
  8004217bce:	48 89 e5             	mov    %rsp,%rbp
  8004217bd1:	48 83 ec 04          	sub    $0x4,%rsp
  8004217bd5:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217bd8:	c9                   	leaveq 
  8004217bd9:	c3                   	retq   

0000008004217bda <lapic_startap>:
  8004217bda:	55                   	push   %rbp
  8004217bdb:	48 89 e5             	mov    %rsp,%rbp
  8004217bde:	48 83 ec 40          	sub    $0x40,%rsp
  8004217be2:	89 f8                	mov    %edi,%eax
  8004217be4:	89 75 c8             	mov    %esi,-0x38(%rbp)
  8004217be7:	88 45 cc             	mov    %al,-0x34(%rbp)
  8004217bea:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004217bf1:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  8004217bf5:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217bf9:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217bfc:	ee                   	out    %al,(%dx)
  8004217bfd:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  8004217c04:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  8004217c08:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217c0c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004217c0f:	ee                   	out    %al,(%dx)
  8004217c10:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  8004217c17:	00 
  8004217c18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217c1c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217c20:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217c23:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004217c26:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004217c2d:	00 00 00 
  8004217c30:	48 8b 00             	mov    (%rax),%rax
  8004217c33:	48 39 c2             	cmp    %rax,%rdx
  8004217c36:	72 32                	jb     8004217c6a <lapic_startap+0x90>
  8004217c38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217c3c:	48 89 c1             	mov    %rax,%rcx
  8004217c3f:	48 ba 30 09 22 04 80 	movabs $0x8004220930,%rdx
  8004217c46:	00 00 00 
  8004217c49:	be 99 00 00 00       	mov    $0x99,%esi
  8004217c4e:	48 bf 53 09 22 04 80 	movabs $0x8004220953,%rdi
  8004217c55:	00 00 00 
  8004217c58:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c5d:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004217c64:	00 00 00 
  8004217c67:	41 ff d0             	callq  *%r8
  8004217c6a:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217c71:	00 00 00 
  8004217c74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217c78:	48 01 d0             	add    %rdx,%rax
  8004217c7b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217c7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217c83:	66 c7 00 00 00       	movw   $0x0,(%rax)
  8004217c88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217c8c:	48 8d 50 02          	lea    0x2(%rax),%rdx
  8004217c90:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217c93:	c1 e8 04             	shr    $0x4,%eax
  8004217c96:	66 89 02             	mov    %ax,(%rdx)
  8004217c99:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217c9d:	c1 e0 18             	shl    $0x18,%eax
  8004217ca0:	89 c6                	mov    %eax,%esi
  8004217ca2:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217ca7:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217cae:	00 00 00 
  8004217cb1:	ff d0                	callq  *%rax
  8004217cb3:	be 00 c5 00 00       	mov    $0xc500,%esi
  8004217cb8:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217cbd:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217cc4:	00 00 00 
  8004217cc7:	ff d0                	callq  *%rax
  8004217cc9:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217cce:	48 b8 cd 7b 21 04 80 	movabs $0x8004217bcd,%rax
  8004217cd5:	00 00 00 
  8004217cd8:	ff d0                	callq  *%rax
  8004217cda:	be 00 85 00 00       	mov    $0x8500,%esi
  8004217cdf:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217ce4:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217ceb:	00 00 00 
  8004217cee:	ff d0                	callq  *%rax
  8004217cf0:	bf 64 00 00 00       	mov    $0x64,%edi
  8004217cf5:	48 b8 cd 7b 21 04 80 	movabs $0x8004217bcd,%rax
  8004217cfc:	00 00 00 
  8004217cff:	ff d0                	callq  *%rax
  8004217d01:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217d08:	eb 4b                	jmp    8004217d55 <lapic_startap+0x17b>
  8004217d0a:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217d0e:	c1 e0 18             	shl    $0x18,%eax
  8004217d11:	89 c6                	mov    %eax,%esi
  8004217d13:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217d18:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217d1f:	00 00 00 
  8004217d22:	ff d0                	callq  *%rax
  8004217d24:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217d27:	c1 e8 0c             	shr    $0xc,%eax
  8004217d2a:	80 cc 06             	or     $0x6,%ah
  8004217d2d:	89 c6                	mov    %eax,%esi
  8004217d2f:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217d34:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217d3b:	00 00 00 
  8004217d3e:	ff d0                	callq  *%rax
  8004217d40:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217d45:	48 b8 cd 7b 21 04 80 	movabs $0x8004217bcd,%rax
  8004217d4c:	00 00 00 
  8004217d4f:	ff d0                	callq  *%rax
  8004217d51:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217d55:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004217d59:	7e af                	jle    8004217d0a <lapic_startap+0x130>
  8004217d5b:	c9                   	leaveq 
  8004217d5c:	c3                   	retq   

0000008004217d5d <lapic_ipi>:
  8004217d5d:	55                   	push   %rbp
  8004217d5e:	48 89 e5             	mov    %rsp,%rbp
  8004217d61:	48 83 ec 08          	sub    $0x8,%rsp
  8004217d65:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217d68:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217d6b:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004217d70:	89 c6                	mov    %eax,%esi
  8004217d72:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217d77:	48 b8 31 79 21 04 80 	movabs $0x8004217931,%rax
  8004217d7e:	00 00 00 
  8004217d81:	ff d0                	callq  *%rax
  8004217d83:	90                   	nop
  8004217d84:	48 b8 08 e0 71 04 80 	movabs $0x800471e008,%rax
  8004217d8b:	00 00 00 
  8004217d8e:	48 8b 00             	mov    (%rax),%rax
  8004217d91:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217d97:	8b 00                	mov    (%rax),%eax
  8004217d99:	25 00 10 00 00       	and    $0x1000,%eax
  8004217d9e:	85 c0                	test   %eax,%eax
  8004217da0:	75 e2                	jne    8004217d84 <lapic_ipi+0x27>
  8004217da2:	c9                   	leaveq 
  8004217da3:	c3                   	retq   

0000008004217da4 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004217da4:	55                   	push   %rbp
  8004217da5:	48 89 e5             	mov    %rsp,%rbp
  8004217da8:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004217dac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217db0:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004217db3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004217db7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217dba:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004217dbe:	f0 87 02             	lock xchg %eax,(%rdx)
  8004217dc1:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004217dc4:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004217dc7:	c9                   	leaveq 
  8004217dc8:	c3                   	retq   

0000008004217dc9 <get_caller_pcs>:
  8004217dc9:	55                   	push   %rbp
  8004217dca:	48 89 e5             	mov    %rsp,%rbp
  8004217dcd:	48 83 ec 28          	sub    $0x28,%rsp
  8004217dd1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004217dd5:	48 89 e8             	mov    %rbp,%rax
  8004217dd8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  8004217ddc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217de0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217de4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004217deb:	eb 45                	jmp    8004217e32 <get_caller_pcs+0x69>
  8004217ded:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217df2:	74 44                	je     8004217e38 <get_caller_pcs+0x6f>
  8004217df4:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004217dfb:	00 00 00 
  8004217dfe:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004217e02:	76 34                	jbe    8004217e38 <get_caller_pcs+0x6f>
  8004217e04:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217e07:	48 98                	cltq   
  8004217e09:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217e10:	00 
  8004217e11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217e15:	48 01 c2             	add    %rax,%rdx
  8004217e18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217e1c:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217e20:	48 89 02             	mov    %rax,(%rdx)
  8004217e23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217e27:	48 8b 00             	mov    (%rax),%rax
  8004217e2a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217e2e:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217e32:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217e36:	7e b5                	jle    8004217ded <get_caller_pcs+0x24>
  8004217e38:	eb 1f                	jmp    8004217e59 <get_caller_pcs+0x90>
  8004217e3a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217e3d:	48 98                	cltq   
  8004217e3f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217e46:	00 
  8004217e47:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217e4b:	48 01 d0             	add    %rdx,%rax
  8004217e4e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217e55:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217e59:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217e5d:	7e db                	jle    8004217e3a <get_caller_pcs+0x71>
  8004217e5f:	c9                   	leaveq 
  8004217e60:	c3                   	retq   

0000008004217e61 <holding>:
  8004217e61:	55                   	push   %rbp
  8004217e62:	48 89 e5             	mov    %rsp,%rbp
  8004217e65:	53                   	push   %rbx
  8004217e66:	48 83 ec 18          	sub    $0x18,%rsp
  8004217e6a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217e6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e72:	8b 00                	mov    (%rax),%eax
  8004217e74:	85 c0                	test   %eax,%eax
  8004217e76:	74 3d                	je     8004217eb5 <holding+0x54>
  8004217e78:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e7c:	48 8b 58 10          	mov    0x10(%rax),%rbx
  8004217e80:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004217e87:	00 00 00 
  8004217e8a:	ff d0                	callq  *%rax
  8004217e8c:	48 98                	cltq   
  8004217e8e:	48 c1 e0 03          	shl    $0x3,%rax
  8004217e92:	48 89 c2             	mov    %rax,%rdx
  8004217e95:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217e99:	48 01 d0             	add    %rdx,%rax
  8004217e9c:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004217ea3:	00 00 00 
  8004217ea6:	48 01 d0             	add    %rdx,%rax
  8004217ea9:	48 39 c3             	cmp    %rax,%rbx
  8004217eac:	75 07                	jne    8004217eb5 <holding+0x54>
  8004217eae:	b8 01 00 00 00       	mov    $0x1,%eax
  8004217eb3:	eb 05                	jmp    8004217eba <holding+0x59>
  8004217eb5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217eba:	48 83 c4 18          	add    $0x18,%rsp
  8004217ebe:	5b                   	pop    %rbx
  8004217ebf:	5d                   	pop    %rbp
  8004217ec0:	c3                   	retq   

0000008004217ec1 <__spin_initlock>:
  8004217ec1:	55                   	push   %rbp
  8004217ec2:	48 89 e5             	mov    %rsp,%rbp
  8004217ec5:	48 83 ec 10          	sub    $0x10,%rsp
  8004217ec9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004217ecd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004217ed1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217ed5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217edf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004217ee3:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004217ee7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217eeb:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004217ef2:	00 
  8004217ef3:	c9                   	leaveq 
  8004217ef4:	c3                   	retq   

0000008004217ef5 <spin_lock>:
  8004217ef5:	55                   	push   %rbp
  8004217ef6:	48 89 e5             	mov    %rsp,%rbp
  8004217ef9:	53                   	push   %rbx
  8004217efa:	48 83 ec 18          	sub    $0x18,%rsp
  8004217efe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217f02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f06:	48 89 c7             	mov    %rax,%rdi
  8004217f09:	48 b8 61 7e 21 04 80 	movabs $0x8004217e61,%rax
  8004217f10:	00 00 00 
  8004217f13:	ff d0                	callq  *%rax
  8004217f15:	85 c0                	test   %eax,%eax
  8004217f17:	74 44                	je     8004217f5d <spin_lock+0x68>
  8004217f19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f1d:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217f21:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004217f28:	00 00 00 
  8004217f2b:	ff d0                	callq  *%rax
  8004217f2d:	49 89 d8             	mov    %rbx,%r8
  8004217f30:	89 c1                	mov    %eax,%ecx
  8004217f32:	48 ba 78 09 22 04 80 	movabs $0x8004220978,%rdx
  8004217f39:	00 00 00 
  8004217f3c:	be 42 00 00 00       	mov    $0x42,%esi
  8004217f41:	48 bf a2 09 22 04 80 	movabs $0x80042209a2,%rdi
  8004217f48:	00 00 00 
  8004217f4b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f50:	49 b9 d5 04 20 04 80 	movabs $0x80042004d5,%r9
  8004217f57:	00 00 00 
  8004217f5a:	41 ff d1             	callq  *%r9
  8004217f5d:	eb 02                	jmp    8004217f61 <spin_lock+0x6c>
  8004217f5f:	f3 90                	pause  
  8004217f61:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f65:	be 01 00 00 00       	mov    $0x1,%esi
  8004217f6a:	48 89 c7             	mov    %rax,%rdi
  8004217f6d:	48 b8 a4 7d 21 04 80 	movabs $0x8004217da4,%rax
  8004217f74:	00 00 00 
  8004217f77:	ff d0                	callq  *%rax
  8004217f79:	85 c0                	test   %eax,%eax
  8004217f7b:	75 e2                	jne    8004217f5f <spin_lock+0x6a>
  8004217f7d:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004217f84:	00 00 00 
  8004217f87:	ff d0                	callq  *%rax
  8004217f89:	48 98                	cltq   
  8004217f8b:	48 c1 e0 03          	shl    $0x3,%rax
  8004217f8f:	48 89 c2             	mov    %rax,%rdx
  8004217f92:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217f96:	48 01 d0             	add    %rdx,%rax
  8004217f99:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  8004217fa0:	00 00 00 
  8004217fa3:	48 01 c2             	add    %rax,%rdx
  8004217fa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217faa:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004217fae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217fb2:	48 83 c0 18          	add    $0x18,%rax
  8004217fb6:	48 89 c7             	mov    %rax,%rdi
  8004217fb9:	48 b8 c9 7d 21 04 80 	movabs $0x8004217dc9,%rax
  8004217fc0:	00 00 00 
  8004217fc3:	ff d0                	callq  *%rax
  8004217fc5:	48 83 c4 18          	add    $0x18,%rsp
  8004217fc9:	5b                   	pop    %rbx
  8004217fca:	5d                   	pop    %rbp
  8004217fcb:	c3                   	retq   

0000008004217fcc <spin_unlock>:
  8004217fcc:	55                   	push   %rbp
  8004217fcd:	48 89 e5             	mov    %rsp,%rbp
  8004217fd0:	41 54                	push   %r12
  8004217fd2:	53                   	push   %rbx
  8004217fd3:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  8004217fda:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004217fe1:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004217fe8:	48 89 c7             	mov    %rax,%rdi
  8004217feb:	48 b8 61 7e 21 04 80 	movabs $0x8004217e61,%rax
  8004217ff2:	00 00 00 
  8004217ff5:	ff d0                	callq  *%rax
  8004217ff7:	85 c0                	test   %eax,%eax
  8004217ff9:	0f 85 d2 01 00 00    	jne    80042181d1 <spin_unlock+0x205>
  8004217fff:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218006:	48 8d 48 18          	lea    0x18(%rax),%rcx
  800421800a:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004218011:	ba 28 00 00 00       	mov    $0x28,%edx
  8004218016:	48 89 ce             	mov    %rcx,%rsi
  8004218019:	48 89 c7             	mov    %rax,%rdi
  800421801c:	48 b8 f6 0b 21 04 80 	movabs $0x8004210bf6,%rax
  8004218023:	00 00 00 
  8004218026:	ff d0                	callq  *%rax
  8004218028:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421802f:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004218033:	48 85 c0             	test   %rax,%rax
  8004218036:	75 39                	jne    8004218071 <spin_unlock+0xa5>
  8004218038:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421803f:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004218043:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421804a:	00 00 00 
  800421804d:	ff d0                	callq  *%rax
  800421804f:	48 89 da             	mov    %rbx,%rdx
  8004218052:	89 c6                	mov    %eax,%esi
  8004218054:	48 bf b8 09 22 04 80 	movabs $0x80042209b8,%rdi
  800421805b:	00 00 00 
  800421805e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218063:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800421806a:	00 00 00 
  800421806d:	ff d1                	callq  *%rcx
  800421806f:	eb 4d                	jmp    80042180be <spin_unlock+0xf2>
  8004218071:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218078:	48 8b 40 10          	mov    0x10(%rax),%rax
  800421807c:	0f b6 00             	movzbl (%rax),%eax
  800421807f:	44 0f b6 e0          	movzbl %al,%r12d
  8004218083:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421808a:	48 8b 58 08          	mov    0x8(%rax),%rbx
  800421808e:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004218095:	00 00 00 
  8004218098:	ff d0                	callq  *%rax
  800421809a:	44 89 e1             	mov    %r12d,%ecx
  800421809d:	48 89 da             	mov    %rbx,%rdx
  80042180a0:	89 c6                	mov    %eax,%esi
  80042180a2:	48 bf f8 09 22 04 80 	movabs $0x80042209f8,%rdi
  80042180a9:	00 00 00 
  80042180ac:	b8 00 00 00 00       	mov    $0x0,%eax
  80042180b1:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  80042180b8:	00 00 00 
  80042180bb:	41 ff d0             	callq  *%r8
  80042180be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042180c5:	e9 c3 00 00 00       	jmpq   800421818d <spin_unlock+0x1c1>
  80042180ca:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042180cd:	48 98                	cltq   
  80042180cf:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042180d6:	89 c0                	mov    %eax,%eax
  80042180d8:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  80042180df:	48 89 d6             	mov    %rdx,%rsi
  80042180e2:	48 89 c7             	mov    %rax,%rdi
  80042180e5:	48 b8 d7 f7 20 04 80 	movabs $0x800420f7d7,%rax
  80042180ec:	00 00 00 
  80042180ef:	ff d0                	callq  *%rax
  80042180f1:	85 c0                	test   %eax,%eax
  80042180f3:	78 6b                	js     8004218160 <spin_unlock+0x194>
  80042180f5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042180f8:	48 98                	cltq   
  80042180fa:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218101:	89 c2                	mov    %eax,%edx
  8004218103:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  800421810a:	48 29 c2             	sub    %rax,%rdx
  800421810d:	49 89 d0             	mov    %rdx,%r8
  8004218110:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  8004218117:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  800421811d:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  8004218123:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  800421812a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421812d:	48 98                	cltq   
  800421812f:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218136:	4c 89 04 24          	mov    %r8,(%rsp)
  800421813a:	49 89 f9             	mov    %rdi,%r9
  800421813d:	41 89 f0             	mov    %esi,%r8d
  8004218140:	89 c6                	mov    %eax,%esi
  8004218142:	48 bf 2e 0a 22 04 80 	movabs $0x8004220a2e,%rdi
  8004218149:	00 00 00 
  800421814c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218151:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  8004218158:	00 00 00 
  800421815b:	41 ff d2             	callq  *%r10
  800421815e:	eb 29                	jmp    8004218189 <spin_unlock+0x1bd>
  8004218160:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218163:	48 98                	cltq   
  8004218165:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421816c:	89 c6                	mov    %eax,%esi
  800421816e:	48 bf 45 0a 22 04 80 	movabs $0x8004220a45,%rdi
  8004218175:	00 00 00 
  8004218178:	b8 00 00 00 00       	mov    $0x0,%eax
  800421817d:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004218184:	00 00 00 
  8004218187:	ff d2                	callq  *%rdx
  8004218189:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800421818d:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  8004218191:	7f 14                	jg     80042181a7 <spin_unlock+0x1db>
  8004218193:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218196:	48 98                	cltq   
  8004218198:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  800421819f:	85 c0                	test   %eax,%eax
  80042181a1:	0f 85 23 ff ff ff    	jne    80042180ca <spin_unlock+0xfe>
  80042181a7:	48 ba 4d 0a 22 04 80 	movabs $0x8004220a4d,%rdx
  80042181ae:	00 00 00 
  80042181b1:	be 6c 00 00 00       	mov    $0x6c,%esi
  80042181b6:	48 bf a2 09 22 04 80 	movabs $0x80042209a2,%rdi
  80042181bd:	00 00 00 
  80042181c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042181c5:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042181cc:	00 00 00 
  80042181cf:	ff d1                	callq  *%rcx
  80042181d1:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042181d8:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  80042181df:	00 
  80042181e0:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042181e7:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  80042181ee:	00 
  80042181ef:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042181f6:	be 00 00 00 00       	mov    $0x0,%esi
  80042181fb:	48 89 c7             	mov    %rax,%rdi
  80042181fe:	48 b8 a4 7d 21 04 80 	movabs $0x8004217da4,%rax
  8004218205:	00 00 00 
  8004218208:	ff d0                	callq  *%rax
  800421820a:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  8004218211:	5b                   	pop    %rbx
  8004218212:	41 5c                	pop    %r12
  8004218214:	5d                   	pop    %rbp
  8004218215:	c3                   	retq   

0000008004218216 <e1000_attach>:
  8004218216:	55                   	push   %rbp
  8004218217:	48 89 e5             	mov    %rsp,%rbp
  800421821a:	48 83 ec 40          	sub    $0x40,%rsp
  800421821e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004218222:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218226:	48 89 c7             	mov    %rax,%rdi
  8004218229:	48 b8 d3 90 21 04 80 	movabs $0x80042190d3,%rax
  8004218230:	00 00 00 
  8004218233:	ff d0                	callq  *%rax
  8004218235:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218239:	8b 40 30             	mov    0x30(%rax),%eax
  800421823c:	89 c2                	mov    %eax,%edx
  800421823e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218242:	8b 40 18             	mov    0x18(%rax),%eax
  8004218245:	89 c0                	mov    %eax,%eax
  8004218247:	48 89 d6             	mov    %rdx,%rsi
  800421824a:	48 89 c7             	mov    %rax,%rdi
  800421824d:	48 b8 56 3f 20 04 80 	movabs $0x8004203f56,%rax
  8004218254:	00 00 00 
  8004218257:	ff d0                	callq  *%rax
  8004218259:	48 ba 20 d7 4d 04 80 	movabs $0x80044dd720,%rdx
  8004218260:	00 00 00 
  8004218263:	48 89 02             	mov    %rax,(%rdx)
  8004218266:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421826d:	e9 a9 00 00 00       	jmpq   800421831b <e1000_attach+0x105>
  8004218272:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218275:	48 98                	cltq   
  8004218277:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  800421827e:	48 b8 40 d8 4d 04 80 	movabs $0x80044dd840,%rax
  8004218285:	00 00 00 
  8004218288:	48 01 d0             	add    %rdx,%rax
  800421828b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421828f:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218296:	00 00 00 
  8004218299:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421829d:	77 32                	ja     80042182d1 <e1000_attach+0xbb>
  800421829f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042182a3:	48 89 c1             	mov    %rax,%rcx
  80042182a6:	48 ba 60 0a 22 04 80 	movabs $0x8004220a60,%rdx
  80042182ad:	00 00 00 
  80042182b0:	be 97 00 00 00       	mov    $0x97,%esi
  80042182b5:	48 bf 84 0a 22 04 80 	movabs $0x8004220a84,%rdi
  80042182bc:	00 00 00 
  80042182bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042182c4:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042182cb:	00 00 00 
  80042182ce:	41 ff d0             	callq  *%r8
  80042182d1:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042182d8:	ff ff ff 
  80042182db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042182df:	48 01 c2             	add    %rax,%rdx
  80042182e2:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  80042182e9:	00 00 00 
  80042182ec:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042182ef:	48 63 c9             	movslq %ecx,%rcx
  80042182f2:	48 c1 e1 04          	shl    $0x4,%rcx
  80042182f6:	48 01 c8             	add    %rcx,%rax
  80042182f9:	48 89 10             	mov    %rdx,(%rax)
  80042182fc:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  8004218303:	00 00 00 
  8004218306:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218309:	48 63 d2             	movslq %edx,%rdx
  800421830c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218310:	48 01 d0             	add    %rdx,%rax
  8004218313:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  8004218317:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421831b:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  800421831f:	0f 8e 4d ff ff ff    	jle    8004218272 <e1000_attach+0x5c>
  8004218325:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  800421832c:	00 00 00 
  800421832f:	48 8b 00             	mov    (%rax),%rax
  8004218332:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  8004218339:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  8004218340:	00 00 00 
  8004218343:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004218347:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421834e:	00 00 00 
  8004218351:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004218355:	77 32                	ja     8004218389 <e1000_attach+0x173>
  8004218357:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421835b:	48 89 c1             	mov    %rax,%rcx
  800421835e:	48 ba 60 0a 22 04 80 	movabs $0x8004220a60,%rdx
  8004218365:	00 00 00 
  8004218368:	be 9a 00 00 00       	mov    $0x9a,%esi
  800421836d:	48 bf 84 0a 22 04 80 	movabs $0x8004220a84,%rdi
  8004218374:	00 00 00 
  8004218377:	b8 00 00 00 00       	mov    $0x0,%eax
  800421837c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218383:	00 00 00 
  8004218386:	41 ff d0             	callq  *%r8
  8004218389:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  8004218390:	ff ff ff 
  8004218393:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218397:	48 01 c8             	add    %rcx,%rax
  800421839a:	89 02                	mov    %eax,(%rdx)
  800421839c:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  80042183a3:	00 00 00 
  80042183a6:	48 8b 00             	mov    (%rax),%rax
  80042183a9:	48 05 08 38 00 00    	add    $0x3808,%rax
  80042183af:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  80042183b5:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  80042183bc:	00 00 00 
  80042183bf:	48 8b 00             	mov    (%rax),%rax
  80042183c2:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  80042183c9:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  80042183d0:	00 00 00 
  80042183d3:	48 8b 00             	mov    (%rax),%rax
  80042183d6:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  80042183dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042183e2:	89 01                	mov    %eax,(%rcx)
  80042183e4:	89 02                	mov    %eax,(%rdx)
  80042183e6:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  80042183ed:	00 00 00 
  80042183f0:	48 8b 00             	mov    (%rax),%rax
  80042183f3:	48 05 00 04 00 00    	add    $0x400,%rax
  80042183f9:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  80042183ff:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218406:	00 00 00 
  8004218409:	48 8b 00             	mov    (%rax),%rax
  800421840c:	48 05 10 04 00 00    	add    $0x410,%rax
  8004218412:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  8004218418:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421841f:	e9 8e 00 00 00       	jmpq   80042184b2 <e1000_attach+0x29c>
  8004218424:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218427:	48 98                	cltq   
  8004218429:	48 c1 e0 0b          	shl    $0xb,%rax
  800421842d:	48 89 c2             	mov    %rax,%rdx
  8004218430:	48 b8 a0 75 4e 04 80 	movabs $0x80044e75a0,%rax
  8004218437:	00 00 00 
  800421843a:	48 01 d0             	add    %rdx,%rax
  800421843d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004218441:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218448:	00 00 00 
  800421844b:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421844f:	77 32                	ja     8004218483 <e1000_attach+0x26d>
  8004218451:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218455:	48 89 c1             	mov    %rax,%rcx
  8004218458:	48 ba 60 0a 22 04 80 	movabs $0x8004220a60,%rdx
  800421845f:	00 00 00 
  8004218462:	be b8 00 00 00       	mov    $0xb8,%esi
  8004218467:	48 bf 84 0a 22 04 80 	movabs $0x8004220a84,%rdi
  800421846e:	00 00 00 
  8004218471:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218476:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421847d:	00 00 00 
  8004218480:	41 ff d0             	callq  *%r8
  8004218483:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421848a:	ff ff ff 
  800421848d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218491:	48 01 c2             	add    %rax,%rdx
  8004218494:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  800421849b:	00 00 00 
  800421849e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042184a1:	48 63 c9             	movslq %ecx,%rcx
  80042184a4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042184a8:	48 01 c8             	add    %rcx,%rax
  80042184ab:	48 89 10             	mov    %rdx,(%rax)
  80042184ae:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042184b2:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  80042184b9:	0f 8e 65 ff ff ff    	jle    8004218424 <e1000_attach+0x20e>
  80042184bf:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  80042184c6:	00 00 00 
  80042184c9:	48 8b 00             	mov    (%rax),%rax
  80042184cc:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  80042184d3:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  80042184da:	00 00 00 
  80042184dd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042184e1:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042184e8:	00 00 00 
  80042184eb:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  80042184ef:	77 32                	ja     8004218523 <e1000_attach+0x30d>
  80042184f1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042184f5:	48 89 c1             	mov    %rax,%rcx
  80042184f8:	48 ba 60 0a 22 04 80 	movabs $0x8004220a60,%rdx
  80042184ff:	00 00 00 
  8004218502:	be ba 00 00 00       	mov    $0xba,%esi
  8004218507:	48 bf 84 0a 22 04 80 	movabs $0x8004220a84,%rdi
  800421850e:	00 00 00 
  8004218511:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218516:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421851d:	00 00 00 
  8004218520:	41 ff d0             	callq  *%r8
  8004218523:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800421852a:	ff ff ff 
  800421852d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218531:	48 01 c8             	add    %rcx,%rax
  8004218534:	89 02                	mov    %eax,(%rdx)
  8004218536:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  800421853d:	00 00 00 
  8004218540:	48 8b 00             	mov    (%rax),%rax
  8004218543:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004218549:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  800421854f:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218556:	00 00 00 
  8004218559:	48 8b 00             	mov    (%rax),%rax
  800421855c:	48 05 10 28 00 00    	add    $0x2810,%rax
  8004218562:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004218568:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  800421856f:	00 00 00 
  8004218572:	48 8b 00             	mov    (%rax),%rax
  8004218575:	48 05 18 28 00 00    	add    $0x2818,%rax
  800421857b:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  8004218581:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218588:	00 00 00 
  800421858b:	48 8b 00             	mov    (%rax),%rax
  800421858e:	48 05 00 01 00 00    	add    $0x100,%rax
  8004218594:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  800421859a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421859f:	c9                   	leaveq 
  80042185a0:	c3                   	retq   

00000080042185a1 <e1000_transmit>:
  80042185a1:	55                   	push   %rbp
  80042185a2:	48 89 e5             	mov    %rsp,%rbp
  80042185a5:	48 83 ec 20          	sub    $0x20,%rsp
  80042185a9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042185ad:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042185b0:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  80042185b7:	00 00 00 
  80042185ba:	48 8b 00             	mov    (%rax),%rax
  80042185bd:	48 85 c0             	test   %rax,%rax
  80042185c0:	74 09                	je     80042185cb <e1000_transmit+0x2a>
  80042185c2:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  80042185c9:	76 0a                	jbe    80042185d5 <e1000_transmit+0x34>
  80042185cb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  80042185d0:	e9 39 01 00 00       	jmpq   800421870e <e1000_transmit+0x16d>
  80042185d5:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  80042185dc:	00 00 00 
  80042185df:	48 8b 00             	mov    (%rax),%rax
  80042185e2:	48 05 18 38 00 00    	add    $0x3818,%rax
  80042185e8:	8b 00                	mov    (%rax),%eax
  80042185ea:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042185ed:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  80042185f4:	00 00 00 
  80042185f7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042185fa:	48 63 d2             	movslq %edx,%rdx
  80042185fd:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218601:	48 01 d0             	add    %rdx,%rax
  8004218604:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218608:	0f b6 c0             	movzbl %al,%eax
  800421860b:	83 e0 01             	and    $0x1,%eax
  800421860e:	85 c0                	test   %eax,%eax
  8004218610:	75 25                	jne    8004218637 <e1000_transmit+0x96>
  8004218612:	48 bf 94 0a 22 04 80 	movabs $0x8004220a94,%rdi
  8004218619:	00 00 00 
  800421861c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218621:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004218628:	00 00 00 
  800421862b:	ff d2                	callq  *%rdx
  800421862d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218632:	e9 d7 00 00 00       	jmpq   800421870e <e1000_transmit+0x16d>
  8004218637:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421863a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421863d:	48 98                	cltq   
  800421863f:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  8004218646:	48 b8 40 d8 4d 04 80 	movabs $0x80044dd840,%rax
  800421864d:	00 00 00 
  8004218650:	48 01 c1             	add    %rax,%rcx
  8004218653:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218657:	48 89 c6             	mov    %rax,%rsi
  800421865a:	48 89 cf             	mov    %rcx,%rdi
  800421865d:	48 b8 f6 0b 21 04 80 	movabs $0x8004210bf6,%rax
  8004218664:	00 00 00 
  8004218667:	ff d0                	callq  *%rax
  8004218669:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421866c:	48 ba 30 d7 4d 04 80 	movabs $0x80044dd730,%rdx
  8004218673:	00 00 00 
  8004218676:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004218679:	48 63 c9             	movslq %ecx,%rcx
  800421867c:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218680:	48 01 ca             	add    %rcx,%rdx
  8004218683:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004218687:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  800421868e:	00 00 00 
  8004218691:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218694:	48 63 d2             	movslq %edx,%rdx
  8004218697:	48 c1 e2 04          	shl    $0x4,%rdx
  800421869b:	48 01 d0             	add    %rdx,%rax
  800421869e:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042186a2:	83 e0 fe             	and    $0xfffffffe,%eax
  80042186a5:	89 c2                	mov    %eax,%edx
  80042186a7:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  80042186ae:	00 00 00 
  80042186b1:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042186b4:	48 63 c9             	movslq %ecx,%rcx
  80042186b7:	48 c1 e1 04          	shl    $0x4,%rcx
  80042186bb:	48 01 c8             	add    %rcx,%rax
  80042186be:	88 50 0c             	mov    %dl,0xc(%rax)
  80042186c1:	48 b8 30 d7 4d 04 80 	movabs $0x80044dd730,%rax
  80042186c8:	00 00 00 
  80042186cb:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042186ce:	48 63 d2             	movslq %edx,%rdx
  80042186d1:	48 c1 e2 04          	shl    $0x4,%rdx
  80042186d5:	48 01 d0             	add    %rdx,%rax
  80042186d8:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  80042186dc:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  80042186e3:	00 00 00 
  80042186e6:	48 8b 00             	mov    (%rax),%rax
  80042186e9:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  80042186f0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042186f3:	8d 50 01             	lea    0x1(%rax),%edx
  80042186f6:	89 d0                	mov    %edx,%eax
  80042186f8:	c1 f8 1f             	sar    $0x1f,%eax
  80042186fb:	c1 e8 1c             	shr    $0x1c,%eax
  80042186fe:	01 c2                	add    %eax,%edx
  8004218700:	83 e2 0f             	and    $0xf,%edx
  8004218703:	29 c2                	sub    %eax,%edx
  8004218705:	89 d0                	mov    %edx,%eax
  8004218707:	89 01                	mov    %eax,(%rcx)
  8004218709:	b8 00 00 00 00       	mov    $0x0,%eax
  800421870e:	c9                   	leaveq 
  800421870f:	c3                   	retq   

0000008004218710 <e1000_receive>:
  8004218710:	55                   	push   %rbp
  8004218711:	48 89 e5             	mov    %rsp,%rbp
  8004218714:	48 83 ec 20          	sub    $0x20,%rsp
  8004218718:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421871c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800421871f:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218726:	00 00 00 
  8004218729:	48 8b 00             	mov    (%rax),%rax
  800421872c:	48 85 c0             	test   %rax,%rax
  800421872f:	75 0a                	jne    800421873b <e1000_receive+0x2b>
  8004218731:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218736:	e9 59 01 00 00       	jmpq   8004218894 <e1000_receive+0x184>
  800421873b:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  8004218742:	00 00 00 
  8004218745:	48 8b 00             	mov    (%rax),%rax
  8004218748:	48 05 18 28 00 00    	add    $0x2818,%rax
  800421874e:	8b 00                	mov    (%rax),%eax
  8004218750:	8d 48 01             	lea    0x1(%rax),%ecx
  8004218753:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004218758:	89 c8                	mov    %ecx,%eax
  800421875a:	f7 e2                	mul    %edx
  800421875c:	89 d0                	mov    %edx,%eax
  800421875e:	c1 e8 06             	shr    $0x6,%eax
  8004218761:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  8004218767:	29 c1                	sub    %eax,%ecx
  8004218769:	89 c8                	mov    %ecx,%eax
  800421876b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421876e:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  8004218775:	00 00 00 
  8004218778:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421877b:	48 63 d2             	movslq %edx,%rdx
  800421877e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218782:	48 01 d0             	add    %rdx,%rax
  8004218785:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218789:	0f b6 c0             	movzbl %al,%eax
  800421878c:	83 e0 01             	and    $0x1,%eax
  800421878f:	85 c0                	test   %eax,%eax
  8004218791:	75 0a                	jne    800421879d <e1000_receive+0x8d>
  8004218793:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218798:	e9 f7 00 00 00       	jmpq   8004218894 <e1000_receive+0x184>
  800421879d:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  80042187a4:	00 00 00 
  80042187a7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042187aa:	48 63 d2             	movslq %edx,%rdx
  80042187ad:	48 c1 e2 04          	shl    $0x4,%rdx
  80042187b1:	48 01 d0             	add    %rdx,%rax
  80042187b4:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042187b8:	0f b6 c0             	movzbl %al,%eax
  80042187bb:	83 e0 02             	and    $0x2,%eax
  80042187be:	85 c0                	test   %eax,%eax
  80042187c0:	75 35                	jne    80042187f7 <e1000_receive+0xe7>
  80042187c2:	48 b9 a8 0a 22 04 80 	movabs $0x8004220aa8,%rcx
  80042187c9:	00 00 00 
  80042187cc:	48 ba d2 0a 22 04 80 	movabs $0x8004220ad2,%rdx
  80042187d3:	00 00 00 
  80042187d6:	be ef 00 00 00       	mov    $0xef,%esi
  80042187db:	48 bf 84 0a 22 04 80 	movabs $0x8004220a84,%rdi
  80042187e2:	00 00 00 
  80042187e5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187ea:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042187f1:	00 00 00 
  80042187f4:	41 ff d0             	callq  *%r8
  80042187f7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042187fa:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042187fd:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  8004218804:	00 00 00 
  8004218807:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421880a:	48 63 d2             	movslq %edx,%rdx
  800421880d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218811:	48 01 d0             	add    %rdx,%rax
  8004218814:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004218818:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  800421881c:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004218820:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218823:	39 c2                	cmp    %eax,%edx
  8004218825:	0f 46 c2             	cmovbe %edx,%eax
  8004218828:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421882b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421882e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218831:	48 98                	cltq   
  8004218833:	48 c1 e0 0b          	shl    $0xb,%rax
  8004218837:	48 89 c1             	mov    %rax,%rcx
  800421883a:	48 b8 a0 75 4e 04 80 	movabs $0x80044e75a0,%rax
  8004218841:	00 00 00 
  8004218844:	48 01 c1             	add    %rax,%rcx
  8004218847:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421884b:	48 89 ce             	mov    %rcx,%rsi
  800421884e:	48 89 c7             	mov    %rax,%rdi
  8004218851:	48 b8 f6 0b 21 04 80 	movabs $0x8004210bf6,%rax
  8004218858:	00 00 00 
  800421885b:	ff d0                	callq  *%rax
  800421885d:	48 b8 20 37 4e 04 80 	movabs $0x80044e3720,%rax
  8004218864:	00 00 00 
  8004218867:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421886a:	48 63 d2             	movslq %edx,%rdx
  800421886d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218871:	48 01 d0             	add    %rdx,%rax
  8004218874:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  8004218878:	48 b8 20 d7 4d 04 80 	movabs $0x80044dd720,%rax
  800421887f:	00 00 00 
  8004218882:	48 8b 00             	mov    (%rax),%rax
  8004218885:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  800421888c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421888f:	89 02                	mov    %eax,(%rdx)
  8004218891:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218894:	c9                   	leaveq 
  8004218895:	c3                   	retq   

0000008004218896 <pci_conf1_set_addr>:
  8004218896:	55                   	push   %rbp
  8004218897:	48 89 e5             	mov    %rsp,%rbp
  800421889a:	48 83 ec 20          	sub    $0x20,%rsp
  800421889e:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042188a1:	89 75 e8             	mov    %esi,-0x18(%rbp)
  80042188a4:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  80042188a7:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  80042188aa:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  80042188b1:	76 35                	jbe    80042188e8 <pci_conf1_set_addr+0x52>
  80042188b3:	48 b9 e8 0a 22 04 80 	movabs $0x8004220ae8,%rcx
  80042188ba:	00 00 00 
  80042188bd:	48 ba f2 0a 22 04 80 	movabs $0x8004220af2,%rdx
  80042188c4:	00 00 00 
  80042188c7:	be 31 00 00 00       	mov    $0x31,%esi
  80042188cc:	48 bf 07 0b 22 04 80 	movabs $0x8004220b07,%rdi
  80042188d3:	00 00 00 
  80042188d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042188db:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042188e2:	00 00 00 
  80042188e5:	41 ff d0             	callq  *%r8
  80042188e8:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  80042188ec:	76 35                	jbe    8004218923 <pci_conf1_set_addr+0x8d>
  80042188ee:	48 b9 15 0b 22 04 80 	movabs $0x8004220b15,%rcx
  80042188f5:	00 00 00 
  80042188f8:	48 ba f2 0a 22 04 80 	movabs $0x8004220af2,%rdx
  80042188ff:	00 00 00 
  8004218902:	be 32 00 00 00       	mov    $0x32,%esi
  8004218907:	48 bf 07 0b 22 04 80 	movabs $0x8004220b07,%rdi
  800421890e:	00 00 00 
  8004218911:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218916:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421891d:	00 00 00 
  8004218920:	41 ff d0             	callq  *%r8
  8004218923:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004218927:	76 35                	jbe    800421895e <pci_conf1_set_addr+0xc8>
  8004218929:	48 b9 1e 0b 22 04 80 	movabs $0x8004220b1e,%rcx
  8004218930:	00 00 00 
  8004218933:	48 ba f2 0a 22 04 80 	movabs $0x8004220af2,%rdx
  800421893a:	00 00 00 
  800421893d:	be 33 00 00 00       	mov    $0x33,%esi
  8004218942:	48 bf 07 0b 22 04 80 	movabs $0x8004220b07,%rdi
  8004218949:	00 00 00 
  800421894c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218951:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218958:	00 00 00 
  800421895b:	41 ff d0             	callq  *%r8
  800421895e:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  8004218965:	76 35                	jbe    800421899c <pci_conf1_set_addr+0x106>
  8004218967:	48 b9 27 0b 22 04 80 	movabs $0x8004220b27,%rcx
  800421896e:	00 00 00 
  8004218971:	48 ba f2 0a 22 04 80 	movabs $0x8004220af2,%rdx
  8004218978:	00 00 00 
  800421897b:	be 34 00 00 00       	mov    $0x34,%esi
  8004218980:	48 bf 07 0b 22 04 80 	movabs $0x8004220b07,%rdi
  8004218987:	00 00 00 
  800421898a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421898f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004218996:	00 00 00 
  8004218999:	41 ff d0             	callq  *%r8
  800421899c:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421899f:	83 e0 03             	and    $0x3,%eax
  80042189a2:	85 c0                	test   %eax,%eax
  80042189a4:	74 35                	je     80042189db <pci_conf1_set_addr+0x145>
  80042189a6:	48 b9 34 0b 22 04 80 	movabs $0x8004220b34,%rcx
  80042189ad:	00 00 00 
  80042189b0:	48 ba f2 0a 22 04 80 	movabs $0x8004220af2,%rdx
  80042189b7:	00 00 00 
  80042189ba:	be 35 00 00 00       	mov    $0x35,%esi
  80042189bf:	48 bf 07 0b 22 04 80 	movabs $0x8004220b07,%rdi
  80042189c6:	00 00 00 
  80042189c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042189ce:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  80042189d5:	00 00 00 
  80042189d8:	41 ff d0             	callq  *%r8
  80042189db:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042189de:	c1 e0 10             	shl    $0x10,%eax
  80042189e1:	89 c2                	mov    %eax,%edx
  80042189e3:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042189e6:	c1 e0 0b             	shl    $0xb,%eax
  80042189e9:	09 c2                	or     %eax,%edx
  80042189eb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042189ee:	c1 e0 08             	shl    $0x8,%eax
  80042189f1:	09 d0                	or     %edx,%eax
  80042189f3:	0b 45 e0             	or     -0x20(%rbp),%eax
  80042189f6:	0d 00 00 00 80       	or     $0x80000000,%eax
  80042189fb:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042189fe:	48 b8 e4 57 23 04 80 	movabs $0x80042357e4,%rax
  8004218a05:	00 00 00 
  8004218a08:	8b 00                	mov    (%rax),%eax
  8004218a0a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218a0d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218a10:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218a13:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218a16:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218a19:	ef                   	out    %eax,(%dx)
  8004218a1a:	c9                   	leaveq 
  8004218a1b:	c3                   	retq   

0000008004218a1c <pci_conf_read>:
  8004218a1c:	55                   	push   %rbp
  8004218a1d:	48 89 e5             	mov    %rsp,%rbp
  8004218a20:	48 83 ec 20          	sub    $0x20,%rsp
  8004218a24:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218a28:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218a2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a2f:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218a32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a36:	8b 70 08             	mov    0x8(%rax),%esi
  8004218a39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a3d:	48 8b 00             	mov    (%rax),%rax
  8004218a40:	8b 40 08             	mov    0x8(%rax),%eax
  8004218a43:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218a46:	89 c7                	mov    %eax,%edi
  8004218a48:	48 b8 96 88 21 04 80 	movabs $0x8004218896,%rax
  8004218a4f:	00 00 00 
  8004218a52:	ff d0                	callq  *%rax
  8004218a54:	48 b8 e8 57 23 04 80 	movabs $0x80042357e8,%rax
  8004218a5b:	00 00 00 
  8004218a5e:	8b 00                	mov    (%rax),%eax
  8004218a60:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004218a63:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218a66:	89 c2                	mov    %eax,%edx
  8004218a68:	ed                   	in     (%dx),%eax
  8004218a69:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004218a6c:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218a6f:	c9                   	leaveq 
  8004218a70:	c3                   	retq   

0000008004218a71 <pci_conf_write>:
  8004218a71:	55                   	push   %rbp
  8004218a72:	48 89 e5             	mov    %rsp,%rbp
  8004218a75:	48 83 ec 20          	sub    $0x20,%rsp
  8004218a79:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218a7d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218a80:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004218a83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a87:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218a8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a8e:	8b 70 08             	mov    0x8(%rax),%esi
  8004218a91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a95:	48 8b 00             	mov    (%rax),%rax
  8004218a98:	8b 40 08             	mov    0x8(%rax),%eax
  8004218a9b:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218a9e:	89 c7                	mov    %eax,%edi
  8004218aa0:	48 b8 96 88 21 04 80 	movabs $0x8004218896,%rax
  8004218aa7:	00 00 00 
  8004218aaa:	ff d0                	callq  *%rax
  8004218aac:	48 b8 e8 57 23 04 80 	movabs $0x80042357e8,%rax
  8004218ab3:	00 00 00 
  8004218ab6:	8b 00                	mov    (%rax),%eax
  8004218ab8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218abb:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218abe:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218ac1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218ac4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218ac7:	ef                   	out    %eax,(%dx)
  8004218ac8:	c9                   	leaveq 
  8004218ac9:	c3                   	retq   

0000008004218aca <pci_attach_match>:
  8004218aca:	55                   	push   %rbp
  8004218acb:	48 89 e5             	mov    %rsp,%rbp
  8004218ace:	48 83 ec 30          	sub    $0x30,%rsp
  8004218ad2:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218ad5:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218ad8:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  8004218adc:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004218ae0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218ae7:	e9 aa 00 00 00       	jmpq   8004218b96 <pci_attach_match+0xcc>
  8004218aec:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218aef:	48 c1 e0 04          	shl    $0x4,%rax
  8004218af3:	48 89 c2             	mov    %rax,%rdx
  8004218af6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218afa:	48 01 d0             	add    %rdx,%rax
  8004218afd:	8b 00                	mov    (%rax),%eax
  8004218aff:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004218b02:	0f 85 8a 00 00 00    	jne    8004218b92 <pci_attach_match+0xc8>
  8004218b08:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b0b:	48 c1 e0 04          	shl    $0x4,%rax
  8004218b0f:	48 89 c2             	mov    %rax,%rdx
  8004218b12:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218b16:	48 01 d0             	add    %rdx,%rax
  8004218b19:	8b 40 04             	mov    0x4(%rax),%eax
  8004218b1c:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004218b1f:	75 71                	jne    8004218b92 <pci_attach_match+0xc8>
  8004218b21:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b24:	48 c1 e0 04          	shl    $0x4,%rax
  8004218b28:	48 89 c2             	mov    %rax,%rdx
  8004218b2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218b2f:	48 01 d0             	add    %rdx,%rax
  8004218b32:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218b36:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004218b3a:	48 89 d7             	mov    %rdx,%rdi
  8004218b3d:	ff d0                	callq  *%rax
  8004218b3f:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218b42:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218b46:	7e 05                	jle    8004218b4d <pci_attach_match+0x83>
  8004218b48:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218b4b:	eb 6c                	jmp    8004218bb9 <pci_attach_match+0xef>
  8004218b4d:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218b51:	79 3f                	jns    8004218b92 <pci_attach_match+0xc8>
  8004218b53:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b56:	48 c1 e0 04          	shl    $0x4,%rax
  8004218b5a:	48 89 c2             	mov    %rax,%rdx
  8004218b5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218b61:	48 01 d0             	add    %rdx,%rax
  8004218b64:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004218b68:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004218b6b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004218b6e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218b71:	41 89 f0             	mov    %esi,%r8d
  8004218b74:	89 c6                	mov    %eax,%esi
  8004218b76:	48 bf 48 0b 22 04 80 	movabs $0x8004220b48,%rdi
  8004218b7d:	00 00 00 
  8004218b80:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218b85:	49 b9 83 9c 20 04 80 	movabs $0x8004209c83,%r9
  8004218b8c:	00 00 00 
  8004218b8f:	41 ff d1             	callq  *%r9
  8004218b92:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218b96:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b99:	48 c1 e0 04          	shl    $0x4,%rax
  8004218b9d:	48 89 c2             	mov    %rax,%rdx
  8004218ba0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218ba4:	48 01 d0             	add    %rdx,%rax
  8004218ba7:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218bab:	48 85 c0             	test   %rax,%rax
  8004218bae:	0f 85 38 ff ff ff    	jne    8004218aec <pci_attach_match+0x22>
  8004218bb4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218bb9:	c9                   	leaveq 
  8004218bba:	c3                   	retq   

0000008004218bbb <pci_attach>:
  8004218bbb:	55                   	push   %rbp
  8004218bbc:	48 89 e5             	mov    %rsp,%rbp
  8004218bbf:	48 83 ec 10          	sub    $0x10,%rsp
  8004218bc3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004218bc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218bcb:	8b 40 14             	mov    0x14(%rax),%eax
  8004218bce:	c1 e8 10             	shr    $0x10,%eax
  8004218bd1:	0f b6 c0             	movzbl %al,%eax
  8004218bd4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218bd8:	8b 52 14             	mov    0x14(%rdx),%edx
  8004218bdb:	89 d7                	mov    %edx,%edi
  8004218bdd:	c1 ef 18             	shr    $0x18,%edi
  8004218be0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218be4:	48 89 d1             	mov    %rdx,%rcx
  8004218be7:	48 ba 00 58 23 04 80 	movabs $0x8004235800,%rdx
  8004218bee:	00 00 00 
  8004218bf1:	89 c6                	mov    %eax,%esi
  8004218bf3:	48 b8 ca 8a 21 04 80 	movabs $0x8004218aca,%rax
  8004218bfa:	00 00 00 
  8004218bfd:	ff d0                	callq  *%rax
  8004218bff:	85 c0                	test   %eax,%eax
  8004218c01:	75 39                	jne    8004218c3c <pci_attach+0x81>
  8004218c03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218c07:	8b 40 10             	mov    0x10(%rax),%eax
  8004218c0a:	c1 e8 10             	shr    $0x10,%eax
  8004218c0d:	89 c6                	mov    %eax,%esi
  8004218c0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218c13:	8b 40 10             	mov    0x10(%rax),%eax
  8004218c16:	0f b7 c0             	movzwl %ax,%eax
  8004218c19:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218c1d:	48 89 d1             	mov    %rdx,%rcx
  8004218c20:	48 ba 20 58 23 04 80 	movabs $0x8004235820,%rdx
  8004218c27:	00 00 00 
  8004218c2a:	89 c7                	mov    %eax,%edi
  8004218c2c:	48 b8 ca 8a 21 04 80 	movabs $0x8004218aca,%rax
  8004218c33:	00 00 00 
  8004218c36:	ff d0                	callq  *%rax
  8004218c38:	85 c0                	test   %eax,%eax
  8004218c3a:	74 07                	je     8004218c43 <pci_attach+0x88>
  8004218c3c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218c41:	eb 05                	jmp    8004218c48 <pci_attach+0x8d>
  8004218c43:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218c48:	c9                   	leaveq 
  8004218c49:	c3                   	retq   

0000008004218c4a <pci_print_func>:
  8004218c4a:	55                   	push   %rbp
  8004218c4b:	48 89 e5             	mov    %rsp,%rbp
  8004218c4e:	48 83 ec 40          	sub    $0x40,%rsp
  8004218c52:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218c56:	48 b8 40 58 23 04 80 	movabs $0x8004235840,%rax
  8004218c5d:	00 00 00 
  8004218c60:	48 8b 00             	mov    (%rax),%rax
  8004218c63:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218c67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218c6b:	8b 40 14             	mov    0x14(%rax),%eax
  8004218c6e:	c1 e8 18             	shr    $0x18,%eax
  8004218c71:	83 f8 06             	cmp    $0x6,%eax
  8004218c74:	77 20                	ja     8004218c96 <pci_print_func+0x4c>
  8004218c76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218c7a:	8b 40 14             	mov    0x14(%rax),%eax
  8004218c7d:	c1 e8 18             	shr    $0x18,%eax
  8004218c80:	89 c2                	mov    %eax,%edx
  8004218c82:	48 b8 40 58 23 04 80 	movabs $0x8004235840,%rax
  8004218c89:	00 00 00 
  8004218c8c:	89 d2                	mov    %edx,%edx
  8004218c8e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004218c92:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218c96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218c9a:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  8004218c9e:	0f b6 f8             	movzbl %al,%edi
  8004218ca1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ca5:	8b 40 14             	mov    0x14(%rax),%eax
  8004218ca8:	c1 e8 10             	shr    $0x10,%eax
  8004218cab:	0f b6 f0             	movzbl %al,%esi
  8004218cae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cb2:	8b 40 14             	mov    0x14(%rax),%eax
  8004218cb5:	c1 e8 18             	shr    $0x18,%eax
  8004218cb8:	41 89 c1             	mov    %eax,%r9d
  8004218cbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cbf:	8b 40 10             	mov    0x10(%rax),%eax
  8004218cc2:	c1 e8 10             	shr    $0x10,%eax
  8004218cc5:	41 89 c2             	mov    %eax,%r10d
  8004218cc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ccc:	8b 40 10             	mov    0x10(%rax),%eax
  8004218ccf:	44 0f b7 c0          	movzwl %ax,%r8d
  8004218cd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cd7:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218cda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cde:	8b 50 08             	mov    0x8(%rax),%edx
  8004218ce1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ce5:	48 8b 00             	mov    (%rax),%rax
  8004218ce8:	8b 40 08             	mov    0x8(%rax),%eax
  8004218ceb:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  8004218cef:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  8004218cf3:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004218cf8:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218cfc:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004218d00:	45 89 d1             	mov    %r10d,%r9d
  8004218d03:	89 c6                	mov    %eax,%esi
  8004218d05:	48 bf e8 0b 22 04 80 	movabs $0x8004220be8,%rdi
  8004218d0c:	00 00 00 
  8004218d0f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218d14:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  8004218d1b:	00 00 00 
  8004218d1e:	41 ff d2             	callq  *%r10
  8004218d21:	c9                   	leaveq 
  8004218d22:	c3                   	retq   

0000008004218d23 <pci_scan_bus>:
  8004218d23:	55                   	push   %rbp
  8004218d24:	48 89 e5             	mov    %rsp,%rbp
  8004218d27:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218d2e:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  8004218d35:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218d3c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218d40:	ba 50 00 00 00       	mov    $0x50,%edx
  8004218d45:	be 00 00 00 00       	mov    $0x0,%esi
  8004218d4a:	48 89 c7             	mov    %rax,%rdi
  8004218d4d:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004218d54:	00 00 00 
  8004218d57:	ff d0                	callq  *%rax
  8004218d59:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004218d60:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004218d64:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004218d6b:	e9 22 02 00 00       	jmpq   8004218f92 <pci_scan_bus+0x26f>
  8004218d70:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218d74:	be 0c 00 00 00       	mov    $0xc,%esi
  8004218d79:	48 89 c7             	mov    %rax,%rdi
  8004218d7c:	48 b8 1c 8a 21 04 80 	movabs $0x8004218a1c,%rax
  8004218d83:	00 00 00 
  8004218d86:	ff d0                	callq  *%rax
  8004218d88:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218d8b:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218d8e:	c1 e8 10             	shr    $0x10,%eax
  8004218d91:	83 e0 7f             	and    $0x7f,%eax
  8004218d94:	83 f8 01             	cmp    $0x1,%eax
  8004218d97:	0f 87 ec 01 00 00    	ja     8004218f89 <pci_scan_bus+0x266>
  8004218d9d:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218da1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004218da5:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004218dac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004218db0:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  8004218db7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004218dbb:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004218dc2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004218dc6:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  8004218dcd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004218dd1:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004218dd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218ddc:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004218de3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004218de7:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  8004218dee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218df2:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004218df9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218dfd:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004218e04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218e08:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004218e0f:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  8004218e16:	00 00 00 
  8004218e19:	e9 45 01 00 00       	jmpq   8004218f63 <pci_scan_bus+0x240>
  8004218e1e:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004218e25:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  8004218e2c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004218e33:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004218e3a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004218e41:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004218e48:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004218e4f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004218e56:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004218e5d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004218e64:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004218e6b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004218e72:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  8004218e79:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004218e7d:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004218e84:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004218e88:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004218e8f:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004218e93:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004218e9a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004218e9e:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  8004218ea5:	be 00 00 00 00       	mov    $0x0,%esi
  8004218eaa:	48 89 c7             	mov    %rax,%rdi
  8004218ead:	48 b8 1c 8a 21 04 80 	movabs $0x8004218a1c,%rax
  8004218eb4:	00 00 00 
  8004218eb7:	ff d0                	callq  *%rax
  8004218eb9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  8004218ebf:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  8004218ec5:	0f b7 c0             	movzwl %ax,%eax
  8004218ec8:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004218ecd:	0f 84 81 00 00 00    	je     8004218f54 <pci_scan_bus+0x231>
  8004218ed3:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218eda:	be 3c 00 00 00       	mov    $0x3c,%esi
  8004218edf:	48 89 c7             	mov    %rax,%rdi
  8004218ee2:	48 b8 1c 8a 21 04 80 	movabs $0x8004218a1c,%rax
  8004218ee9:	00 00 00 
  8004218eec:	ff d0                	callq  *%rax
  8004218eee:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218ef1:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218ef4:	88 45 98             	mov    %al,-0x68(%rbp)
  8004218ef7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218efe:	be 08 00 00 00       	mov    $0x8,%esi
  8004218f03:	48 89 c7             	mov    %rax,%rdi
  8004218f06:	48 b8 1c 8a 21 04 80 	movabs $0x8004218a1c,%rax
  8004218f0d:	00 00 00 
  8004218f10:	ff d0                	callq  *%rax
  8004218f12:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004218f18:	48 b8 e0 57 23 04 80 	movabs $0x80042357e0,%rax
  8004218f1f:	00 00 00 
  8004218f22:	8b 00                	mov    (%rax),%eax
  8004218f24:	85 c0                	test   %eax,%eax
  8004218f26:	74 16                	je     8004218f3e <pci_scan_bus+0x21b>
  8004218f28:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218f2f:	48 89 c7             	mov    %rax,%rdi
  8004218f32:	48 b8 4a 8c 21 04 80 	movabs $0x8004218c4a,%rax
  8004218f39:	00 00 00 
  8004218f3c:	ff d0                	callq  *%rax
  8004218f3e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218f45:	48 89 c7             	mov    %rax,%rdi
  8004218f48:	48 b8 bb 8b 21 04 80 	movabs $0x8004218bbb,%rax
  8004218f4f:	00 00 00 
  8004218f52:	ff d0                	callq  *%rax
  8004218f54:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  8004218f5a:	83 c0 01             	add    $0x1,%eax
  8004218f5d:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004218f63:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004218f69:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218f6c:	25 00 00 80 00       	and    $0x800000,%eax
  8004218f71:	85 c0                	test   %eax,%eax
  8004218f73:	74 07                	je     8004218f7c <pci_scan_bus+0x259>
  8004218f75:	b8 08 00 00 00       	mov    $0x8,%eax
  8004218f7a:	eb 05                	jmp    8004218f81 <pci_scan_bus+0x25e>
  8004218f7c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218f81:	39 c2                	cmp    %eax,%edx
  8004218f83:	0f 82 95 fe ff ff    	jb     8004218e1e <pci_scan_bus+0xfb>
  8004218f89:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218f8c:	83 c0 01             	add    $0x1,%eax
  8004218f8f:	89 45 a8             	mov    %eax,-0x58(%rbp)
  8004218f92:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218f95:	83 f8 1f             	cmp    $0x1f,%eax
  8004218f98:	0f 86 d2 fd ff ff    	jbe    8004218d70 <pci_scan_bus+0x4d>
  8004218f9e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218fa1:	c9                   	leaveq 
  8004218fa2:	c3                   	retq   

0000008004218fa3 <pci_bridge_attach>:
  8004218fa3:	55                   	push   %rbp
  8004218fa4:	48 89 e5             	mov    %rsp,%rbp
  8004218fa7:	48 83 ec 30          	sub    $0x30,%rsp
  8004218fab:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218faf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218fb3:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004218fb8:	48 89 c7             	mov    %rax,%rdi
  8004218fbb:	48 b8 1c 8a 21 04 80 	movabs $0x8004218a1c,%rax
  8004218fc2:	00 00 00 
  8004218fc5:	ff d0                	callq  *%rax
  8004218fc7:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218fca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218fce:	be 18 00 00 00       	mov    $0x18,%esi
  8004218fd3:	48 89 c7             	mov    %rax,%rdi
  8004218fd6:	48 b8 1c 8a 21 04 80 	movabs $0x8004218a1c,%rax
  8004218fdd:	00 00 00 
  8004218fe0:	ff d0                	callq  *%rax
  8004218fe2:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218fe5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218fe8:	83 e0 0f             	and    $0xf,%eax
  8004218feb:	83 f8 01             	cmp    $0x1,%eax
  8004218fee:	75 40                	jne    8004219030 <pci_bridge_attach+0x8d>
  8004218ff0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218ff4:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218ff7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218ffb:	8b 50 08             	mov    0x8(%rax),%edx
  8004218ffe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219002:	48 8b 00             	mov    (%rax),%rax
  8004219005:	8b 40 08             	mov    0x8(%rax),%eax
  8004219008:	89 c6                	mov    %eax,%esi
  800421900a:	48 bf 28 0c 22 04 80 	movabs $0x8004220c28,%rdi
  8004219011:	00 00 00 
  8004219014:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219019:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  8004219020:	00 00 00 
  8004219023:	41 ff d0             	callq  *%r8
  8004219026:	b8 00 00 00 00       	mov    $0x0,%eax
  800421902b:	e9 a1 00 00 00       	jmpq   80042190d1 <pci_bridge_attach+0x12e>
  8004219030:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004219034:	ba 10 00 00 00       	mov    $0x10,%edx
  8004219039:	be 00 00 00 00       	mov    $0x0,%esi
  800421903e:	48 89 c7             	mov    %rax,%rdi
  8004219041:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004219048:	00 00 00 
  800421904b:	ff d0                	callq  *%rax
  800421904d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219051:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219055:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219058:	c1 e8 08             	shr    $0x8,%eax
  800421905b:	0f b6 c0             	movzbl %al,%eax
  800421905e:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004219061:	48 b8 e0 57 23 04 80 	movabs $0x80042357e0,%rax
  8004219068:	00 00 00 
  800421906b:	8b 00                	mov    (%rax),%eax
  800421906d:	85 c0                	test   %eax,%eax
  800421906f:	74 48                	je     80042190b9 <pci_bridge_attach+0x116>
  8004219071:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219074:	c1 e8 10             	shr    $0x10,%eax
  8004219077:	0f b6 f8             	movzbl %al,%edi
  800421907a:	8b 75 e8             	mov    -0x18(%rbp),%esi
  800421907d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219081:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219084:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219088:	8b 50 08             	mov    0x8(%rax),%edx
  800421908b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421908f:	48 8b 00             	mov    (%rax),%rax
  8004219092:	8b 40 08             	mov    0x8(%rax),%eax
  8004219095:	41 89 f9             	mov    %edi,%r9d
  8004219098:	41 89 f0             	mov    %esi,%r8d
  800421909b:	89 c6                	mov    %eax,%esi
  800421909d:	48 bf 60 0c 22 04 80 	movabs $0x8004220c60,%rdi
  80042190a4:	00 00 00 
  80042190a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042190ac:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  80042190b3:	00 00 00 
  80042190b6:	41 ff d2             	callq  *%r10
  80042190b9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042190bd:	48 89 c7             	mov    %rax,%rdi
  80042190c0:	48 b8 23 8d 21 04 80 	movabs $0x8004218d23,%rax
  80042190c7:	00 00 00 
  80042190ca:	ff d0                	callq  *%rax
  80042190cc:	b8 01 00 00 00       	mov    $0x1,%eax
  80042190d1:	c9                   	leaveq 
  80042190d2:	c3                   	retq   

00000080042190d3 <pci_func_enable>:
  80042190d3:	55                   	push   %rbp
  80042190d4:	48 89 e5             	mov    %rsp,%rbp
  80042190d7:	48 83 ec 40          	sub    $0x40,%rsp
  80042190db:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042190df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190e3:	ba 07 00 00 00       	mov    $0x7,%edx
  80042190e8:	be 04 00 00 00       	mov    $0x4,%esi
  80042190ed:	48 89 c7             	mov    %rax,%rdi
  80042190f0:	48 b8 71 8a 21 04 80 	movabs $0x8004218a71,%rax
  80042190f7:	00 00 00 
  80042190fa:	ff d0                	callq  *%rax
  80042190fc:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  8004219103:	e9 ee 01 00 00       	jmpq   80042192f6 <pci_func_enable+0x223>
  8004219108:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421910b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421910f:	89 d6                	mov    %edx,%esi
  8004219111:	48 89 c7             	mov    %rax,%rdi
  8004219114:	48 b8 1c 8a 21 04 80 	movabs $0x8004218a1c,%rax
  800421911b:	00 00 00 
  800421911e:	ff d0                	callq  *%rax
  8004219120:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004219123:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  800421912a:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421912d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219131:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004219136:	89 ce                	mov    %ecx,%esi
  8004219138:	48 89 c7             	mov    %rax,%rdi
  800421913b:	48 b8 71 8a 21 04 80 	movabs $0x8004218a71,%rax
  8004219142:	00 00 00 
  8004219145:	ff d0                	callq  *%rax
  8004219147:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421914a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421914e:	89 d6                	mov    %edx,%esi
  8004219150:	48 89 c7             	mov    %rax,%rdi
  8004219153:	48 b8 1c 8a 21 04 80 	movabs $0x8004218a1c,%rax
  800421915a:	00 00 00 
  800421915d:	ff d0                	callq  *%rax
  800421915f:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004219162:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004219166:	75 05                	jne    800421916d <pci_func_enable+0x9a>
  8004219168:	e9 83 01 00 00       	jmpq   80042192f0 <pci_func_enable+0x21d>
  800421916d:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219170:	83 e8 10             	sub    $0x10,%eax
  8004219173:	c1 e8 02             	shr    $0x2,%eax
  8004219176:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004219179:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421917c:	83 e0 01             	and    $0x1,%eax
  800421917f:	85 c0                	test   %eax,%eax
  8004219181:	75 65                	jne    80042191e8 <pci_func_enable+0x115>
  8004219183:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004219186:	83 e0 06             	and    $0x6,%eax
  8004219189:	83 f8 04             	cmp    $0x4,%eax
  800421918c:	75 07                	jne    8004219195 <pci_func_enable+0xc2>
  800421918e:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  8004219195:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004219198:	83 e0 f0             	and    $0xfffffff0,%eax
  800421919b:	f7 d8                	neg    %eax
  800421919d:	23 45 e8             	and    -0x18(%rbp),%eax
  80042191a0:	83 e0 f0             	and    $0xfffffff0,%eax
  80042191a3:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042191a6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042191a9:	83 e0 f0             	and    $0xfffffff0,%eax
  80042191ac:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042191af:	48 b8 a0 b5 6d 04 80 	movabs $0x80046db5a0,%rax
  80042191b6:	00 00 00 
  80042191b9:	8b 00                	mov    (%rax),%eax
  80042191bb:	85 c0                	test   %eax,%eax
  80042191bd:	74 7a                	je     8004219239 <pci_func_enable+0x166>
  80042191bf:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  80042191c2:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042191c5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042191c8:	89 c6                	mov    %eax,%esi
  80042191ca:	48 bf 90 0c 22 04 80 	movabs $0x8004220c90,%rdi
  80042191d1:	00 00 00 
  80042191d4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042191d9:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  80042191e0:	00 00 00 
  80042191e3:	41 ff d0             	callq  *%r8
  80042191e6:	eb 51                	jmp    8004219239 <pci_func_enable+0x166>
  80042191e8:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042191eb:	83 e0 fc             	and    $0xfffffffc,%eax
  80042191ee:	f7 d8                	neg    %eax
  80042191f0:	23 45 e8             	and    -0x18(%rbp),%eax
  80042191f3:	83 e0 fc             	and    $0xfffffffc,%eax
  80042191f6:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042191f9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042191fc:	83 e0 fc             	and    $0xfffffffc,%eax
  80042191ff:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219202:	48 b8 a0 b5 6d 04 80 	movabs $0x80046db5a0,%rax
  8004219209:	00 00 00 
  800421920c:	8b 00                	mov    (%rax),%eax
  800421920e:	85 c0                	test   %eax,%eax
  8004219210:	74 27                	je     8004219239 <pci_func_enable+0x166>
  8004219212:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004219215:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219218:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421921b:	89 c6                	mov    %eax,%esi
  800421921d:	48 bf b8 0c 22 04 80 	movabs $0x8004220cb8,%rdi
  8004219224:	00 00 00 
  8004219227:	b8 00 00 00 00       	mov    $0x0,%eax
  800421922c:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  8004219233:	00 00 00 
  8004219236:	41 ff d0             	callq  *%r8
  8004219239:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421923c:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421923f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219243:	89 ce                	mov    %ecx,%esi
  8004219245:	48 89 c7             	mov    %rax,%rdi
  8004219248:	48 b8 71 8a 21 04 80 	movabs $0x8004218a71,%rax
  800421924f:	00 00 00 
  8004219252:	ff d0                	callq  *%rax
  8004219254:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219258:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421925b:	48 63 d2             	movslq %edx,%rdx
  800421925e:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  8004219262:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004219265:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  8004219269:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421926d:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004219270:	48 63 d2             	movslq %edx,%rdx
  8004219273:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  8004219277:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421927a:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  800421927d:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  8004219281:	74 6d                	je     80042192f0 <pci_func_enable+0x21d>
  8004219283:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004219287:	75 67                	jne    80042192f0 <pci_func_enable+0x21d>
  8004219289:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421928d:	8b 40 10             	mov    0x10(%rax),%eax
  8004219290:	c1 e8 10             	shr    $0x10,%eax
  8004219293:	41 89 c0             	mov    %eax,%r8d
  8004219296:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421929a:	8b 40 10             	mov    0x10(%rax),%eax
  800421929d:	0f b7 f8             	movzwl %ax,%edi
  80042192a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192a4:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042192a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192ab:	8b 50 08             	mov    0x8(%rax),%edx
  80042192ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192b2:	48 8b 00             	mov    (%rax),%rax
  80042192b5:	8b 40 08             	mov    0x8(%rax),%eax
  80042192b8:	8b 75 f0             	mov    -0x10(%rbp),%esi
  80042192bb:	89 74 24 10          	mov    %esi,0x10(%rsp)
  80042192bf:	8b 75 f4             	mov    -0xc(%rbp),%esi
  80042192c2:	89 74 24 08          	mov    %esi,0x8(%rsp)
  80042192c6:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  80042192c9:	89 34 24             	mov    %esi,(%rsp)
  80042192cc:	45 89 c1             	mov    %r8d,%r9d
  80042192cf:	41 89 f8             	mov    %edi,%r8d
  80042192d2:	89 c6                	mov    %eax,%esi
  80042192d4:	48 bf e0 0c 22 04 80 	movabs $0x8004220ce0,%rdi
  80042192db:	00 00 00 
  80042192de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042192e3:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  80042192ea:	00 00 00 
  80042192ed:	41 ff d2             	callq  *%r10
  80042192f0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042192f3:	01 45 f8             	add    %eax,-0x8(%rbp)
  80042192f6:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  80042192fa:	0f 86 08 fe ff ff    	jbe    8004219108 <pci_func_enable+0x35>
  8004219300:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219304:	8b 40 10             	mov    0x10(%rax),%eax
  8004219307:	c1 e8 10             	shr    $0x10,%eax
  800421930a:	89 c7                	mov    %eax,%edi
  800421930c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219310:	8b 40 10             	mov    0x10(%rax),%eax
  8004219313:	0f b7 f0             	movzwl %ax,%esi
  8004219316:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421931a:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421931d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219321:	8b 50 08             	mov    0x8(%rax),%edx
  8004219324:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219328:	48 8b 00             	mov    (%rax),%rax
  800421932b:	8b 40 08             	mov    0x8(%rax),%eax
  800421932e:	41 89 f9             	mov    %edi,%r9d
  8004219331:	41 89 f0             	mov    %esi,%r8d
  8004219334:	89 c6                	mov    %eax,%esi
  8004219336:	48 bf 40 0d 22 04 80 	movabs $0x8004220d40,%rdi
  800421933d:	00 00 00 
  8004219340:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219345:	49 ba 83 9c 20 04 80 	movabs $0x8004209c83,%r10
  800421934c:	00 00 00 
  800421934f:	41 ff d2             	callq  *%r10
  8004219352:	c9                   	leaveq 
  8004219353:	c3                   	retq   

0000008004219354 <pci_init>:
  8004219354:	55                   	push   %rbp
  8004219355:	48 89 e5             	mov    %rsp,%rbp
  8004219358:	ba 10 00 00 00       	mov    $0x10,%edx
  800421935d:	be 00 00 00 00       	mov    $0x0,%esi
  8004219362:	48 bf b0 b5 6d 04 80 	movabs $0x80046db5b0,%rdi
  8004219369:	00 00 00 
  800421936c:	48 b8 6b 0b 21 04 80 	movabs $0x8004210b6b,%rax
  8004219373:	00 00 00 
  8004219376:	ff d0                	callq  *%rax
  8004219378:	48 bf b0 b5 6d 04 80 	movabs $0x80046db5b0,%rdi
  800421937f:	00 00 00 
  8004219382:	48 b8 23 8d 21 04 80 	movabs $0x8004218d23,%rax
  8004219389:	00 00 00 
  800421938c:	ff d0                	callq  *%rax
  800421938e:	5d                   	pop    %rbp
  800421938f:	c3                   	retq   

0000008004219390 <time_init>:
  8004219390:	55                   	push   %rbp
  8004219391:	48 89 e5             	mov    %rsp,%rbp
  8004219394:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  800421939b:	00 00 00 
  800421939e:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042193a4:	5d                   	pop    %rbp
  80042193a5:	c3                   	retq   

00000080042193a6 <time_tick>:
  80042193a6:	55                   	push   %rbp
  80042193a7:	48 89 e5             	mov    %rsp,%rbp
  80042193aa:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  80042193b1:	00 00 00 
  80042193b4:	8b 00                	mov    (%rax),%eax
  80042193b6:	8d 50 01             	lea    0x1(%rax),%edx
  80042193b9:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  80042193c0:	00 00 00 
  80042193c3:	89 10                	mov    %edx,(%rax)
  80042193c5:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  80042193cc:	00 00 00 
  80042193cf:	8b 10                	mov    (%rax),%edx
  80042193d1:	89 d0                	mov    %edx,%eax
  80042193d3:	c1 e0 02             	shl    $0x2,%eax
  80042193d6:	01 d0                	add    %edx,%eax
  80042193d8:	01 c0                	add    %eax,%eax
  80042193da:	89 c2                	mov    %eax,%edx
  80042193dc:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  80042193e3:	00 00 00 
  80042193e6:	8b 00                	mov    (%rax),%eax
  80042193e8:	39 c2                	cmp    %eax,%edx
  80042193ea:	73 2a                	jae    8004219416 <time_tick+0x70>
  80042193ec:	48 ba 6f 0d 22 04 80 	movabs $0x8004220d6f,%rdx
  80042193f3:	00 00 00 
  80042193f6:	be 14 00 00 00       	mov    $0x14,%esi
  80042193fb:	48 bf 8a 0d 22 04 80 	movabs $0x8004220d8a,%rdi
  8004219402:	00 00 00 
  8004219405:	b8 00 00 00 00       	mov    $0x0,%eax
  800421940a:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004219411:	00 00 00 
  8004219414:	ff d1                	callq  *%rcx
  8004219416:	5d                   	pop    %rbp
  8004219417:	c3                   	retq   

0000008004219418 <time_msec>:
  8004219418:	55                   	push   %rbp
  8004219419:	48 89 e5             	mov    %rsp,%rbp
  800421941c:	48 b8 c0 b5 6d 04 80 	movabs $0x80046db5c0,%rax
  8004219423:	00 00 00 
  8004219426:	8b 10                	mov    (%rax),%edx
  8004219428:	89 d0                	mov    %edx,%eax
  800421942a:	c1 e0 02             	shl    $0x2,%eax
  800421942d:	01 d0                	add    %edx,%eax
  800421942f:	01 c0                	add    %eax,%eax
  8004219431:	5d                   	pop    %rbp
  8004219432:	c3                   	retq   

0000008004219433 <page2ppn>:
  8004219433:	55                   	push   %rbp
  8004219434:	48 89 e5             	mov    %rsp,%rbp
  8004219437:	48 83 ec 08          	sub    $0x8,%rsp
  800421943b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421943f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219443:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  800421944a:	00 00 00 
  800421944d:	48 8b 00             	mov    (%rax),%rax
  8004219450:	48 29 c2             	sub    %rax,%rdx
  8004219453:	48 89 d0             	mov    %rdx,%rax
  8004219456:	48 c1 f8 04          	sar    $0x4,%rax
  800421945a:	c9                   	leaveq 
  800421945b:	c3                   	retq   

000000800421945c <page2pa>:
  800421945c:	55                   	push   %rbp
  800421945d:	48 89 e5             	mov    %rsp,%rbp
  8004219460:	48 83 ec 08          	sub    $0x8,%rsp
  8004219464:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219468:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421946c:	48 89 c7             	mov    %rax,%rdi
  800421946f:	48 b8 33 94 21 04 80 	movabs $0x8004219433,%rax
  8004219476:	00 00 00 
  8004219479:	ff d0                	callq  *%rax
  800421947b:	48 c1 e0 0c          	shl    $0xc,%rax
  800421947f:	c9                   	leaveq 
  8004219480:	c3                   	retq   

0000008004219481 <pa2page>:
  8004219481:	55                   	push   %rbp
  8004219482:	48 89 e5             	mov    %rsp,%rbp
  8004219485:	48 83 ec 10          	sub    $0x10,%rsp
  8004219489:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421948d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219491:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219495:	48 89 c2             	mov    %rax,%rdx
  8004219498:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421949f:	00 00 00 
  80042194a2:	48 8b 00             	mov    (%rax),%rax
  80042194a5:	48 39 c2             	cmp    %rax,%rdx
  80042194a8:	72 2a                	jb     80042194d4 <pa2page+0x53>
  80042194aa:	48 ba a0 0d 22 04 80 	movabs $0x8004220da0,%rdx
  80042194b1:	00 00 00 
  80042194b4:	be 5b 00 00 00       	mov    $0x5b,%esi
  80042194b9:	48 bf bf 0d 22 04 80 	movabs $0x8004220dbf,%rdi
  80042194c0:	00 00 00 
  80042194c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042194c8:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  80042194cf:	00 00 00 
  80042194d2:	ff d1                	callq  *%rcx
  80042194d4:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  80042194db:	00 00 00 
  80042194de:	48 8b 00             	mov    (%rax),%rax
  80042194e1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042194e5:	48 c1 ea 0c          	shr    $0xc,%rdx
  80042194e9:	48 c1 e2 04          	shl    $0x4,%rdx
  80042194ed:	48 01 d0             	add    %rdx,%rax
  80042194f0:	c9                   	leaveq 
  80042194f1:	c3                   	retq   

00000080042194f2 <page2kva>:
  80042194f2:	55                   	push   %rbp
  80042194f3:	48 89 e5             	mov    %rsp,%rbp
  80042194f6:	48 83 ec 20          	sub    $0x20,%rsp
  80042194fa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042194fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219502:	48 89 c7             	mov    %rax,%rdi
  8004219505:	48 b8 5c 94 21 04 80 	movabs $0x800421945c,%rax
  800421950c:	00 00 00 
  800421950f:	ff d0                	callq  *%rax
  8004219511:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219515:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219519:	48 c1 e8 0c          	shr    $0xc,%rax
  800421951d:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219520:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004219523:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421952a:	00 00 00 
  800421952d:	48 8b 00             	mov    (%rax),%rax
  8004219530:	48 39 c2             	cmp    %rax,%rdx
  8004219533:	72 32                	jb     8004219567 <page2kva+0x75>
  8004219535:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219539:	48 89 c1             	mov    %rax,%rcx
  800421953c:	48 ba d0 0d 22 04 80 	movabs $0x8004220dd0,%rdx
  8004219543:	00 00 00 
  8004219546:	be 62 00 00 00       	mov    $0x62,%esi
  800421954b:	48 bf bf 0d 22 04 80 	movabs $0x8004220dbf,%rdi
  8004219552:	00 00 00 
  8004219555:	b8 00 00 00 00       	mov    $0x0,%eax
  800421955a:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219561:	00 00 00 
  8004219564:	41 ff d0             	callq  *%r8
  8004219567:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421956e:	00 00 00 
  8004219571:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219575:	48 01 d0             	add    %rdx,%rax
  8004219578:	c9                   	leaveq 
  8004219579:	c3                   	retq   

000000800421957a <epte_addr>:
  800421957a:	55                   	push   %rbp
  800421957b:	48 89 e5             	mov    %rsp,%rbp
  800421957e:	48 83 ec 08          	sub    $0x8,%rsp
  8004219582:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219586:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421958a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004219590:	c9                   	leaveq 
  8004219591:	c3                   	retq   

0000008004219592 <epte_page_vaddr>:
  8004219592:	55                   	push   %rbp
  8004219593:	48 89 e5             	mov    %rsp,%rbp
  8004219596:	48 83 ec 20          	sub    $0x20,%rsp
  800421959a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421959e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042195a2:	48 89 c7             	mov    %rax,%rdi
  80042195a5:	48 b8 7a 95 21 04 80 	movabs $0x800421957a,%rax
  80042195ac:	00 00 00 
  80042195af:	ff d0                	callq  *%rax
  80042195b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042195b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042195b9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042195bd:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042195c0:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042195c3:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042195ca:	00 00 00 
  80042195cd:	48 8b 00             	mov    (%rax),%rax
  80042195d0:	48 39 c2             	cmp    %rax,%rdx
  80042195d3:	72 32                	jb     8004219607 <epte_page_vaddr+0x75>
  80042195d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042195d9:	48 89 c1             	mov    %rax,%rcx
  80042195dc:	48 ba d0 0d 22 04 80 	movabs $0x8004220dd0,%rdx
  80042195e3:	00 00 00 
  80042195e6:	be 13 00 00 00       	mov    $0x13,%esi
  80042195eb:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  80042195f2:	00 00 00 
  80042195f5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042195fa:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219601:	00 00 00 
  8004219604:	41 ff d0             	callq  *%r8
  8004219607:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421960e:	00 00 00 
  8004219611:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219615:	48 01 d0             	add    %rdx,%rax
  8004219618:	c9                   	leaveq 
  8004219619:	c3                   	retq   

000000800421961a <epte_present>:
  800421961a:	55                   	push   %rbp
  800421961b:	48 89 e5             	mov    %rsp,%rbp
  800421961e:	48 83 ec 08          	sub    $0x8,%rsp
  8004219622:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219626:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421962a:	83 e0 07             	and    $0x7,%eax
  800421962d:	48 85 c0             	test   %rax,%rax
  8004219630:	0f 95 c0             	setne  %al
  8004219633:	0f b6 c0             	movzbl %al,%eax
  8004219636:	c9                   	leaveq 
  8004219637:	c3                   	retq   

0000008004219638 <ept_lookup_gpa>:
  8004219638:	55                   	push   %rbp
  8004219639:	48 89 e5             	mov    %rsp,%rbp
  800421963c:	48 83 ec 20          	sub    $0x20,%rsp
  8004219640:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219644:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219648:	89 55 ec             	mov    %edx,-0x14(%rbp)
  800421964b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800421964f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219654:	c9                   	leaveq 
  8004219655:	c3                   	retq   

0000008004219656 <ept_gpa2hva>:
  8004219656:	55                   	push   %rbp
  8004219657:	48 89 e5             	mov    %rsp,%rbp
  800421965a:	48 83 ec 40          	sub    $0x40,%rsp
  800421965e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004219662:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004219666:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421966a:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  800421966e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004219672:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219676:	48 89 d1             	mov    %rdx,%rcx
  8004219679:	ba 00 00 00 00       	mov    $0x0,%edx
  800421967e:	48 89 c7             	mov    %rax,%rdi
  8004219681:	48 b8 38 96 21 04 80 	movabs $0x8004219638,%rax
  8004219688:	00 00 00 
  800421968b:	ff d0                	callq  *%rax
  800421968d:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004219690:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004219694:	79 10                	jns    80042196a6 <ept_gpa2hva+0x50>
  8004219696:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421969a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042196a1:	e9 b1 00 00 00       	jmpq   8004219757 <ept_gpa2hva+0x101>
  80042196a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042196aa:	48 8b 00             	mov    (%rax),%rax
  80042196ad:	48 89 c7             	mov    %rax,%rdi
  80042196b0:	48 b8 1a 96 21 04 80 	movabs $0x800421961a,%rax
  80042196b7:	00 00 00 
  80042196ba:	ff d0                	callq  *%rax
  80042196bc:	85 c0                	test   %eax,%eax
  80042196be:	75 10                	jne    80042196d0 <ept_gpa2hva+0x7a>
  80042196c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042196c4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042196cb:	e9 87 00 00 00       	jmpq   8004219757 <ept_gpa2hva+0x101>
  80042196d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042196d4:	48 8b 00             	mov    (%rax),%rax
  80042196d7:	48 89 c7             	mov    %rax,%rdi
  80042196da:	48 b8 7a 95 21 04 80 	movabs $0x800421957a,%rax
  80042196e1:	00 00 00 
  80042196e4:	ff d0                	callq  *%rax
  80042196e6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042196ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042196ee:	48 c1 e8 0c          	shr    $0xc,%rax
  80042196f2:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042196f5:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042196f8:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  80042196ff:	00 00 00 
  8004219702:	48 8b 00             	mov    (%rax),%rax
  8004219705:	48 39 c2             	cmp    %rax,%rdx
  8004219708:	72 32                	jb     800421973c <ept_gpa2hva+0xe6>
  800421970a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421970e:	48 89 c1             	mov    %rax,%rcx
  8004219711:	48 ba d0 0d 22 04 80 	movabs $0x8004220dd0,%rdx
  8004219718:	00 00 00 
  800421971b:	be 40 00 00 00       	mov    $0x40,%esi
  8004219720:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219727:	00 00 00 
  800421972a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421972f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219736:	00 00 00 
  8004219739:	41 ff d0             	callq  *%r8
  800421973c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219743:	00 00 00 
  8004219746:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421974a:	48 01 d0             	add    %rdx,%rax
  800421974d:	48 89 c2             	mov    %rax,%rdx
  8004219750:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219754:	48 89 10             	mov    %rdx,(%rax)
  8004219757:	c9                   	leaveq 
  8004219758:	c3                   	retq   

0000008004219759 <free_ept_level>:
  8004219759:	55                   	push   %rbp
  800421975a:	48 89 e5             	mov    %rsp,%rbp
  800421975d:	48 83 ec 40          	sub    $0x40,%rsp
  8004219761:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004219765:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  8004219768:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421976c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004219770:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004219777:	e9 82 01 00 00       	jmpq   80042198fe <free_ept_level+0x1a5>
  800421977c:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004219780:	0f 84 fe 00 00 00    	je     8004219884 <free_ept_level+0x12b>
  8004219786:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219789:	48 98                	cltq   
  800421978b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219792:	00 
  8004219793:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219797:	48 01 d0             	add    %rdx,%rax
  800421979a:	48 8b 00             	mov    (%rax),%rax
  800421979d:	48 89 c7             	mov    %rax,%rdi
  80042197a0:	48 b8 1a 96 21 04 80 	movabs $0x800421961a,%rax
  80042197a7:	00 00 00 
  80042197aa:	ff d0                	callq  *%rax
  80042197ac:	85 c0                	test   %eax,%eax
  80042197ae:	0f 84 46 01 00 00    	je     80042198fa <free_ept_level+0x1a1>
  80042197b4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042197b7:	48 98                	cltq   
  80042197b9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042197c0:	00 
  80042197c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042197c5:	48 01 d0             	add    %rdx,%rax
  80042197c8:	48 8b 00             	mov    (%rax),%rax
  80042197cb:	48 89 c7             	mov    %rax,%rdi
  80042197ce:	48 b8 7a 95 21 04 80 	movabs $0x800421957a,%rax
  80042197d5:	00 00 00 
  80042197d8:	ff d0                	callq  *%rax
  80042197da:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042197de:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042197e1:	8d 50 ff             	lea    -0x1(%rax),%edx
  80042197e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042197e8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042197ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042197f0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042197f4:	89 45 dc             	mov    %eax,-0x24(%rbp)
  80042197f7:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  80042197fa:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  8004219801:	00 00 00 
  8004219804:	48 8b 00             	mov    (%rax),%rax
  8004219807:	48 39 c1             	cmp    %rax,%rcx
  800421980a:	72 32                	jb     800421983e <free_ept_level+0xe5>
  800421980c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219810:	48 89 c1             	mov    %rax,%rcx
  8004219813:	48 ba d0 0d 22 04 80 	movabs $0x8004220dd0,%rdx
  800421981a:	00 00 00 
  800421981d:	be 4d 00 00 00       	mov    $0x4d,%esi
  8004219822:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219829:	00 00 00 
  800421982c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219831:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219838:	00 00 00 
  800421983b:	41 ff d0             	callq  *%r8
  800421983e:	48 b9 00 00 00 04 80 	movabs $0x8004000000,%rcx
  8004219845:	00 00 00 
  8004219848:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421984c:	48 01 c8             	add    %rcx,%rax
  800421984f:	89 d6                	mov    %edx,%esi
  8004219851:	48 89 c7             	mov    %rax,%rdi
  8004219854:	48 b8 59 97 21 04 80 	movabs $0x8004219759,%rax
  800421985b:	00 00 00 
  800421985e:	ff d0                	callq  *%rax
  8004219860:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219864:	48 89 c7             	mov    %rax,%rdi
  8004219867:	48 b8 81 94 21 04 80 	movabs $0x8004219481,%rax
  800421986e:	00 00 00 
  8004219871:	ff d0                	callq  *%rax
  8004219873:	48 89 c7             	mov    %rax,%rdi
  8004219876:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800421987d:	00 00 00 
  8004219880:	ff d0                	callq  *%rax
  8004219882:	eb 76                	jmp    80042198fa <free_ept_level+0x1a1>
  8004219884:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219887:	48 98                	cltq   
  8004219889:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219890:	00 
  8004219891:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219895:	48 01 d0             	add    %rdx,%rax
  8004219898:	48 8b 00             	mov    (%rax),%rax
  800421989b:	48 89 c7             	mov    %rax,%rdi
  800421989e:	48 b8 1a 96 21 04 80 	movabs $0x800421961a,%rax
  80042198a5:	00 00 00 
  80042198a8:	ff d0                	callq  *%rax
  80042198aa:	85 c0                	test   %eax,%eax
  80042198ac:	74 4c                	je     80042198fa <free_ept_level+0x1a1>
  80042198ae:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042198b1:	48 98                	cltq   
  80042198b3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042198ba:	00 
  80042198bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042198bf:	48 01 d0             	add    %rdx,%rax
  80042198c2:	48 8b 00             	mov    (%rax),%rax
  80042198c5:	48 89 c7             	mov    %rax,%rdi
  80042198c8:	48 b8 7a 95 21 04 80 	movabs $0x800421957a,%rax
  80042198cf:	00 00 00 
  80042198d2:	ff d0                	callq  *%rax
  80042198d4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042198d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042198dc:	48 89 c7             	mov    %rax,%rdi
  80042198df:	48 b8 81 94 21 04 80 	movabs $0x8004219481,%rax
  80042198e6:	00 00 00 
  80042198e9:	ff d0                	callq  *%rax
  80042198eb:	48 89 c7             	mov    %rax,%rdi
  80042198ee:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  80042198f5:	00 00 00 
  80042198f8:	ff d0                	callq  *%rax
  80042198fa:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042198fe:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  8004219905:	0f 8e 71 fe ff ff    	jle    800421977c <free_ept_level+0x23>
  800421990b:	90                   	nop
  800421990c:	c9                   	leaveq 
  800421990d:	c3                   	retq   

000000800421990e <free_guest_mem>:
  800421990e:	55                   	push   %rbp
  800421990f:	48 89 e5             	mov    %rsp,%rbp
  8004219912:	48 83 ec 20          	sub    $0x20,%rsp
  8004219916:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421991a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421991e:	be 03 00 00 00       	mov    $0x3,%esi
  8004219923:	48 89 c7             	mov    %rax,%rdi
  8004219926:	48 b8 59 97 21 04 80 	movabs $0x8004219759,%rax
  800421992d:	00 00 00 
  8004219930:	ff d0                	callq  *%rax

static __inline void
tlbflush(void)
{
	uint64_t cr3;
	__asm __volatile("movq %%cr3,%0" : "=r" (cr3));
  8004219932:	0f 20 d8             	mov    %cr3,%rax
  8004219935:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (cr3));
  8004219939:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421993d:	0f 22 d8             	mov    %rax,%cr3
  8004219940:	c9                   	leaveq 
  8004219941:	c3                   	retq   

0000008004219942 <ept_page_insert>:
  8004219942:	55                   	push   %rbp
  8004219943:	48 89 e5             	mov    %rsp,%rbp
  8004219946:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421994a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421994e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219952:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004219956:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004219959:	b8 00 00 00 00       	mov    $0x0,%eax
  800421995e:	c9                   	leaveq 
  800421995f:	c3                   	retq   

0000008004219960 <ept_map_hva2gpa>:
  8004219960:	55                   	push   %rbp
  8004219961:	48 89 e5             	mov    %rsp,%rbp
  8004219964:	48 83 ec 20          	sub    $0x20,%rsp
  8004219968:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421996c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219970:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004219974:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004219977:	44 89 45 e0          	mov    %r8d,-0x20(%rbp)
  800421997b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219980:	c9                   	leaveq 
  8004219981:	c3                   	retq   

0000008004219982 <ept_alloc_static>:
  8004219982:	55                   	push   %rbp
  8004219983:	48 89 e5             	mov    %rsp,%rbp
  8004219986:	53                   	push   %rbx
  8004219987:	48 83 ec 48          	sub    $0x48,%rsp
  800421998b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421998f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004219993:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421999a:	00 
  800421999b:	eb 6e                	jmp    8004219a0b <ept_alloc_static+0x89>
  800421999d:	bf 00 00 00 00       	mov    $0x0,%edi
  80042199a2:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  80042199a9:	00 00 00 
  80042199ac:	ff d0                	callq  *%rax
  80042199ae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042199b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042199b6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042199ba:	8d 50 01             	lea    0x1(%rax),%edx
  80042199bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042199c1:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042199c5:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  80042199c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042199cd:	48 89 c7             	mov    %rax,%rdi
  80042199d0:	48 b8 f2 94 21 04 80 	movabs $0x80042194f2,%rax
  80042199d7:	00 00 00 
  80042199da:	ff d0                	callq  *%rax
  80042199dc:	48 89 c6             	mov    %rax,%rsi
  80042199df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042199e3:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  80042199e9:	b9 07 00 00 00       	mov    $0x7,%ecx
  80042199ee:	48 89 da             	mov    %rbx,%rdx
  80042199f1:	48 89 c7             	mov    %rax,%rdi
  80042199f4:	48 b8 60 99 21 04 80 	movabs $0x8004219960,%rax
  80042199fb:	00 00 00 
  80042199fe:	ff d0                	callq  *%rax
  8004219a00:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219a03:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  8004219a0a:	00 
  8004219a0b:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  8004219a12:	00 
  8004219a13:	76 88                	jbe    800421999d <ept_alloc_static+0x1b>
  8004219a15:	48 c7 45 e8 00 00 10 	movq   $0x100000,-0x18(%rbp)
  8004219a1c:	00 
  8004219a1d:	eb 6e                	jmp    8004219a8d <ept_alloc_static+0x10b>
  8004219a1f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004219a24:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004219a2b:	00 00 00 
  8004219a2e:	ff d0                	callq  *%rax
  8004219a30:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219a34:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219a38:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219a3c:	8d 50 01             	lea    0x1(%rax),%edx
  8004219a3f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219a43:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219a47:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  8004219a4b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219a4f:	48 89 c7             	mov    %rax,%rdi
  8004219a52:	48 b8 f2 94 21 04 80 	movabs $0x80042194f2,%rax
  8004219a59:	00 00 00 
  8004219a5c:	ff d0                	callq  *%rax
  8004219a5e:	48 89 c6             	mov    %rax,%rsi
  8004219a61:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219a65:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004219a6b:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004219a70:	48 89 da             	mov    %rbx,%rdx
  8004219a73:	48 89 c7             	mov    %rax,%rdi
  8004219a76:	48 b8 60 99 21 04 80 	movabs $0x8004219960,%rax
  8004219a7d:	00 00 00 
  8004219a80:	ff d0                	callq  *%rax
  8004219a82:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004219a85:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  8004219a8c:	00 
  8004219a8d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219a91:	48 8b 00             	mov    (%rax),%rax
  8004219a94:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004219a98:	77 85                	ja     8004219a1f <ept_alloc_static+0x9d>
  8004219a9a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219a9f:	48 83 c4 48          	add    $0x48,%rsp
  8004219aa3:	5b                   	pop    %rbx
  8004219aa4:	5d                   	pop    %rbp
  8004219aa5:	c3                   	retq   

0000008004219aa6 <test_ept_map>:
  8004219aa6:	55                   	push   %rbp
  8004219aa7:	48 89 e5             	mov    %rsp,%rbp
  8004219aaa:	53                   	push   %rbx
  8004219aab:	48 83 ec 48          	sub    $0x48,%rsp
  8004219aaf:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  8004219ab3:	be 00 00 00 00       	mov    $0x0,%esi
  8004219ab8:	48 89 c7             	mov    %rax,%rdi
  8004219abb:	48 b8 5d 89 20 04 80 	movabs $0x800420895d,%rax
  8004219ac2:	00 00 00 
  8004219ac5:	ff d0                	callq  *%rax
  8004219ac7:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219aca:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219ace:	79 30                	jns    8004219b00 <test_ept_map+0x5a>
  8004219ad0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219ad3:	89 c1                	mov    %eax,%ecx
  8004219ad5:	48 ba 00 0e 22 04 80 	movabs $0x8004220e00,%rdx
  8004219adc:	00 00 00 
  8004219adf:	be a6 00 00 00       	mov    $0xa6,%esi
  8004219ae4:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219aeb:	00 00 00 
  8004219aee:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219af3:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219afa:	00 00 00 
  8004219afd:	41 ff d0             	callq  *%r8
  8004219b00:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219b05:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  8004219b0c:	00 00 00 
  8004219b0f:	ff d0                	callq  *%rax
  8004219b11:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219b15:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004219b1a:	75 30                	jne    8004219b4c <test_ept_map+0xa6>
  8004219b1c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219b1f:	89 c1                	mov    %eax,%ecx
  8004219b21:	48 ba 1d 0e 22 04 80 	movabs $0x8004220e1d,%rdx
  8004219b28:	00 00 00 
  8004219b2b:	be a8 00 00 00       	mov    $0xa8,%esi
  8004219b30:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219b37:	00 00 00 
  8004219b3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b3f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219b46:	00 00 00 
  8004219b49:	41 ff d0             	callq  *%r8
  8004219b4c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219b50:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004219b57:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004219b5b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004219b60:	ba 00 00 40 00       	mov    $0x400000,%edx
  8004219b65:	48 89 c7             	mov    %rax,%rdi
  8004219b68:	48 b8 19 3a 20 04 80 	movabs $0x8004203a19,%rax
  8004219b6f:	00 00 00 
  8004219b72:	ff d0                	callq  *%rax
  8004219b74:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219b77:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219b7b:	79 30                	jns    8004219bad <test_ept_map+0x107>
  8004219b7d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219b80:	89 c1                	mov    %eax,%ecx
  8004219b82:	48 ba 3b 0e 22 04 80 	movabs $0x8004220e3b,%rdx
  8004219b89:	00 00 00 
  8004219b8c:	be aa 00 00 00       	mov    $0xaa,%esi
  8004219b91:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219b98:	00 00 00 
  8004219b9b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219ba0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219ba7:	00 00 00 
  8004219baa:	41 ff d0             	callq  *%r8
  8004219bad:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  8004219bb4:	00 00 00 
  8004219bb7:	ff d0                	callq  *%rax
  8004219bb9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004219bbd:	48 b9 20 d0 6d 04 80 	movabs $0x80046dd020,%rcx
  8004219bc4:	00 00 00 
  8004219bc7:	48 98                	cltq   
  8004219bc9:	48 c1 e0 03          	shl    $0x3,%rax
  8004219bcd:	48 89 c6             	mov    %rax,%rsi
  8004219bd0:	48 c1 e6 04          	shl    $0x4,%rsi
  8004219bd4:	48 01 f0             	add    %rsi,%rax
  8004219bd7:	48 01 c8             	add    %rcx,%rax
  8004219bda:	48 83 c0 08          	add    $0x8,%rax
  8004219bde:	48 89 10             	mov    %rdx,(%rax)
  8004219be1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219be5:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219beb:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004219bef:	89 d6                	mov    %edx,%esi
  8004219bf1:	48 89 c7             	mov    %rax,%rdi
  8004219bf4:	48 b8 5d 89 20 04 80 	movabs $0x800420895d,%rax
  8004219bfb:	00 00 00 
  8004219bfe:	ff d0                	callq  *%rax
  8004219c00:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219c03:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219c07:	79 30                	jns    8004219c39 <test_ept_map+0x193>
  8004219c09:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219c0c:	89 c1                	mov    %eax,%ecx
  8004219c0e:	48 ba 00 0e 22 04 80 	movabs $0x8004220e00,%rdx
  8004219c15:	00 00 00 
  8004219c18:	be af 00 00 00       	mov    $0xaf,%esi
  8004219c1d:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219c24:	00 00 00 
  8004219c27:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219c2c:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219c33:	00 00 00 
  8004219c36:	41 ff d0             	callq  *%r8
  8004219c39:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219c3d:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219c43:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219c47:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219c4d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219c53:	b9 00 00 40 00       	mov    $0x400000,%ecx
  8004219c58:	be 00 00 40 00       	mov    $0x400000,%esi
  8004219c5d:	89 c7                	mov    %eax,%edi
  8004219c5f:	48 b8 33 f0 20 04 80 	movabs $0x800420f033,%rax
  8004219c66:	00 00 00 
  8004219c69:	ff d0                	callq  *%rax
  8004219c6b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219c6e:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219c72:	79 4a                	jns    8004219cbe <test_ept_map+0x218>
  8004219c74:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219c77:	89 c6                	mov    %eax,%esi
  8004219c79:	48 bf 58 0e 22 04 80 	movabs $0x8004220e58,%rdi
  8004219c80:	00 00 00 
  8004219c83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219c88:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004219c8f:	00 00 00 
  8004219c92:	ff d2                	callq  *%rdx
  8004219c94:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219c98:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219c9e:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004219ca2:	89 d6                	mov    %edx,%esi
  8004219ca4:	48 89 c7             	mov    %rax,%rdi
  8004219ca7:	48 b8 9c 81 20 04 80 	movabs $0x800420819c,%rax
  8004219cae:	00 00 00 
  8004219cb1:	ff d0                	callq  *%rax
  8004219cb3:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219cb6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219cba:	79 5c                	jns    8004219d18 <test_ept_map+0x272>
  8004219cbc:	eb 2a                	jmp    8004219ce8 <test_ept_map+0x242>
  8004219cbe:	48 ba 90 0e 22 04 80 	movabs $0x8004220e90,%rdx
  8004219cc5:	00 00 00 
  8004219cc8:	be b3 00 00 00       	mov    $0xb3,%esi
  8004219ccd:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219cd4:	00 00 00 
  8004219cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219cdc:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004219ce3:	00 00 00 
  8004219ce6:	ff d1                	callq  *%rcx
  8004219ce8:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219ceb:	89 c1                	mov    %eax,%ecx
  8004219ced:	48 ba b8 0e 22 04 80 	movabs $0x8004220eb8,%rdx
  8004219cf4:	00 00 00 
  8004219cf7:	be b8 00 00 00       	mov    $0xb8,%esi
  8004219cfc:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219d03:	00 00 00 
  8004219d06:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d0b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  8004219d12:	00 00 00 
  8004219d15:	41 ff d0             	callq  *%r8
  8004219d18:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219d1c:	48 c7 80 20 01 00 00 	movq   $0x401000,0x120(%rax)
  8004219d23:	00 10 40 00 
  8004219d27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219d2b:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219d31:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219d35:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219d3b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219d41:	b9 00 00 40 00       	mov    $0x400000,%ecx
  8004219d46:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  8004219d4d:	00 00 00 
  8004219d50:	89 c7                	mov    %eax,%edi
  8004219d52:	48 b8 33 f0 20 04 80 	movabs $0x800420f033,%rax
  8004219d59:	00 00 00 
  8004219d5c:	ff d0                	callq  *%rax
  8004219d5e:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219d61:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219d65:	79 61                	jns    8004219dc8 <test_ept_map+0x322>
  8004219d67:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219d6a:	89 c6                	mov    %eax,%esi
  8004219d6c:	48 bf e0 0e 22 04 80 	movabs $0x8004220ee0,%rdi
  8004219d73:	00 00 00 
  8004219d76:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d7b:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004219d82:	00 00 00 
  8004219d85:	ff d2                	callq  *%rdx
  8004219d87:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219d8b:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219d91:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219d95:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219d9b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219da1:	b9 00 00 40 00       	mov    $0x400000,%ecx
  8004219da6:	be 01 00 40 00       	mov    $0x400001,%esi
  8004219dab:	89 c7                	mov    %eax,%edi
  8004219dad:	48 b8 33 f0 20 04 80 	movabs $0x800420f033,%rax
  8004219db4:	00 00 00 
  8004219db7:	ff d0                	callq  *%rax
  8004219db9:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219dbc:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219dc0:	0f 89 8d 00 00 00    	jns    8004219e53 <test_ept_map+0x3ad>
  8004219dc6:	eb 2a                	jmp    8004219df2 <test_ept_map+0x34c>
  8004219dc8:	48 ba 18 0f 22 04 80 	movabs $0x8004220f18,%rdx
  8004219dcf:	00 00 00 
  8004219dd2:	be bf 00 00 00       	mov    $0xbf,%esi
  8004219dd7:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219dde:	00 00 00 
  8004219de1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219de6:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004219ded:	00 00 00 
  8004219df0:	ff d1                	callq  *%rcx
  8004219df2:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219df5:	89 c6                	mov    %eax,%esi
  8004219df7:	48 bf 48 0f 22 04 80 	movabs $0x8004220f48,%rdi
  8004219dfe:	00 00 00 
  8004219e01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e06:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004219e0d:	00 00 00 
  8004219e10:	ff d2                	callq  *%rdx
  8004219e12:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219e16:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219e1c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219e20:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219e26:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219e2c:	b9 00 10 40 00       	mov    $0x401000,%ecx
  8004219e31:	be 00 00 40 00       	mov    $0x400000,%esi
  8004219e36:	89 c7                	mov    %eax,%edi
  8004219e38:	48 b8 33 f0 20 04 80 	movabs $0x800420f033,%rax
  8004219e3f:	00 00 00 
  8004219e42:	ff d0                	callq  *%rax
  8004219e44:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219e47:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219e4b:	0f 89 8d 00 00 00    	jns    8004219ede <test_ept_map+0x438>
  8004219e51:	eb 2a                	jmp    8004219e7d <test_ept_map+0x3d7>
  8004219e53:	48 ba 80 0f 22 04 80 	movabs $0x8004220f80,%rdx
  8004219e5a:	00 00 00 
  8004219e5d:	be c3 00 00 00       	mov    $0xc3,%esi
  8004219e62:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219e69:	00 00 00 
  8004219e6c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e71:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004219e78:	00 00 00 
  8004219e7b:	ff d1                	callq  *%rcx
  8004219e7d:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219e80:	89 c6                	mov    %eax,%esi
  8004219e82:	48 bf b0 0f 22 04 80 	movabs $0x8004220fb0,%rdi
  8004219e89:	00 00 00 
  8004219e8c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e91:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004219e98:	00 00 00 
  8004219e9b:	ff d2                	callq  *%rdx
  8004219e9d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219ea1:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219ea7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219eab:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219eb1:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219eb7:	b9 ff ff 3f 00       	mov    $0x3fffff,%ecx
  8004219ebc:	be 00 00 40 00       	mov    $0x400000,%esi
  8004219ec1:	89 c7                	mov    %eax,%edi
  8004219ec3:	48 b8 33 f0 20 04 80 	movabs $0x800420f033,%rax
  8004219eca:	00 00 00 
  8004219ecd:	ff d0                	callq  *%rax
  8004219ecf:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219ed2:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219ed6:	0f 89 8d 00 00 00    	jns    8004219f69 <test_ept_map+0x4c3>
  8004219edc:	eb 2a                	jmp    8004219f08 <test_ept_map+0x462>
  8004219ede:	48 ba f0 0f 22 04 80 	movabs $0x8004220ff0,%rdx
  8004219ee5:	00 00 00 
  8004219ee8:	be c9 00 00 00       	mov    $0xc9,%esi
  8004219eed:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219ef4:	00 00 00 
  8004219ef7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219efc:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004219f03:	00 00 00 
  8004219f06:	ff d1                	callq  *%rcx
  8004219f08:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219f0b:	89 c6                	mov    %eax,%esi
  8004219f0d:	48 bf 20 10 22 04 80 	movabs $0x8004221020,%rdi
  8004219f14:	00 00 00 
  8004219f17:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219f1c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004219f23:	00 00 00 
  8004219f26:	ff d2                	callq  *%rdx
  8004219f28:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219f2c:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219f32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219f36:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219f3c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004219f42:	b9 00 00 40 00       	mov    $0x400000,%ecx
  8004219f47:	be 00 00 40 00       	mov    $0x400000,%esi
  8004219f4c:	89 c7                	mov    %eax,%edi
  8004219f4e:	48 b8 33 f0 20 04 80 	movabs $0x800420f033,%rax
  8004219f55:	00 00 00 
  8004219f58:	ff d0                	callq  *%rax
  8004219f5a:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219f5d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219f61:	0f 89 8d 00 00 00    	jns    8004219ff4 <test_ept_map+0x54e>
  8004219f67:	eb 2a                	jmp    8004219f93 <test_ept_map+0x4ed>
  8004219f69:	48 ba 58 10 22 04 80 	movabs $0x8004221058,%rdx
  8004219f70:	00 00 00 
  8004219f73:	be cd 00 00 00       	mov    $0xcd,%esi
  8004219f78:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  8004219f7f:	00 00 00 
  8004219f82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219f87:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  8004219f8e:	00 00 00 
  8004219f91:	ff d1                	callq  *%rcx
  8004219f93:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219f96:	89 c6                	mov    %eax,%esi
  8004219f98:	48 bf 88 10 22 04 80 	movabs $0x8004221088,%rdi
  8004219f9f:	00 00 00 
  8004219fa2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219fa7:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  8004219fae:	00 00 00 
  8004219fb1:	ff d2                	callq  *%rdx
  8004219fb3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219fb7:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219fbd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219fc1:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219fc7:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  8004219fcd:	b9 00 00 40 00       	mov    $0x400000,%ecx
  8004219fd2:	be 00 00 40 00       	mov    $0x400000,%esi
  8004219fd7:	89 c7                	mov    %eax,%edi
  8004219fd9:	48 b8 33 f0 20 04 80 	movabs $0x800420f033,%rax
  8004219fe0:	00 00 00 
  8004219fe3:	ff d0                	callq  *%rax
  8004219fe5:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219fe8:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219fec:	0f 89 97 00 00 00    	jns    800421a089 <test_ept_map+0x5e3>
  8004219ff2:	eb 2a                	jmp    800421a01e <test_ept_map+0x578>
  8004219ff4:	48 ba c8 10 22 04 80 	movabs $0x80042210c8,%rdx
  8004219ffb:	00 00 00 
  8004219ffe:	be d3 00 00 00       	mov    $0xd3,%esi
  800421a003:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a00a:	00 00 00 
  800421a00d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a012:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a019:	00 00 00 
  800421a01c:	ff d1                	callq  *%rcx
  800421a01e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a021:	89 c6                	mov    %eax,%esi
  800421a023:	48 bf f0 10 22 04 80 	movabs $0x80042210f0,%rdi
  800421a02a:	00 00 00 
  800421a02d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a032:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a039:	00 00 00 
  800421a03c:	ff d2                	callq  *%rdx
  800421a03e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a042:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a046:	0f b7 c0             	movzwl %ax,%eax
  800421a049:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a04c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a050:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a056:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a05a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a060:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a066:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a06b:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a070:	89 c7                	mov    %eax,%edi
  800421a072:	48 b8 33 f0 20 04 80 	movabs $0x800420f033,%rax
  800421a079:	00 00 00 
  800421a07c:	ff d0                	callq  *%rax
  800421a07e:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a081:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a085:	79 5c                	jns    800421a0e3 <test_ept_map+0x63d>
  800421a087:	eb 2a                	jmp    800421a0b3 <test_ept_map+0x60d>
  800421a089:	48 ba 30 11 22 04 80 	movabs $0x8004221130,%rdx
  800421a090:	00 00 00 
  800421a093:	be d7 00 00 00       	mov    $0xd7,%esi
  800421a098:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a09f:	00 00 00 
  800421a0a2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a0a7:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a0ae:	00 00 00 
  800421a0b1:	ff d1                	callq  *%rcx
  800421a0b3:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a0b6:	89 c1                	mov    %eax,%ecx
  800421a0b8:	48 ba 58 11 22 04 80 	movabs $0x8004221158,%rdx
  800421a0bf:	00 00 00 
  800421a0c2:	be dc 00 00 00       	mov    $0xdc,%esi
  800421a0c7:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a0ce:	00 00 00 
  800421a0d1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a0d6:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a0dd:	00 00 00 
  800421a0e0:	41 ff d0             	callq  *%r8
  800421a0e3:	48 bf 78 11 22 04 80 	movabs $0x8004221178,%rdi
  800421a0ea:	00 00 00 
  800421a0ed:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a0f2:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a0f9:	00 00 00 
  800421a0fc:	ff d2                	callq  *%rdx
  800421a0fe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a102:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a106:	0f b7 c0             	movzwl %ax,%eax
  800421a109:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800421a10c:	83 c2 01             	add    $0x1,%edx
  800421a10f:	39 d0                	cmp    %edx,%eax
  800421a111:	74 2a                	je     800421a13d <test_ept_map+0x697>
  800421a113:	48 ba 98 11 22 04 80 	movabs $0x8004221198,%rdx
  800421a11a:	00 00 00 
  800421a11d:	be e1 00 00 00       	mov    $0xe1,%esi
  800421a122:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a129:	00 00 00 
  800421a12c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a131:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a138:	00 00 00 
  800421a13b:	ff d1                	callq  *%rcx
  800421a13d:	48 bf b3 11 22 04 80 	movabs $0x80042211b3,%rdi
  800421a144:	00 00 00 
  800421a147:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a14c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a153:	00 00 00 
  800421a156:	ff d2                	callq  *%rdx
  800421a158:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a15c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a160:	0f b7 c0             	movzwl %ax,%eax
  800421a163:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a166:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a16a:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a170:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a174:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a17a:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a180:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a185:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a18a:	89 c7                	mov    %eax,%edi
  800421a18c:	48 b8 33 f0 20 04 80 	movabs $0x800420f033,%rax
  800421a193:	00 00 00 
  800421a196:	ff d0                	callq  *%rax
  800421a198:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a19b:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a19f:	79 2d                	jns    800421a1ce <test_ept_map+0x728>
  800421a1a1:	48 bf 78 11 22 04 80 	movabs $0x8004221178,%rdi
  800421a1a8:	00 00 00 
  800421a1ab:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a1b0:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a1b7:	00 00 00 
  800421a1ba:	ff d2                	callq  *%rdx
  800421a1bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a1c0:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a1c4:	0f b7 c0             	movzwl %ax,%eax
  800421a1c7:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  800421a1ca:	75 74                	jne    800421a240 <test_ept_map+0x79a>
  800421a1cc:	eb 2a                	jmp    800421a1f8 <test_ept_map+0x752>
  800421a1ce:	48 ba d8 11 22 04 80 	movabs $0x80042211d8,%rdx
  800421a1d5:	00 00 00 
  800421a1d8:	be ea 00 00 00       	mov    $0xea,%esi
  800421a1dd:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a1e4:	00 00 00 
  800421a1e7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a1ec:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a1f3:	00 00 00 
  800421a1f6:	ff d1                	callq  *%rcx
  800421a1f8:	48 bf 08 12 22 04 80 	movabs $0x8004221208,%rdi
  800421a1ff:	00 00 00 
  800421a202:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a207:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a20e:	00 00 00 
  800421a211:	ff d2                	callq  *%rdx
  800421a213:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  800421a217:	48 89 c1             	mov    %rax,%rcx
  800421a21a:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a21f:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a224:	bf 00 00 00 00       	mov    $0x0,%edi
  800421a229:	48 b8 38 96 21 04 80 	movabs $0x8004219638,%rax
  800421a230:	00 00 00 
  800421a233:	ff d0                	callq  *%rax
  800421a235:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a238:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a23c:	79 7d                	jns    800421a2bb <test_ept_map+0x815>
  800421a23e:	eb 2a                	jmp    800421a26a <test_ept_map+0x7c4>
  800421a240:	48 ba 30 12 22 04 80 	movabs $0x8004221230,%rdx
  800421a247:	00 00 00 
  800421a24a:	be ef 00 00 00       	mov    $0xef,%esi
  800421a24f:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a256:	00 00 00 
  800421a259:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a25e:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a265:	00 00 00 
  800421a268:	ff d1                	callq  *%rcx
  800421a26a:	48 bf 58 12 22 04 80 	movabs $0x8004221258,%rdi
  800421a271:	00 00 00 
  800421a274:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a279:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a280:	00 00 00 
  800421a283:	ff d2                	callq  *%rdx
  800421a285:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a289:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a290:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421a294:	48 89 d1             	mov    %rdx,%rcx
  800421a297:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a29c:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a2a1:	48 89 c7             	mov    %rax,%rdi
  800421a2a4:	48 b8 38 96 21 04 80 	movabs $0x8004219638,%rax
  800421a2ab:	00 00 00 
  800421a2ae:	ff d0                	callq  *%rax
  800421a2b0:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a2b3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a2b7:	79 5c                	jns    800421a315 <test_ept_map+0x86f>
  800421a2b9:	eb 2a                	jmp    800421a2e5 <test_ept_map+0x83f>
  800421a2bb:	48 ba 90 12 22 04 80 	movabs $0x8004221290,%rdx
  800421a2c2:	00 00 00 
  800421a2c5:	be f5 00 00 00       	mov    $0xf5,%esi
  800421a2ca:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a2d1:	00 00 00 
  800421a2d4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a2d9:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a2e0:	00 00 00 
  800421a2e3:	ff d1                	callq  *%rcx
  800421a2e5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a2e8:	89 c1                	mov    %eax,%ecx
  800421a2ea:	48 ba b8 12 22 04 80 	movabs $0x80042212b8,%rdx
  800421a2f1:	00 00 00 
  800421a2f4:	be fa 00 00 00       	mov    $0xfa,%esi
  800421a2f9:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a300:	00 00 00 
  800421a303:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a308:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a30f:	00 00 00 
  800421a312:	41 ff d0             	callq  *%r8
  800421a315:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a319:	48 89 c7             	mov    %rax,%rdi
  800421a31c:	48 b8 5c 94 21 04 80 	movabs $0x800421945c,%rax
  800421a323:	00 00 00 
  800421a326:	ff d0                	callq  *%rax
  800421a328:	48 89 c3             	mov    %rax,%rbx
  800421a32b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a32f:	48 8b 00             	mov    (%rax),%rax
  800421a332:	48 89 c7             	mov    %rax,%rdi
  800421a335:	48 b8 7a 95 21 04 80 	movabs $0x800421957a,%rax
  800421a33c:	00 00 00 
  800421a33f:	ff d0                	callq  *%rax
  800421a341:	48 39 c3             	cmp    %rax,%rbx
  800421a344:	74 5d                	je     800421a3a3 <test_ept_map+0x8fd>
  800421a346:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a34a:	48 8b 00             	mov    (%rax),%rax
  800421a34d:	48 89 c7             	mov    %rax,%rdi
  800421a350:	48 b8 7a 95 21 04 80 	movabs $0x800421957a,%rax
  800421a357:	00 00 00 
  800421a35a:	ff d0                	callq  *%rax
  800421a35c:	48 89 c3             	mov    %rax,%rbx
  800421a35f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a363:	48 89 c7             	mov    %rax,%rdi
  800421a366:	48 b8 5c 94 21 04 80 	movabs $0x800421945c,%rax
  800421a36d:	00 00 00 
  800421a370:	ff d0                	callq  *%rax
  800421a372:	49 89 d8             	mov    %rbx,%r8
  800421a375:	48 89 c1             	mov    %rax,%rcx
  800421a378:	48 ba d8 12 22 04 80 	movabs $0x80042212d8,%rdx
  800421a37f:	00 00 00 
  800421a382:	be fd 00 00 00       	mov    $0xfd,%esi
  800421a387:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a38e:	00 00 00 
  800421a391:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a396:	49 b9 d5 04 20 04 80 	movabs $0x80042004d5,%r9
  800421a39d:	00 00 00 
  800421a3a0:	41 ff d1             	callq  *%r9
  800421a3a3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a3a7:	48 8b 00             	mov    (%rax),%rax
  800421a3aa:	48 89 c7             	mov    %rax,%rdi
  800421a3ad:	48 b8 7a 95 21 04 80 	movabs $0x800421957a,%rax
  800421a3b4:	00 00 00 
  800421a3b7:	ff d0                	callq  *%rax
  800421a3b9:	48 89 c3             	mov    %rax,%rbx
  800421a3bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a3c0:	48 89 c7             	mov    %rax,%rdi
  800421a3c3:	48 b8 5c 94 21 04 80 	movabs $0x800421945c,%rax
  800421a3ca:	00 00 00 
  800421a3cd:	ff d0                	callq  *%rax
  800421a3cf:	48 89 da             	mov    %rbx,%rdx
  800421a3d2:	48 89 c6             	mov    %rax,%rsi
  800421a3d5:	48 bf 08 13 22 04 80 	movabs $0x8004221308,%rdi
  800421a3dc:	00 00 00 
  800421a3df:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a3e4:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800421a3eb:	00 00 00 
  800421a3ee:	ff d1                	callq  *%rcx
  800421a3f0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a3f4:	48 89 c7             	mov    %rax,%rdi
  800421a3f7:	48 b8 f2 94 21 04 80 	movabs $0x80042194f2,%rax
  800421a3fe:	00 00 00 
  800421a401:	ff d0                	callq  *%rax
  800421a403:	48 89 c6             	mov    %rax,%rsi
  800421a406:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a40a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a411:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a417:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421a41c:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a421:	48 89 c7             	mov    %rax,%rdi
  800421a424:	48 b8 60 99 21 04 80 	movabs $0x8004219960,%rax
  800421a42b:	00 00 00 
  800421a42e:	ff d0                	callq  *%rax
  800421a430:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a433:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a437:	79 66                	jns    800421a49f <test_ept_map+0x9f9>
  800421a439:	48 bf 38 13 22 04 80 	movabs $0x8004221338,%rdi
  800421a440:	00 00 00 
  800421a443:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a448:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a44f:	00 00 00 
  800421a452:	ff d2                	callq  *%rdx
  800421a454:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a458:	48 89 c7             	mov    %rax,%rdi
  800421a45b:	48 b8 f2 94 21 04 80 	movabs $0x80042194f2,%rax
  800421a462:	00 00 00 
  800421a465:	ff d0                	callq  *%rax
  800421a467:	48 89 c6             	mov    %rax,%rsi
  800421a46a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a46e:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a475:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a47b:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421a480:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a485:	48 89 c7             	mov    %rax,%rdi
  800421a488:	48 b8 60 99 21 04 80 	movabs $0x8004219960,%rax
  800421a48f:	00 00 00 
  800421a492:	ff d0                	callq  *%rax
  800421a494:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a497:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a49b:	79 56                	jns    800421a4f3 <test_ept_map+0xa4d>
  800421a49d:	eb 2a                	jmp    800421a4c9 <test_ept_map+0xa23>
  800421a49f:	48 ba 68 13 22 04 80 	movabs $0x8004221368,%rdx
  800421a4a6:	00 00 00 
  800421a4a9:	be 06 01 00 00       	mov    $0x106,%esi
  800421a4ae:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a4b5:	00 00 00 
  800421a4b8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a4bd:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a4c4:	00 00 00 
  800421a4c7:	ff d1                	callq  *%rcx
  800421a4c9:	48 ba b0 13 22 04 80 	movabs $0x80042213b0,%rdx
  800421a4d0:	00 00 00 
  800421a4d3:	be 0a 01 00 00       	mov    $0x10a,%esi
  800421a4d8:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a4df:	00 00 00 
  800421a4e2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a4e7:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a4ee:	00 00 00 
  800421a4f1:	ff d1                	callq  *%rcx
  800421a4f3:	48 bf e0 13 22 04 80 	movabs $0x80042213e0,%rdi
  800421a4fa:	00 00 00 
  800421a4fd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a502:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a509:	00 00 00 
  800421a50c:	ff d2                	callq  *%rdx
  800421a50e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a512:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a519:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421a51d:	48 89 d1             	mov    %rdx,%rcx
  800421a520:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a525:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a52a:	48 89 c7             	mov    %rax,%rdi
  800421a52d:	48 b8 38 96 21 04 80 	movabs $0x8004219638,%rax
  800421a534:	00 00 00 
  800421a537:	ff d0                	callq  *%rax
  800421a539:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a53c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a540:	79 30                	jns    800421a572 <test_ept_map+0xacc>
  800421a542:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a545:	89 c1                	mov    %eax,%ecx
  800421a547:	48 ba b8 12 22 04 80 	movabs $0x80042212b8,%rdx
  800421a54e:	00 00 00 
  800421a551:	be 10 01 00 00       	mov    $0x110,%esi
  800421a556:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a55d:	00 00 00 
  800421a560:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a565:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a56c:	00 00 00 
  800421a56f:	41 ff d0             	callq  *%r8
  800421a572:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a576:	48 8b 00             	mov    (%rax),%rax
  800421a579:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421a57e:	48 83 f8 71          	cmp    $0x71,%rax
  800421a582:	75 36                	jne    800421a5ba <test_ept_map+0xb14>
  800421a584:	48 bf 08 14 22 04 80 	movabs $0x8004221408,%rdi
  800421a58b:	00 00 00 
  800421a58e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a593:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a59a:	00 00 00 
  800421a59d:	ff d2                	callq  *%rdx
  800421a59f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a5a3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a5aa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a5ae:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%rbp)
  800421a5b5:	e9 23 01 00 00       	jmpq   800421a6dd <test_ept_map+0xc37>
  800421a5ba:	48 ba 30 14 22 04 80 	movabs $0x8004221430,%rdx
  800421a5c1:	00 00 00 
  800421a5c4:	be 14 01 00 00       	mov    $0x114,%esi
  800421a5c9:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a5d0:	00 00 00 
  800421a5d3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a5d8:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a5df:	00 00 00 
  800421a5e2:	ff d1                	callq  *%rcx
  800421a5e4:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a5e7:	89 d0                	mov    %edx,%eax
  800421a5e9:	c1 e0 03             	shl    $0x3,%eax
  800421a5ec:	01 d0                	add    %edx,%eax
  800421a5ee:	83 c0 0c             	add    $0xc,%eax
  800421a5f1:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a5f6:	89 c1                	mov    %eax,%ecx
  800421a5f8:	48 d3 ea             	shr    %cl,%rdx
  800421a5fb:	48 89 d0             	mov    %rdx,%rax
  800421a5fe:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421a603:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421a606:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421a609:	48 98                	cltq   
  800421a60b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a612:	00 
  800421a613:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a617:	48 01 d0             	add    %rdx,%rax
  800421a61a:	48 8b 00             	mov    (%rax),%rax
  800421a61d:	48 89 c7             	mov    %rax,%rdi
  800421a620:	48 b8 1a 96 21 04 80 	movabs $0x800421961a,%rax
  800421a627:	00 00 00 
  800421a62a:	ff d0                	callq  *%rax
  800421a62c:	85 c0                	test   %eax,%eax
  800421a62e:	75 30                	jne    800421a660 <test_ept_map+0xbba>
  800421a630:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a633:	89 c1                	mov    %eax,%ecx
  800421a635:	48 ba 60 14 22 04 80 	movabs $0x8004221460,%rdx
  800421a63c:	00 00 00 
  800421a63f:	be 1a 01 00 00       	mov    $0x11a,%esi
  800421a644:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a64b:	00 00 00 
  800421a64e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a653:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a65a:	00 00 00 
  800421a65d:	41 ff d0             	callq  *%r8
  800421a660:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421a663:	48 98                	cltq   
  800421a665:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a66c:	00 
  800421a66d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a671:	48 01 d0             	add    %rdx,%rax
  800421a674:	48 8b 00             	mov    (%rax),%rax
  800421a677:	83 e0 07             	and    $0x7,%eax
  800421a67a:	48 85 c0             	test   %rax,%rax
  800421a67d:	75 30                	jne    800421a6af <test_ept_map+0xc09>
  800421a67f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a682:	89 c1                	mov    %eax,%ecx
  800421a684:	48 ba a0 14 22 04 80 	movabs $0x80042214a0,%rdx
  800421a68b:	00 00 00 
  800421a68e:	be 1d 01 00 00       	mov    $0x11d,%esi
  800421a693:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a69a:	00 00 00 
  800421a69d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a6a2:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a6a9:	00 00 00 
  800421a6ac:	41 ff d0             	callq  *%r8
  800421a6af:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421a6b2:	48 98                	cltq   
  800421a6b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a6bb:	00 
  800421a6bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a6c0:	48 01 d0             	add    %rdx,%rax
  800421a6c3:	48 8b 00             	mov    (%rax),%rax
  800421a6c6:	48 89 c7             	mov    %rax,%rdi
  800421a6c9:	48 b8 92 95 21 04 80 	movabs $0x8004219592,%rax
  800421a6d0:	00 00 00 
  800421a6d3:	ff d0                	callq  *%rax
  800421a6d5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a6d9:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)
  800421a6dd:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800421a6e1:	0f 8f fd fe ff ff    	jg     800421a5e4 <test_ept_map+0xb3e>
  800421a6e7:	48 bf d0 14 22 04 80 	movabs $0x80042214d0,%rdi
  800421a6ee:	00 00 00 
  800421a6f1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a6f6:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a6fd:	00 00 00 
  800421a700:	ff d2                	callq  *%rdx
  800421a702:	48 ba f8 14 22 04 80 	movabs $0x80042214f8,%rdx
  800421a709:	00 00 00 
  800421a70c:	be 25 01 00 00       	mov    $0x125,%esi
  800421a711:	48 bf f3 0d 22 04 80 	movabs $0x8004220df3,%rdi
  800421a718:	00 00 00 
  800421a71b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a720:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421a727:	00 00 00 
  800421a72a:	ff d1                	callq  *%rcx

000000800421a72c <vmcs_writel>:
  800421a72c:	55                   	push   %rbp
  800421a72d:	48 89 e5             	mov    %rsp,%rbp
  800421a730:	48 83 ec 20          	sub    $0x20,%rsp
  800421a734:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421a737:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421a73b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a73f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a742:	f8                   	clc    
  800421a743:	0f 79 d0             	vmwrite %rax,%rdx
  800421a746:	0f 96 c0             	setbe  %al
  800421a749:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421a74c:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421a750:	c9                   	leaveq 
  800421a751:	c3                   	retq   

000000800421a752 <vmcs_readl>:
  800421a752:	55                   	push   %rbp
  800421a753:	48 89 e5             	mov    %rsp,%rbp
  800421a756:	48 83 ec 14          	sub    $0x14,%rsp
  800421a75a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421a75d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a760:	89 c2                	mov    %eax,%edx
  800421a762:	0f 78 d0             	vmread %rdx,%rax
  800421a765:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421a769:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a76d:	c9                   	leaveq 
  800421a76e:	c3                   	retq   

000000800421a76f <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  800421a76f:	55                   	push   %rbp
  800421a770:	48 89 e5             	mov    %rsp,%rbp
  800421a773:	53                   	push   %rbx
  800421a774:	48 83 ec 38          	sub    $0x38,%rsp
  800421a778:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  800421a77b:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  800421a77f:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421a783:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  800421a787:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  800421a78b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421a78e:	0f a2                	cpuid  
  800421a790:	89 de                	mov    %ebx,%esi
  800421a792:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421a795:	89 75 f0             	mov    %esi,-0x10(%rbp)
  800421a798:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  800421a79b:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  800421a79e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421a7a3:	74 09                	je     800421a7ae <cpuid+0x3f>
		*eaxp = eax;
  800421a7a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a7a9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421a7ac:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  800421a7ae:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421a7b3:	74 09                	je     800421a7be <cpuid+0x4f>
		*ebxp = ebx;
  800421a7b5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a7b9:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421a7bc:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  800421a7be:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421a7c3:	74 09                	je     800421a7ce <cpuid+0x5f>
		*ecxp = ecx;
  800421a7c5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a7c9:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a7cc:	89 10                	mov    %edx,(%rax)
	if (edxp)
  800421a7ce:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421a7d3:	74 09                	je     800421a7de <cpuid+0x6f>
		*edxp = edx;
  800421a7d5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a7d9:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421a7dc:	89 10                	mov    %edx,(%rax)
}
  800421a7de:	48 83 c4 38          	add    $0x38,%rsp
  800421a7e2:	5b                   	pop    %rbx
  800421a7e3:	5d                   	pop    %rbp
  800421a7e4:	c3                   	retq   

000000800421a7e5 <page2ppn>:
  800421a7e5:	55                   	push   %rbp
  800421a7e6:	48 89 e5             	mov    %rsp,%rbp
  800421a7e9:	48 83 ec 08          	sub    $0x8,%rsp
  800421a7ed:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421a7f1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421a7f5:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  800421a7fc:	00 00 00 
  800421a7ff:	48 8b 00             	mov    (%rax),%rax
  800421a802:	48 29 c2             	sub    %rax,%rdx
  800421a805:	48 89 d0             	mov    %rdx,%rax
  800421a808:	48 c1 f8 04          	sar    $0x4,%rax
  800421a80c:	c9                   	leaveq 
  800421a80d:	c3                   	retq   

000000800421a80e <page2pa>:
  800421a80e:	55                   	push   %rbp
  800421a80f:	48 89 e5             	mov    %rsp,%rbp
  800421a812:	48 83 ec 08          	sub    $0x8,%rsp
  800421a816:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421a81a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a81e:	48 89 c7             	mov    %rax,%rdi
  800421a821:	48 b8 e5 a7 21 04 80 	movabs $0x800421a7e5,%rax
  800421a828:	00 00 00 
  800421a82b:	ff d0                	callq  *%rax
  800421a82d:	48 c1 e0 0c          	shl    $0xc,%rax
  800421a831:	c9                   	leaveq 
  800421a832:	c3                   	retq   

000000800421a833 <page2kva>:
  800421a833:	55                   	push   %rbp
  800421a834:	48 89 e5             	mov    %rsp,%rbp
  800421a837:	48 83 ec 20          	sub    $0x20,%rsp
  800421a83b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421a83f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a843:	48 89 c7             	mov    %rax,%rdi
  800421a846:	48 b8 0e a8 21 04 80 	movabs $0x800421a80e,%rax
  800421a84d:	00 00 00 
  800421a850:	ff d0                	callq  *%rax
  800421a852:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421a856:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a85a:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a85e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421a861:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421a864:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421a86b:	00 00 00 
  800421a86e:	48 8b 00             	mov    (%rax),%rax
  800421a871:	48 39 c2             	cmp    %rax,%rdx
  800421a874:	72 32                	jb     800421a8a8 <page2kva+0x75>
  800421a876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a87a:	48 89 c1             	mov    %rax,%rcx
  800421a87d:	48 ba 28 15 22 04 80 	movabs $0x8004221528,%rdx
  800421a884:	00 00 00 
  800421a887:	be 62 00 00 00       	mov    $0x62,%esi
  800421a88c:	48 bf 4b 15 22 04 80 	movabs $0x800422154b,%rdi
  800421a893:	00 00 00 
  800421a896:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a89b:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421a8a2:	00 00 00 
  800421a8a5:	41 ff d0             	callq  *%r8
  800421a8a8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421a8af:	00 00 00 
  800421a8b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a8b6:	48 01 d0             	add    %rdx,%rax
  800421a8b9:	c9                   	leaveq 
  800421a8ba:	c3                   	retq   

000000800421a8bb <lock_kernel>:
  800421a8bb:	55                   	push   %rbp
  800421a8bc:	48 89 e5             	mov    %rsp,%rbp
  800421a8bf:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800421a8c6:	00 00 00 
  800421a8c9:	48 b8 f5 7e 21 04 80 	movabs $0x8004217ef5,%rax
  800421a8d0:	00 00 00 
  800421a8d3:	ff d0                	callq  *%rax
  800421a8d5:	5d                   	pop    %rbp
  800421a8d6:	c3                   	retq   

000000800421a8d7 <unlock_kernel>:
  800421a8d7:	55                   	push   %rbp
  800421a8d8:	48 89 e5             	mov    %rsp,%rbp
  800421a8db:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800421a8e2:	00 00 00 
  800421a8e5:	48 b8 cc 7f 21 04 80 	movabs $0x8004217fcc,%rax
  800421a8ec:	00 00 00 
  800421a8ef:	ff d0                	callq  *%rax
  800421a8f1:	f3 90                	pause  
  800421a8f3:	5d                   	pop    %rbp
  800421a8f4:	c3                   	retq   

000000800421a8f5 <vmx_list_vms>:
  800421a8f5:	55                   	push   %rbp
  800421a8f6:	48 89 e5             	mov    %rsp,%rbp
  800421a8f9:	48 83 ec 10          	sub    $0x10,%rsp
  800421a8fd:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421a904:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421a90b:	e9 96 00 00 00       	jmpq   800421a9a6 <vmx_list_vms+0xb1>
  800421a910:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800421a917:	00 00 00 
  800421a91a:	48 8b 10             	mov    (%rax),%rdx
  800421a91d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a920:	48 98                	cltq   
  800421a922:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421a929:	48 01 d0             	add    %rdx,%rax
  800421a92c:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421a932:	83 f8 03             	cmp    $0x3,%eax
  800421a935:	75 6b                	jne    800421a9a2 <vmx_list_vms+0xad>
  800421a937:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421a93b:	75 1b                	jne    800421a958 <vmx_list_vms+0x63>
  800421a93d:	48 bf 5a 15 22 04 80 	movabs $0x800422155a,%rdi
  800421a944:	00 00 00 
  800421a947:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a94c:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421a953:	00 00 00 
  800421a956:	ff d2                	callq  *%rdx
  800421a958:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421a95c:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800421a963:	00 00 00 
  800421a966:	48 8b 10             	mov    (%rax),%rdx
  800421a969:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a96c:	48 98                	cltq   
  800421a96e:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421a975:	48 01 d0             	add    %rdx,%rax
  800421a978:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a97e:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421a981:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421a984:	89 c6                	mov    %eax,%esi
  800421a986:	48 bf 68 15 22 04 80 	movabs $0x8004221568,%rdi
  800421a98d:	00 00 00 
  800421a990:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a995:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800421a99c:	00 00 00 
  800421a99f:	41 ff d0             	callq  *%r8
  800421a9a2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421a9a6:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421a9ad:	0f 8e 5d ff ff ff    	jle    800421a910 <vmx_list_vms+0x1b>
  800421a9b3:	c9                   	leaveq 
  800421a9b4:	c3                   	retq   

000000800421a9b5 <vmx_sel_resume>:
  800421a9b5:	55                   	push   %rbp
  800421a9b6:	48 89 e5             	mov    %rsp,%rbp
  800421a9b9:	48 83 ec 20          	sub    $0x20,%rsp
  800421a9bd:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421a9c0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421a9c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421a9ce:	e9 84 00 00 00       	jmpq   800421aa57 <vmx_sel_resume+0xa2>
  800421a9d3:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800421a9da:	00 00 00 
  800421a9dd:	48 8b 10             	mov    (%rax),%rdx
  800421a9e0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a9e3:	48 98                	cltq   
  800421a9e5:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421a9ec:	48 01 d0             	add    %rdx,%rax
  800421a9ef:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421a9f5:	83 f8 03             	cmp    $0x3,%eax
  800421a9f8:	75 59                	jne    800421aa53 <vmx_sel_resume+0x9e>
  800421a9fa:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421a9fe:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421aa01:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421aa04:	75 4d                	jne    800421aa53 <vmx_sel_resume+0x9e>
  800421aa06:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421aa09:	89 c6                	mov    %eax,%esi
  800421aa0b:	48 bf 75 15 22 04 80 	movabs $0x8004221575,%rdi
  800421aa12:	00 00 00 
  800421aa15:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa1a:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421aa21:	00 00 00 
  800421aa24:	ff d2                	callq  *%rdx
  800421aa26:	48 b8 58 c2 4d 04 80 	movabs $0x80044dc258,%rax
  800421aa2d:	00 00 00 
  800421aa30:	48 8b 10             	mov    (%rax),%rdx
  800421aa33:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421aa36:	48 98                	cltq   
  800421aa38:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421aa3f:	48 01 d0             	add    %rdx,%rax
  800421aa42:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800421aa49:	00 00 00 
  800421aa4c:	b8 01 00 00 00       	mov    $0x1,%eax
  800421aa51:	eb 36                	jmp    800421aa89 <vmx_sel_resume+0xd4>
  800421aa53:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421aa57:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421aa5e:	0f 8e 6f ff ff ff    	jle    800421a9d3 <vmx_sel_resume+0x1e>
  800421aa64:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421aa67:	89 c6                	mov    %eax,%esi
  800421aa69:	48 bf 88 15 22 04 80 	movabs $0x8004221588,%rdi
  800421aa70:	00 00 00 
  800421aa73:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa78:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421aa7f:	00 00 00 
  800421aa82:	ff d2                	callq  *%rdx
  800421aa84:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa89:	c9                   	leaveq 
  800421aa8a:	c3                   	retq   

000000800421aa8b <vmx_check_support>:
  800421aa8b:	55                   	push   %rbp
  800421aa8c:	48 89 e5             	mov    %rsp,%rbp
  800421aa8f:	48 83 ec 20          	sub    $0x20,%rsp
  800421aa93:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
  800421aa97:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800421aa9b:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  800421aa9f:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  800421aaa3:	49 89 f0             	mov    %rsi,%r8
  800421aaa6:	48 89 c6             	mov    %rax,%rsi
  800421aaa9:	bf 01 00 00 00       	mov    $0x1,%edi
  800421aaae:	48 b8 6f a7 21 04 80 	movabs $0x800421a76f,%rax
  800421aab5:	00 00 00 
  800421aab8:	ff d0                	callq  *%rax
  800421aaba:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421aabd:	83 e0 20             	and    $0x20,%eax
  800421aac0:	85 c0                	test   %eax,%eax
  800421aac2:	0f 95 c0             	setne  %al
  800421aac5:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421aac8:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  800421aacc:	74 1d                	je     800421aaeb <vmx_check_support+0x60>
  800421aace:	48 bf aa 15 22 04 80 	movabs $0x80042215aa,%rdi
  800421aad5:	00 00 00 
  800421aad8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aadd:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421aae4:	00 00 00 
  800421aae7:	ff d2                	callq  *%rdx
  800421aae9:	eb 1b                	jmp    800421ab06 <vmx_check_support+0x7b>
  800421aaeb:	48 bf c8 15 22 04 80 	movabs $0x80042215c8,%rdi
  800421aaf2:	00 00 00 
  800421aaf5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aafa:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421ab01:	00 00 00 
  800421ab04:	ff d2                	callq  *%rdx
  800421ab06:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421ab0a:	c9                   	leaveq 
  800421ab0b:	c3                   	retq   

000000800421ab0c <vmx_check_ept>:
  800421ab0c:	55                   	push   %rbp
  800421ab0d:	48 89 e5             	mov    %rsp,%rbp
  800421ab10:	48 83 ec 50          	sub    $0x50,%rsp
  800421ab14:	c7 45 e0 82 04 00 00 	movl   $0x482,-0x20(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ab1b:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421ab1e:	89 c1                	mov    %eax,%ecx
  800421ab20:	0f 32                	rdmsr  
  800421ab22:	89 55 dc             	mov    %edx,-0x24(%rbp)
  800421ab25:	89 45 d8             	mov    %eax,-0x28(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ab28:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421ab2f:	00 
	ret = edx;
  800421ab30:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421ab33:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	ret = ret << 32;
  800421ab37:	48 c1 65 d0 20       	shlq   $0x20,-0x30(%rbp)
	ret |= eax;
  800421ab3c:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421ab3f:	48 09 45 d0          	or     %rax,-0x30(%rbp)

	return ret;
  800421ab43:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ab47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421ab4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ab4f:	48 c1 e8 3f          	shr    $0x3f,%rax
  800421ab53:	88 45 f7             	mov    %al,-0x9(%rbp)
  800421ab56:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  800421ab5a:	74 76                	je     800421abd2 <vmx_check_ept+0xc6>
  800421ab5c:	c7 45 cc 8b 04 00 00 	movl   $0x48b,-0x34(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ab63:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421ab66:	89 c1                	mov    %eax,%ecx
  800421ab68:	0f 32                	rdmsr  
  800421ab6a:	89 55 c8             	mov    %edx,-0x38(%rbp)
  800421ab6d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ab70:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800421ab77:	00 
	ret = edx;
  800421ab78:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421ab7b:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ret = ret << 32;
  800421ab7f:	48 c1 65 b8 20       	shlq   $0x20,-0x48(%rbp)
	ret |= eax;
  800421ab84:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421ab87:	48 09 45 b8          	or     %rax,-0x48(%rbp)

	return ret;
  800421ab8b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ab8f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421ab93:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  800421ab9a:	00 00 00 
  800421ab9d:	48 23 45 e8          	and    -0x18(%rbp),%rax
  800421aba1:	48 85 c0             	test   %rax,%rax
  800421aba4:	0f 95 c0             	setne  %al
  800421aba7:	88 45 e7             	mov    %al,-0x19(%rbp)
  800421abaa:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
  800421abae:	74 22                	je     800421abd2 <vmx_check_ept+0xc6>
  800421abb0:	48 bf e8 15 22 04 80 	movabs $0x80042215e8,%rdi
  800421abb7:	00 00 00 
  800421abba:	b8 00 00 00 00       	mov    $0x0,%eax
  800421abbf:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421abc6:	00 00 00 
  800421abc9:	ff d2                	callq  *%rdx
  800421abcb:	b8 01 00 00 00       	mov    $0x1,%eax
  800421abd0:	eb 05                	jmp    800421abd7 <vmx_check_ept+0xcb>
  800421abd2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421abd7:	c9                   	leaveq 
  800421abd8:	c3                   	retq   

000000800421abd9 <check_fixed_bits>:
  800421abd9:	55                   	push   %rbp
  800421abda:	48 89 e5             	mov    %rsp,%rbp
  800421abdd:	48 83 ec 30          	sub    $0x30,%rsp
  800421abe1:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421abe5:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421abe9:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421abed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421abf4:	e9 96 00 00 00       	jmpq   800421ac8f <check_fixed_bits+0xb6>
  800421abf9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421abfc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421ac00:	89 c1                	mov    %eax,%ecx
  800421ac02:	48 d3 ea             	shr    %cl,%rdx
  800421ac05:	48 89 d0             	mov    %rdx,%rax
  800421ac08:	83 e0 01             	and    $0x1,%eax
  800421ac0b:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421ac0e:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  800421ac12:	75 1e                	jne    800421ac32 <check_fixed_bits+0x59>
  800421ac14:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ac17:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421ac1b:	89 c1                	mov    %eax,%ecx
  800421ac1d:	48 d3 ea             	shr    %cl,%rdx
  800421ac20:	48 89 d0             	mov    %rdx,%rax
  800421ac23:	83 e0 01             	and    $0x1,%eax
  800421ac26:	48 85 c0             	test   %rax,%rax
  800421ac29:	75 60                	jne    800421ac8b <check_fixed_bits+0xb2>
  800421ac2b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac30:	eb 6e                	jmp    800421aca0 <check_fixed_bits+0xc7>
  800421ac32:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421ac36:	75 1e                	jne    800421ac56 <check_fixed_bits+0x7d>
  800421ac38:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ac3b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421ac3f:	89 c1                	mov    %eax,%ecx
  800421ac41:	48 d3 ea             	shr    %cl,%rdx
  800421ac44:	48 89 d0             	mov    %rdx,%rax
  800421ac47:	83 e0 01             	and    $0x1,%eax
  800421ac4a:	48 85 c0             	test   %rax,%rax
  800421ac4d:	74 3c                	je     800421ac8b <check_fixed_bits+0xb2>
  800421ac4f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac54:	eb 4a                	jmp    800421aca0 <check_fixed_bits+0xc7>
  800421ac56:	48 b9 00 16 22 04 80 	movabs $0x8004221600,%rcx
  800421ac5d:	00 00 00 
  800421ac60:	48 ba 06 16 22 04 80 	movabs $0x8004221606,%rdx
  800421ac67:	00 00 00 
  800421ac6a:	be 85 00 00 00       	mov    $0x85,%esi
  800421ac6f:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421ac76:	00 00 00 
  800421ac79:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac7e:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421ac85:	00 00 00 
  800421ac88:	41 ff d0             	callq  *%r8
  800421ac8b:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421ac8f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ac92:	83 f8 3f             	cmp    $0x3f,%eax
  800421ac95:	0f 86 5e ff ff ff    	jbe    800421abf9 <check_fixed_bits+0x20>
  800421ac9b:	b8 01 00 00 00       	mov    $0x1,%eax
  800421aca0:	c9                   	leaveq 
  800421aca1:	c3                   	retq   

000000800421aca2 <vmx_init_vmcs>:
  800421aca2:	55                   	push   %rbp
  800421aca3:	48 89 e5             	mov    %rsp,%rbp
  800421aca6:	48 83 ec 40          	sub    $0x40,%rsp
  800421acaa:	c7 45 dc 80 04 00 00 	movl   $0x480,-0x24(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421acb1:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421acb4:	89 c1                	mov    %eax,%ecx
  800421acb6:	0f 32                	rdmsr  
  800421acb8:	89 55 d8             	mov    %edx,-0x28(%rbp)
  800421acbb:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421acbe:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800421acc5:	00 
	ret = edx;
  800421acc6:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421acc9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	ret = ret << 32;
  800421accd:	48 c1 65 c8 20       	shlq   $0x20,-0x38(%rbp)
	ret |= eax;
  800421acd2:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421acd5:	48 09 45 c8          	or     %rax,-0x38(%rbp)

	return ret;
  800421acd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421acdd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421ace1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ace5:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800421ace8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421acec:	48 c1 e8 20          	shr    $0x20,%rax
  800421acf0:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421acf5:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421acf8:	81 7d f4 00 10 00 00 	cmpl   $0x1000,-0xc(%rbp)
  800421acff:	76 35                	jbe    800421ad36 <vmx_init_vmcs+0x94>
  800421ad01:	48 b9 28 16 22 04 80 	movabs $0x8004221628,%rcx
  800421ad08:	00 00 00 
  800421ad0b:	48 ba 06 16 22 04 80 	movabs $0x8004221606,%rdx
  800421ad12:	00 00 00 
  800421ad15:	be 95 00 00 00       	mov    $0x95,%esi
  800421ad1a:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421ad21:	00 00 00 
  800421ad24:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad29:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421ad30:	00 00 00 
  800421ad33:	41 ff d0             	callq  *%r8
  800421ad36:	bf 01 00 00 00       	mov    $0x1,%edi
  800421ad3b:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800421ad42:	00 00 00 
  800421ad45:	ff d0                	callq  *%rax
  800421ad47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421ad4b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421ad50:	75 07                	jne    800421ad59 <vmx_init_vmcs+0xb7>
  800421ad52:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad57:	eb 4d                	jmp    800421ada6 <vmx_init_vmcs+0x104>
  800421ad59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ad5d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421ad61:	8d 50 01             	lea    0x1(%rax),%edx
  800421ad64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ad68:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421ad6c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ad70:	48 89 c7             	mov    %rax,%rdi
  800421ad73:	48 b8 33 a8 21 04 80 	movabs $0x800421a833,%rax
  800421ad7a:	00 00 00 
  800421ad7d:	ff d0                	callq  *%rax
  800421ad7f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421ad83:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  800421ad87:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421ad8b:	ba 04 00 00 00       	mov    $0x4,%edx
  800421ad90:	48 89 ce             	mov    %rcx,%rsi
  800421ad93:	48 89 c7             	mov    %rax,%rdi
  800421ad96:	48 b8 0d 0d 21 04 80 	movabs $0x8004210d0d,%rax
  800421ad9d:	00 00 00 
  800421ada0:	ff d0                	callq  *%rax
  800421ada2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ada6:	c9                   	leaveq 
  800421ada7:	c3                   	retq   

000000800421ada8 <vmx_init_vmxon>:
  800421ada8:	55                   	push   %rbp
  800421ada9:	48 89 e5             	mov    %rsp,%rbp
  800421adac:	53                   	push   %rbx
  800421adad:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  800421adb4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421adb9:	48 ba a2 ac 21 04 80 	movabs $0x800421aca2,%rdx
  800421adc0:	00 00 00 
  800421adc3:	ff d2                	callq  *%rdx
  800421adc5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421adc9:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421adce:	75 0a                	jne    800421adda <vmx_init_vmxon+0x32>
  800421add0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800421add5:	e9 75 04 00 00       	jmpq   800421b24f <vmx_init_vmxon+0x4a7>

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421adda:	0f 20 c0             	mov    %cr0,%rax
  800421addd:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	return val;
  800421ade1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421ade5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421ade9:	0f 20 e0             	mov    %cr4,%rax
  800421adec:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421adf0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421adf4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421adf8:	48 83 4d d8 20       	orq    $0x20,-0x28(%rbp)
  800421adfd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ae01:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
}

static __inline void
lcr0(uint64_t val)
{
	__asm __volatile("movq %0,%%cr0" : : "r" (val));
  800421ae05:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421ae09:	0f 22 c0             	mov    %rax,%cr0
  800421ae0c:	c7 45 ac 87 04 00 00 	movl   $0x487,-0x54(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ae13:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421ae16:	89 c1                	mov    %eax,%ecx
  800421ae18:	0f 32                	rdmsr  
  800421ae1a:	89 55 a8             	mov    %edx,-0x58(%rbp)
  800421ae1d:	89 45 a4             	mov    %eax,-0x5c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ae20:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  800421ae27:	00 
	ret = edx;
  800421ae28:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421ae2b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ret = ret << 32;
  800421ae2f:	48 c1 65 98 20       	shlq   $0x20,-0x68(%rbp)
	ret |= eax;
  800421ae34:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421ae37:	48 09 45 98          	or     %rax,-0x68(%rbp)

	return ret;
  800421ae3b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421ae3f:	48 89 c6             	mov    %rax,%rsi
  800421ae42:	c7 45 94 86 04 00 00 	movl   $0x486,-0x6c(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ae49:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421ae4c:	89 c1                	mov    %eax,%ecx
  800421ae4e:	0f 32                	rdmsr  
  800421ae50:	89 55 90             	mov    %edx,-0x70(%rbp)
  800421ae53:	89 45 8c             	mov    %eax,-0x74(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ae56:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421ae5d:	00 
	ret = edx;
  800421ae5e:	8b 45 90             	mov    -0x70(%rbp),%eax
  800421ae61:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	ret = ret << 32;
  800421ae65:	48 c1 65 80 20       	shlq   $0x20,-0x80(%rbp)
	ret |= eax;
  800421ae6a:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421ae6d:	48 09 45 80          	or     %rax,-0x80(%rbp)

	return ret;
  800421ae71:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421ae75:	48 89 c1             	mov    %rax,%rcx
  800421ae78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ae7c:	48 89 f2             	mov    %rsi,%rdx
  800421ae7f:	48 89 ce             	mov    %rcx,%rsi
  800421ae82:	48 89 c7             	mov    %rax,%rdi
  800421ae85:	48 b8 d9 ab 21 04 80 	movabs $0x800421abd9,%rax
  800421ae8c:	00 00 00 
  800421ae8f:	ff d0                	callq  *%rax
  800421ae91:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421ae94:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421ae98:	83 f0 01             	xor    $0x1,%eax
  800421ae9b:	84 c0                	test   %al,%al
  800421ae9d:	74 1d                	je     800421aebc <vmx_init_vmxon+0x114>
  800421ae9f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421aea3:	48 89 c7             	mov    %rax,%rdi
  800421aea6:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800421aead:	00 00 00 
  800421aeb0:	ff d0                	callq  *%rax
  800421aeb2:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421aeb7:	e9 93 03 00 00       	jmpq   800421b24f <vmx_init_vmxon+0x4a7>
  800421aebc:	48 81 4d d0 00 20 00 	orq    $0x2000,-0x30(%rbp)
  800421aec3:	00 
  800421aec4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421aec8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
}

static __inline void
lcr4(uint64_t val)
{
	__asm __volatile("movq %0,%%cr4" : : "r" (val));
  800421aecf:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421aed6:	0f 22 e0             	mov    %rax,%cr4
  800421aed9:	c7 85 74 ff ff ff 89 	movl   $0x489,-0x8c(%rbp)
  800421aee0:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421aee3:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421aee9:	89 c1                	mov    %eax,%ecx
  800421aeeb:	0f 32                	rdmsr  
  800421aeed:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
  800421aef3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421aef9:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421af00:	00 00 00 00 
	ret = edx;
  800421af04:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  800421af0a:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
	ret = ret << 32;
  800421af11:	48 c1 a5 60 ff ff ff 	shlq   $0x20,-0xa0(%rbp)
  800421af18:	20 
	ret |= eax;
  800421af19:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421af1f:	48 09 85 60 ff ff ff 	or     %rax,-0xa0(%rbp)

	return ret;
  800421af26:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421af2d:	48 89 c6             	mov    %rax,%rsi
  800421af30:	c7 85 5c ff ff ff 88 	movl   $0x488,-0xa4(%rbp)
  800421af37:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421af3a:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421af40:	89 c1                	mov    %eax,%ecx
  800421af42:	0f 32                	rdmsr  
  800421af44:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
  800421af4a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421af50:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  800421af57:	00 00 00 00 
	ret = edx;
  800421af5b:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  800421af61:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	ret = ret << 32;
  800421af68:	48 c1 a5 48 ff ff ff 	shlq   $0x20,-0xb8(%rbp)
  800421af6f:	20 
	ret |= eax;
  800421af70:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
  800421af76:	48 09 85 48 ff ff ff 	or     %rax,-0xb8(%rbp)

	return ret;
  800421af7d:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421af84:	48 89 c1             	mov    %rax,%rcx
  800421af87:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421af8b:	48 89 f2             	mov    %rsi,%rdx
  800421af8e:	48 89 ce             	mov    %rcx,%rsi
  800421af91:	48 89 c7             	mov    %rax,%rdi
  800421af94:	48 b8 d9 ab 21 04 80 	movabs $0x800421abd9,%rax
  800421af9b:	00 00 00 
  800421af9e:	ff d0                	callq  *%rax
  800421afa0:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421afa3:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421afa7:	83 f0 01             	xor    $0x1,%eax
  800421afaa:	84 c0                	test   %al,%al
  800421afac:	74 1d                	je     800421afcb <vmx_init_vmxon+0x223>
  800421afae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421afb2:	48 89 c7             	mov    %rax,%rdi
  800421afb5:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800421afbc:	00 00 00 
  800421afbf:	ff d0                	callq  *%rax
  800421afc1:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421afc6:	e9 84 02 00 00       	jmpq   800421b24f <vmx_init_vmxon+0x4a7>
  800421afcb:	c7 85 44 ff ff ff 3a 	movl   $0x3a,-0xbc(%rbp)
  800421afd2:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421afd5:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421afdb:	89 c1                	mov    %eax,%ecx
  800421afdd:	0f 32                	rdmsr  
  800421afdf:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%rbp)
  800421afe5:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421afeb:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421aff2:	00 00 00 00 
	ret = edx;
  800421aff6:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
  800421affc:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
	ret = ret << 32;
  800421b003:	48 c1 a5 30 ff ff ff 	shlq   $0x20,-0xd0(%rbp)
  800421b00a:	20 
	ret |= eax;
  800421b00b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b011:	48 09 85 30 ff ff ff 	or     %rax,-0xd0(%rbp)

	return ret;
  800421b018:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  800421b01f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b023:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b027:	83 e0 04             	and    $0x4,%eax
  800421b02a:	48 85 c0             	test   %rax,%rax
  800421b02d:	0f 85 e8 00 00 00    	jne    800421b11b <vmx_init_vmxon+0x373>
  800421b033:	48 83 4d e8 04       	orq    $0x4,-0x18(%rbp)
  800421b038:	c7 85 2c ff ff ff 3a 	movl   $0x3a,-0xd4(%rbp)
  800421b03f:	00 00 00 
  800421b042:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b046:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421b04d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b054:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b05a:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b061:	48 c1 e8 20          	shr    $0x20,%rax
  800421b065:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
	__asm __volatile("wrmsr"
  800421b06b:	8b 8d 2c ff ff ff    	mov    -0xd4(%rbp),%ecx
  800421b071:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421b077:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b07d:	0f 30                	wrmsr  
  800421b07f:	c7 85 14 ff ff ff 3a 	movl   $0x3a,-0xec(%rbp)
  800421b086:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b089:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b08f:	89 c1                	mov    %eax,%ecx
  800421b091:	0f 32                	rdmsr  
  800421b093:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
  800421b099:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b09f:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
  800421b0a6:	00 00 00 00 
	ret = edx;
  800421b0aa:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421b0b0:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
	ret = ret << 32;
  800421b0b7:	48 c1 a5 00 ff ff ff 	shlq   $0x20,-0x100(%rbp)
  800421b0be:	20 
	ret |= eax;
  800421b0bf:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b0c5:	48 09 85 00 ff ff ff 	or     %rax,-0x100(%rbp)

	return ret;
  800421b0cc:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421b0d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b0d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b0db:	83 e0 04             	and    $0x4,%eax
  800421b0de:	48 85 c0             	test   %rax,%rax
  800421b0e1:	75 38                	jne    800421b11b <vmx_init_vmxon+0x373>
  800421b0e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b0e7:	48 89 c7             	mov    %rax,%rdi
  800421b0ea:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800421b0f1:	00 00 00 
  800421b0f4:	ff d0                	callq  *%rax
  800421b0f6:	48 bf 40 16 22 04 80 	movabs $0x8004221640,%rdi
  800421b0fd:	00 00 00 
  800421b100:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b105:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421b10c:	00 00 00 
  800421b10f:	ff d2                	callq  *%rdx
  800421b111:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800421b116:	e9 34 01 00 00       	jmpq   800421b24f <vmx_init_vmxon+0x4a7>
  800421b11b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b11f:	83 e0 01             	and    $0x1,%eax
  800421b122:	48 85 c0             	test   %rax,%rax
  800421b125:	75 4c                	jne    800421b173 <vmx_init_vmxon+0x3cb>
  800421b127:	48 83 4d e8 01       	orq    $0x1,-0x18(%rbp)
  800421b12c:	c7 85 fc fe ff ff 3a 	movl   $0x3a,-0x104(%rbp)
  800421b133:	00 00 00 
  800421b136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b13a:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421b141:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b148:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b14e:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b155:	48 c1 e8 20          	shr    $0x20,%rax
  800421b159:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
	__asm __volatile("wrmsr"
  800421b15f:	8b 8d fc fe ff ff    	mov    -0x104(%rbp),%ecx
  800421b165:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421b16b:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421b171:	0f 30                	wrmsr  
  800421b173:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b177:	48 89 c7             	mov    %rax,%rdi
  800421b17a:	48 b8 0e a8 21 04 80 	movabs $0x800421a80e,%rax
  800421b181:	00 00 00 
  800421b184:	ff d0                	callq  *%rax
  800421b186:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  800421b18d:	c6 85 e7 fe ff ff 00 	movb   $0x0,-0x119(%rbp)
  800421b194:	f8                   	clc    
  800421b195:	f3 0f c7 b5 d8 fe ff 	vmxon  -0x128(%rbp)
  800421b19c:	ff 
  800421b19d:	0f 96 c0             	setbe  %al
  800421b1a0:	88 85 e7 fe ff ff    	mov    %al,-0x119(%rbp)
  800421b1a6:	0f b6 85 e7 fe ff ff 	movzbl -0x119(%rbp),%eax
  800421b1ad:	88 45 ce             	mov    %al,-0x32(%rbp)
  800421b1b0:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
  800421b1b4:	74 1a                	je     800421b1d0 <vmx_init_vmxon+0x428>
  800421b1b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b1ba:	48 89 c7             	mov    %rax,%rdi
  800421b1bd:	48 b8 db 2f 20 04 80 	movabs $0x8004202fdb,%rax
  800421b1c4:	00 00 00 
  800421b1c7:	ff d0                	callq  *%rax
  800421b1c9:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b1ce:	eb 7f                	jmp    800421b24f <vmx_init_vmxon+0x4a7>
  800421b1d0:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421b1d7:	00 00 00 
  800421b1da:	ff d0                	callq  *%rax
  800421b1dc:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421b1e3:	00 00 00 
  800421b1e6:	48 98                	cltq   
  800421b1e8:	48 c1 e0 03          	shl    $0x3,%rax
  800421b1ec:	48 89 c1             	mov    %rax,%rcx
  800421b1ef:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b1f3:	48 01 c8             	add    %rcx,%rax
  800421b1f6:	48 01 d0             	add    %rdx,%rax
  800421b1f9:	48 83 c0 70          	add    $0x70,%rax
  800421b1fd:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  800421b201:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421b208:	00 00 00 
  800421b20b:	ff d0                	callq  *%rax
  800421b20d:	89 c3                	mov    %eax,%ebx
  800421b20f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b213:	48 89 c7             	mov    %rax,%rdi
  800421b216:	48 b8 33 a8 21 04 80 	movabs $0x800421a833,%rax
  800421b21d:	00 00 00 
  800421b220:	ff d0                	callq  *%rax
  800421b222:	48 89 c2             	mov    %rax,%rdx
  800421b225:	48 b9 20 d0 6d 04 80 	movabs $0x80046dd020,%rcx
  800421b22c:	00 00 00 
  800421b22f:	48 63 c3             	movslq %ebx,%rax
  800421b232:	48 c1 e0 03          	shl    $0x3,%rax
  800421b236:	48 89 c6             	mov    %rax,%rsi
  800421b239:	48 c1 e6 04          	shl    $0x4,%rsi
  800421b23d:	48 01 f0             	add    %rsi,%rax
  800421b240:	48 01 c8             	add    %rcx,%rax
  800421b243:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421b247:	48 89 10             	mov    %rdx,(%rax)
  800421b24a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b24f:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  800421b256:	5b                   	pop    %rbx
  800421b257:	5d                   	pop    %rbp
  800421b258:	c3                   	retq   

000000800421b259 <vmcs_host_init>:
  800421b259:	55                   	push   %rbp
  800421b25a:	48 89 e5             	mov    %rsp,%rbp
  800421b25d:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421b264:	0f 20 c0             	mov    %cr0,%rax
  800421b267:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return val;
  800421b26b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b26f:	c7 45 e4 00 6c 00 00 	movl   $0x6c00,-0x1c(%rbp)
  800421b276:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421b27a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421b27e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b281:	48 89 d6             	mov    %rdx,%rsi
  800421b284:	89 c7                	mov    %eax,%edi
  800421b286:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b28d:	00 00 00 
  800421b290:	ff d0                	callq  *%rax

static __inline uint64_t
rcr3(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr3,%0" : "=r" (val));
  800421b292:	0f 20 d8             	mov    %cr3,%rax
  800421b295:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return val;
  800421b299:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b29d:	c7 45 cc 02 6c 00 00 	movl   $0x6c02,-0x34(%rbp)
  800421b2a4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421b2a8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421b2ac:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b2af:	48 89 d6             	mov    %rdx,%rsi
  800421b2b2:	89 c7                	mov    %eax,%edi
  800421b2b4:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b2bb:	00 00 00 
  800421b2be:	ff d0                	callq  *%rax

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421b2c0:	0f 20 e0             	mov    %cr4,%rax
  800421b2c3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421b2c7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b2cb:	c7 45 b4 04 6c 00 00 	movl   $0x6c04,-0x4c(%rbp)
  800421b2d2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421b2d6:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421b2da:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421b2dd:	48 89 d6             	mov    %rdx,%rsi
  800421b2e0:	89 c7                	mov    %eax,%edi
  800421b2e2:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b2e9:	00 00 00 
  800421b2ec:	ff d0                	callq  *%rax
  800421b2ee:	c7 45 a4 00 0c 00 00 	movl   $0xc00,-0x5c(%rbp)
  800421b2f5:	66 c7 45 a2 10 00    	movw   $0x10,-0x5e(%rbp)
  800421b2fb:	0f b7 55 a2          	movzwl -0x5e(%rbp),%edx
  800421b2ff:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421b302:	48 89 d6             	mov    %rdx,%rsi
  800421b305:	89 c7                	mov    %eax,%edi
  800421b307:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b30e:	00 00 00 
  800421b311:	ff d0                	callq  *%rax
  800421b313:	c7 45 9c 04 0c 00 00 	movl   $0xc04,-0x64(%rbp)
  800421b31a:	66 c7 45 9a 10 00    	movw   $0x10,-0x66(%rbp)
  800421b320:	0f b7 55 9a          	movzwl -0x66(%rbp),%edx
  800421b324:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421b327:	48 89 d6             	mov    %rdx,%rsi
  800421b32a:	89 c7                	mov    %eax,%edi
  800421b32c:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b333:	00 00 00 
  800421b336:	ff d0                	callq  *%rax
  800421b338:	c7 45 94 06 0c 00 00 	movl   $0xc06,-0x6c(%rbp)
  800421b33f:	66 c7 45 92 10 00    	movw   $0x10,-0x6e(%rbp)
  800421b345:	0f b7 55 92          	movzwl -0x6e(%rbp),%edx
  800421b349:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421b34c:	48 89 d6             	mov    %rdx,%rsi
  800421b34f:	89 c7                	mov    %eax,%edi
  800421b351:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b358:	00 00 00 
  800421b35b:	ff d0                	callq  *%rax
  800421b35d:	c7 45 8c 08 0c 00 00 	movl   $0xc08,-0x74(%rbp)
  800421b364:	66 c7 45 8a 10 00    	movw   $0x10,-0x76(%rbp)
  800421b36a:	0f b7 55 8a          	movzwl -0x76(%rbp),%edx
  800421b36e:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b371:	48 89 d6             	mov    %rdx,%rsi
  800421b374:	89 c7                	mov    %eax,%edi
  800421b376:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b37d:	00 00 00 
  800421b380:	ff d0                	callq  *%rax
  800421b382:	c7 45 84 0a 0c 00 00 	movl   $0xc0a,-0x7c(%rbp)
  800421b389:	66 c7 45 82 10 00    	movw   $0x10,-0x7e(%rbp)
  800421b38f:	0f b7 55 82          	movzwl -0x7e(%rbp),%edx
  800421b393:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421b396:	48 89 d6             	mov    %rdx,%rsi
  800421b399:	89 c7                	mov    %eax,%edi
  800421b39b:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b3a2:	00 00 00 
  800421b3a5:	ff d0                	callq  *%rax
  800421b3a7:	c7 85 7c ff ff ff 02 	movl   $0xc02,-0x84(%rbp)
  800421b3ae:	0c 00 00 
  800421b3b1:	66 c7 85 7a ff ff ff 	movw   $0x8,-0x86(%rbp)
  800421b3b8:	08 00 
  800421b3ba:	0f b7 95 7a ff ff ff 	movzwl -0x86(%rbp),%edx
  800421b3c1:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421b3c7:	48 89 d6             	mov    %rdx,%rsi
  800421b3ca:	89 c7                	mov    %eax,%edi
  800421b3cc:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b3d3:	00 00 00 
  800421b3d6:	ff d0                	callq  *%rax
  800421b3d8:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421b3df:	00 00 00 
  800421b3e2:	ff d0                	callq  *%rax
  800421b3e4:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421b3eb:	00 00 00 
  800421b3ee:	48 98                	cltq   
  800421b3f0:	48 c1 e0 03          	shl    $0x3,%rax
  800421b3f4:	48 89 c1             	mov    %rax,%rcx
  800421b3f7:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b3fb:	48 01 c8             	add    %rcx,%rax
  800421b3fe:	48 01 d0             	add    %rdx,%rax
  800421b401:	0f b6 00             	movzbl (%rax),%eax
  800421b404:	0f b6 c0             	movzbl %al,%eax
  800421b407:	01 c0                	add    %eax,%eax
  800421b409:	83 c0 05             	add    $0x5,%eax
  800421b40c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421b40f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b412:	c1 e0 03             	shl    $0x3,%eax
  800421b415:	0f b7 c0             	movzwl %ax,%eax
  800421b418:	c7 85 74 ff ff ff 0c 	movl   $0xc0c,-0x8c(%rbp)
  800421b41f:	0c 00 00 
  800421b422:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  800421b429:	0f b7 95 72 ff ff ff 	movzwl -0x8e(%rbp),%edx
  800421b430:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421b436:	48 89 d6             	mov    %rdx,%rsi
  800421b439:	89 c7                	mov    %eax,%edi
  800421b43b:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b442:	00 00 00 
  800421b445:	ff d0                	callq  *%rax
  800421b447:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421b44e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421b455:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421b45c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
static __inline void
read_idtr (uint64_t *idtbase, uint16_t *idtlimit)
{
	struct Pseudodesc idtr;

	asm volatile ("sidt %0"
  800421b463:	0f 01 8d d0 fe ff ff 	sidt   -0x130(%rbp)
			: "=m" (idtr));
	*idtbase = idtr.pd_base;
  800421b46a:	48 8b 95 d2 fe ff ff 	mov    -0x12e(%rbp),%rdx
  800421b471:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421b478:	48 89 10             	mov    %rdx,(%rax)
	*idtlimit = idtr.pd_lim;
  800421b47b:	0f b7 95 d0 fe ff ff 	movzwl -0x130(%rbp),%edx
  800421b482:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421b489:	66 89 10             	mov    %dx,(%rax)
  800421b48c:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b493:	c7 85 5c ff ff ff 0e 	movl   $0x6c0e,-0xa4(%rbp)
  800421b49a:	6c 00 00 
  800421b49d:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421b4a4:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421b4ab:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b4b1:	48 89 d6             	mov    %rdx,%rsi
  800421b4b4:	89 c7                	mov    %eax,%edi
  800421b4b6:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b4bd:	00 00 00 
  800421b4c0:	ff d0                	callq  *%rax
  800421b4c2:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421b4c9:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800421b4d0:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421b4d7:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
static __inline void
read_gdtr (uint64_t *gdtbase, uint16_t *gdtlimit)
{
	struct Pseudodesc gdtr;

	asm volatile ("sgdt %0"
  800421b4de:	0f 01 85 e0 fe ff ff 	sgdt   -0x120(%rbp)
			: "=m" (gdtr));
	*gdtbase = gdtr.pd_base;
  800421b4e5:	48 8b 95 e2 fe ff ff 	mov    -0x11e(%rbp),%rdx
  800421b4ec:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421b4f3:	48 89 10             	mov    %rdx,(%rax)
	*gdtlimit = gdtr.pd_lim;
  800421b4f6:	0f b7 95 e0 fe ff ff 	movzwl -0x120(%rbp),%edx
  800421b4fd:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421b504:	66 89 10             	mov    %dx,(%rax)
  800421b507:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b50e:	c7 85 3c ff ff ff 0c 	movl   $0x6c0c,-0xc4(%rbp)
  800421b515:	6c 00 00 
  800421b518:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421b51f:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421b526:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b52c:	48 89 d6             	mov    %rdx,%rsi
  800421b52f:	89 c7                	mov    %eax,%edi
  800421b531:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b538:	00 00 00 
  800421b53b:	ff d0                	callq  *%rax
  800421b53d:	c7 85 2c ff ff ff 06 	movl   $0x6c06,-0xd4(%rbp)
  800421b544:	6c 00 00 
  800421b547:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421b54e:	00 00 00 00 
  800421b552:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421b559:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421b55f:	48 89 d6             	mov    %rdx,%rsi
  800421b562:	89 c7                	mov    %eax,%edi
  800421b564:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b56b:	00 00 00 
  800421b56e:	ff d0                	callq  *%rax
  800421b570:	c7 85 1c ff ff ff 08 	movl   $0x6c08,-0xe4(%rbp)
  800421b577:	6c 00 00 
  800421b57a:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  800421b581:	00 00 00 00 
  800421b585:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421b58c:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b592:	48 89 d6             	mov    %rdx,%rsi
  800421b595:	89 c7                	mov    %eax,%edi
  800421b597:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b59e:	00 00 00 
  800421b5a1:	ff d0                	callq  *%rax
  800421b5a3:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421b5aa:	00 00 00 
  800421b5ad:	ff d0                	callq  *%rax
  800421b5af:	48 98                	cltq   
  800421b5b1:	48 c1 e0 03          	shl    $0x3,%rax
  800421b5b5:	48 89 c2             	mov    %rax,%rdx
  800421b5b8:	48 c1 e2 04          	shl    $0x4,%rdx
  800421b5bc:	48 01 d0             	add    %rdx,%rax
  800421b5bf:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800421b5c3:	48 b8 20 d0 6d 04 80 	movabs $0x80046dd020,%rax
  800421b5ca:	00 00 00 
  800421b5cd:	48 01 d0             	add    %rdx,%rax
  800421b5d0:	c7 85 0c ff ff ff 0a 	movl   $0x6c0a,-0xf4(%rbp)
  800421b5d7:	6c 00 00 
  800421b5da:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421b5e1:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  800421b5e8:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b5ee:	48 89 d6             	mov    %rdx,%rsi
  800421b5f1:	89 c7                	mov    %eax,%edi
  800421b5f3:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b5fa:	00 00 00 
  800421b5fd:	ff d0                	callq  *%rax
  800421b5ff:	48 b8 ac cc 21 04 80 	movabs $0x800421ccac,%rax
  800421b606:	00 00 00 
  800421b609:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421b60d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421b611:	48 89 c6             	mov    %rax,%rsi
  800421b614:	bf 16 6c 00 00       	mov    $0x6c16,%edi
  800421b619:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b620:	00 00 00 
  800421b623:	ff d0                	callq  *%rax
  800421b625:	c9                   	leaveq 
  800421b626:	c3                   	retq   

000000800421b627 <vmcs_guest_init>:
  800421b627:	55                   	push   %rbp
  800421b628:	48 89 e5             	mov    %rsp,%rbp
  800421b62b:	48 81 ec f0 01 00 00 	sub    $0x1f0,%rsp
  800421b632:	c7 45 fc 02 08 00 00 	movl   $0x802,-0x4(%rbp)
  800421b639:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
  800421b63f:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  800421b643:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b646:	48 89 d6             	mov    %rdx,%rsi
  800421b649:	89 c7                	mov    %eax,%edi
  800421b64b:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b652:	00 00 00 
  800421b655:	ff d0                	callq  *%rax
  800421b657:	c7 45 f4 00 08 00 00 	movl   $0x800,-0xc(%rbp)
  800421b65e:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%rbp)
  800421b664:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  800421b668:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421b66b:	48 89 d6             	mov    %rdx,%rsi
  800421b66e:	89 c7                	mov    %eax,%edi
  800421b670:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b677:	00 00 00 
  800421b67a:	ff d0                	callq  *%rax
  800421b67c:	c7 45 ec 04 08 00 00 	movl   $0x804,-0x14(%rbp)
  800421b683:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  800421b689:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
  800421b68d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b690:	48 89 d6             	mov    %rdx,%rsi
  800421b693:	89 c7                	mov    %eax,%edi
  800421b695:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b69c:	00 00 00 
  800421b69f:	ff d0                	callq  *%rax
  800421b6a1:	c7 45 e4 06 08 00 00 	movl   $0x806,-0x1c(%rbp)
  800421b6a8:	66 c7 45 e2 00 00    	movw   $0x0,-0x1e(%rbp)
  800421b6ae:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
  800421b6b2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b6b5:	48 89 d6             	mov    %rdx,%rsi
  800421b6b8:	89 c7                	mov    %eax,%edi
  800421b6ba:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b6c1:	00 00 00 
  800421b6c4:	ff d0                	callq  *%rax
  800421b6c6:	c7 45 dc 08 08 00 00 	movl   $0x808,-0x24(%rbp)
  800421b6cd:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
  800421b6d3:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
  800421b6d7:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b6da:	48 89 d6             	mov    %rdx,%rsi
  800421b6dd:	89 c7                	mov    %eax,%edi
  800421b6df:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b6e6:	00 00 00 
  800421b6e9:	ff d0                	callq  *%rax
  800421b6eb:	c7 45 d4 0a 08 00 00 	movl   $0x80a,-0x2c(%rbp)
  800421b6f2:	66 c7 45 d2 00 00    	movw   $0x0,-0x2e(%rbp)
  800421b6f8:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  800421b6fc:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421b6ff:	48 89 d6             	mov    %rdx,%rsi
  800421b702:	89 c7                	mov    %eax,%edi
  800421b704:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b70b:	00 00 00 
  800421b70e:	ff d0                	callq  *%rax
  800421b710:	c7 45 cc 0e 08 00 00 	movl   $0x80e,-0x34(%rbp)
  800421b717:	66 c7 45 ca 00 00    	movw   $0x0,-0x36(%rbp)
  800421b71d:	0f b7 55 ca          	movzwl -0x36(%rbp),%edx
  800421b721:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b724:	48 89 d6             	mov    %rdx,%rsi
  800421b727:	89 c7                	mov    %eax,%edi
  800421b729:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b730:	00 00 00 
  800421b733:	ff d0                	callq  *%rax
  800421b735:	c7 45 c4 0c 08 00 00 	movl   $0x80c,-0x3c(%rbp)
  800421b73c:	66 c7 45 c2 00 00    	movw   $0x0,-0x3e(%rbp)
  800421b742:	0f b7 55 c2          	movzwl -0x3e(%rbp),%edx
  800421b746:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421b749:	48 89 d6             	mov    %rdx,%rsi
  800421b74c:	89 c7                	mov    %eax,%edi
  800421b74e:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b755:	00 00 00 
  800421b758:	ff d0                	callq  *%rax
  800421b75a:	c7 45 bc 08 68 00 00 	movl   $0x6808,-0x44(%rbp)
  800421b761:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  800421b768:	00 
  800421b769:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421b76d:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421b770:	48 89 d6             	mov    %rdx,%rsi
  800421b773:	89 c7                	mov    %eax,%edi
  800421b775:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b77c:	00 00 00 
  800421b77f:	ff d0                	callq  *%rax
  800421b781:	c7 45 ac 06 68 00 00 	movl   $0x6806,-0x54(%rbp)
  800421b788:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  800421b78f:	00 
  800421b790:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421b794:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421b797:	48 89 d6             	mov    %rdx,%rsi
  800421b79a:	89 c7                	mov    %eax,%edi
  800421b79c:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b7a3:	00 00 00 
  800421b7a6:	ff d0                	callq  *%rax
  800421b7a8:	c7 45 9c 0a 68 00 00 	movl   $0x680a,-0x64(%rbp)
  800421b7af:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  800421b7b6:	00 
  800421b7b7:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421b7bb:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421b7be:	48 89 d6             	mov    %rdx,%rsi
  800421b7c1:	89 c7                	mov    %eax,%edi
  800421b7c3:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b7ca:	00 00 00 
  800421b7cd:	ff d0                	callq  *%rax
  800421b7cf:	c7 45 8c 0c 68 00 00 	movl   $0x680c,-0x74(%rbp)
  800421b7d6:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421b7dd:	00 
  800421b7de:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421b7e2:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b7e5:	48 89 d6             	mov    %rdx,%rsi
  800421b7e8:	89 c7                	mov    %eax,%edi
  800421b7ea:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b7f1:	00 00 00 
  800421b7f4:	ff d0                	callq  *%rax
  800421b7f6:	c7 85 7c ff ff ff 0e 	movl   $0x680e,-0x84(%rbp)
  800421b7fd:	68 00 00 
  800421b800:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  800421b807:	00 00 00 00 
  800421b80b:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421b812:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421b818:	48 89 d6             	mov    %rdx,%rsi
  800421b81b:	89 c7                	mov    %eax,%edi
  800421b81d:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b824:	00 00 00 
  800421b827:	ff d0                	callq  *%rax
  800421b829:	c7 85 6c ff ff ff 10 	movl   $0x6810,-0x94(%rbp)
  800421b830:	68 00 00 
  800421b833:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421b83a:	00 00 00 00 
  800421b83e:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421b845:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421b84b:	48 89 d6             	mov    %rdx,%rsi
  800421b84e:	89 c7                	mov    %eax,%edi
  800421b850:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b857:	00 00 00 
  800421b85a:	ff d0                	callq  *%rax
  800421b85c:	c7 85 5c ff ff ff 12 	movl   $0x6812,-0xa4(%rbp)
  800421b863:	68 00 00 
  800421b866:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  800421b86d:	00 00 00 00 
  800421b871:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421b878:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b87e:	48 89 d6             	mov    %rdx,%rsi
  800421b881:	89 c7                	mov    %eax,%edi
  800421b883:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b88a:	00 00 00 
  800421b88d:	ff d0                	callq  *%rax
  800421b88f:	c7 85 4c ff ff ff 16 	movl   $0x6816,-0xb4(%rbp)
  800421b896:	68 00 00 
  800421b899:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  800421b8a0:	00 00 00 00 
  800421b8a4:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  800421b8ab:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421b8b1:	48 89 d6             	mov    %rdx,%rsi
  800421b8b4:	89 c7                	mov    %eax,%edi
  800421b8b6:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b8bd:	00 00 00 
  800421b8c0:	ff d0                	callq  *%rax
  800421b8c2:	c7 85 3c ff ff ff 18 	movl   $0x6818,-0xc4(%rbp)
  800421b8c9:	68 00 00 
  800421b8cc:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421b8d3:	00 00 00 00 
  800421b8d7:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421b8de:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b8e4:	48 89 d6             	mov    %rdx,%rsi
  800421b8e7:	89 c7                	mov    %eax,%edi
  800421b8e9:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b8f0:	00 00 00 
  800421b8f3:	ff d0                	callq  *%rax
  800421b8f5:	c7 85 2c ff ff ff 14 	movl   $0x6814,-0xd4(%rbp)
  800421b8fc:	68 00 00 
  800421b8ff:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421b906:	00 00 00 00 
  800421b90a:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421b911:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421b917:	48 89 d6             	mov    %rdx,%rsi
  800421b91a:	89 c7                	mov    %eax,%edi
  800421b91c:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b923:	00 00 00 
  800421b926:	ff d0                	callq  *%rax
  800421b928:	c7 85 1c ff ff ff 02 	movl   $0x4802,-0xe4(%rbp)
  800421b92f:	48 00 00 
  800421b932:	c7 85 18 ff ff ff ff 	movl   $0xffff,-0xe8(%rbp)
  800421b939:	ff 00 00 
  800421b93c:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421b942:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b948:	48 89 d6             	mov    %rdx,%rsi
  800421b94b:	89 c7                	mov    %eax,%edi
  800421b94d:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b954:	00 00 00 
  800421b957:	ff d0                	callq  *%rax
  800421b959:	c7 85 14 ff ff ff 00 	movl   $0x4800,-0xec(%rbp)
  800421b960:	48 00 00 
  800421b963:	c7 85 10 ff ff ff ff 	movl   $0xffff,-0xf0(%rbp)
  800421b96a:	ff 00 00 
  800421b96d:	8b 95 10 ff ff ff    	mov    -0xf0(%rbp),%edx
  800421b973:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b979:	48 89 d6             	mov    %rdx,%rsi
  800421b97c:	89 c7                	mov    %eax,%edi
  800421b97e:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b985:	00 00 00 
  800421b988:	ff d0                	callq  *%rax
  800421b98a:	c7 85 0c ff ff ff 04 	movl   $0x4804,-0xf4(%rbp)
  800421b991:	48 00 00 
  800421b994:	c7 85 08 ff ff ff ff 	movl   $0xffff,-0xf8(%rbp)
  800421b99b:	ff 00 00 
  800421b99e:	8b 95 08 ff ff ff    	mov    -0xf8(%rbp),%edx
  800421b9a4:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b9aa:	48 89 d6             	mov    %rdx,%rsi
  800421b9ad:	89 c7                	mov    %eax,%edi
  800421b9af:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b9b6:	00 00 00 
  800421b9b9:	ff d0                	callq  *%rax
  800421b9bb:	c7 85 04 ff ff ff 06 	movl   $0x4806,-0xfc(%rbp)
  800421b9c2:	48 00 00 
  800421b9c5:	c7 85 00 ff ff ff ff 	movl   $0xffff,-0x100(%rbp)
  800421b9cc:	ff 00 00 
  800421b9cf:	8b 95 00 ff ff ff    	mov    -0x100(%rbp),%edx
  800421b9d5:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  800421b9db:	48 89 d6             	mov    %rdx,%rsi
  800421b9de:	89 c7                	mov    %eax,%edi
  800421b9e0:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421b9e7:	00 00 00 
  800421b9ea:	ff d0                	callq  *%rax
  800421b9ec:	c7 85 fc fe ff ff 08 	movl   $0x4808,-0x104(%rbp)
  800421b9f3:	48 00 00 
  800421b9f6:	c7 85 f8 fe ff ff ff 	movl   $0xffff,-0x108(%rbp)
  800421b9fd:	ff 00 00 
  800421ba00:	8b 95 f8 fe ff ff    	mov    -0x108(%rbp),%edx
  800421ba06:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
  800421ba0c:	48 89 d6             	mov    %rdx,%rsi
  800421ba0f:	89 c7                	mov    %eax,%edi
  800421ba11:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421ba18:	00 00 00 
  800421ba1b:	ff d0                	callq  *%rax
  800421ba1d:	c7 85 f4 fe ff ff 0a 	movl   $0x480a,-0x10c(%rbp)
  800421ba24:	48 00 00 
  800421ba27:	c7 85 f0 fe ff ff ff 	movl   $0xffff,-0x110(%rbp)
  800421ba2e:	ff 00 00 
  800421ba31:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
  800421ba37:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  800421ba3d:	48 89 d6             	mov    %rdx,%rsi
  800421ba40:	89 c7                	mov    %eax,%edi
  800421ba42:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421ba49:	00 00 00 
  800421ba4c:	ff d0                	callq  *%rax
  800421ba4e:	c7 85 ec fe ff ff 0c 	movl   $0x480c,-0x114(%rbp)
  800421ba55:	48 00 00 
  800421ba58:	c7 85 e8 fe ff ff ff 	movl   $0xffff,-0x118(%rbp)
  800421ba5f:	ff 00 00 
  800421ba62:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421ba68:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421ba6e:	48 89 d6             	mov    %rdx,%rsi
  800421ba71:	89 c7                	mov    %eax,%edi
  800421ba73:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421ba7a:	00 00 00 
  800421ba7d:	ff d0                	callq  *%rax
  800421ba7f:	c7 85 e4 fe ff ff 0e 	movl   $0x480e,-0x11c(%rbp)
  800421ba86:	48 00 00 
  800421ba89:	c7 85 e0 fe ff ff ff 	movl   $0xfffff,-0x120(%rbp)
  800421ba90:	ff 0f 00 
  800421ba93:	8b 95 e0 fe ff ff    	mov    -0x120(%rbp),%edx
  800421ba99:	8b 85 e4 fe ff ff    	mov    -0x11c(%rbp),%eax
  800421ba9f:	48 89 d6             	mov    %rdx,%rsi
  800421baa2:	89 c7                	mov    %eax,%edi
  800421baa4:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421baab:	00 00 00 
  800421baae:	ff d0                	callq  *%rax
  800421bab0:	c7 85 dc fe ff ff 10 	movl   $0x4810,-0x124(%rbp)
  800421bab7:	48 00 00 
  800421baba:	c7 85 d8 fe ff ff 30 	movl   $0x30,-0x128(%rbp)
  800421bac1:	00 00 00 
  800421bac4:	8b 95 d8 fe ff ff    	mov    -0x128(%rbp),%edx
  800421baca:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
  800421bad0:	48 89 d6             	mov    %rdx,%rsi
  800421bad3:	89 c7                	mov    %eax,%edi
  800421bad5:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421badc:	00 00 00 
  800421badf:	ff d0                	callq  *%rax
  800421bae1:	c7 85 d4 fe ff ff 12 	movl   $0x4812,-0x12c(%rbp)
  800421bae8:	48 00 00 
  800421baeb:	c7 85 d0 fe ff ff ff 	movl   $0x3ff,-0x130(%rbp)
  800421baf2:	03 00 00 
  800421baf5:	8b 95 d0 fe ff ff    	mov    -0x130(%rbp),%edx
  800421bafb:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
  800421bb01:	48 89 d6             	mov    %rdx,%rsi
  800421bb04:	89 c7                	mov    %eax,%edi
  800421bb06:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bb0d:	00 00 00 
  800421bb10:	ff d0                	callq  *%rax
  800421bb12:	c7 85 cc fe ff ff 16 	movl   $0x4816,-0x134(%rbp)
  800421bb19:	48 00 00 
  800421bb1c:	c7 85 c8 fe ff ff 93 	movl   $0x93,-0x138(%rbp)
  800421bb23:	00 00 00 
  800421bb26:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  800421bb2c:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
  800421bb32:	48 89 d6             	mov    %rdx,%rsi
  800421bb35:	89 c7                	mov    %eax,%edi
  800421bb37:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bb3e:	00 00 00 
  800421bb41:	ff d0                	callq  *%rax
  800421bb43:	c7 85 c4 fe ff ff 14 	movl   $0x4814,-0x13c(%rbp)
  800421bb4a:	48 00 00 
  800421bb4d:	c7 85 c0 fe ff ff 93 	movl   $0x93,-0x140(%rbp)
  800421bb54:	00 00 00 
  800421bb57:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
  800421bb5d:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
  800421bb63:	48 89 d6             	mov    %rdx,%rsi
  800421bb66:	89 c7                	mov    %eax,%edi
  800421bb68:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bb6f:	00 00 00 
  800421bb72:	ff d0                	callq  *%rax
  800421bb74:	c7 85 bc fe ff ff 18 	movl   $0x4818,-0x144(%rbp)
  800421bb7b:	48 00 00 
  800421bb7e:	c7 85 b8 fe ff ff 93 	movl   $0x93,-0x148(%rbp)
  800421bb85:	00 00 00 
  800421bb88:	8b 95 b8 fe ff ff    	mov    -0x148(%rbp),%edx
  800421bb8e:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  800421bb94:	48 89 d6             	mov    %rdx,%rsi
  800421bb97:	89 c7                	mov    %eax,%edi
  800421bb99:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bba0:	00 00 00 
  800421bba3:	ff d0                	callq  *%rax
  800421bba5:	c7 85 b4 fe ff ff 1a 	movl   $0x481a,-0x14c(%rbp)
  800421bbac:	48 00 00 
  800421bbaf:	c7 85 b0 fe ff ff 93 	movl   $0x93,-0x150(%rbp)
  800421bbb6:	00 00 00 
  800421bbb9:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
  800421bbbf:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
  800421bbc5:	48 89 d6             	mov    %rdx,%rsi
  800421bbc8:	89 c7                	mov    %eax,%edi
  800421bbca:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bbd1:	00 00 00 
  800421bbd4:	ff d0                	callq  *%rax
  800421bbd6:	c7 85 ac fe ff ff 1c 	movl   $0x481c,-0x154(%rbp)
  800421bbdd:	48 00 00 
  800421bbe0:	c7 85 a8 fe ff ff 93 	movl   $0x93,-0x158(%rbp)
  800421bbe7:	00 00 00 
  800421bbea:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  800421bbf0:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  800421bbf6:	48 89 d6             	mov    %rdx,%rsi
  800421bbf9:	89 c7                	mov    %eax,%edi
  800421bbfb:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bc02:	00 00 00 
  800421bc05:	ff d0                	callq  *%rax
  800421bc07:	c7 85 a4 fe ff ff 1e 	movl   $0x481e,-0x15c(%rbp)
  800421bc0e:	48 00 00 
  800421bc11:	c7 85 a0 fe ff ff 93 	movl   $0x93,-0x160(%rbp)
  800421bc18:	00 00 00 
  800421bc1b:	8b 95 a0 fe ff ff    	mov    -0x160(%rbp),%edx
  800421bc21:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  800421bc27:	48 89 d6             	mov    %rdx,%rsi
  800421bc2a:	89 c7                	mov    %eax,%edi
  800421bc2c:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bc33:	00 00 00 
  800421bc36:	ff d0                	callq  *%rax
  800421bc38:	c7 85 9c fe ff ff 20 	movl   $0x4820,-0x164(%rbp)
  800421bc3f:	48 00 00 
  800421bc42:	c7 85 98 fe ff ff 82 	movl   $0x82,-0x168(%rbp)
  800421bc49:	00 00 00 
  800421bc4c:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  800421bc52:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
  800421bc58:	48 89 d6             	mov    %rdx,%rsi
  800421bc5b:	89 c7                	mov    %eax,%edi
  800421bc5d:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bc64:	00 00 00 
  800421bc67:	ff d0                	callq  *%rax
  800421bc69:	c7 85 94 fe ff ff 22 	movl   $0x4822,-0x16c(%rbp)
  800421bc70:	48 00 00 
  800421bc73:	c7 85 90 fe ff ff 8b 	movl   $0x8b,-0x170(%rbp)
  800421bc7a:	00 00 00 
  800421bc7d:	8b 95 90 fe ff ff    	mov    -0x170(%rbp),%edx
  800421bc83:	8b 85 94 fe ff ff    	mov    -0x16c(%rbp),%eax
  800421bc89:	48 89 d6             	mov    %rdx,%rsi
  800421bc8c:	89 c7                	mov    %eax,%edi
  800421bc8e:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bc95:	00 00 00 
  800421bc98:	ff d0                	callq  *%rax
  800421bc9a:	c7 85 8c fe ff ff 26 	movl   $0x4826,-0x174(%rbp)
  800421bca1:	48 00 00 
  800421bca4:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
  800421bcab:	00 00 00 
  800421bcae:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
  800421bcb4:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
  800421bcba:	48 89 d6             	mov    %rdx,%rsi
  800421bcbd:	89 c7                	mov    %eax,%edi
  800421bcbf:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bcc6:	00 00 00 
  800421bcc9:	ff d0                	callq  *%rax
  800421bccb:	c7 85 84 fe ff ff 24 	movl   $0x4824,-0x17c(%rbp)
  800421bcd2:	48 00 00 
  800421bcd5:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  800421bcdc:	00 00 00 
  800421bcdf:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  800421bce5:	8b 85 84 fe ff ff    	mov    -0x17c(%rbp),%eax
  800421bceb:	48 89 d6             	mov    %rdx,%rsi
  800421bcee:	89 c7                	mov    %eax,%edi
  800421bcf0:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bcf7:	00 00 00 
  800421bcfa:	ff d0                	callq  *%rax
  800421bcfc:	c7 85 7c fe ff ff 02 	movl   $0x6802,-0x184(%rbp)
  800421bd03:	68 00 00 
  800421bd06:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
  800421bd0d:	00 00 00 00 
  800421bd11:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  800421bd18:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
  800421bd1e:	48 89 d6             	mov    %rdx,%rsi
  800421bd21:	89 c7                	mov    %eax,%edi
  800421bd23:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bd2a:	00 00 00 
  800421bd2d:	ff d0                	callq  *%rax
  800421bd2f:	c7 85 6c fe ff ff 00 	movl   $0x6800,-0x194(%rbp)
  800421bd36:	68 00 00 
  800421bd39:	48 c7 85 60 fe ff ff 	movq   $0x20,-0x1a0(%rbp)
  800421bd40:	20 00 00 00 
  800421bd44:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  800421bd4b:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  800421bd51:	48 89 d6             	mov    %rdx,%rsi
  800421bd54:	89 c7                	mov    %eax,%edi
  800421bd56:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bd5d:	00 00 00 
  800421bd60:	ff d0                	callq  *%rax
  800421bd62:	c7 85 5c fe ff ff 04 	movl   $0x6804,-0x1a4(%rbp)
  800421bd69:	68 00 00 
  800421bd6c:	48 c7 85 50 fe ff ff 	movq   $0x2000,-0x1b0(%rbp)
  800421bd73:	00 20 00 00 
  800421bd77:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  800421bd7e:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  800421bd84:	48 89 d6             	mov    %rdx,%rsi
  800421bd87:	89 c7                	mov    %eax,%edi
  800421bd89:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bd90:	00 00 00 
  800421bd93:	ff d0                	callq  *%rax
  800421bd95:	c7 85 4c fe ff ff 00 	movl   $0x2800,-0x1b4(%rbp)
  800421bd9c:	28 00 00 
  800421bd9f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421bda4:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  800421bdab:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  800421bdb2:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
  800421bdb8:	48 89 d6             	mov    %rdx,%rsi
  800421bdbb:	89 c7                	mov    %eax,%edi
  800421bdbd:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bdc4:	00 00 00 
  800421bdc7:	ff d0                	callq  *%rax
  800421bdc9:	c7 85 3c fe ff ff 01 	movl   $0x2801,-0x1c4(%rbp)
  800421bdd0:	28 00 00 
  800421bdd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421bdd8:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  800421bddf:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  800421bde6:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  800421bdec:	48 89 d6             	mov    %rdx,%rsi
  800421bdef:	89 c7                	mov    %eax,%edi
  800421bdf1:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bdf8:	00 00 00 
  800421bdfb:	ff d0                	callq  *%rax
  800421bdfd:	c7 85 2c fe ff ff 1a 	movl   $0x681a,-0x1d4(%rbp)
  800421be04:	68 00 00 
  800421be07:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  800421be0e:	00 00 00 00 
  800421be12:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  800421be19:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
  800421be1f:	48 89 d6             	mov    %rdx,%rsi
  800421be22:	89 c7                	mov    %eax,%edi
  800421be24:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421be2b:	00 00 00 
  800421be2e:	ff d0                	callq  *%rax
  800421be30:	c7 85 1c fe ff ff 20 	movl   $0x6820,-0x1e4(%rbp)
  800421be37:	68 00 00 
  800421be3a:	48 c7 85 10 fe ff ff 	movq   $0x2,-0x1f0(%rbp)
  800421be41:	02 00 00 00 
  800421be45:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
  800421be4c:	8b 85 1c fe ff ff    	mov    -0x1e4(%rbp),%eax
  800421be52:	48 89 d6             	mov    %rdx,%rsi
  800421be55:	89 c7                	mov    %eax,%edi
  800421be57:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421be5e:	00 00 00 
  800421be61:	ff d0                	callq  *%rax
  800421be63:	c9                   	leaveq 
  800421be64:	c3                   	retq   

000000800421be65 <vmx_read_capability_msr>:
  800421be65:	55                   	push   %rbp
  800421be66:	48 89 e5             	mov    %rsp,%rbp
  800421be69:	48 83 ec 38          	sub    $0x38,%rsp
  800421be6d:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800421be70:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421be74:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421be78:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421be7b:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421be7e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421be81:	89 c1                	mov    %eax,%ecx
  800421be83:	0f 32                	rdmsr  
  800421be85:	89 55 f0             	mov    %edx,-0x10(%rbp)
  800421be88:	89 45 ec             	mov    %eax,-0x14(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421be8b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421be92:	00 
	ret = edx;
  800421be93:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421be96:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	ret = ret << 32;
  800421be9a:	48 c1 65 e0 20       	shlq   $0x20,-0x20(%rbp)
	ret |= eax;
  800421be9f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421bea2:	48 09 45 e0          	or     %rax,-0x20(%rbp)

	return ret;
  800421bea6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421beaa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421beae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421beb2:	48 c1 e8 20          	shr    $0x20,%rax
  800421beb6:	89 c2                	mov    %eax,%edx
  800421beb8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421bebc:	89 10                	mov    %edx,(%rax)
  800421bebe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421bec2:	89 c2                	mov    %eax,%edx
  800421bec4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421bec8:	89 10                	mov    %edx,(%rax)
  800421beca:	c9                   	leaveq 
  800421becb:	c3                   	retq   

000000800421becc <vmcs_ctls_init>:
  800421becc:	55                   	push   %rbp
  800421becd:	48 89 e5             	mov    %rsp,%rbp
  800421bed0:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421bed7:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421bede:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  800421bee5:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  800421beec:	48 89 c6             	mov    %rax,%rsi
  800421beef:	bf 81 04 00 00       	mov    $0x481,%edi
  800421bef4:	48 b8 65 be 21 04 80 	movabs $0x800421be65,%rax
  800421befb:	00 00 00 
  800421befe:	ff d0                	callq  *%rax
  800421bf00:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  800421bf06:	83 c8 01             	or     $0x1,%eax
  800421bf09:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  800421bf0f:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800421bf15:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
  800421bf1b:	21 d0                	and    %edx,%eax
  800421bf1d:	c7 45 cc 00 40 00 00 	movl   $0x4000,-0x34(%rbp)
  800421bf24:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421bf27:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421bf2a:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421bf2d:	48 89 d6             	mov    %rdx,%rsi
  800421bf30:	89 c7                	mov    %eax,%edi
  800421bf32:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421bf39:	00 00 00 
  800421bf3c:	ff d0                	callq  *%rax
  800421bf3e:	48 8d 95 1c ff ff ff 	lea    -0xe4(%rbp),%rdx
  800421bf45:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800421bf4c:	48 89 c6             	mov    %rax,%rsi
  800421bf4f:	bf 82 04 00 00       	mov    $0x482,%edi
  800421bf54:	48 b8 65 be 21 04 80 	movabs $0x800421be65,%rax
  800421bf5b:	00 00 00 
  800421bf5e:	ff d0                	callq  *%rax
  800421bf60:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421bf66:	c1 e8 1f             	shr    $0x1f,%eax
  800421bf69:	83 f8 01             	cmp    $0x1,%eax
  800421bf6c:	74 35                	je     800421bfa3 <vmcs_ctls_init+0xd7>
  800421bf6e:	48 b9 70 16 22 04 80 	movabs $0x8004221670,%rcx
  800421bf75:	00 00 00 
  800421bf78:	48 ba 06 16 22 04 80 	movabs $0x8004221606,%rdx
  800421bf7f:	00 00 00 
  800421bf82:	be 5e 01 00 00       	mov    $0x15e,%esi
  800421bf87:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421bf8e:	00 00 00 
  800421bf91:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bf96:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421bf9d:	00 00 00 
  800421bfa0:	41 ff d0             	callq  *%r8
  800421bfa3:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bfa9:	0d 00 00 00 80       	or     $0x80000000,%eax
  800421bfae:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421bfb4:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bfba:	0c 80                	or     $0x80,%al
  800421bfbc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421bfc2:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bfc8:	0d 00 00 00 02       	or     $0x2000000,%eax
  800421bfcd:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421bfd3:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bfd9:	25 ff 7d fe ff       	and    $0xfffe7dff,%eax
  800421bfde:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421bfe4:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800421bfea:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421bff0:	21 d0                	and    %edx,%eax
  800421bff2:	c7 45 c4 02 40 00 00 	movl   $0x4002,-0x3c(%rbp)
  800421bff9:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421bffc:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421bfff:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421c002:	48 89 d6             	mov    %rdx,%rsi
  800421c005:	89 c7                	mov    %eax,%edi
  800421c007:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c00e:	00 00 00 
  800421c011:	ff d0                	callq  *%rax
  800421c013:	48 8d 95 14 ff ff ff 	lea    -0xec(%rbp),%rdx
  800421c01a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  800421c021:	48 89 c6             	mov    %rax,%rsi
  800421c024:	bf 8b 04 00 00       	mov    $0x48b,%edi
  800421c029:	48 b8 65 be 21 04 80 	movabs $0x800421be65,%rax
  800421c030:	00 00 00 
  800421c033:	ff d0                	callq  *%rax
  800421c035:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c03b:	83 c8 02             	or     $0x2,%eax
  800421c03e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c044:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c04a:	0c 80                	or     $0x80,%al
  800421c04c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c052:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
  800421c058:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421c05e:	21 d0                	and    %edx,%eax
  800421c060:	c7 45 bc 1e 40 00 00 	movl   $0x401e,-0x44(%rbp)
  800421c067:	89 45 b8             	mov    %eax,-0x48(%rbp)
  800421c06a:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421c06d:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c070:	48 89 d6             	mov    %rdx,%rsi
  800421c073:	89 c7                	mov    %eax,%edi
  800421c075:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c07c:	00 00 00 
  800421c07f:	ff d0                	callq  *%rax
  800421c081:	48 8d 95 0c ff ff ff 	lea    -0xf4(%rbp),%rdx
  800421c088:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
  800421c08f:	48 89 c6             	mov    %rax,%rsi
  800421c092:	bf 83 04 00 00       	mov    $0x483,%edi
  800421c097:	48 b8 65 be 21 04 80 	movabs $0x800421be65,%rax
  800421c09e:	00 00 00 
  800421c0a1:	ff d0                	callq  *%rax
  800421c0a3:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c0a9:	80 cc 02             	or     $0x2,%ah
  800421c0ac:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c0b2:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c0b8:	80 cc 80             	or     $0x80,%ah
  800421c0bb:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c0c1:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800421c0c7:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
  800421c0cd:	21 d0                	and    %edx,%eax
  800421c0cf:	c7 45 b4 0c 40 00 00 	movl   $0x400c,-0x4c(%rbp)
  800421c0d6:	89 45 b0             	mov    %eax,-0x50(%rbp)
  800421c0d9:	8b 55 b0             	mov    -0x50(%rbp),%edx
  800421c0dc:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421c0df:	48 89 d6             	mov    %rdx,%rsi
  800421c0e2:	89 c7                	mov    %eax,%edi
  800421c0e4:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c0eb:	00 00 00 
  800421c0ee:	ff d0                	callq  *%rax
  800421c0f0:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c0f7:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421c0fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c102:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c109:	00 00 00 
  800421c10c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421c110:	77 32                	ja     800421c144 <vmcs_ctls_init+0x278>
  800421c112:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c116:	48 89 c1             	mov    %rax,%rcx
  800421c119:	48 ba 98 16 22 04 80 	movabs $0x8004221698,%rdx
  800421c120:	00 00 00 
  800421c123:	be 82 01 00 00       	mov    $0x182,%esi
  800421c128:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421c12f:	00 00 00 
  800421c132:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c137:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c13e:	00 00 00 
  800421c141:	41 ff d0             	callq  *%r8
  800421c144:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c14b:	ff ff ff 
  800421c14e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c152:	48 01 d0             	add    %rdx,%rax
  800421c155:	c7 45 ac 06 20 00 00 	movl   $0x2006,-0x54(%rbp)
  800421c15c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421c160:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421c164:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421c167:	48 89 d6             	mov    %rdx,%rsi
  800421c16a:	89 c7                	mov    %eax,%edi
  800421c16c:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c173:	00 00 00 
  800421c176:	ff d0                	callq  *%rax
  800421c178:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c17f:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c185:	c7 45 9c 0e 40 00 00 	movl   $0x400e,-0x64(%rbp)
  800421c18c:	89 45 98             	mov    %eax,-0x68(%rbp)
  800421c18f:	8b 55 98             	mov    -0x68(%rbp),%edx
  800421c192:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421c195:	48 89 d6             	mov    %rdx,%rsi
  800421c198:	89 c7                	mov    %eax,%edi
  800421c19a:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c1a1:	00 00 00 
  800421c1a4:	ff d0                	callq  *%rax
  800421c1a6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c1ad:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  800421c1b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421c1b8:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c1bf:	00 00 00 
  800421c1c2:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421c1c6:	77 32                	ja     800421c1fa <vmcs_ctls_init+0x32e>
  800421c1c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c1cc:	48 89 c1             	mov    %rax,%rcx
  800421c1cf:	48 ba 98 16 22 04 80 	movabs $0x8004221698,%rdx
  800421c1d6:	00 00 00 
  800421c1d9:	be 86 01 00 00       	mov    $0x186,%esi
  800421c1de:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421c1e5:	00 00 00 
  800421c1e8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c1ed:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c1f4:	00 00 00 
  800421c1f7:	41 ff d0             	callq  *%r8
  800421c1fa:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c201:	ff ff ff 
  800421c204:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c208:	48 01 d0             	add    %rdx,%rax
  800421c20b:	c7 45 94 08 20 00 00 	movl   $0x2008,-0x6c(%rbp)
  800421c212:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800421c216:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421c21a:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421c21d:	48 89 d6             	mov    %rdx,%rsi
  800421c220:	89 c7                	mov    %eax,%edi
  800421c222:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c229:	00 00 00 
  800421c22c:	ff d0                	callq  *%rax
  800421c22e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c235:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c23b:	c7 45 84 10 40 00 00 	movl   $0x4010,-0x7c(%rbp)
  800421c242:	89 45 80             	mov    %eax,-0x80(%rbp)
  800421c245:	8b 55 80             	mov    -0x80(%rbp),%edx
  800421c248:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421c24b:	48 89 d6             	mov    %rdx,%rsi
  800421c24e:	89 c7                	mov    %eax,%edi
  800421c250:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c257:	00 00 00 
  800421c25a:	ff d0                	callq  *%rax
  800421c25c:	48 8d 95 04 ff ff ff 	lea    -0xfc(%rbp),%rdx
  800421c263:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421c26a:	48 89 c6             	mov    %rax,%rsi
  800421c26d:	bf 84 04 00 00       	mov    $0x484,%edi
  800421c272:	48 b8 65 be 21 04 80 	movabs $0x800421be65,%rax
  800421c279:	00 00 00 
  800421c27c:	ff d0                	callq  *%rax
  800421c27e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c285:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421c28c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421c290:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c297:	00 00 00 
  800421c29a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421c29e:	77 32                	ja     800421c2d2 <vmcs_ctls_init+0x406>
  800421c2a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c2a4:	48 89 c1             	mov    %rax,%rcx
  800421c2a7:	48 ba 98 16 22 04 80 	movabs $0x8004221698,%rdx
  800421c2ae:	00 00 00 
  800421c2b1:	be 90 01 00 00       	mov    $0x190,%esi
  800421c2b6:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421c2bd:	00 00 00 
  800421c2c0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c2c5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c2cc:	00 00 00 
  800421c2cf:	41 ff d0             	callq  *%r8
  800421c2d2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c2d9:	ff ff ff 
  800421c2dc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c2e0:	48 01 d0             	add    %rdx,%rax
  800421c2e3:	c7 85 7c ff ff ff 0a 	movl   $0x200a,-0x84(%rbp)
  800421c2ea:	20 00 00 
  800421c2ed:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421c2f4:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421c2fb:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421c301:	48 89 d6             	mov    %rdx,%rsi
  800421c304:	89 c7                	mov    %eax,%edi
  800421c306:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c30d:	00 00 00 
  800421c310:	ff d0                	callq  *%rax
  800421c312:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c319:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c31f:	c7 85 6c ff ff ff 14 	movl   $0x4014,-0x94(%rbp)
  800421c326:	40 00 00 
  800421c329:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  800421c32f:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
  800421c335:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421c33b:	48 89 d6             	mov    %rdx,%rsi
  800421c33e:	89 c7                	mov    %eax,%edi
  800421c340:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c347:	00 00 00 
  800421c34a:	ff d0                	callq  *%rax
  800421c34c:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
  800421c352:	8b 85 00 ff ff ff    	mov    -0x100(%rbp),%eax
  800421c358:	21 d0                	and    %edx,%eax
  800421c35a:	c7 85 64 ff ff ff 12 	movl   $0x4012,-0x9c(%rbp)
  800421c361:	40 00 00 
  800421c364:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421c36a:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  800421c370:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  800421c376:	48 89 d6             	mov    %rdx,%rsi
  800421c379:	89 c7                	mov    %eax,%edi
  800421c37b:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c382:	00 00 00 
  800421c385:	ff d0                	callq  *%rax
  800421c387:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c38e:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800421c395:	48 83 c8 18          	or     $0x18,%rax
  800421c399:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421c39d:	c7 85 5c ff ff ff 1a 	movl   $0x201a,-0xa4(%rbp)
  800421c3a4:	20 00 00 
  800421c3a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c3ab:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421c3b2:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421c3b9:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421c3bf:	48 89 d6             	mov    %rdx,%rsi
  800421c3c2:	89 c7                	mov    %eax,%edi
  800421c3c4:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c3cb:	00 00 00 
  800421c3ce:	ff d0                	callq  *%rax
  800421c3d0:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c3d7:	8b 80 30 01 00 00    	mov    0x130(%rax),%eax
  800421c3dd:	c7 85 4c ff ff ff 04 	movl   $0x4004,-0xb4(%rbp)
  800421c3e4:	40 00 00 
  800421c3e7:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  800421c3ed:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
  800421c3f3:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421c3f9:	48 89 d6             	mov    %rdx,%rsi
  800421c3fc:	89 c7                	mov    %eax,%edi
  800421c3fe:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c405:	00 00 00 
  800421c408:	ff d0                	callq  *%rax
  800421c40a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c411:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800421c418:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421c41c:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c423:	00 00 00 
  800421c426:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421c42a:	77 32                	ja     800421c45e <vmcs_ctls_init+0x592>
  800421c42c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c430:	48 89 c1             	mov    %rax,%rcx
  800421c433:	48 ba 98 16 22 04 80 	movabs $0x8004221698,%rdx
  800421c43a:	00 00 00 
  800421c43d:	be 9d 01 00 00       	mov    $0x19d,%esi
  800421c442:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421c449:	00 00 00 
  800421c44c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c451:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c458:	00 00 00 
  800421c45b:	41 ff d0             	callq  *%r8
  800421c45e:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c465:	ff ff ff 
  800421c468:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c46c:	48 01 d0             	add    %rdx,%rax
  800421c46f:	c7 85 44 ff ff ff 00 	movl   $0x2000,-0xbc(%rbp)
  800421c476:	20 00 00 
  800421c479:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800421c480:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  800421c487:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421c48d:	48 89 d6             	mov    %rdx,%rsi
  800421c490:	89 c7                	mov    %eax,%edi
  800421c492:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c499:	00 00 00 
  800421c49c:	ff d0                	callq  *%rax
  800421c49e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c4a5:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  800421c4ac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421c4b0:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c4b7:	00 00 00 
  800421c4ba:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800421c4be:	77 32                	ja     800421c4f2 <vmcs_ctls_init+0x626>
  800421c4c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c4c4:	48 89 c1             	mov    %rax,%rcx
  800421c4c7:	48 ba 98 16 22 04 80 	movabs $0x8004221698,%rdx
  800421c4ce:	00 00 00 
  800421c4d1:	be 9f 01 00 00       	mov    $0x19f,%esi
  800421c4d6:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421c4dd:	00 00 00 
  800421c4e0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c4e5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421c4ec:	00 00 00 
  800421c4ef:	41 ff d0             	callq  *%r8
  800421c4f2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c4f9:	ff ff ff 
  800421c4fc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c500:	48 01 d0             	add    %rdx,%rax
  800421c503:	c7 85 34 ff ff ff 02 	movl   $0x2002,-0xcc(%rbp)
  800421c50a:	20 00 00 
  800421c50d:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421c514:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421c51b:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  800421c521:	48 89 d6             	mov    %rdx,%rsi
  800421c524:	89 c7                	mov    %eax,%edi
  800421c526:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421c52d:	00 00 00 
  800421c530:	ff d0                	callq  *%rax
  800421c532:	c9                   	leaveq 
  800421c533:	c3                   	retq   

000000800421c534 <vmcs_dump_cpu>:
  800421c534:	55                   	push   %rbp
  800421c535:	48 89 e5             	mov    %rsp,%rbp
  800421c538:	53                   	push   %rbx
  800421c539:	48 83 ec 28          	sub    $0x28,%rsp
  800421c53d:	bf 20 68 00 00       	mov    $0x6820,%edi
  800421c542:	48 b8 52 a7 21 04 80 	movabs $0x800421a752,%rax
  800421c549:	00 00 00 
  800421c54c:	ff d0                	callq  *%rax
  800421c54e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421c552:	48 bf bc 16 22 04 80 	movabs $0x80042216bc,%rdi
  800421c559:	00 00 00 
  800421c55c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c561:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421c568:	00 00 00 
  800421c56b:	ff d2                	callq  *%rdx
  800421c56d:	c7 45 e4 1c 68 00 00 	movl   $0x681c,-0x1c(%rbp)
  800421c574:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421c577:	89 c7                	mov    %eax,%edi
  800421c579:	48 b8 52 a7 21 04 80 	movabs $0x800421a752,%rax
  800421c580:	00 00 00 
  800421c583:	ff d0                	callq  *%rax
  800421c585:	48 89 c3             	mov    %rax,%rbx
  800421c588:	c7 45 e0 1e 68 00 00 	movl   $0x681e,-0x20(%rbp)
  800421c58f:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421c592:	89 c7                	mov    %eax,%edi
  800421c594:	48 b8 52 a7 21 04 80 	movabs $0x800421a752,%rax
  800421c59b:	00 00 00 
  800421c59e:	ff d0                	callq  *%rax
  800421c5a0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421c5a4:	48 89 d1             	mov    %rdx,%rcx
  800421c5a7:	48 89 da             	mov    %rbx,%rdx
  800421c5aa:	48 89 c6             	mov    %rax,%rsi
  800421c5ad:	48 bf e0 16 22 04 80 	movabs $0x80042216e0,%rdi
  800421c5b4:	00 00 00 
  800421c5b7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c5bc:	49 b8 83 9c 20 04 80 	movabs $0x8004209c83,%r8
  800421c5c3:	00 00 00 
  800421c5c6:	41 ff d0             	callq  *%r8
  800421c5c9:	c7 45 dc 02 68 00 00 	movl   $0x6802,-0x24(%rbp)
  800421c5d0:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421c5d3:	89 c7                	mov    %eax,%edi
  800421c5d5:	48 b8 52 a7 21 04 80 	movabs $0x800421a752,%rax
  800421c5dc:	00 00 00 
  800421c5df:	ff d0                	callq  *%rax
  800421c5e1:	48 89 c3             	mov    %rax,%rbx
  800421c5e4:	c7 45 d8 00 68 00 00 	movl   $0x6800,-0x28(%rbp)
  800421c5eb:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421c5ee:	89 c7                	mov    %eax,%edi
  800421c5f0:	48 b8 52 a7 21 04 80 	movabs $0x800421a752,%rax
  800421c5f7:	00 00 00 
  800421c5fa:	ff d0                	callq  *%rax
  800421c5fc:	48 89 da             	mov    %rbx,%rdx
  800421c5ff:	48 89 c6             	mov    %rax,%rsi
  800421c602:	48 bf 18 17 22 04 80 	movabs $0x8004221718,%rdi
  800421c609:	00 00 00 
  800421c60c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c611:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800421c618:	00 00 00 
  800421c61b:	ff d1                	callq  *%rcx
  800421c61d:	c7 45 d4 04 68 00 00 	movl   $0x6804,-0x2c(%rbp)
  800421c624:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421c627:	89 c7                	mov    %eax,%edi
  800421c629:	48 b8 52 a7 21 04 80 	movabs $0x800421a752,%rax
  800421c630:	00 00 00 
  800421c633:	ff d0                	callq  *%rax
  800421c635:	48 89 c6             	mov    %rax,%rsi
  800421c638:	48 bf 3a 17 22 04 80 	movabs $0x800422173a,%rdi
  800421c63f:	00 00 00 
  800421c642:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c647:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421c64e:	00 00 00 
  800421c651:	ff d2                	callq  *%rdx
  800421c653:	48 bf 4f 17 22 04 80 	movabs $0x800422174f,%rdi
  800421c65a:	00 00 00 
  800421c65d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c662:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421c669:	00 00 00 
  800421c66c:	ff d2                	callq  *%rdx
  800421c66e:	48 83 c4 28          	add    $0x28,%rsp
  800421c672:	5b                   	pop    %rbx
  800421c673:	5d                   	pop    %rbp
  800421c674:	c3                   	retq   

000000800421c675 <vmexit>:
  800421c675:	55                   	push   %rbp
  800421c676:	48 89 e5             	mov    %rsp,%rbp
  800421c679:	41 54                	push   %r12
  800421c67b:	53                   	push   %rbx
  800421c67c:	48 83 ec 10          	sub    $0x10,%rsp
  800421c680:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)
  800421c687:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  800421c68b:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421c68e:	0f b7 c0             	movzwl %ax,%eax
  800421c691:	83 f8 30             	cmp    $0x30,%eax
  800421c694:	0f 87 03 05 00 00    	ja     800421cb9d <vmexit+0x528>
  800421c69a:	89 c0                	mov    %eax,%eax
  800421c69c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421c6a3:	00 
  800421c6a4:	48 b8 b8 17 22 04 80 	movabs $0x80042217b8,%rax
  800421c6ab:	00 00 00 
  800421c6ae:	48 01 d0             	add    %rdx,%rax
  800421c6b1:	48 8b 00             	mov    (%rax),%rax
  800421c6b4:	ff e0                	jmpq   *%rax
  800421c6b6:	c7 45 e4 04 44 00 00 	movl   $0x4404,-0x1c(%rbp)
  800421c6bd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421c6c0:	89 c7                	mov    %eax,%edi
  800421c6c2:	48 b8 52 a7 21 04 80 	movabs $0x800421a752,%rax
  800421c6c9:	00 00 00 
  800421c6cc:	ff d0                	callq  *%rax
  800421c6ce:	89 c2                	mov    %eax,%edx
  800421c6d0:	48 b8 c4 b5 6d 04 80 	movabs $0x80046db5c4,%rax
  800421c6d7:	00 00 00 
  800421c6da:	89 10                	mov    %edx,(%rax)
  800421c6dc:	48 b8 c4 b5 6d 04 80 	movabs $0x80046db5c4,%rax
  800421c6e3:	00 00 00 
  800421c6e6:	8b 18                	mov    (%rax),%ebx
  800421c6e8:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c6ef:	00 00 00 
  800421c6f2:	ff d0                	callq  *%rax
  800421c6f4:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c6fb:	00 00 00 
  800421c6fe:	48 98                	cltq   
  800421c700:	48 c1 e0 03          	shl    $0x3,%rax
  800421c704:	48 89 c1             	mov    %rax,%rcx
  800421c707:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c70b:	48 01 c8             	add    %rcx,%rax
  800421c70e:	48 01 d0             	add    %rdx,%rax
  800421c711:	48 83 c0 08          	add    $0x8,%rax
  800421c715:	48 8b 00             	mov    (%rax),%rax
  800421c718:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421c71f:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c726:	00 00 00 
  800421c729:	ff d0                	callq  *%rax
  800421c72b:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c732:	00 00 00 
  800421c735:	48 98                	cltq   
  800421c737:	48 c1 e0 03          	shl    $0x3,%rax
  800421c73b:	48 89 c1             	mov    %rax,%rcx
  800421c73e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c742:	48 01 c8             	add    %rcx,%rax
  800421c745:	48 01 d0             	add    %rdx,%rax
  800421c748:	48 83 c0 08          	add    $0x8,%rax
  800421c74c:	48 8b 00             	mov    (%rax),%rax
  800421c74f:	89 da                	mov    %ebx,%edx
  800421c751:	4c 89 e6             	mov    %r12,%rsi
  800421c754:	48 89 c7             	mov    %rax,%rdi
  800421c757:	48 b8 fb d4 21 04 80 	movabs $0x800421d4fb,%rax
  800421c75e:	00 00 00 
  800421c761:	ff d0                	callq  *%rax
  800421c763:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c766:	e9 32 04 00 00       	jmpq   800421cb9d <vmexit+0x528>
  800421c76b:	48 b8 c4 b5 6d 04 80 	movabs $0x80046db5c4,%rax
  800421c772:	00 00 00 
  800421c775:	8b 18                	mov    (%rax),%ebx
  800421c777:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c77e:	00 00 00 
  800421c781:	ff d0                	callq  *%rax
  800421c783:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c78a:	00 00 00 
  800421c78d:	48 98                	cltq   
  800421c78f:	48 c1 e0 03          	shl    $0x3,%rax
  800421c793:	48 89 c1             	mov    %rax,%rcx
  800421c796:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c79a:	48 01 c8             	add    %rcx,%rax
  800421c79d:	48 01 d0             	add    %rdx,%rax
  800421c7a0:	48 83 c0 08          	add    $0x8,%rax
  800421c7a4:	48 8b 00             	mov    (%rax),%rax
  800421c7a7:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421c7ae:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c7b5:	00 00 00 
  800421c7b8:	ff d0                	callq  *%rax
  800421c7ba:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c7c1:	00 00 00 
  800421c7c4:	48 98                	cltq   
  800421c7c6:	48 c1 e0 03          	shl    $0x3,%rax
  800421c7ca:	48 89 c1             	mov    %rax,%rcx
  800421c7cd:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c7d1:	48 01 c8             	add    %rcx,%rax
  800421c7d4:	48 01 d0             	add    %rdx,%rax
  800421c7d7:	48 83 c0 08          	add    $0x8,%rax
  800421c7db:	48 8b 00             	mov    (%rax),%rax
  800421c7de:	89 da                	mov    %ebx,%edx
  800421c7e0:	4c 89 e6             	mov    %r12,%rsi
  800421c7e3:	48 89 c7             	mov    %rax,%rdi
  800421c7e6:	48 b8 7a d4 21 04 80 	movabs $0x800421d47a,%rax
  800421c7ed:	00 00 00 
  800421c7f0:	ff d0                	callq  *%rax
  800421c7f2:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c7f5:	e9 a3 03 00 00       	jmpq   800421cb9d <vmexit+0x528>
  800421c7fa:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c801:	00 00 00 
  800421c804:	ff d0                	callq  *%rax
  800421c806:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c80d:	00 00 00 
  800421c810:	48 98                	cltq   
  800421c812:	48 c1 e0 03          	shl    $0x3,%rax
  800421c816:	48 89 c1             	mov    %rax,%rcx
  800421c819:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c81d:	48 01 c8             	add    %rcx,%rax
  800421c820:	48 01 d0             	add    %rdx,%rax
  800421c823:	48 83 c0 08          	add    $0x8,%rax
  800421c827:	48 8b 00             	mov    (%rax),%rax
  800421c82a:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c831:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c838:	00 00 00 
  800421c83b:	ff d0                	callq  *%rax
  800421c83d:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c844:	00 00 00 
  800421c847:	48 98                	cltq   
  800421c849:	48 c1 e0 03          	shl    $0x3,%rax
  800421c84d:	48 89 c1             	mov    %rax,%rcx
  800421c850:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c854:	48 01 c8             	add    %rcx,%rax
  800421c857:	48 01 d0             	add    %rdx,%rax
  800421c85a:	48 83 c0 08          	add    $0x8,%rax
  800421c85e:	48 8b 00             	mov    (%rax),%rax
  800421c861:	48 89 de             	mov    %rbx,%rsi
  800421c864:	48 89 c7             	mov    %rax,%rdi
  800421c867:	48 b8 a8 d5 21 04 80 	movabs $0x800421d5a8,%rax
  800421c86e:	00 00 00 
  800421c871:	ff d0                	callq  *%rax
  800421c873:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c876:	e9 22 03 00 00       	jmpq   800421cb9d <vmexit+0x528>
  800421c87b:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c882:	00 00 00 
  800421c885:	ff d0                	callq  *%rax
  800421c887:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c88e:	00 00 00 
  800421c891:	48 98                	cltq   
  800421c893:	48 c1 e0 03          	shl    $0x3,%rax
  800421c897:	48 89 c1             	mov    %rax,%rcx
  800421c89a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c89e:	48 01 c8             	add    %rcx,%rax
  800421c8a1:	48 01 d0             	add    %rdx,%rax
  800421c8a4:	48 83 c0 08          	add    $0x8,%rax
  800421c8a8:	48 8b 00             	mov    (%rax),%rax
  800421c8ab:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c8b2:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c8b9:	00 00 00 
  800421c8bc:	ff d0                	callq  *%rax
  800421c8be:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c8c5:	00 00 00 
  800421c8c8:	48 98                	cltq   
  800421c8ca:	48 c1 e0 03          	shl    $0x3,%rax
  800421c8ce:	48 89 c1             	mov    %rax,%rcx
  800421c8d1:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c8d5:	48 01 c8             	add    %rcx,%rax
  800421c8d8:	48 01 d0             	add    %rdx,%rax
  800421c8db:	48 83 c0 08          	add    $0x8,%rax
  800421c8df:	48 8b 00             	mov    (%rax),%rax
  800421c8e2:	48 89 de             	mov    %rbx,%rsi
  800421c8e5:	48 89 c7             	mov    %rax,%rdi
  800421c8e8:	48 b8 b0 d6 21 04 80 	movabs $0x800421d6b0,%rax
  800421c8ef:	00 00 00 
  800421c8f2:	ff d0                	callq  *%rax
  800421c8f4:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c8f7:	e9 a1 02 00 00       	jmpq   800421cb9d <vmexit+0x528>
  800421c8fc:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c903:	00 00 00 
  800421c906:	ff d0                	callq  *%rax
  800421c908:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c90f:	00 00 00 
  800421c912:	48 98                	cltq   
  800421c914:	48 c1 e0 03          	shl    $0x3,%rax
  800421c918:	48 89 c1             	mov    %rax,%rcx
  800421c91b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c91f:	48 01 c8             	add    %rcx,%rax
  800421c922:	48 01 d0             	add    %rdx,%rax
  800421c925:	48 83 c0 08          	add    $0x8,%rax
  800421c929:	48 8b 00             	mov    (%rax),%rax
  800421c92c:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c933:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c93a:	00 00 00 
  800421c93d:	ff d0                	callq  *%rax
  800421c93f:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c946:	00 00 00 
  800421c949:	48 98                	cltq   
  800421c94b:	48 c1 e0 03          	shl    $0x3,%rax
  800421c94f:	48 89 c1             	mov    %rax,%rcx
  800421c952:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c956:	48 01 c8             	add    %rcx,%rax
  800421c959:	48 01 d0             	add    %rdx,%rax
  800421c95c:	48 83 c0 08          	add    $0x8,%rax
  800421c960:	48 8b 00             	mov    (%rax),%rax
  800421c963:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421c96a:	48 89 de             	mov    %rbx,%rsi
  800421c96d:	48 89 c7             	mov    %rax,%rdi
  800421c970:	48 b8 1c d8 21 04 80 	movabs $0x800421d81c,%rax
  800421c977:	00 00 00 
  800421c97a:	ff d0                	callq  *%rax
  800421c97c:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c97f:	e9 19 02 00 00       	jmpq   800421cb9d <vmexit+0x528>
  800421c984:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c98b:	00 00 00 
  800421c98e:	ff d0                	callq  *%rax
  800421c990:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c997:	00 00 00 
  800421c99a:	48 98                	cltq   
  800421c99c:	48 c1 e0 03          	shl    $0x3,%rax
  800421c9a0:	48 89 c1             	mov    %rax,%rcx
  800421c9a3:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c9a7:	48 01 c8             	add    %rcx,%rax
  800421c9aa:	48 01 d0             	add    %rdx,%rax
  800421c9ad:	48 83 c0 08          	add    $0x8,%rax
  800421c9b1:	48 8b 00             	mov    (%rax),%rax
  800421c9b4:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c9bb:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421c9c2:	00 00 00 
  800421c9c5:	ff d0                	callq  *%rax
  800421c9c7:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421c9ce:	00 00 00 
  800421c9d1:	48 98                	cltq   
  800421c9d3:	48 c1 e0 03          	shl    $0x3,%rax
  800421c9d7:	48 89 c1             	mov    %rax,%rcx
  800421c9da:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c9de:	48 01 c8             	add    %rcx,%rax
  800421c9e1:	48 01 d0             	add    %rdx,%rax
  800421c9e4:	48 83 c0 08          	add    $0x8,%rax
  800421c9e8:	48 8b 00             	mov    (%rax),%rax
  800421c9eb:	48 89 de             	mov    %rbx,%rsi
  800421c9ee:	48 89 c7             	mov    %rax,%rdi
  800421c9f1:	48 b8 0e da 21 04 80 	movabs $0x800421da0e,%rax
  800421c9f8:	00 00 00 
  800421c9fb:	ff d0                	callq  *%rax
  800421c9fd:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421ca00:	e9 98 01 00 00       	jmpq   800421cb9d <vmexit+0x528>
  800421ca05:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421ca0c:	00 00 00 
  800421ca0f:	ff d0                	callq  *%rax
  800421ca11:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421ca18:	00 00 00 
  800421ca1b:	48 98                	cltq   
  800421ca1d:	48 c1 e0 03          	shl    $0x3,%rax
  800421ca21:	48 89 c1             	mov    %rax,%rcx
  800421ca24:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ca28:	48 01 c8             	add    %rcx,%rax
  800421ca2b:	48 01 d0             	add    %rdx,%rax
  800421ca2e:	48 83 c0 08          	add    $0x8,%rax
  800421ca32:	48 8b 00             	mov    (%rax),%rax
  800421ca35:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421ca3c:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421ca43:	00 00 00 
  800421ca46:	ff d0                	callq  *%rax
  800421ca48:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421ca4f:	00 00 00 
  800421ca52:	48 98                	cltq   
  800421ca54:	48 c1 e0 03          	shl    $0x3,%rax
  800421ca58:	48 89 c1             	mov    %rax,%rcx
  800421ca5b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ca5f:	48 01 c8             	add    %rcx,%rax
  800421ca62:	48 01 d0             	add    %rdx,%rax
  800421ca65:	48 83 c0 08          	add    $0x8,%rax
  800421ca69:	48 8b 00             	mov    (%rax),%rax
  800421ca6c:	48 89 de             	mov    %rbx,%rsi
  800421ca6f:	48 89 c7             	mov    %rax,%rdi
  800421ca72:	48 b8 ed db 21 04 80 	movabs $0x800421dbed,%rax
  800421ca79:	00 00 00 
  800421ca7c:	ff d0                	callq  *%rax
  800421ca7e:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421ca81:	e9 17 01 00 00       	jmpq   800421cb9d <vmexit+0x528>
  800421ca86:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421ca8d:	00 00 00 
  800421ca90:	ff d0                	callq  *%rax
  800421ca92:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421ca99:	00 00 00 
  800421ca9c:	48 98                	cltq   
  800421ca9e:	48 c1 e0 03          	shl    $0x3,%rax
  800421caa2:	48 89 c1             	mov    %rax,%rcx
  800421caa5:	48 c1 e1 04          	shl    $0x4,%rcx
  800421caa9:	48 01 c8             	add    %rcx,%rax
  800421caac:	48 01 d0             	add    %rdx,%rax
  800421caaf:	48 83 c0 08          	add    $0x8,%rax
  800421cab3:	48 8b 00             	mov    (%rax),%rax
  800421cab6:	48 8b 98 e0 00 00 00 	mov    0xe0(%rax),%rbx
  800421cabd:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421cac4:	00 00 00 
  800421cac7:	ff d0                	callq  *%rax
  800421cac9:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cad0:	00 00 00 
  800421cad3:	48 98                	cltq   
  800421cad5:	48 c1 e0 03          	shl    $0x3,%rax
  800421cad9:	48 89 c1             	mov    %rax,%rcx
  800421cadc:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cae0:	48 01 c8             	add    %rcx,%rax
  800421cae3:	48 01 d0             	add    %rdx,%rax
  800421cae6:	48 83 c0 08          	add    $0x8,%rax
  800421caea:	48 8b 00             	mov    (%rax),%rax
  800421caed:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421caf4:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421cafb:	00 00 00 
  800421cafe:	ff d0                	callq  *%rax
  800421cb00:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cb07:	00 00 00 
  800421cb0a:	48 98                	cltq   
  800421cb0c:	48 c1 e0 03          	shl    $0x3,%rax
  800421cb10:	48 89 c1             	mov    %rax,%rcx
  800421cb13:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cb17:	48 01 c8             	add    %rcx,%rax
  800421cb1a:	48 01 d0             	add    %rdx,%rax
  800421cb1d:	48 83 c0 08          	add    $0x8,%rax
  800421cb21:	48 8b 00             	mov    (%rax),%rax
  800421cb24:	48 89 da             	mov    %rbx,%rdx
  800421cb27:	4c 89 e6             	mov    %r12,%rsi
  800421cb2a:	48 89 c7             	mov    %rax,%rdi
  800421cb2d:	48 b8 27 dc 21 04 80 	movabs $0x800421dc27,%rax
  800421cb34:	00 00 00 
  800421cb37:	ff d0                	callq  *%rax
  800421cb39:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421cb3c:	eb 5f                	jmp    800421cb9d <vmexit+0x528>
  800421cb3e:	48 bf 70 17 22 04 80 	movabs $0x8004221770,%rdi
  800421cb45:	00 00 00 
  800421cb48:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cb4d:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421cb54:	00 00 00 
  800421cb57:	ff d2                	callq  *%rdx
  800421cb59:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421cb60:	00 00 00 
  800421cb63:	ff d0                	callq  *%rax
  800421cb65:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cb6c:	00 00 00 
  800421cb6f:	48 98                	cltq   
  800421cb71:	48 c1 e0 03          	shl    $0x3,%rax
  800421cb75:	48 89 c1             	mov    %rax,%rcx
  800421cb78:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cb7c:	48 01 c8             	add    %rcx,%rax
  800421cb7f:	48 01 d0             	add    %rdx,%rax
  800421cb82:	48 83 c0 08          	add    $0x8,%rax
  800421cb86:	48 8b 00             	mov    (%rax),%rax
  800421cb89:	48 89 c7             	mov    %rax,%rdi
  800421cb8c:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800421cb93:	00 00 00 
  800421cb96:	ff d0                	callq  *%rax
  800421cb98:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421cb9c:	90                   	nop
  800421cb9d:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421cba1:	83 f0 01             	xor    $0x1,%eax
  800421cba4:	84 c0                	test   %al,%al
  800421cba6:	74 6b                	je     800421cc13 <vmexit+0x59e>
  800421cba8:	48 bf 90 17 22 04 80 	movabs $0x8004221790,%rdi
  800421cbaf:	00 00 00 
  800421cbb2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cbb7:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421cbbe:	00 00 00 
  800421cbc1:	ff d2                	callq  *%rdx
  800421cbc3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cbc8:	48 ba 34 c5 21 04 80 	movabs $0x800421c534,%rdx
  800421cbcf:	00 00 00 
  800421cbd2:	ff d2                	callq  *%rdx
  800421cbd4:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421cbdb:	00 00 00 
  800421cbde:	ff d0                	callq  *%rax
  800421cbe0:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cbe7:	00 00 00 
  800421cbea:	48 98                	cltq   
  800421cbec:	48 c1 e0 03          	shl    $0x3,%rax
  800421cbf0:	48 89 c1             	mov    %rax,%rcx
  800421cbf3:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cbf7:	48 01 c8             	add    %rcx,%rax
  800421cbfa:	48 01 d0             	add    %rdx,%rax
  800421cbfd:	48 83 c0 08          	add    $0x8,%rax
  800421cc01:	48 8b 00             	mov    (%rax),%rax
  800421cc04:	48 89 c7             	mov    %rax,%rdi
  800421cc07:	48 b8 1f 95 20 04 80 	movabs $0x800420951f,%rax
  800421cc0e:	00 00 00 
  800421cc11:	ff d0                	callq  *%rax
  800421cc13:	48 b8 26 da 20 04 80 	movabs $0x800420da26,%rax
  800421cc1a:	00 00 00 
  800421cc1d:	ff d0                	callq  *%rax

000000800421cc1f <asm_vmrun>:
  800421cc1f:	55                   	push   %rbp
  800421cc20:	48 89 e5             	mov    %rsp,%rbp
  800421cc23:	41 57                	push   %r15
  800421cc25:	41 56                	push   %r14
  800421cc27:	41 55                	push   %r13
  800421cc29:	41 54                	push   %r12
  800421cc2b:	53                   	push   %rbx
  800421cc2c:	48 83 ec 28          	sub    $0x28,%rsp
  800421cc30:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421cc34:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421cc3b:	00 00 00 
  800421cc3e:	ff d0                	callq  *%rax
  800421cc40:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cc47:	00 00 00 
  800421cc4a:	48 98                	cltq   
  800421cc4c:	48 c1 e0 03          	shl    $0x3,%rax
  800421cc50:	48 89 c1             	mov    %rax,%rcx
  800421cc53:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cc57:	48 01 c8             	add    %rcx,%rax
  800421cc5a:	48 01 d0             	add    %rdx,%rax
  800421cc5d:	48 83 c0 08          	add    $0x8,%rax
  800421cc61:	48 8b 00             	mov    (%rax),%rax
  800421cc64:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421cc6a:	89 c2                	mov    %eax,%edx
  800421cc6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421cc70:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800421cc77:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421cc7b:	66 c7 40 78 00 00    	movw   $0x0,0x78(%rax)
  800421cc81:	48 b8 d7 a8 21 04 80 	movabs $0x800421a8d7,%rax
  800421cc88:	00 00 00 
  800421cc8b:	ff d0                	callq  *%rax
  800421cc8d:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  800421cc91:	ba 14 6c 00 00       	mov    $0x6c14,%edx
  800421cc96:	52                   	push   %rdx
  800421cc97:	55                   	push   %rbp
  800421cc98:	51                   	push   %rcx
  800421cc99:	51                   	push   %rcx
  800421cc9a:	48 8b 81 90 00 00 00 	mov    0x90(%rcx),%rax
  800421cca1:	0f 20 d2             	mov    %cr2,%rdx
  800421cca4:	48 39 c2             	cmp    %rax,%rdx
  800421cca7:	74 03                	je     800421ccac <asm_vmrun+0x8d>
  800421cca9:	0f 22 d0             	mov    %rax,%cr2
  800421ccac:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421ccb1:	59                   	pop    %rcx
  800421ccb2:	5d                   	pop    %rbp
  800421ccb3:	5a                   	pop    %rdx
  800421ccb4:	0f 96 41 78          	setbe  0x78(%rcx)
  800421ccb8:	48 b8 bb a8 21 04 80 	movabs $0x800421a8bb,%rax
  800421ccbf:	00 00 00 
  800421ccc2:	ff d0                	callq  *%rax
  800421ccc4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ccc8:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800421cccc:	66 85 c0             	test   %ax,%ax
  800421cccf:	74 20                	je     800421ccf1 <asm_vmrun+0xd2>
  800421ccd1:	48 bf 40 19 22 04 80 	movabs $0x8004221940,%rdi
  800421ccd8:	00 00 00 
  800421ccdb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cce0:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421cce7:	00 00 00 
  800421ccea:	ff d2                	callq  *%rdx
  800421ccec:	e9 af 00 00 00       	jmpq   800421cda0 <asm_vmrun+0x181>
  800421ccf1:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421ccf8:	00 00 00 
  800421ccfb:	ff d0                	callq  *%rax
  800421ccfd:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cd04:	00 00 00 
  800421cd07:	48 98                	cltq   
  800421cd09:	48 c1 e0 03          	shl    $0x3,%rax
  800421cd0d:	48 89 c1             	mov    %rax,%rcx
  800421cd10:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cd14:	48 01 c8             	add    %rcx,%rax
  800421cd17:	48 01 d0             	add    %rdx,%rax
  800421cd1a:	48 83 c0 08          	add    $0x8,%rax
  800421cd1e:	48 8b 18             	mov    (%rax),%rbx
  800421cd21:	c7 45 cc 1c 68 00 00 	movl   $0x681c,-0x34(%rbp)
  800421cd28:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421cd2b:	89 c7                	mov    %eax,%edi
  800421cd2d:	48 b8 52 a7 21 04 80 	movabs $0x800421a752,%rax
  800421cd34:	00 00 00 
  800421cd37:	ff d0                	callq  *%rax
  800421cd39:	48 89 83 b0 00 00 00 	mov    %rax,0xb0(%rbx)
  800421cd40:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421cd47:	00 00 00 
  800421cd4a:	ff d0                	callq  *%rax
  800421cd4c:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421cd53:	00 00 00 
  800421cd56:	48 98                	cltq   
  800421cd58:	48 c1 e0 03          	shl    $0x3,%rax
  800421cd5c:	48 89 c1             	mov    %rax,%rcx
  800421cd5f:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cd63:	48 01 c8             	add    %rcx,%rax
  800421cd66:	48 01 d0             	add    %rdx,%rax
  800421cd69:	48 83 c0 08          	add    $0x8,%rax
  800421cd6d:	48 8b 18             	mov    (%rax),%rbx
  800421cd70:	c7 45 c8 1e 68 00 00 	movl   $0x681e,-0x38(%rbp)
  800421cd77:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421cd7a:	89 c7                	mov    %eax,%edi
  800421cd7c:	48 b8 52 a7 21 04 80 	movabs $0x800421a752,%rax
  800421cd83:	00 00 00 
  800421cd86:	ff d0                	callq  *%rax
  800421cd88:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  800421cd8f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cd94:	48 ba 75 c6 21 04 80 	movabs $0x800421c675,%rdx
  800421cd9b:	00 00 00 
  800421cd9e:	ff d2                	callq  *%rdx
  800421cda0:	48 83 c4 28          	add    $0x28,%rsp
  800421cda4:	5b                   	pop    %rbx
  800421cda5:	41 5c                	pop    %r12
  800421cda7:	41 5d                	pop    %r13
  800421cda9:	41 5e                	pop    %r14
  800421cdab:	41 5f                	pop    %r15
  800421cdad:	5d                   	pop    %rbp
  800421cdae:	c3                   	retq   

000000800421cdaf <msr_setup>:
  800421cdaf:	55                   	push   %rbp
  800421cdb0:	48 89 e5             	mov    %rsp,%rbp
  800421cdb3:	48 83 ec 40          	sub    $0x40,%rsp
  800421cdb7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421cdbb:	c7 45 d0 80 00 00 c0 	movl   $0xc0000080,-0x30(%rbp)
  800421cdc2:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800421cdc9:	81 7d f8 80 00 00 00 	cmpl   $0x80,-0x8(%rbp)
  800421cdd0:	7e 35                	jle    800421ce07 <msr_setup+0x58>
  800421cdd2:	48 b9 60 19 22 04 80 	movabs $0x8004221960,%rcx
  800421cdd9:	00 00 00 
  800421cddc:	48 ba 06 16 22 04 80 	movabs $0x8004221606,%rdx
  800421cde3:	00 00 00 
  800421cde6:	be 50 02 00 00       	mov    $0x250,%esi
  800421cdeb:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421cdf2:	00 00 00 
  800421cdf5:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cdfa:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421ce01:	00 00 00 
  800421ce04:	41 ff d0             	callq  *%r8
  800421ce07:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ce0b:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421ce0e:	89 50 28             	mov    %edx,0x28(%rax)
  800421ce11:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421ce18:	e9 97 00 00 00       	jmpq   800421ceb4 <msr_setup+0x105>
  800421ce1d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ce21:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421ce25:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421ce28:	48 63 d2             	movslq %edx,%rdx
  800421ce2b:	48 c1 e2 04          	shl    $0x4,%rdx
  800421ce2f:	48 01 d0             	add    %rdx,%rax
  800421ce32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421ce36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ce39:	48 98                	cltq   
  800421ce3b:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421ce3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421ce43:	89 10                	mov    %edx,(%rax)
  800421ce45:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ce48:	48 98                	cltq   
  800421ce4a:	8b 44 85 d0          	mov    -0x30(%rbp,%rax,4),%eax
  800421ce4e:	89 45 ec             	mov    %eax,-0x14(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ce51:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421ce54:	89 c1                	mov    %eax,%ecx
  800421ce56:	0f 32                	rdmsr  
  800421ce58:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421ce5b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ce5e:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800421ce65:	00 
	ret = edx;
  800421ce66:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421ce69:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ret = ret << 32;
  800421ce6d:	48 c1 65 d8 20       	shlq   $0x20,-0x28(%rbp)
	ret |= eax;
  800421ce72:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421ce75:	48 09 45 d8          	or     %rax,-0x28(%rbp)

	return ret;
  800421ce79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ce7d:	48 89 c2             	mov    %rax,%rdx
  800421ce80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421ce84:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421ce88:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ce8c:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421ce90:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421ce93:	48 63 d2             	movslq %edx,%rdx
  800421ce96:	48 c1 e2 04          	shl    $0x4,%rdx
  800421ce9a:	48 01 d0             	add    %rdx,%rax
  800421ce9d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421cea1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cea4:	48 98                	cltq   
  800421cea6:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421ceaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421ceae:	89 10                	mov    %edx,(%rax)
  800421ceb0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421ceb4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ceb7:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421ceba:	0f 8c 5d ff ff ff    	jl     800421ce1d <msr_setup+0x6e>
  800421cec0:	c9                   	leaveq 
  800421cec1:	c3                   	retq   

000000800421cec2 <bitmap_setup>:
  800421cec2:	55                   	push   %rbp
  800421cec3:	48 89 e5             	mov    %rsp,%rbp
  800421cec6:	48 83 ec 30          	sub    $0x30,%rsp
  800421ceca:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421cece:	c7 45 e0 70 00 00 00 	movl   $0x70,-0x20(%rbp)
  800421ced5:	c7 45 e4 71 00 00 00 	movl   $0x71,-0x1c(%rbp)
  800421cedc:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%rbp)
  800421cee3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421ceea:	e9 07 01 00 00       	jmpq   800421cff6 <bitmap_setup+0x134>
  800421ceef:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cef2:	48 98                	cltq   
  800421cef4:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cef8:	c1 e8 06             	shr    $0x6,%eax
  800421cefb:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421cefe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf01:	48 98                	cltq   
  800421cf03:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cf07:	3d fe 7f 00 00       	cmp    $0x7ffe,%eax
  800421cf0c:	77 51                	ja     800421cf5f <bitmap_setup+0x9d>
  800421cf0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cf12:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421cf16:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421cf19:	48 63 d2             	movslq %edx,%rdx
  800421cf1c:	48 c1 e2 03          	shl    $0x3,%rdx
  800421cf20:	48 01 c2             	add    %rax,%rdx
  800421cf23:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cf27:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421cf2b:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421cf2e:	48 63 c9             	movslq %ecx,%rcx
  800421cf31:	48 c1 e1 03          	shl    $0x3,%rcx
  800421cf35:	48 01 c8             	add    %rcx,%rax
  800421cf38:	48 8b 30             	mov    (%rax),%rsi
  800421cf3b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf3e:	48 98                	cltq   
  800421cf40:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cf44:	83 e0 3f             	and    $0x3f,%eax
  800421cf47:	bf 01 00 00 00       	mov    $0x1,%edi
  800421cf4c:	89 c1                	mov    %eax,%ecx
  800421cf4e:	48 d3 e7             	shl    %cl,%rdi
  800421cf51:	48 89 f8             	mov    %rdi,%rax
  800421cf54:	48 09 f0             	or     %rsi,%rax
  800421cf57:	48 89 02             	mov    %rax,(%rdx)
  800421cf5a:	e9 93 00 00 00       	jmpq   800421cff2 <bitmap_setup+0x130>
  800421cf5f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf62:	48 98                	cltq   
  800421cf64:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cf68:	3d fe ff 00 00       	cmp    $0xfffe,%eax
  800421cf6d:	77 4e                	ja     800421cfbd <bitmap_setup+0xfb>
  800421cf6f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cf73:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421cf77:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421cf7a:	48 63 d2             	movslq %edx,%rdx
  800421cf7d:	48 c1 e2 03          	shl    $0x3,%rdx
  800421cf81:	48 01 c2             	add    %rax,%rdx
  800421cf84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cf88:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421cf8c:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421cf8f:	48 63 c9             	movslq %ecx,%rcx
  800421cf92:	48 c1 e1 03          	shl    $0x3,%rcx
  800421cf96:	48 01 c8             	add    %rcx,%rax
  800421cf99:	48 8b 30             	mov    (%rax),%rsi
  800421cf9c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf9f:	48 98                	cltq   
  800421cfa1:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cfa5:	83 e0 3f             	and    $0x3f,%eax
  800421cfa8:	bf 01 00 00 00       	mov    $0x1,%edi
  800421cfad:	89 c1                	mov    %eax,%ecx
  800421cfaf:	48 d3 e7             	shl    %cl,%rdi
  800421cfb2:	48 89 f8             	mov    %rdi,%rax
  800421cfb5:	48 09 f0             	or     %rsi,%rax
  800421cfb8:	48 89 02             	mov    %rax,(%rdx)
  800421cfbb:	eb 35                	jmp    800421cff2 <bitmap_setup+0x130>
  800421cfbd:	48 b9 00 16 22 04 80 	movabs $0x8004221600,%rcx
  800421cfc4:	00 00 00 
  800421cfc7:	48 ba 06 16 22 04 80 	movabs $0x8004221606,%rdx
  800421cfce:	00 00 00 
  800421cfd1:	be 69 02 00 00       	mov    $0x269,%esi
  800421cfd6:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421cfdd:	00 00 00 
  800421cfe0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cfe5:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421cfec:	00 00 00 
  800421cfef:	41 ff d0             	callq  *%r8
  800421cff2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421cff6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cff9:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421cffc:	0f 8c ed fe ff ff    	jl     800421ceef <bitmap_setup+0x2d>
  800421d002:	c9                   	leaveq 
  800421d003:	c3                   	retq   

000000800421d004 <vmx_vmrun>:
  800421d004:	55                   	push   %rbp
  800421d005:	48 89 e5             	mov    %rsp,%rbp
  800421d008:	48 83 ec 70          	sub    $0x70,%rsp
  800421d00c:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421d010:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d014:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421d01a:	83 f8 03             	cmp    $0x3,%eax
  800421d01d:	74 0a                	je     800421d029 <vmx_vmrun+0x25>
  800421d01f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421d024:	e9 ac 02 00 00       	jmpq   800421d2d5 <vmx_vmrun+0x2d1>
  800421d029:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d02d:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421d033:	83 f8 01             	cmp    $0x1,%eax
  800421d036:	0f 85 2f 01 00 00    	jne    800421d16b <vmx_vmrun+0x167>
  800421d03c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d040:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421d047:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d04b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421d052:	00 00 00 
  800421d055:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421d059:	77 32                	ja     800421d08d <vmx_vmrun+0x89>
  800421d05b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d05f:	48 89 c1             	mov    %rax,%rcx
  800421d062:	48 ba 98 16 22 04 80 	movabs $0x8004221698,%rdx
  800421d069:	00 00 00 
  800421d06c:	be 7c 02 00 00       	mov    $0x27c,%esi
  800421d071:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421d078:	00 00 00 
  800421d07b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d080:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d087:	00 00 00 
  800421d08a:	41 ff d0             	callq  *%r8
  800421d08d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421d094:	ff ff ff 
  800421d097:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d09b:	48 01 d0             	add    %rdx,%rax
  800421d09e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d0a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d0a6:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421d0aa:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  800421d0ae:	f8                   	clc    
  800421d0af:	66 0f c7 75 a8       	vmclear -0x58(%rbp)
  800421d0b4:	0f 96 c0             	setbe  %al
  800421d0b7:	88 45 df             	mov    %al,-0x21(%rbp)
  800421d0ba:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421d0be:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d0c1:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d0c5:	74 0a                	je     800421d0d1 <vmx_vmrun+0xcd>
  800421d0c7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d0cc:	e9 04 02 00 00       	jmpq   800421d2d5 <vmx_vmrun+0x2d1>
  800421d0d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d0d5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800421d0d9:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
  800421d0dd:	f8                   	clc    
  800421d0de:	0f c7 75 b0          	vmptrld -0x50(%rbp)
  800421d0e2:	0f 96 c0             	setbe  %al
  800421d0e5:	88 45 de             	mov    %al,-0x22(%rbp)
  800421d0e8:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421d0ec:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d0ef:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d0f3:	74 0a                	je     800421d0ff <vmx_vmrun+0xfb>
  800421d0f5:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d0fa:	e9 d6 01 00 00       	jmpq   800421d2d5 <vmx_vmrun+0x2d1>
  800421d0ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d104:	48 ba 59 b2 21 04 80 	movabs $0x800421b259,%rdx
  800421d10b:	00 00 00 
  800421d10e:	ff d2                	callq  *%rdx
  800421d110:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d115:	48 ba 27 b6 21 04 80 	movabs $0x800421b627,%rdx
  800421d11c:	00 00 00 
  800421d11f:	ff d2                	callq  *%rdx
  800421d121:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d125:	48 05 20 01 00 00    	add    $0x120,%rax
  800421d12b:	48 89 c7             	mov    %rax,%rdi
  800421d12e:	48 b8 c2 ce 21 04 80 	movabs $0x800421cec2,%rax
  800421d135:	00 00 00 
  800421d138:	ff d0                	callq  *%rax
  800421d13a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d13e:	48 05 20 01 00 00    	add    $0x120,%rax
  800421d144:	48 89 c7             	mov    %rax,%rdi
  800421d147:	48 b8 af cd 21 04 80 	movabs $0x800421cdaf,%rax
  800421d14e:	00 00 00 
  800421d151:	ff d0                	callq  *%rax
  800421d153:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d157:	48 89 c7             	mov    %rax,%rdi
  800421d15a:	48 b8 cc be 21 04 80 	movabs $0x800421becc,%rax
  800421d161:	00 00 00 
  800421d164:	ff d0                	callq  *%rax
  800421d166:	e9 8c 00 00 00       	jmpq   800421d1f7 <vmx_vmrun+0x1f3>
  800421d16b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d16f:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421d176:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421d17a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421d181:	00 00 00 
  800421d184:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421d188:	77 32                	ja     800421d1bc <vmx_vmrun+0x1b8>
  800421d18a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d18e:	48 89 c1             	mov    %rax,%rcx
  800421d191:	48 ba 98 16 22 04 80 	movabs $0x8004221698,%rdx
  800421d198:	00 00 00 
  800421d19b:	be 95 02 00 00       	mov    $0x295,%esi
  800421d1a0:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421d1a7:	00 00 00 
  800421d1aa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d1af:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d1b6:	00 00 00 
  800421d1b9:	41 ff d0             	callq  *%r8
  800421d1bc:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421d1c3:	ff ff ff 
  800421d1c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d1ca:	48 01 d0             	add    %rdx,%rax
  800421d1cd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421d1d1:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
  800421d1d5:	f8                   	clc    
  800421d1d6:	0f c7 75 b8          	vmptrld -0x48(%rbp)
  800421d1da:	0f 96 c0             	setbe  %al
  800421d1dd:	88 45 dd             	mov    %al,-0x23(%rbp)
  800421d1e0:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  800421d1e4:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d1e7:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d1eb:	74 0a                	je     800421d1f7 <vmx_vmrun+0x1f3>
  800421d1ed:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d1f2:	e9 de 00 00 00       	jmpq   800421d2d5 <vmx_vmrun+0x2d1>
  800421d1f7:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421d1fe:	00 00 00 
  800421d201:	ff d0                	callq  *%rax
  800421d203:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421d20a:	00 00 00 
  800421d20d:	48 98                	cltq   
  800421d20f:	48 c1 e0 03          	shl    $0x3,%rax
  800421d213:	48 89 c1             	mov    %rax,%rcx
  800421d216:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d21a:	48 01 c8             	add    %rcx,%rax
  800421d21d:	48 01 d0             	add    %rdx,%rax
  800421d220:	48 83 c0 08          	add    $0x8,%rax
  800421d224:	48 8b 00             	mov    (%rax),%rax
  800421d227:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800421d22e:	c7 45 d8 1c 68 00 00 	movl   $0x681c,-0x28(%rbp)
  800421d235:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421d239:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421d23d:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421d240:	48 89 d6             	mov    %rdx,%rsi
  800421d243:	89 c7                	mov    %eax,%edi
  800421d245:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421d24c:	00 00 00 
  800421d24f:	ff d0                	callq  *%rax
  800421d251:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421d258:	00 00 00 
  800421d25b:	ff d0                	callq  *%rax
  800421d25d:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421d264:	00 00 00 
  800421d267:	48 98                	cltq   
  800421d269:	48 c1 e0 03          	shl    $0x3,%rax
  800421d26d:	48 89 c1             	mov    %rax,%rcx
  800421d270:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d274:	48 01 c8             	add    %rcx,%rax
  800421d277:	48 01 d0             	add    %rdx,%rax
  800421d27a:	48 83 c0 08          	add    $0x8,%rax
  800421d27e:	48 8b 00             	mov    (%rax),%rax
  800421d281:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800421d288:	c7 45 cc 1e 68 00 00 	movl   $0x681e,-0x34(%rbp)
  800421d28f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421d293:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421d297:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d29a:	48 89 d6             	mov    %rdx,%rsi
  800421d29d:	89 c7                	mov    %eax,%edi
  800421d29f:	48 b8 2c a7 21 04 80 	movabs $0x800421a72c,%rax
  800421d2a6:	00 00 00 
  800421d2a9:	ff d0                	callq  *%rax
  800421d2ab:	48 ba 77 19 22 04 80 	movabs $0x8004221977,%rdx
  800421d2b2:	00 00 00 
  800421d2b5:	be 9d 02 00 00       	mov    $0x29d,%esi
  800421d2ba:	48 bf 1b 16 22 04 80 	movabs $0x800422161b,%rdi
  800421d2c1:	00 00 00 
  800421d2c4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d2c9:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421d2d0:	00 00 00 
  800421d2d3:	ff d1                	callq  *%rcx
  800421d2d5:	c9                   	leaveq 
  800421d2d6:	c3                   	retq   

000000800421d2d7 <vmcs_writel>:
  800421d2d7:	55                   	push   %rbp
  800421d2d8:	48 89 e5             	mov    %rsp,%rbp
  800421d2db:	48 83 ec 20          	sub    $0x20,%rsp
  800421d2df:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d2e2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421d2e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d2ea:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421d2ed:	f8                   	clc    
  800421d2ee:	0f 79 d0             	vmwrite %rax,%rdx
  800421d2f1:	0f 96 c0             	setbe  %al
  800421d2f4:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421d2f7:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421d2fb:	c9                   	leaveq 
  800421d2fc:	c3                   	retq   

000000800421d2fd <vmcs_readl>:
  800421d2fd:	55                   	push   %rbp
  800421d2fe:	48 89 e5             	mov    %rsp,%rbp
  800421d301:	48 83 ec 14          	sub    $0x14,%rsp
  800421d305:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d308:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d30b:	89 c2                	mov    %eax,%edx
  800421d30d:	0f 78 d0             	vmread %rdx,%rax
  800421d310:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d314:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d318:	c9                   	leaveq 
  800421d319:	c3                   	retq   

000000800421d31a <page2ppn>:
  800421d31a:	55                   	push   %rbp
  800421d31b:	48 89 e5             	mov    %rsp,%rbp
  800421d31e:	48 83 ec 08          	sub    $0x8,%rsp
  800421d322:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421d326:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421d32a:	48 b8 00 b6 6d 04 80 	movabs $0x80046db600,%rax
  800421d331:	00 00 00 
  800421d334:	48 8b 00             	mov    (%rax),%rax
  800421d337:	48 29 c2             	sub    %rax,%rdx
  800421d33a:	48 89 d0             	mov    %rdx,%rax
  800421d33d:	48 c1 f8 04          	sar    $0x4,%rax
  800421d341:	c9                   	leaveq 
  800421d342:	c3                   	retq   

000000800421d343 <page2pa>:
  800421d343:	55                   	push   %rbp
  800421d344:	48 89 e5             	mov    %rsp,%rbp
  800421d347:	48 83 ec 08          	sub    $0x8,%rsp
  800421d34b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421d34f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d353:	48 89 c7             	mov    %rax,%rdi
  800421d356:	48 b8 1a d3 21 04 80 	movabs $0x800421d31a,%rax
  800421d35d:	00 00 00 
  800421d360:	ff d0                	callq  *%rax
  800421d362:	48 c1 e0 0c          	shl    $0xc,%rax
  800421d366:	c9                   	leaveq 
  800421d367:	c3                   	retq   

000000800421d368 <page2kva>:
  800421d368:	55                   	push   %rbp
  800421d369:	48 89 e5             	mov    %rsp,%rbp
  800421d36c:	48 83 ec 20          	sub    $0x20,%rsp
  800421d370:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421d374:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d378:	48 89 c7             	mov    %rax,%rdi
  800421d37b:	48 b8 43 d3 21 04 80 	movabs $0x800421d343,%rax
  800421d382:	00 00 00 
  800421d385:	ff d0                	callq  *%rax
  800421d387:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d38b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d38f:	48 c1 e8 0c          	shr    $0xc,%rax
  800421d393:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421d396:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421d399:	48 b8 f8 b5 6d 04 80 	movabs $0x80046db5f8,%rax
  800421d3a0:	00 00 00 
  800421d3a3:	48 8b 00             	mov    (%rax),%rax
  800421d3a6:	48 39 c2             	cmp    %rax,%rdx
  800421d3a9:	72 32                	jb     800421d3dd <page2kva+0x75>
  800421d3ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d3af:	48 89 c1             	mov    %rax,%rcx
  800421d3b2:	48 ba 90 19 22 04 80 	movabs $0x8004221990,%rdx
  800421d3b9:	00 00 00 
  800421d3bc:	be 62 00 00 00       	mov    $0x62,%esi
  800421d3c1:	48 bf b3 19 22 04 80 	movabs $0x80042219b3,%rdi
  800421d3c8:	00 00 00 
  800421d3cb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d3d0:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d3d7:	00 00 00 
  800421d3da:	41 ff d0             	callq  *%r8
  800421d3dd:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421d3e4:	00 00 00 
  800421d3e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d3eb:	48 01 d0             	add    %rdx,%rax
  800421d3ee:	c9                   	leaveq 
  800421d3ef:	c3                   	retq   

000000800421d3f0 <vmx_get_vmdisk_number>:
#include <kern/env.h>
#include <kern/cpu.h>

static int vmdisk_number = 0;	//this number assign to the vm
int 
vmx_get_vmdisk_number() {
  800421d3f0:	55                   	push   %rbp
  800421d3f1:	48 89 e5             	mov    %rsp,%rbp
	return vmdisk_number;
  800421d3f4:	48 b8 c8 b5 6d 04 80 	movabs $0x80046db5c8,%rax
  800421d3fb:	00 00 00 
  800421d3fe:	8b 00                	mov    (%rax),%eax
}
  800421d400:	5d                   	pop    %rbp
  800421d401:	c3                   	retq   

000000800421d402 <vmx_incr_vmdisk_number>:

void
vmx_incr_vmdisk_number() {
  800421d402:	55                   	push   %rbp
  800421d403:	48 89 e5             	mov    %rsp,%rbp
	vmdisk_number++;
  800421d406:	48 b8 c8 b5 6d 04 80 	movabs $0x80046db5c8,%rax
  800421d40d:	00 00 00 
  800421d410:	8b 00                	mov    (%rax),%eax
  800421d412:	8d 50 01             	lea    0x1(%rax),%edx
  800421d415:	48 b8 c8 b5 6d 04 80 	movabs $0x80046db5c8,%rax
  800421d41c:	00 00 00 
  800421d41f:	89 10                	mov    %edx,(%rax)
}
  800421d421:	5d                   	pop    %rbp
  800421d422:	c3                   	retq   

000000800421d423 <find_msr_in_region>:
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
  800421d423:	55                   	push   %rbp
  800421d424:	48 89 e5             	mov    %rsp,%rbp
  800421d427:	48 83 ec 28          	sub    $0x28,%rsp
  800421d42b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d42e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421d432:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421d435:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
  800421d439:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d43d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int i;
	for(i=0; i<area_sz; ++i) {
  800421d441:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421d448:	eb 21                	jmp    800421d46b <find_msr_in_region+0x48>
		if(entry->msr_index == msr_idx) {
  800421d44a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d44e:	8b 00                	mov    (%rax),%eax
  800421d450:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421d453:	75 12                	jne    800421d467 <find_msr_in_region+0x44>
			*msr_entry = entry;
  800421d455:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d459:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421d45d:	48 89 10             	mov    %rdx,(%rax)
			return true;
  800421d460:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d465:	eb 11                	jmp    800421d478 <find_msr_in_region+0x55>
}
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
	int i;
	for(i=0; i<area_sz; ++i) {
  800421d467:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421d46b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d46e:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  800421d471:	7c d7                	jl     800421d44a <find_msr_in_region+0x27>
		if(entry->msr_index == msr_idx) {
			*msr_entry = entry;
			return true;
		}
	}
	return false;
  800421d473:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421d478:	c9                   	leaveq 
  800421d479:	c3                   	retq   

000000800421d47a <handle_interrupt_window>:

bool
handle_interrupt_window(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421d47a:	55                   	push   %rbp
  800421d47b:	48 89 e5             	mov    %rsp,%rbp
  800421d47e:	48 83 ec 38          	sub    $0x38,%rsp
  800421d482:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421d486:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421d48a:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421d48d:	c7 45 f8 02 40 00 00 	movl   $0x4002,-0x8(%rbp)
  800421d494:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421d497:	89 c7                	mov    %eax,%edi
  800421d499:	48 b8 fd d2 21 04 80 	movabs $0x800421d2fd,%rax
  800421d4a0:	00 00 00 
  800421d4a3:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;

	procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS );
  800421d4a5:	89 45 fc             	mov    %eax,-0x4(%rbp)

        //disable the interrupt window exiting
        procbased_ctls_or &= ~(VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT); 
  800421d4a8:	83 65 fc fb          	andl   $0xfffffffb,-0x4(%rbp)
  800421d4ac:	c7 45 f4 02 40 00 00 	movl   $0x4002,-0xc(%rbp)
  800421d4b3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d4b6:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421d4b9:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421d4bc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421d4bf:	48 89 d6             	mov    %rdx,%rsi
  800421d4c2:	89 c7                	mov    %eax,%edi
  800421d4c4:	48 b8 d7 d2 21 04 80 	movabs $0x800421d2d7,%rax
  800421d4cb:	00 00 00 
  800421d4ce:	ff d0                	callq  *%rax
  800421d4d0:	c7 45 ec 16 40 00 00 	movl   $0x4016,-0x14(%rbp)
  800421d4d7:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d4da:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421d4dd:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421d4e0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d4e3:	48 89 d6             	mov    %rdx,%rsi
  800421d4e6:	89 c7                	mov    %eax,%edi
  800421d4e8:	48 b8 d7 d2 21 04 80 	movabs $0x800421d2d7,%rax
  800421d4ef:	00 00 00 
  800421d4f2:	ff d0                	callq  *%rax

        vmcs_write32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS, 
		      procbased_ctls_or);
        //write back the host_vector, which can insert a virtual interrupt
	vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	return true;
  800421d4f4:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421d4f9:	c9                   	leaveq 
  800421d4fa:	c3                   	retq   

000000800421d4fb <handle_interrupts>:
bool
handle_interrupts(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421d4fb:	55                   	push   %rbp
  800421d4fc:	48 89 e5             	mov    %rsp,%rbp
  800421d4ff:	48 83 ec 48          	sub    $0x48,%rsp
  800421d503:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421d507:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421d50b:	89 55 bc             	mov    %edx,-0x44(%rbp)
  800421d50e:	c7 45 f0 20 68 00 00 	movl   $0x6820,-0x10(%rbp)
  800421d515:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421d518:	89 c7                	mov    %eax,%edi
  800421d51a:	48 b8 fd d2 21 04 80 	movabs $0x800421d2fd,%rax
  800421d521:	00 00 00 
  800421d524:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;
	rflags = vmcs_read64(VMCS_GUEST_RFLAGS);
  800421d526:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if ( !(rflags & (0x1 << 9)) ) {	//we have to wait the interrupt window open
  800421d52a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d52e:	25 00 02 00 00       	and    $0x200,%eax
  800421d533:	48 85 c0             	test   %rax,%rax
  800421d536:	75 45                	jne    800421d57d <handle_interrupts+0x82>
  800421d538:	c7 45 ec 02 40 00 00 	movl   $0x4002,-0x14(%rbp)
  800421d53f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d542:	89 c7                	mov    %eax,%edi
  800421d544:	48 b8 fd d2 21 04 80 	movabs $0x800421d2fd,%rax
  800421d54b:	00 00 00 
  800421d54e:	ff d0                	callq  *%rax
		//get the interrupt info

		procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS);
  800421d550:	89 45 f4             	mov    %eax,-0xc(%rbp)

		//disable the interrupt window exiting
		procbased_ctls_or |= VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT; 
  800421d553:	83 4d f4 04          	orl    $0x4,-0xc(%rbp)
  800421d557:	c7 45 e8 02 40 00 00 	movl   $0x4002,-0x18(%rbp)
  800421d55e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421d561:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421d564:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421d567:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421d56a:	48 89 d6             	mov    %rdx,%rsi
  800421d56d:	89 c7                	mov    %eax,%edi
  800421d56f:	48 b8 d7 d2 21 04 80 	movabs $0x800421d2d7,%rax
  800421d576:	00 00 00 
  800421d579:	ff d0                	callq  *%rax
  800421d57b:	eb 24                	jmp    800421d5a1 <handle_interrupts+0xa6>
  800421d57d:	c7 45 e0 16 40 00 00 	movl   $0x4016,-0x20(%rbp)
  800421d584:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421d587:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421d58a:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421d58d:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421d590:	48 89 d6             	mov    %rdx,%rsi
  800421d593:	89 c7                	mov    %eax,%edi
  800421d595:	48 b8 d7 d2 21 04 80 	movabs $0x800421d2d7,%rax
  800421d59c:	00 00 00 
  800421d59f:	ff d0                	callq  *%rax
	}
	else {	//revector the host vector to the guest vector

		vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	}
	return true;
  800421d5a1:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421d5a6:	c9                   	leaveq 
  800421d5a7:	c3                   	retq   

000000800421d5a8 <handle_rdmsr>:

bool
handle_rdmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421d5a8:	55                   	push   %rbp
  800421d5a9:	48 89 e5             	mov    %rsp,%rbp
  800421d5ac:	53                   	push   %rbx
  800421d5ad:	48 83 ec 48          	sub    $0x48,%rsp
  800421d5b1:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421d5b5:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421d5b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d5bd:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421d5c1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421d5c5:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421d5ca:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421d5ce:	0f 85 d0 00 00 00    	jne    800421d6a4 <handle_rdmsr+0xfc>
		// TODO: setup msr_bitmap to ignore EFER_MSR
		uint64_t val;
		struct vmx_msr_entry *entry;
		bool r = find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421d5d4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d5d8:	8b 50 28             	mov    0x28(%rax),%edx
  800421d5db:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d5df:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421d5e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d5e7:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  800421d5eb:	89 c7                	mov    %eax,%edi
  800421d5ed:	48 b8 23 d4 21 04 80 	movabs $0x800421d423,%rax
  800421d5f4:	00 00 00 
  800421d5f7:	ff d0                	callq  *%rax
  800421d5f9:	88 45 e7             	mov    %al,-0x19(%rbp)
		assert(r);
  800421d5fc:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421d600:	83 f0 01             	xor    $0x1,%eax
  800421d603:	84 c0                	test   %al,%al
  800421d605:	74 35                	je     800421d63c <handle_rdmsr+0x94>
  800421d607:	48 b9 c2 19 22 04 80 	movabs $0x80042219c2,%rcx
  800421d60e:	00 00 00 
  800421d611:	48 ba c4 19 22 04 80 	movabs $0x80042219c4,%rdx
  800421d618:	00 00 00 
  800421d61b:	be 59 00 00 00       	mov    $0x59,%esi
  800421d620:	48 bf d9 19 22 04 80 	movabs $0x80042219d9,%rdi
  800421d627:	00 00 00 
  800421d62a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d62f:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d636:	00 00 00 
  800421d639:	41 ff d0             	callq  *%r8
		val = entry->msr_value;
  800421d63c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d640:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421d644:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tf->tf_regs.reg_rdx = val << 32;
  800421d648:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d64c:	48 c1 e0 20          	shl    $0x20,%rax
  800421d650:	48 89 c2             	mov    %rax,%rdx
  800421d653:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d657:	48 89 50 58          	mov    %rdx,0x58(%rax)
		tf->tf_regs.reg_rax = val & 0xFFFFFFFF;
  800421d65b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d65f:	89 c2                	mov    %eax,%edx
  800421d661:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d665:	48 89 50 70          	mov    %rdx,0x70(%rax)

		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421d669:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d66d:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421d674:	c7 45 d4 0c 44 00 00 	movl   $0x440c,-0x2c(%rbp)
  800421d67b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421d67e:	89 c7                	mov    %eax,%edi
  800421d680:	48 b8 fd d2 21 04 80 	movabs $0x800421d2fd,%rax
  800421d687:	00 00 00 
  800421d68a:	ff d0                	callq  *%rax
  800421d68c:	89 c0                	mov    %eax,%eax
  800421d68e:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421d692:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d696:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421d69d:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d6a2:	eb 05                	jmp    800421d6a9 <handle_rdmsr+0x101>
	}

	return false;
  800421d6a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421d6a9:	48 83 c4 48          	add    $0x48,%rsp
  800421d6ad:	5b                   	pop    %rbx
  800421d6ae:	5d                   	pop    %rbp
  800421d6af:	c3                   	retq   

000000800421d6b0 <handle_wrmsr>:

bool 
handle_wrmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421d6b0:	55                   	push   %rbp
  800421d6b1:	48 89 e5             	mov    %rsp,%rbp
  800421d6b4:	53                   	push   %rbx
  800421d6b5:	48 83 ec 58          	sub    $0x58,%rsp
  800421d6b9:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421d6bd:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421d6c1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d6c5:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421d6c9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421d6cd:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421d6d2:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421d6d6:	0f 85 34 01 00 00    	jne    800421d810 <handle_wrmsr+0x160>

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421d6dc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421d6e0:	8b 50 28             	mov    0x28(%rax),%edx
  800421d6e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421d6e7:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421d6eb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	uint64_t msr = tf->tf_regs.reg_rcx;
	if(msr == EFER_MSR) {

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
  800421d6ef:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  800421d6f3:	89 c7                	mov    %eax,%edi
  800421d6f5:	48 b8 23 d4 21 04 80 	movabs $0x800421d423,%rax
  800421d6fc:	00 00 00 
  800421d6ff:	ff d0                	callq  *%rax
  800421d701:	88 45 e7             	mov    %al,-0x19(%rbp)
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
		assert(r);
  800421d704:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421d708:	83 f0 01             	xor    $0x1,%eax
  800421d70b:	84 c0                	test   %al,%al
  800421d70d:	74 35                	je     800421d744 <handle_wrmsr+0x94>
  800421d70f:	48 b9 c2 19 22 04 80 	movabs $0x80042219c2,%rcx
  800421d716:	00 00 00 
  800421d719:	48 ba c4 19 22 04 80 	movabs $0x80042219c4,%rdx
  800421d720:	00 00 00 
  800421d723:	be 6f 00 00 00       	mov    $0x6f,%esi
  800421d728:	48 bf d9 19 22 04 80 	movabs $0x80042219d9,%rdi
  800421d72f:	00 00 00 
  800421d732:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d737:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d73e:	00 00 00 
  800421d741:	41 ff d0             	callq  *%r8
		cur_val = entry->msr_value;
  800421d744:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d748:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421d74c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		new_val = (tf->tf_regs.reg_rdx << 32)|tf->tf_regs.reg_rax;
  800421d750:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d754:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421d758:	48 c1 e0 20          	shl    $0x20,%rax
  800421d75c:	48 89 c2             	mov    %rax,%rdx
  800421d75f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d763:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421d767:	48 09 d0             	or     %rdx,%rax
  800421d76a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if(BIT(cur_val, EFER_LME) == 0 && BIT(new_val, EFER_LME) == 1) {
  800421d76e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d772:	25 00 01 00 00       	and    $0x100,%eax
  800421d777:	48 85 c0             	test   %rax,%rax
  800421d77a:	75 4d                	jne    800421d7c9 <handle_wrmsr+0x119>
  800421d77c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421d780:	25 00 01 00 00       	and    $0x100,%eax
  800421d785:	48 85 c0             	test   %rax,%rax
  800421d788:	74 3f                	je     800421d7c9 <handle_wrmsr+0x119>
  800421d78a:	c7 45 c8 12 40 00 00 	movl   $0x4012,-0x38(%rbp)
  800421d791:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421d794:	89 c7                	mov    %eax,%edi
  800421d796:	48 b8 fd d2 21 04 80 	movabs $0x800421d2fd,%rax
  800421d79d:	00 00 00 
  800421d7a0:	ff d0                	callq  *%rax
			// Long mode enable.
			uint32_t entry_ctls = vmcs_read32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS );
  800421d7a2:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421d7a5:	c7 45 c4 12 40 00 00 	movl   $0x4012,-0x3c(%rbp)
  800421d7ac:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d7af:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421d7b2:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421d7b5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421d7b8:	48 89 d6             	mov    %rdx,%rsi
  800421d7bb:	89 c7                	mov    %eax,%edi
  800421d7bd:	48 b8 d7 d2 21 04 80 	movabs $0x800421d2d7,%rax
  800421d7c4:	00 00 00 
  800421d7c7:	ff d0                	callq  *%rax
			vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS, 
				      entry_ctls );

		}

		entry->msr_value = new_val;
  800421d7c9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d7cd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421d7d1:	48 89 50 08          	mov    %rdx,0x8(%rax)
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421d7d5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d7d9:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421d7e0:	c7 45 bc 0c 44 00 00 	movl   $0x440c,-0x44(%rbp)
  800421d7e7:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421d7ea:	89 c7                	mov    %eax,%edi
  800421d7ec:	48 b8 fd d2 21 04 80 	movabs $0x800421d2fd,%rax
  800421d7f3:	00 00 00 
  800421d7f6:	ff d0                	callq  *%rax
  800421d7f8:	89 c0                	mov    %eax,%eax
  800421d7fa:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421d7fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d802:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421d809:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d80e:	eb 05                	jmp    800421d815 <handle_wrmsr+0x165>
	}

	return false;
  800421d810:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421d815:	48 83 c4 58          	add    $0x58,%rsp
  800421d819:	5b                   	pop    %rbx
  800421d81a:	5d                   	pop    %rbp
  800421d81b:	c3                   	retq   

000000800421d81c <handle_eptviolation>:

bool
handle_eptviolation(uint64_t *eptrt, struct VmxGuestInfo *ginfo) {
  800421d81c:	55                   	push   %rbp
  800421d81d:	48 89 e5             	mov    %rsp,%rbp
  800421d820:	53                   	push   %rbx
  800421d821:	48 83 ec 48          	sub    $0x48,%rsp
  800421d825:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421d829:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421d82d:	c7 45 cc 00 24 00 00 	movl   $0x2400,-0x34(%rbp)
  800421d834:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d837:	89 c7                	mov    %eax,%edi
  800421d839:	48 b8 fd d2 21 04 80 	movabs $0x800421d2fd,%rax
  800421d840:	00 00 00 
  800421d843:	ff d0                	callq  *%rax
	uint64_t gpa = vmcs_read64(VMCS_64BIT_GUEST_PHYSICAL_ADDR);
  800421d845:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int r;
	if(gpa < 0xA0000 || (gpa >= 0x100000 && gpa < ginfo->phys_sz)) 
  800421d849:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421d850:	00 
  800421d851:	76 1f                	jbe    800421d872 <handle_eptviolation+0x56>
  800421d853:	48 81 7d e8 ff ff 0f 	cmpq   $0xfffff,-0x18(%rbp)
  800421d85a:	00 
  800421d85b:	0f 86 f9 00 00 00    	jbe    800421d95a <handle_eptviolation+0x13e>
  800421d861:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d865:	48 8b 00             	mov    (%rax),%rax
  800421d868:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421d86c:	0f 86 e8 00 00 00    	jbe    800421d95a <handle_eptviolation+0x13e>
	{
		// Allocate a new page to the guest.
		struct PageInfo *p = page_alloc(0);
  800421d872:	bf 00 00 00 00       	mov    $0x0,%edi
  800421d877:	48 b8 a7 2e 20 04 80 	movabs $0x8004202ea7,%rax
  800421d87e:	00 00 00 
  800421d881:	ff d0                	callq  *%rax
  800421d883:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		if(!p) {
  800421d887:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421d88c:	75 25                	jne    800421d8b3 <handle_eptviolation+0x97>
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
  800421d88e:	48 bf e8 19 22 04 80 	movabs $0x80042219e8,%rdi
  800421d895:	00 00 00 
  800421d898:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d89d:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421d8a4:	00 00 00 
  800421d8a7:	ff d2                	callq  *%rdx
			return false;
  800421d8a9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d8ae:	e9 54 01 00 00       	jmpq   800421da07 <handle_eptviolation+0x1eb>
		}
		p->pp_ref += 1;
  800421d8b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d8b7:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421d8bb:	8d 50 01             	lea    0x1(%rax),%edx
  800421d8be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d8c2:	66 89 50 08          	mov    %dx,0x8(%rax)
		r = ept_map_hva2gpa(eptrt, 
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
  800421d8c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d8ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421d8ce:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421d8d2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
		if(!p) {
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
			return false;
		}
		p->pp_ref += 1;
		r = ept_map_hva2gpa(eptrt, 
  800421d8d8:	48 89 c3             	mov    %rax,%rbx
  800421d8db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d8df:	48 89 c7             	mov    %rax,%rdi
  800421d8e2:	48 b8 68 d3 21 04 80 	movabs $0x800421d368,%rax
  800421d8e9:	00 00 00 
  800421d8ec:	ff d0                	callq  *%rax
  800421d8ee:	48 89 c6             	mov    %rax,%rsi
  800421d8f1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d8f5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421d8fb:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421d900:	48 89 da             	mov    %rbx,%rdx
  800421d903:	48 89 c7             	mov    %rax,%rdi
  800421d906:	48 b8 60 99 21 04 80 	movabs $0x8004219960,%rax
  800421d90d:	00 00 00 
  800421d910:	ff d0                	callq  *%rax
  800421d912:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
		assert(r >= 0);
  800421d915:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421d919:	79 35                	jns    800421d950 <handle_eptviolation+0x134>
  800421d91b:	48 b9 38 1a 22 04 80 	movabs $0x8004221a38,%rcx
  800421d922:	00 00 00 
  800421d925:	48 ba c4 19 22 04 80 	movabs $0x80042219c4,%rdx
  800421d92c:	00 00 00 
  800421d92f:	be 93 00 00 00       	mov    $0x93,%esi
  800421d934:	48 bf d9 19 22 04 80 	movabs $0x80042219d9,%rdi
  800421d93b:	00 00 00 
  800421d93e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d943:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d94a:	00 00 00 
  800421d94d:	41 ff d0             	callq  *%r8
		/* cprintf("EPT violation for gpa:%x mapped KVA:%x\n", gpa, page2kva(p)); */
		return true;
  800421d950:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d955:	e9 ad 00 00 00       	jmpq   800421da07 <handle_eptviolation+0x1eb>
	} else if (gpa >= CGA_BUF && gpa < CGA_BUF + PGSIZE) {
  800421d95a:	48 81 7d e8 ff 7f 0b 	cmpq   $0xb7fff,-0x18(%rbp)
  800421d961:	00 
  800421d962:	76 7c                	jbe    800421d9e0 <handle_eptviolation+0x1c4>
  800421d964:	48 81 7d e8 ff 8f 0b 	cmpq   $0xb8fff,-0x18(%rbp)
  800421d96b:	00 
  800421d96c:	77 72                	ja     800421d9e0 <handle_eptviolation+0x1c4>
		// FIXME: This give direct access to VGA MMIO region.
		r = ept_map_hva2gpa(eptrt, 
  800421d96e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d972:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421d978:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421d97d:	ba 00 80 0b 00       	mov    $0xb8000,%edx
  800421d982:	48 be 00 80 0b 04 80 	movabs $0x80040b8000,%rsi
  800421d989:	00 00 00 
  800421d98c:	48 89 c7             	mov    %rax,%rdi
  800421d98f:	48 b8 60 99 21 04 80 	movabs $0x8004219960,%rax
  800421d996:	00 00 00 
  800421d999:	ff d0                	callq  *%rax
  800421d99b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    (void *)(KERNBASE + CGA_BUF), (void *)CGA_BUF, __EPTE_FULL, 0);
		assert(r >= 0);
  800421d99e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421d9a2:	79 35                	jns    800421d9d9 <handle_eptviolation+0x1bd>
  800421d9a4:	48 b9 38 1a 22 04 80 	movabs $0x8004221a38,%rcx
  800421d9ab:	00 00 00 
  800421d9ae:	48 ba c4 19 22 04 80 	movabs $0x80042219c4,%rdx
  800421d9b5:	00 00 00 
  800421d9b8:	be 9a 00 00 00       	mov    $0x9a,%esi
  800421d9bd:	48 bf d9 19 22 04 80 	movabs $0x80042219d9,%rdi
  800421d9c4:	00 00 00 
  800421d9c7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d9cc:	49 b8 d5 04 20 04 80 	movabs $0x80042004d5,%r8
  800421d9d3:	00 00 00 
  800421d9d6:	41 ff d0             	callq  *%r8
		return true;
  800421d9d9:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d9de:	eb 27                	jmp    800421da07 <handle_eptviolation+0x1eb>
	}
	cprintf("vmm: handle_eptviolation: Case 2, gpa %x\n", gpa);
  800421d9e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d9e4:	48 89 c6             	mov    %rax,%rsi
  800421d9e7:	48 bf 40 1a 22 04 80 	movabs $0x8004221a40,%rdi
  800421d9ee:	00 00 00 
  800421d9f1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d9f6:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421d9fd:	00 00 00 
  800421da00:	ff d2                	callq  *%rdx
	return false;
  800421da02:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421da07:	48 83 c4 48          	add    $0x48,%rsp
  800421da0b:	5b                   	pop    %rbx
  800421da0c:	5d                   	pop    %rbp
  800421da0d:	c3                   	retq   

000000800421da0e <handle_ioinstr>:

bool
handle_ioinstr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421da0e:	55                   	push   %rbp
  800421da0f:	48 89 e5             	mov    %rsp,%rbp
  800421da12:	53                   	push   %rbx
  800421da13:	48 83 ec 38          	sub    $0x38,%rsp
  800421da17:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421da1b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421da1f:	c7 45 d4 00 64 00 00 	movl   $0x6400,-0x2c(%rbp)
  800421da26:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421da29:	89 c7                	mov    %eax,%edi
  800421da2b:	48 b8 fd d2 21 04 80 	movabs $0x800421d2fd,%rax
  800421da32:	00 00 00 
  800421da35:	ff d0                	callq  *%rax
	static int port_iortc;

	uint64_t qualification = vmcs_read64(VMCS_VMEXIT_QUALIFICATION);
  800421da37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int port_number = (qualification >> 16) & 0xFFFF;
  800421da3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421da3f:	48 c1 e8 10          	shr    $0x10,%rax
  800421da43:	25 ff ff 00 00       	and    $0xffff,%eax
  800421da48:	89 45 dc             	mov    %eax,-0x24(%rbp)
	bool is_in = BIT(qualification, 3);
  800421da4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421da4f:	48 c1 e8 03          	shr    $0x3,%rax
  800421da53:	83 e0 01             	and    $0x1,%eax
  800421da56:	48 85 c0             	test   %rax,%rax
  800421da59:	0f 95 c0             	setne  %al
  800421da5c:	88 45 db             	mov    %al,-0x25(%rbp)
	bool handled = false;
  800421da5f:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)

	// handle reading physical memory from the CMOS.
	if(port_number == IO_RTC) {
  800421da63:	83 7d dc 70          	cmpl   $0x70,-0x24(%rbp)
  800421da67:	75 2e                	jne    800421da97 <handle_ioinstr+0x89>
		if(!is_in) {
  800421da69:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421da6d:	83 f0 01             	xor    $0x1,%eax
  800421da70:	84 c0                	test   %al,%al
  800421da72:	0f 84 fa 00 00 00    	je     800421db72 <handle_ioinstr+0x164>
			port_iortc = tf->tf_regs.reg_rax;
  800421da78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421da7c:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421da80:	89 c2                	mov    %eax,%edx
  800421da82:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421da89:	00 00 00 
  800421da8c:	89 10                	mov    %edx,(%rax)
			handled = true;
  800421da8e:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421da92:	e9 db 00 00 00       	jmpq   800421db72 <handle_ioinstr+0x164>
		}
	} else if (port_number == IO_RTC + 1) {
  800421da97:	83 7d dc 71          	cmpl   $0x71,-0x24(%rbp)
  800421da9b:	0f 85 d1 00 00 00    	jne    800421db72 <handle_ioinstr+0x164>
		if(is_in) {
  800421daa1:	80 7d db 00          	cmpb   $0x0,-0x25(%rbp)
  800421daa5:	0f 84 c7 00 00 00    	je     800421db72 <handle_ioinstr+0x164>
			if(port_iortc == NVRAM_BASELO) {
  800421daab:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421dab2:	00 00 00 
  800421dab5:	8b 00                	mov    (%rax),%eax
  800421dab7:	83 f8 15             	cmp    $0x15,%eax
  800421daba:	75 15                	jne    800421dad1 <handle_ioinstr+0xc3>
				tf->tf_regs.reg_rax = 640 & 0xFF;
  800421dabc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dac0:	48 c7 40 70 80 00 00 	movq   $0x80,0x70(%rax)
  800421dac7:	00 
				handled = true;
  800421dac8:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421dacc:	e9 a1 00 00 00       	jmpq   800421db72 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_BASEHI) {
  800421dad1:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421dad8:	00 00 00 
  800421dadb:	8b 00                	mov    (%rax),%eax
  800421dadd:	83 f8 16             	cmp    $0x16,%eax
  800421dae0:	75 12                	jne    800421daf4 <handle_ioinstr+0xe6>
				tf->tf_regs.reg_rax = (640 >> 8) & 0xFF;
  800421dae2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dae6:	48 c7 40 70 02 00 00 	movq   $0x2,0x70(%rax)
  800421daed:	00 
				handled = true;
  800421daee:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421daf2:	eb 7e                	jmp    800421db72 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTLO) {
  800421daf4:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421dafb:	00 00 00 
  800421dafe:	8b 00                	mov    (%rax),%eax
  800421db00:	83 f8 17             	cmp    $0x17,%eax
  800421db03:	75 2a                	jne    800421db2f <handle_ioinstr+0x121>
				tf->tf_regs.reg_rax = ((ginfo->phys_sz / 1024) - 1024) & 0xFF;
  800421db05:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421db09:	48 8b 00             	mov    (%rax),%rax
  800421db0c:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421db13:	48 85 c0             	test   %rax,%rax
  800421db16:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421db1a:	48 c1 f8 0a          	sar    $0xa,%rax
  800421db1e:	0f b6 d0             	movzbl %al,%edx
  800421db21:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421db25:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421db29:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421db2d:	eb 43                	jmp    800421db72 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTHI) {
  800421db2f:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421db36:	00 00 00 
  800421db39:	8b 00                	mov    (%rax),%eax
  800421db3b:	83 f8 18             	cmp    $0x18,%eax
  800421db3e:	75 32                	jne    800421db72 <handle_ioinstr+0x164>
				tf->tf_regs.reg_rax = (((ginfo->phys_sz / 1024) - 1024) >> 8) & 0xFF;
  800421db40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421db44:	48 8b 00             	mov    (%rax),%rax
  800421db47:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421db4e:	48 85 c0             	test   %rax,%rax
  800421db51:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421db55:	48 c1 f8 0a          	sar    $0xa,%rax
  800421db59:	48 2d 00 04 00 00    	sub    $0x400,%rax
  800421db5f:	48 c1 f8 08          	sar    $0x8,%rax
  800421db63:	0f b6 d0             	movzbl %al,%edx
  800421db66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421db6a:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421db6e:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
			}
		}

	} 
	if(handled) {
  800421db72:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421db76:	74 3b                	je     800421dbb3 <handle_ioinstr+0x1a5>
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421db78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421db7c:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421db83:	c7 45 d0 0c 44 00 00 	movl   $0x440c,-0x30(%rbp)
  800421db8a:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800421db8d:	89 c7                	mov    %eax,%edi
  800421db8f:	48 b8 fd d2 21 04 80 	movabs $0x800421d2fd,%rax
  800421db96:	00 00 00 
  800421db99:	ff d0                	callq  *%rax
  800421db9b:	89 c0                	mov    %eax,%eax
  800421db9d:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421dba1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dba5:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421dbac:	b8 01 00 00 00       	mov    $0x1,%eax
  800421dbb1:	eb 33                	jmp    800421dbe6 <handle_ioinstr+0x1d8>
	} else {
		cprintf("%x %x\n", qualification, port_iortc);
  800421dbb3:	48 b8 cc b5 6d 04 80 	movabs $0x80046db5cc,%rax
  800421dbba:	00 00 00 
  800421dbbd:	8b 10                	mov    (%rax),%edx
  800421dbbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421dbc3:	48 89 c6             	mov    %rax,%rsi
  800421dbc6:	48 bf 6a 1a 22 04 80 	movabs $0x8004221a6a,%rdi
  800421dbcd:	00 00 00 
  800421dbd0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dbd5:	48 b9 83 9c 20 04 80 	movabs $0x8004209c83,%rcx
  800421dbdc:	00 00 00 
  800421dbdf:	ff d1                	callq  *%rcx
		return false;
  800421dbe1:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
  800421dbe6:	48 83 c4 38          	add    $0x38,%rsp
  800421dbea:	5b                   	pop    %rbx
  800421dbeb:	5d                   	pop    %rbp
  800421dbec:	c3                   	retq   

000000800421dbed <handle_cpuid>:
// Finally, you need to increment the program counter in the trap frame.
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.
bool
handle_cpuid(struct Trapframe *tf, struct VmxGuestInfo *ginfo)
{
  800421dbed:	55                   	push   %rbp
  800421dbee:	48 89 e5             	mov    %rsp,%rbp
  800421dbf1:	48 83 ec 10          	sub    $0x10,%rsp
  800421dbf5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421dbf9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	/* Your code here  */
    panic("handle_cpuid is not impemented\n");
  800421dbfd:	48 ba 78 1a 22 04 80 	movabs $0x8004221a78,%rdx
  800421dc04:	00 00 00 
  800421dc07:	be d9 00 00 00       	mov    $0xd9,%esi
  800421dc0c:	48 bf d9 19 22 04 80 	movabs $0x80042219d9,%rdi
  800421dc13:	00 00 00 
  800421dc16:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dc1b:	48 b9 d5 04 20 04 80 	movabs $0x80042004d5,%rcx
  800421dc22:	00 00 00 
  800421dc25:	ff d1                	callq  *%rcx

000000800421dc27 <handle_vmcall>:
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.//

bool
handle_vmcall(struct Trapframe *tf, struct VmxGuestInfo *gInfo, uint64_t *eptrt)
{
  800421dc27:	55                   	push   %rbp
  800421dc28:	48 89 e5             	mov    %rsp,%rbp
  800421dc2b:	48 83 ec 70          	sub    $0x70,%rsp
  800421dc2f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421dc33:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421dc37:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	bool handled = false;
  800421dc3b:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
	int perm, r;
	void *gpa_pg, *hva_pg;
	envid_t to_env;
	uint32_t val;
	// phys address of the multiboot map in the guest.
	uint64_t multiboot_map_addr = 0x6000;
  800421dc3f:	48 c7 45 f0 00 60 00 	movq   $0x6000,-0x10(%rbp)
  800421dc46:	00 
	switch(tf->tf_regs.reg_rax) {
  800421dc47:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421dc4b:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421dc4f:	48 83 f8 06          	cmp    $0x6,%rax
  800421dc53:	0f 87 c1 00 00 00    	ja     800421dd1a <handle_vmcall+0xf3>
  800421dc59:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421dc60:	00 
  800421dc61:	48 b8 f0 1a 22 04 80 	movabs $0x8004221af0,%rax
  800421dc68:	00 00 00 
  800421dc6b:	48 01 d0             	add    %rdx,%rax
  800421dc6e:	48 8b 00             	mov    (%rax),%rax
  800421dc71:	ff e0                	jmpq   *%rax
		// NB: because recv can call schedule, clobbering the VMCS, 
		// you should go ahead and increment rip before this call.
		/* Your code here */
		break;
	case VMX_VMCALL_LAPICEOI:
		lapic_eoi();
  800421dc73:	48 b8 9f 7b 21 04 80 	movabs $0x8004217b9f,%rax
  800421dc7a:	00 00 00 
  800421dc7d:	ff d0                	callq  *%rax
		handled = true;
  800421dc7f:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421dc83:	e9 92 00 00 00       	jmpq   800421dd1a <handle_vmcall+0xf3>
	case VMX_VMCALL_BACKTOHOST:
		cprintf("Now back to the host, VM halt in the background, run vmmanager to resume the VM.\n");
  800421dc88:	48 bf 98 1a 22 04 80 	movabs $0x8004221a98,%rdi
  800421dc8f:	00 00 00 
  800421dc92:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dc97:	48 ba 83 9c 20 04 80 	movabs $0x8004209c83,%rdx
  800421dc9e:	00 00 00 
  800421dca1:	ff d2                	callq  *%rdx
		curenv->env_status = ENV_NOT_RUNNABLE;	//mark the guest not runable
  800421dca3:	48 b8 6a 7b 21 04 80 	movabs $0x8004217b6a,%rax
  800421dcaa:	00 00 00 
  800421dcad:	ff d0                	callq  *%rax
  800421dcaf:	48 ba 20 d0 6d 04 80 	movabs $0x80046dd020,%rdx
  800421dcb6:	00 00 00 
  800421dcb9:	48 98                	cltq   
  800421dcbb:	48 c1 e0 03          	shl    $0x3,%rax
  800421dcbf:	48 89 c1             	mov    %rax,%rcx
  800421dcc2:	48 c1 e1 04          	shl    $0x4,%rcx
  800421dcc6:	48 01 c8             	add    %rcx,%rax
  800421dcc9:	48 01 d0             	add    %rdx,%rax
  800421dccc:	48 83 c0 08          	add    $0x8,%rax
  800421dcd0:	48 8b 00             	mov    (%rax),%rax
  800421dcd3:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800421dcda:	00 00 00 
		ENV_CREATE(user_sh, ENV_TYPE_USER);	//create a new host shell
  800421dcdd:	be 00 00 00 00       	mov    $0x0,%esi
  800421dce2:	48 bf 40 df 4b 04 80 	movabs $0x80044bdf40,%rdi
  800421dce9:	00 00 00 
  800421dcec:	48 b8 be 8f 20 04 80 	movabs $0x8004208fbe,%rax
  800421dcf3:	00 00 00 
  800421dcf6:	ff d0                	callq  *%rax
		handled = true;
  800421dcf8:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;	
  800421dcfc:	eb 1c                	jmp    800421dd1a <handle_vmcall+0xf3>
	case VMX_VMCALL_GETDISKIMGNUM:	//alloc a number to guest
		tf->tf_regs.reg_rax = vmdisk_number;
  800421dcfe:	48 b8 c8 b5 6d 04 80 	movabs $0x80046db5c8,%rax
  800421dd05:	00 00 00 
  800421dd08:	8b 00                	mov    (%rax),%eax
  800421dd0a:	48 63 d0             	movslq %eax,%rdx
  800421dd0d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421dd11:	48 89 50 70          	mov    %rdx,0x70(%rax)
		handled = true;
  800421dd15:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421dd19:	90                   	nop
		 * 
		 * Hint: The solution does not hard-code the length of the vmcall instruction.
		 */
		/* Your code here */
	}
	return handled;
  800421dd1a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
  800421dd1e:	c9                   	leaveq 
  800421dd1f:	c3                   	retq   
